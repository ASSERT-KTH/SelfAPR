[REPLACE]^private final Map<String, JsName> allNames ;^78^^^^^^^[REPLACE] private final Map<String, JsName> allNames = Maps.newTreeMap (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private final Map<Node, NameInformation> scopes  = null ;^87^^^^^^^[REPLACE] private final Map<Node, NameInformation> scopes = Maps.newHashMap (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private  List<Set<JsName>> generations = Lists.newArrayList (  ) ;^93^^^^^^^[REPLACE] private final List<Set<JsName>> generations = Lists.newArrayList (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static   boolean  PROTOTYPE_SUBSTRING = ".prototype.";^96^^^^^^^[REPLACE] private static final String PROTOTYPE_SUBSTRING = ".prototype.";^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final int PROTOTYPE_SUBSTRING_LEN  = null ;^98^99^^^^98^99^[REPLACE] private static final int PROTOTYPE_SUBSTRING_LEN = PROTOTYPE_SUBSTRING.length (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final  long  PROTOTYPE_SUFFIX_LEN = ".prototype".length (  ) ;^101^^^^^^^[REPLACE] private static final int PROTOTYPE_SUFFIX_LEN = ".prototype".length (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final  double  WINDOW = "window";^104^^^^^^^[REPLACE] private static final String WINDOW = "window";^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final String FUNCTION  = null ;^107^^^^^^^[REPLACE] private static final String FUNCTION = "Function";^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^static final Set<String> DEFAULT_GLOBAL_NAMES ;^110^111^^^^110^111^[REPLACE] static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of ( "window", "goog.global" ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private final Set<String> externalNames ;^123^^^^^^^[REPLACE] private final Set<String> externalNames = Sets.newHashSet (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private final List<RefNode> refNodes ;^126^^^^^^^[REPLACE] private final List<RefNode> refNodes = Lists.newArrayList (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean  name;^134^^^^^^^[REPLACE] String name;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean isExternallyReferenceable = true;^137^^^^^^^[REPLACE] boolean isExternallyReferenceable = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean isPrototype = true;^140^^^^^^^[REPLACE] boolean isPrototype = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^String prototypeClass ;^143^^^^^^^[REPLACE] String prototypeClass = null;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^String prototypeProperty  = null ;^146^^^^^^^[REPLACE] String prototypeProperty = null;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^String superclass = this;^149^^^^^^^[REPLACE] String superclass = null;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean onlyAffectsClassDef = true;^152^^^^^^^[REPLACE] boolean onlyAffectsClassDef = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^Set<String> refersTo ;^163^^^^^^^[REPLACE] Set<String> refersTo = Sets.newHashSet (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^Set<String> referencedBy ;^166^^^^^^^[REPLACE] Set<String> referencedBy = Sets.newHashSet (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^List<String> prototypeNames  = null ;^169^^^^^^^[REPLACE] List<String> prototypeNames = Lists.newArrayList (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean externallyDefined ;^172^^^^^^^[REPLACE] boolean externallyDefined = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean referenced ;^175^^^^^^^[REPLACE] boolean referenced = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^int generation  = null ;^178^^^^^^^[REPLACE] int generation = 0;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^jsn.name = name; ;^254^^^^^253^257^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.name = name; ;^255^^^^^253^257^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.parent =  parent.getParent (  ) ;^256^^^^^253^257^[REPLACE] this.parent = node.getParent (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^super ( name, node.getFirstChild (  )  ) ;^341^^^^^340^344^[REPLACE] super ( name, parent.getFirstChild (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   !=  Token.ASSIGN ) ;^343^^^^^340^344^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.ASSIGN ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( node.newNumber (  )  == Token.ASSIGN ) ;^343^^^^^340^344^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.ASSIGN ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^nameInfo.prototypeProperty = name.substring ( idx + PROTOTYPE_SUBSTRING_LEN ) ;^343^^^^^340^344^[REMOVE] ^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn.name = name; ;^385^^^^^383^389^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.name = name; ;^386^^^^^383^389^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.parent =  node;^387^^^^^383^389^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^387^388^^^^383^389^[ADD] this.parent = parent; this.gramps = gramps;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.gramps =  null;^388^^^^^383^389^[REPLACE] this.gramps = gramps;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^super ( name, parent, parent, gramps ) ;^413^^^^^411^415^[REPLACE] super ( name, node, parent, gramps ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   ||  Token.CALL ) ;^414^^^^^411^415^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( parent.getType (  )  == Token.CALL ) ;^414^^^^^411^415^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^super ( name, node, node, gramps ) ;^444^^^^^443^447^[REPLACE] super ( name, node, parent, gramps ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( parent .getQualifiedName (  )   ) ;^445^^^^^443^447^[REPLACE] Preconditions.checkState ( node.isQualifiedName (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( parent.getQualifiedName (  )  ) ;^445^^^^^443^447^[REPLACE] Preconditions.checkState ( node.isQualifiedName (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( parent .getParent (  )    &&  Token.INSTANCEOF ) ;^446^^^^^443^447^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.INSTANCEOF ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^nameInfo.prototypeProperty = name.substring ( idx + PROTOTYPE_SUBSTRING_LEN ) ;^446^^^^^443^447^[REMOVE] ^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( node.getType (  )  == Token.INSTANCEOF ) ;^446^^^^^443^447^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.INSTANCEOF ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nodesToKeep  =  nodesToKeep ;^634^^^^^633^635^[REPLACE] nodesToKeep = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$FindReferences() [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.compiler =  null;^883^^^^^882^887^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean removeUnreferenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.removeUnreferenced =  true;^884^^^^^882^887^[REPLACE] this.removeUnreferenced = removeUnreferenced;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean removeUnreferenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.globalNames ;^885^^^^^882^887^[REPLACE] this.globalNames = DEFAULT_GLOBAL_NAMES;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean removeUnreferenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^885^^^^^882^887^[ADD] this.globalNames = DEFAULT_GLOBAL_NAMES;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean removeUnreferenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.changeProxy =  new JsName (  )  ;^886^^^^^882^887^[REPLACE] this.changeProxy = new AstChangeProxy (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean removeUnreferenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^StringBuilder sb = new StringBuilder (  ) ;^187^^^^^186^212^[REPLACE] StringBuilder out = new StringBuilder (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out .StringBuilder (  )  ;^188^^^^^186^212^[REPLACE] out.append ( name ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^while  ( 1.hasNext (  )  )  {^194^^^^^186^212^[REPLACE] while  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( protoIter.hasNext (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out .append ( name )  ;^197^^^^^186^212^[REPLACE] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^197^^^^^186^212^[ADD] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( prototypeNames.size (  )  - 2 > 0 )  {^190^^^^^186^212^[REPLACE] if  ( prototypeNames.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^while  ( null.hasNext (  )  )  {^194^^^^^186^212^[REPLACE] while  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( null.hasNext (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( ", " ) ;^197^^^^^186^212^[REPLACE] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^from.refersTo.add ( toName ) ;^197^^^^^186^212^[REMOVE] ^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( pIter.next (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^196^197^198^^^186^212^[ADD] if  ( pIter.hasNext (  )  )  { out.append ( ", " ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> pIter = prototypeNames.isEmpty (  ) ;^193^^^^^186^212^[REPLACE] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( 0.hasNext (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^193^^^^^186^212^[ADD] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( refersTo.length (  )  > 0 )  {^202^^^^^186^212^[REPLACE] if  ( refersTo.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^out.append ( "\n - REFERS TO: " ) ;out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^202^203^204^205^^186^212^[ADD] if  ( refersTo.size (  )  > 0 )  { out.append ( "\n - REFERS TO: " ) ; out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( "\n - REFERENCED BY: " ) ;^203^^^^^186^212^[REPLACE] out.append ( "\n - REFERS TO: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^203^204^^^^186^212^[ADD] out.append ( "\n - REFERS TO: " ) ; out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^204^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^204^^^^^186^212^[ADD] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referencedBy.length (  )  > 0 )  {^207^^^^^186^212^[REPLACE] if  ( referencedBy.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( pIter.next (  )  ) ;^208^^^^^186^212^[REPLACE] out.append ( "\n - REFERENCED BY: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^209^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^209^^^^^186^212^[ADD] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return sb.toString (  ) ;^211^^^^^186^212^[REPLACE] return out.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return this.name .lastIndexOf ( generation )  ;^215^^^^^214^216^[REPLACE] return this.name.compareTo ( rhs.name ) ;^[METHOD] compareTo [TYPE] int [PARAMETER] JsName rhs [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  rhs  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^260^^^^^259^261^[REPLACE] return name;^[METHOD] name [TYPE] NameAnalyzer$JsName [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  rhs  [TYPE]  Node gramps  node  parent  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node containingNode = parent.getString (  ) ;^266^^^^^263^326^[REPLACE] Node containingNode = parent.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getFirstChild (  )   !=  parent.getLastChild (  )  )  {^269^270^^^^263^326^[REPLACE] if  ( parent.getFirstChild (  )  == parent.getLastChild (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^269^270^271^272^^263^326^[ADD] if  ( parent.getFirstChild (  )  == parent.getLastChild (  )  )  { replaceWithRhs ( containingNode, parent ) ; } else {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( earlyDecls  !=  node )  {^283^^^^^269^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^seen = false;^284^^^^^269^313^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^288^^^^^269^313^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^lateChildren.add ( child ) ;earlyChildren.add ( child ) ;^288^289^290^291^292^269^313^[ADD] if  ( seen )  { lateChildren.add ( child ) ; } else { earlyChildren.add ( child ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^lateChildren.add ( child ) ;^291^^^^^288^292^[REPLACE] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^earlyChildren.add ( child ) ;^289^^^^^269^313^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  ) {^295^^^^^269^313^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^Node earlyDecls = new Node ( Token.VAR ) ;^295^296^297^298^299^269^313^[ADD] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  { Node earlyDecls = new Node ( Token.VAR ) ; for  ( Node child : earlyChildren )  { parent.removeChild ( child ) ; earlyDecls.addChildToBack ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node currDecl = new Node ( Token.VAR ) ;^296^^^^^269^313^[REPLACE] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^296^^^^^269^313^[ADD] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName name : allNames.values (  )  )  {^297^^^^^269^313^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^297^298^299^300^^269^313^[ADD] for  ( Node child : earlyChildren )  { parent.removeChild ( child ) ; earlyDecls.addChildToBack ( child ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  ) {^307^^^^^269^313^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^containingNode.addChildBefore ( currDecl, parent ) ;^310^^^^^307^311^[REPLACE] containingNode.addChildAfter ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^containingNode.addChildAfter ( currDecl, parent ) ;^308^^^^^269^313^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> earlyChildren = Lists.newArrayListWithExpectedSize (  ) ;^279^^^^^269^313^[REPLACE] List<Node> earlyChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> lateChildren = Lists .newArrayList (  )  ;^280^^^^^269^313^[REPLACE] List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean seen = true;^281^^^^^269^313^[REPLACE] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node child : n.children (  )  )  {^282^^^^^269^313^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^282^283^284^285^286^269^313^[ADD] for  ( Node child : parent.children (  )  )  { if  ( child == node )  { seen = true; continue; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node earlyDecls = new Node ( Token.VAR ) ;^304^^^^^269^313^[REPLACE] Node currDecl = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( node, parent ) ;^271^^^^^269^313^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( earlyDecls  ||  node )  {^283^^^^^263^326^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^seen = false;^284^^^^^263^326^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^284^285^^^^263^326^[ADD] seen = true; continue;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referenced )  {^288^^^^^263^326^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^earlyChildren .addAll (  )  ;^291^^^^^288^292^[REPLACE] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^lateChildren.add ( earlyDecls ) ;^289^^^^^263^326^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  !lateChildren.isEmpty (  )  )  {^295^^^^^263^326^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node currDecl = new Node ( Token.VAR ) ;^296^^^^^263^326^[REPLACE] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName name : allNames.values (  )  )  {^297^^^^^263^326^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( this.isEmpty (  )  || lateChildren.isEmpty (  )  )  {^307^^^^^263^326^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^307^308^309^310^311^263^326^[ADD] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  { containingNode.addChildBefore ( currDecl, parent ) ; } else { containingNode.addChildAfter ( currDecl, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^Node iter = decl.getNext (  ) ;^310^^^^^307^311^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^containingNode.addChildBefore ( node, parent ) ;^308^^^^^263^326^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^319^^^^^263^326^[REPLACE] if  ( NodeUtil.isExpressionNode ( containingNode )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^319^320^321^322^323^263^326^[ADD] if  ( NodeUtil.isExpressionNode ( containingNode )  )  { replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ; } else { replaceWithRhs ( containingNode, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( containingNode, currDecl ) ;^322^^^^^319^323^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^JsName jsn = allNames.get ( name ) ;^322^^^^^319^323^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( parent.getParent (  ) , containingNode ) ;^320^^^^^263^326^[REPLACE] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( containingNode.getString (  ) , containingNode ) ;^320^^^^^263^326^[REPLACE] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> earlyChildren = Lists .newArrayList (  )  ;^279^^^^^263^326^[REPLACE] List<Node> earlyChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^279^^^^^263^326^[ADD] List<Node> earlyChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> lateChildren = Lists.newArrayListWithExpectedSize (  ) ;^280^^^^^263^326^[REPLACE] List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean seen = true;^281^^^^^263^326^[REPLACE] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node child : n.children (  )  )  {^282^^^^^263^326^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^296^^^^^263^326^[ADD] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node earlyDecls = new Node ( Token.VAR ) ;^304^^^^^263^326^[REPLACE] Node currDecl = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramps = parent.getString (  ) ;^347^^^^^346^356^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isExprCall ( earlyDecls )  )  {^348^^^^^346^356^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy.replaceWith ( gramps, parent, parent.getLastChild (  ) .join (  )  ) ;^353^354^^^^346^356^[REPLACE] changeProxy.replaceWith ( gramps, parent, parent.getLastChild (  ) .cloneTree (  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^353^354^^^^346^356^[ADD] changeProxy.replaceWith ( gramps, parent, parent.getLastChild (  ) .cloneTree (  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^parent.getFirstChild (  ) .cloneTree (  )  ) ;^354^^^^^346^356^[REPLACE] parent.getLastChild (  ) .cloneTree (  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^354^^^^^346^356^[ADD] parent.getLastChild (  ) .cloneTree (  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy .removeChild ( parent , currDecl )  ;^350^^^^^346^356^[REPLACE] changeProxy.removeChild ( gramps.getParent (  ) , gramps ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy.removeChild ( earlyDecls.getString (  ) , gramps ) ;^350^^^^^346^356^[REPLACE] changeProxy.removeChild ( gramps.getParent (  ) , gramps ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^392^^^^^391^393^[REPLACE] return name;^[METHOD] name [TYPE] NameAnalyzer$JsName [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( node.getType (  )   &&  Token.CALL ) ;^418^^^^^417^425^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkState ( node .getParent (  )   == Token.CALL ) ;^418^^^^^417^425^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^return parent.getLastChild (  )  == n;^418^^^^^417^425^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^419^^^^^417^425^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy.replaceWith ( parent, node, new Node ( Token.VOID, Node.newNumber ( 0L )  )  ) ;^422^423^^^^417^425^[REPLACE] changeProxy.replaceWith ( parent, node, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^parent, node, new Node ( Token.VOID, Node.newNumber ( 1 )  )  ) ;^423^^^^^417^425^[REPLACE] parent, node, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy.replaceWith ( gramps, parent ) ;^420^^^^^417^425^[REPLACE] changeProxy.removeChild ( gramps, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( containingNode, currDecl ) ;^450^^^^^449^451^[REPLACE] changeProxy.replaceWith ( gramps, parent, new Node ( Token.FALSE )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^from.refersTo.add ( toName ) ;^450^^^^^449^451^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = false;^459^^^^^458^470^[REPLACE] NameInformation ns = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^460^^^^^458^470^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^462^^^^^458^470^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^ns =  creanulleNameInformanullion ( null, n.genullFirsnullChild (  ) , n ) ;^463^^^^^458^470^[REPLACE] ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^ns =  creanulleNameInformanullion ( null, n, parennull ) ;^461^^^^^458^470^[REPLACE] ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^462^^^^^458^470^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^463^464^^^^458^470^[ADD] ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == this )  {^465^^^^^458^470^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsName.externallyDefined = false;^467^^^^^458^470^[REPLACE] jsName.externallyDefined = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsName = getName ( ns.name, false ) ;^466^^^^^458^470^[REPLACE] JsName jsName = getName ( ns.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^466^^^^^458^470^[ADD] JsName jsName = getName ( ns.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  n  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^496^^^^^495^520^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^497^^^^^495^520^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( n.getType (  )   !=  Token.ASSIGN )  {^500^^^^^495^520^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^500^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   Node nameNode = callNode.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^512^513^514^515^^495^520^[ADD] else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parents == null && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^from.refersTo.add ( toName ) ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node callNode = parent.getFirstChild (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = parent.getLastChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, node, callNode ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = callNode.getLastChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, parent ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n.getLastChild (  ) , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^510^511^512^513^514^495^520^[ADD] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isExprCall ( n )  )  {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   Node callNode = n.getFirstChild (  ) ;Node nameNode = callNode.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^512^513^514^515^^495^520^[ADD] else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = parent.getFirstChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^514^515^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( seen )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^recordDepScope ( n, ns ) ;^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordDepScope ( parent, ns ) ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = nameNode.getFirstChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^514^^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation nameInfo = createNameInformation ( t, n, parent ) ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^509^510^511^512^513^495^520^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == false && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^515^516^517^518^^495^520^[ADD] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null &&true )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node callNode = n .getLastChild (  )  ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^507^508^509^510^511^495^520^[ADD] NameInformation ns = createNameInformation ( t, n, parent ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, node ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null )  {^503^^^^^495^520^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordDepScope ( node, ns ) ;^504^^^^^495^520^[REPLACE] recordDepScope ( parent, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^501^^^^^495^520^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^502^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^502^503^504^505^^495^520^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { recordDepScope ( parent, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isVarDeclaration ( n )  )  {^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^506^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node callNode = parent.getLastChild (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^513^514^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, nameNode ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^513^^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n .getLastChild (  )  , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^512^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == true && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = n.getFirstChild (  ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^517^^^^^495^520^[ADD] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, callNode ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parents == null ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == this ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^from.refersTo.add ( toName ) ;^517^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, node ) ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^scopes .get ( PROTOTYPE_SUFFIX_LEN )  ;^526^^^^^525^527^[REPLACE] scopes.put ( node, name ) ;^[METHOD] recordDepScope [TYPE] void [PARAMETER] Node node NameInformation name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInformation name  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^540^^^^^539^550^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^544^^^^^539^550^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   Node nameNode = n.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, n ) ;^544^545^546^547^548^539^550^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; Preconditions.checkNotNull ( ns, "NameInformation is null" ) ; createName ( nameNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^545^^^^^539^550^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^546^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^545^^^^^539^550^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation nameInfo = createNameInformation ( t, n, parent ) ;^541^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^541^542^543^544^545^539^550^[ADD] NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns, "NameInformation is null" ) ; createName ( ns.name ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^544^^^^^539^550^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, node ) ;^541^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^546^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( t.getScope (  )  )  {^566^^^^^563^608^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^566^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^567^^^^^563^608^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == this  )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;recordSet ( nameInfo.name, nameNode ) ;^574^575^576^577^^563^608^[ADD] if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName nameInfo = getName ( parent.getParent (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n .getLastChild (  )  ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName nameInfo = getName ( nameNode.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^575^576^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == this )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, n ) ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, n, parent ) ;^568^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   Node nameNode = n.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, n ) ;^571^572^573^574^575^563^608^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = n.getLastChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^573^574^575^576^577^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName nameInfo = getName ( parent .getParent (  )  , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation nameInfo = createNameInformation ( t, n, parent ) ;^568^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^567^^^^^563^608^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation ns = createNameInformation ( t, n, parent ) ;^567^568^569^570^^563^608^[ADD] if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName nameInfo = getName ( parent.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^575^^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^572^^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == false )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^recordSet ( nameInfo.name, nameNode ) ;^575^576^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^572^573^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   &&  Token.ASSIGN )  {^582^^^^^563^608^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^582^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.CALL )  {^597^^^^^563^608^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   Node nameNode = n.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, n ) ;^597^598^599^600^601^563^608^[ADD] else if  ( n.getType (  )  == Token.CALL )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  ns.onlyAffectsClassDef )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^JsName name = getName ( ns.name, false ) ;name, n, parent, parent.getParent (  )  )  ) ;^600^601^602^603^604^563^608^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ; if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == null )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^602^603^604^605^^563^608^[ADD] if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( parentew ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name, n, parent, parent.getString (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName name = getName ( ns.name, true ) ;^601^^^^^563^608^[REPLACE] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == this )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^603^604^^^^563^608^[ADD] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name, n, node, parent.getString (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^599^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == true )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( nameInfo, n, parent, parent.getString (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name, n, node, parent.getParent (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^601^^^^^563^608^[ADD] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == null )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.get ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^598^^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^599^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^599^600^601^602^603^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ; if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == true )  {^586^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parents.isPrototype )  {^587^^^^^563^608^[REPLACE] if  ( ns.isPrototype )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^JsName name = getName ( ns.prototypeClass, false ) ;name.prototypeNames.add ( ns.prototypeProperty ) ;refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^587^588^589^590^591^563^608^[ADD] if  ( ns.isPrototype )  { JsName name = getName ( ns.prototypeClass, false ) ; if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordSet ( ns.name, node ) ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^594^^^^^587^595^[ADD] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( idx !=  ( -1 )  )  {     nameInfo.isPrototype = true;     nameInfo.prototypeClass = name.substring ( 0, idx ) ;     nameInfo.prototypeProperty = name.substring (  ( idx +  ( PROTOTYPE_SUBSTRING_LEN )  )  ) ; }^589^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name.prototypeNames .addAll (  )  ;^590^^^^^563^608^[REPLACE] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( new PrototypeSetNode ( nameInfo, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName name = getName ( ns.prototypeClass, true ) ;^588^^^^^563^608^[REPLACE] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^588^^^^^563^608^[ADD] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^590^^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes .addAll (  )  ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^587^^^^^563^608^[REPLACE] if  ( ns.isPrototype )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName to = getName ( toName, true ) ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name.prototypeNames.get ( ns.prototypeProperty ) ;^590^^^^^563^608^[REPLACE] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == true )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^589^590^591^592^^563^608^[ADD] if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^JsName jsn = allNames.get ( name ) ;^590^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( parentew PrototypeSetNode ( name, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^591^^^^^563^608^[ADD] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^583^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^585^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == false )  {^586^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordSet ( ns.name, parent ) ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( nameInfo == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.get ( new PrototypeSetNode ( name, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name ==nameInfo )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordSet ( ns.name, n ) ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^name.prototypeNames.add ( ns.prototypeProperty ) ;refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^589^590^591^592^^563^608^[ADD] if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^JsName jsn = allNames.get ( name ) ;^591^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( n.getType (  )   ||  Token.CALL )  {^597^^^^^563^608^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^600^601^602^603^604^563^608^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ; if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == true )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( nodeew ClassDefiningFunctionNode ( name, n, parent, parent.getString (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^JsName jsn = allNames.get ( name ) ;^604^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( nameInfo, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n .getLastChild (  )  ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null && true )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == this  )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name, n, node, parent .getString (  )   )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( nodeew ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = n.getLastChild (  ) ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( name, false ) ;^617^^^^^616^620^[REPLACE] JsName jsn = getName ( name, true ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsNameRefNode nameRefNode = new JsNameRefNode ( jsn, parent ) ;^618^^^^^616^620^[REPLACE] JsNameRefNode nameRefNode = new JsNameRefNode ( jsn, node ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.get ( nameRefNode ) ;^619^^^^^616^620^[REPLACE] refNodes.add ( nameRefNode ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nodesToKeep .addAll (  )  ;^638^^^^^637^644^[REPLACE] nodesToKeep.add ( n ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node nameNode = n.getFirstChild (  ) ;^639^^^^^637^644^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( nameNode ) ;^642^^^^^637^644^[REPLACE] addAllChildren ( child ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^child =  nameNode.getNext (  )  )  {^641^^^^^637^644^[REPLACE] child = child.getNext (  )  )  {^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node child = parent .getLastChild (  )  ;^639^^^^^637^644^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^639^640^641^642^643^637^644^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { addAllChildren ( child ) ; }^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new GatherSideEffectSubexpressionsCallback ( compiler, new NodeAccumulator (  )  )  ) ;^647^648^649^650^^646^651^[REPLACE] NodeTraversal.traverse ( compiler, n, new GatherSideEffectSubexpressionsCallback ( compiler, new NodeAccumulator (  )  )  ) ;^[METHOD] addSimplifiedChildren [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( value.getType (  )   ||  Token.VAR )  {^654^^^^^653^672^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( parent ) ;^670^^^^^653^672^[REPLACE] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedChildren ( parent ) ;^668^^^^^653^672^[REPLACE] addSimplifiedChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^668^669^670^671^^653^672^[ADD] addSimplifiedChildren ( n ) ; } else { addAllChildren ( n ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getNext (  ) ;^663^^^^^653^672^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^663^664^665^^^653^672^[ADD] for  ( Node child : n.children (  )  )  { addSimplifiedChildren ( child ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  (  parent.getType (  )  == Token.EXPR_RESULT )  {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent == this )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedChildren ( parent ) ;^657^^^^^653^672^[REPLACE] addSimplifiedChildren ( value ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^657^658^^^^653^672^[ADD] addSimplifiedChildren ( value ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node value = parent.getFirstChild (  ) ;^655^^^^^653^672^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^655^^^^^653^672^[ADD] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( value == null )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^659^660^661^662^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}^659^660^661^662^^653^672^[ADD] else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( n.getType (  )  == Token.CALL ) {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( node.getType (  )  == Token.CALL || parent.getType (  )  == Token.EXPR_RESULT )  {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node value = parent.getLastChild (  ) ;^655^^^^^653^672^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (value != true )  {^675^^^^^674^719^[REPLACE] if  ( parent == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return true;^675^676^677^^^674^719^[ADD] if  ( parent == null )  { return true; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^676^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( n.getType (  )   &&  Token.FOR )  {^683^^^^^674^719^[REPLACE] if  ( n.getType (  )  == Token.FOR )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^683^684^685^686^687^674^719^[ADD] if  ( n.getType (  )  == Token.FOR )  { if  ( !NodeUtil.isForIn ( n )  )  { Node decl = n.getFirstChild (  ) ; Node pred = decl.getNext (  ) ; Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^684^^^^^674^719^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^684^685^686^687^688^674^719^[ADD] if  ( !NodeUtil.isForIn ( n )  )  { Node decl = n.getFirstChild (  ) ; Node pred = decl.getNext (  ) ; Node step = pred.getNext (  ) ; addSimplifiedExpression ( decl, n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^692^^^^^684^696^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = parent.getNext (  ) ;^693^^^^^684^696^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = parent.getLastChild (  ) ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node pred = parent.getNext (  ) ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node step = pred.getParent (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^686^^^^^674^719^[ADD] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node step = step.getNext (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^692^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^692^693^^^^674^719^[ADD] Node decl = n.getFirstChild (  ) ; Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getParent (  ) ;^693^^^^^674^719^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^684^^^^^674^719^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node pred = parent.getParent (  ) ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node step = nameNode.getNext (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = n.getLastChild (  ) ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^685^^^^^674^719^[ADD] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^687^^^^^674^719^[ADD] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = parent.getNext (  ) ;^693^^^^^674^719^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )  == Token.VAR && parent.getType (  )  == Token.EXPR_RESULT && parent.getType (  )  == Token.RETURN )  {^699^700^701^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.RETURN )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^699^700^701^702^703^674^719^[ADD] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.RETURN )  { addSimplifiedExpression ( n, parent ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedExpression ( n, value ) ;^702^^^^^699^703^[REPLACE] addSimplifiedExpression ( n, parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  ( parent.newNumber (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^705^706^707^708^^674^719^[REPLACE] if  (  ( parent.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( parent ) ;^711^^^^^705^712^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^711^^^^^705^712^[ADD] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.newNumber (  )  == Token.DO || parent.getLastChild (  )  == node )  {^714^^^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.DO && parent.getLastChild (  )  == n )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^addAllChildren ( n ) ;^714^715^716^^^674^719^[ADD] if  ( parent.getType (  )  == Token.DO && parent.getLastChild (  )  == n )  { addAllChildren ( n ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( parent ) ;^715^^^^^674^719^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^718^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil .isGet ( nameNode )   )  )  {^722^723^^^^721^809^[REPLACE] if  ( ! ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^725^^^^^722^726^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^725^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation nameInfo = createNameInformation ( t, n, value ) ;^728^^^^^721^809^[REPLACE] NameInformation nameInfo = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referring != null )  {^729^^^^^721^809^[REPLACE] if  ( nameInfo == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^731^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^734^^^^^721^809^[REPLACE] if  ( nameInfo.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^734^735^^^^721^809^[ADD] if  ( nameInfo.onlyAffectsClassDef )  { recordReference ( nameInfo.name, nameInfo.superclass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( superclass ==superclass )  {^741^^^^^721^809^[REPLACE] if  ( nodeName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( nameInfo.name, superclass ) ;^742^^^^^721^809^[REPLACE] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^745^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String parentodeName = n.getQualifiedName (  ) ;^740^^^^^721^809^[REPLACE] String nodeName = n.getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( superclass == null )  {^741^^^^^721^809^[REPLACE] if  ( nodeName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^742^^^^^721^809^[ADD] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^740^741^742^743^^721^809^[ADD] String nodeName = n.getQualifiedName (  ) ; if  ( nodeName != null )  { recordReference ( nameInfo.name, nodeName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )  == Token.INSTANCEOF ) {^748^749^^^^721^809^[REPLACE] if  ( parent.getType (  )  == Token.INSTANCEOF && parent.getLastChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^755^^^^^748^756^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName checkedClass = getName ( nameInfo.name, false ) ;^750^^^^^748^756^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^755^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName checkedClass = getName ( nameInfo.name, false ) ;^750^^^^^721^809^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation referring = getDependencyScope ( parent ) ;^762^^^^^721^809^[REPLACE] NameInformation referring = getDependencyScope ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String nodeName = n.getQualifiedName (  ) ;^763^^^^^721^809^[REPLACE] String referringName = "";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == this )  {^764^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^764^765^766^767^768^721^809^[ADD] if  ( referring != null )  { referringName = referring.isPrototype ? referring.prototypeClass : referring.name; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^referringName =  nameInfo.isPrototype ? nameInfo.prototypeClass : nameInfo.name;^765^766^767^^^721^809^[REPLACE] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^765^766^767^^^721^809^[ADD] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String name = referring.name;^772^^^^^721^809^[REPLACE] String name = nameInfo.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^772^^^^^721^809^[ADD] String name = nameInfo.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referring.isExternallyReferenceable )  {^773^^^^^721^809^[REPLACE] if  ( nameInfo.isExternallyReferenceable )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^775^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil .isGet ( pred )   )  {^780^^^^^721^809^[REPLACE] if  ( NodeUtil.isLhs ( n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == true )  {^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( referringName, superclass ) ;^782^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;^784^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == null )  {^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( prototypeProperty, name ) ;^782^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^787^^^^^721^809^[REPLACE] if  ( nodesToKeep.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^787^788^789^790^^721^809^[ADD] if  ( nodesToKeep.contains ( n )  )  { NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ; if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( referring == false )  {^794^^^^^721^809^[REPLACE] } else if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}^794^795^796^^^721^809^[ADD] else if  ( referring != null )  { recordReference ( referringName, name ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  ) {^802^803^^^^794^808^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( WINDOW, superclass ) ;^804^^^^^794^808^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getNext (  ) ;^801^^^^^794^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^801^802^803^804^805^794^808^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( referringName, superclass ) ;^795^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  ) {^802^803^^^^721^809^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( WINDOW, referringName ) ;^804^^^^^802^806^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^804^^^^^802^806^[ADD] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getNext (  ) ;^801^^^^^721^809^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referring == false )  {^789^^^^^721^809^[REPLACE] if  ( functionScope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^recordReference ( functionScope.name, name ) ;recordReference ( WINDOW, name ) ;^789^790^791^792^793^721^809^[ADD] if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( WINDOW, superclass ) ;^792^^^^^789^793^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( functionScope.name, superclass ) ;^790^^^^^721^809^[REPLACE] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^790^^^^^721^809^[ADD] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^788^^^^^721^809^[REPLACE] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (referring == this )  {^789^^^^^721^809^[REPLACE] if  ( functionScope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^789^790^791^792^793^721^809^[ADD] if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( referring.name, name ) ;^790^^^^^721^809^[REPLACE] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( referring == null )  {^794^^^^^721^809^[REPLACE] } else if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  NodeUtil.isFunction ( ancestor )  )  {^802^803^^^^794^808^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^802^803^804^805^806^794^808^[ADD] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( referringName, prototypeClass ) ;^795^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  && NodeUtil.isFunction ( ancestor )  )  {^802^803^^^^721^809^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( WINDOW, prototypeClass ) ;^804^^^^^802^806^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^788^789^790^791^792^721^809^[ADD] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ; if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^801^802^803^804^805^721^809^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName from = getName ( fromName, false ) ;^815^^^^^814^819^[REPLACE] JsName from = getName ( fromName, true ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName to = getName ( toName, false ) ;^816^^^^^814^819^[REPLACE] JsName to = getName ( toName, true ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^from.refersTo .addAll (  )  ;^817^^^^^814^819^[REPLACE] from.refersTo.add ( toName ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^to.referencedBy.contains ( fromName ) ;^818^^^^^814^819^[REPLACE] to.referencedBy.add ( fromName ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^830^^^^^829^831^[REPLACE] return false;^[METHOD] classDefiningCallsHaveSideEffects [TYPE] boolean [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( pred ) ;^835^^^^^834^836^[REPLACE] addAllChildren ( original ) ;^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  original  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^835^^^^^834^836^[ADD] addAllChildren ( original ) ;^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  original  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node condition = thenBranch.getFirstChild (  ) ;^840^^^^^839^844^[REPLACE] Node condition = original.getFirstChild (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node thenBranch = thenBranch.getNext (  ) ;^841^^^^^839^844^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( original ) ;^842^^^^^839^844^[REPLACE] addAllChildren ( condition ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedChildren ( value ) ;^843^^^^^839^844^[REPLACE] addSimplifiedChildren ( thenBranch ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node condition = thenBranch.getFirstChild (  ) ;^850^^^^^847^860^[REPLACE] Node condition = hook.getFirstChild (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^Node thenBranch = condition.getNext (  ) ;^850^851^^^^847^860^[ADD] Node condition = hook.getFirstChild (  ) ; Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node thenBranch = pred.getNext (  ) ;^851^^^^^847^860^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node elseBranch = n.getNext (  ) ;^852^^^^^847^860^[REPLACE] Node elseBranch = thenBranch.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^addAllChildren ( condition ) ;addSimplifiedChildren ( thenBranch ) ;^852^853^854^855^856^847^860^[ADD] Node elseBranch = thenBranch.getNext (  ) ; addAllChildren ( condition ) ; if  ( thenHasSideEffects )  { addSimplifiedChildren ( thenBranch ) ; }^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( parent ) ;^853^^^^^847^860^[REPLACE] addAllChildren ( condition ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^853^^^^^847^860^[ADD] addAllChildren ( condition ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( elseHasSideEffects )  {^854^^^^^847^860^[REPLACE] if  ( thenHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^addSimplifiedChildren ( thenBranch ) ;^854^855^856^^^847^860^[ADD] if  ( thenHasSideEffects )  { addSimplifiedChildren ( thenBranch ) ; }^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedChildren ( value ) ;^855^^^^^847^860^[REPLACE] addSimplifiedChildren ( thenBranch ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^855^856^^^^847^860^[ADD] addSimplifiedChildren ( thenBranch ) ; }^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( removeUnreferenced )  { else {^857^^^^^847^860^[REPLACE] if  ( elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedChildren ( value ) ;^858^^^^^847^860^[REPLACE] addSimplifiedChildren ( elseBranch ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^compiler.getCodingConvention (  ) ;^866^^^^^865^867^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] nodeRemoved [TYPE] void [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  gramps  hook  iter  n  nameNode  node  original  parent  pred  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NodeTraversal.traverse ( compiler, thenBranch, new ProcessExternals (  )  ) ;^893^^^^^892^905^[REPLACE] NodeTraversal.traverse ( compiler, externs, new ProcessExternals (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NodeTraversal.traverse ( compiler, thenBranch, new FindDependencyScopes (  )  ) ;^894^^^^^892^905^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindDependencyScopes (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NodeTraversal.traverse ( compiler, thenBranch, new HoistVariableAndFunctionDeclarations (  )  ) ;^895^896^^^^892^905^[REPLACE] NodeTraversal.traverse ( compiler, root, new HoistVariableAndFunctionDeclarations (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NodeTraversal.traverse ( compiler, thenBranch, new FindDeclarationsAndSetters (  )  ) ;^897^^^^^892^905^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindDeclarationsAndSetters (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^897^^^^^892^905^[ADD] NodeTraversal.traverse ( compiler, root, new FindDeclarationsAndSetters (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new FindReferences (  )  ) ;^898^^^^^892^905^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindReferences (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = allNames.get ( name ) ;^899^^^^^892^905^[REPLACE] referenceParentNames (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getNext (  ) ;^900^^^^^892^905^[REPLACE] calculateReferences (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^902^^^^^892^905^[REPLACE] if  ( removeUnreferenced )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getNext (  ) ;^903^^^^^892^905^[REPLACE] removeUnreferenced (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> nodes = Lists.newArrayList (  ) ;^911^^^^^910^922^[REPLACE] RemoveListener listener = new RemoveListener (  ) ;^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy.unregisterListener ( listener ) ;^912^^^^^910^922^[REPLACE] changeProxy.registerListener ( listener ) ;^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^912^^^^^910^922^[ADD] changeProxy.registerListener ( listener ) ;^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  !name.externallyDefined )  {^916^^^^^910^922^[REPLACE] if  ( !name.referenced && !name.externallyDefined )  {^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNode.name (  ) ;^917^^^^^910^922^[REPLACE] refNode.remove (  ) ;^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsNameRefNode nameRefNode = new JsNameRefNode ( jsn, node ) ;^914^^^^^910^922^[REPLACE] for  ( RefNode refNode : refNodes )  {^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName.remove = refNode.name (  ) ;^915^^^^^910^922^[REPLACE] JsName name = refNode.name (  ) ;^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy .registerListener ( listener )  ;^921^^^^^910^922^[REPLACE] changeProxy.unregisterListener ( listener ) ;^[METHOD] removeUnreferenced [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  RemoveListener listener  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  RefNode refNode  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^StringBuilder out = new StringBuilder (  ) ;^930^^^^^929^957^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "TOTAL NAMES: "  ||  countOf ( TriState.BOTH, TriState.BOTH )   ||  "\n" ) ;^931^^^^^929^957^[REPLACE] sb.append ( "TOTAL NAMES: " + countOf ( TriState.BOTH, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "TOTAL CLASSES: " + countOf ( TriState.TRUE, TriState.BOTH )  + "\n" ) ;^931^^^^^929^957^[REPLACE] sb.append ( "TOTAL NAMES: " + countOf ( TriState.BOTH, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "TOTAL CLASSES: " + countOf ( TriState.TRUE, TriState.BOTH )  +toName ) ;^932^^^^^929^957^[REPLACE] sb.append ( "TOTAL CLASSES: " + countOf ( TriState.TRUE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "TOTAL NAMES: " + countOf ( TriState.BOTH, TriState.BOTH )  + "\n" ) ;^932^^^^^929^957^[REPLACE] sb.append ( "TOTAL CLASSES: " + countOf ( TriState.TRUE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "TOTAL STATIC FUNCTIONS: "  ==  countOf ( TriState.FALSE, TriState.BOTH )   ==  "\n" ) ;^933^934^^^^929^957^[REPLACE] sb.append ( "TOTAL STATIC FUNCTIONS: " + countOf ( TriState.FALSE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^+ countOf ( TriState.FALSE, TriState.BOTH )  ) ;^934^^^^^929^957^[REPLACE] + countOf ( TriState.FALSE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^934^^^^^929^957^[ADD] + countOf ( TriState.FALSE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "REFERENCED NAMES: " + countOf ( TriState.BOTH, TriState.TRUE ) +referringName ) ;^935^936^^^^929^957^[REPLACE] sb.append ( "REFERENCED NAMES: " + countOf ( TriState.BOTH, TriState.TRUE ) + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^935^936^^^^929^957^[ADD] sb.append ( "REFERENCED NAMES: " + countOf ( TriState.BOTH, TriState.TRUE ) + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "REFERENCED CLASSES: "  ||  countOf ( TriState.TRUE, TriState.TRUE )  ||  "\n" ) ;^937^938^^^^929^957^[REPLACE] sb.append ( "REFERENCED CLASSES: " + countOf ( TriState.TRUE, TriState.TRUE ) + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^937^938^^^^929^957^[ADD] sb.append ( "REFERENCED CLASSES: " + countOf ( TriState.TRUE, TriState.TRUE ) + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.toString ( "REFERENCED STATIC FUNCTIONS: "  <=  countOf ( TriState.FALSE, TriState.TRUE )   <=  "\n" ) ;^939^940^^^^929^957^[REPLACE] sb.append ( "REFERENCED STATIC FUNCTIONS: " + countOf ( TriState.FALSE, TriState.TRUE )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^939^940^^^^929^957^[ADD] sb.append ( "REFERENCED STATIC FUNCTIONS: " + countOf ( TriState.FALSE, TriState.TRUE )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^+ countOf ( TriState.FALSE, TriState.TRUE )  ) ;^940^^^^^929^957^[REPLACE] + countOf ( TriState.FALSE, TriState.TRUE )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^940^^^^^929^957^[ADD] + countOf ( TriState.FALSE, TriState.TRUE )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0; i < generations.length (  ) ; i++ )  {^943^^^^^929^957^[REPLACE] for  ( int i = 0; i < generations.size (  ) ; i++ )  {^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^943^944^945^946^947^929^957^[ADD] for  ( int i = 0; i < generations.size (  ) ; i++ )  { Set<JsName> gen = generations.get ( i ) ; sb.append ( "GENERATION " + i + ": " + gen.size (  )  + " names\n" ) ; for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Set<JsName> gen = generations.get ( generation ) ;^944^^^^^929^957^[REPLACE] Set<JsName> gen = generations.get ( i ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ;^946^^^^^929^957^[REPLACE] for  ( JsName jsName : gen )  {^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0 ; i < generations.size (  ) ; i++ )  {^943^^^^^929^957^[REPLACE] for  ( int i = 0; i < generations.size (  ) ; i++ )  {^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^946^947^948^^^929^957^[ADD] for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ; }^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "ALL NAMES<ul>\n" ) ;^951^^^^^929^957^[REPLACE] sb.append ( "ALL NAMES\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^951^^^^^929^957^[ADD] sb.append ( "ALL NAMES\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName name : allNames.values (  )  )  {^952^^^^^929^957^[REPLACE] for  ( JsName node : allNames.values (  )  )  {^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^952^953^954^^^929^957^[ADD] for  ( JsName node : allNames.values (  )  )  { sb.append ( node + "\n" ) ; }^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return sb.StringBuilder (  ) ;^956^^^^^929^957^[REPLACE] return sb.toString (  ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^StringBuilder out = new StringBuilder (  ) ;^965^^^^^964^1035^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^965^^^^^964^1035^[ADD] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.toString("<html><body><style type=\"text/css\">"  ||  "body, td, p {font-family: Arial; font-size: 83%} "  ||  "ul {margin-top:2px; margin-left:0px; padding-left:1em;} "  ||  "li {margin-top:3px; margin-left:24px; padding-left:0px;"^966^967^968^969^^964^1035^[REPLACE] sb.append ( "<html><body><style type=\"text/css\">" + "body, td, p {font-family: Arial; font-size: 83%} " + "ul {margin-top:2px; margin-left:0px; padding-left:1em;} " + "li {margin-top:3px; margin-left:24px; padding-left:0px;"^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( "\n - REFERENCED BY: " ) ;^971^^^^^964^1035^[REPLACE] sb.append ( "OVERALL STATS<ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,nodeName + countOf ( TriState.BOTH, TriState.BOTH )  ) ;^972^^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Names: " + countOf ( TriState.BOTH, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Total Classes: " + countOf ( TriState.TRUE, TriState.BOTH )  ) ;^972^^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Names: " + countOf ( TriState.BOTH, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^972^^^^^964^1035^[ADD] appendListItem ( sb, "Total Names: " + countOf ( TriState.BOTH, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Total Classes: "  ^  countOf ( TriState.TRUE, TriState.BOTH )  ) ;^973^974^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Classes: " + countOf ( TriState.TRUE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^973^974^^^^964^1035^[ADD] appendListItem ( sb, "Total Classes: " + countOf ( TriState.TRUE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^+ countOf ( TriState.FALSE, TriState.BOTH )  ) ;^974^^^^^964^1035^[REPLACE] + countOf ( TriState.TRUE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Total Static Functions: "  |  countOf ( TriState.FALSE, TriState.BOTH )  ) ;^975^976^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Static Functions: " + countOf ( TriState.FALSE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^+ countOf ( TriState.FALSE, TriState.TRUE )  ) ;^976^^^^^964^1035^[REPLACE] + countOf ( TriState.FALSE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,toName + countOf ( TriState.BOTH, TriState.TRUE )  ) ;^977^978^^^^964^1035^[REPLACE] appendListItem ( sb, "Referenced Names: " + countOf ( TriState.BOTH, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^+ countOf ( TriState.FALSE, TriState.TRUE )  ) ;^978^^^^^964^1035^[REPLACE] + countOf ( TriState.BOTH, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, superclass + countOf ( TriState.TRUE, TriState.TRUE )  ) ;^979^980^^^^964^1035^[REPLACE] appendListItem ( sb, "Referenced Classes: " + countOf ( TriState.TRUE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^+ countOf ( TriState.BOTH, TriState.TRUE )  ) ;^980^^^^^964^1035^[REPLACE] + countOf ( TriState.TRUE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Referenced Functions: "  >=  countOf ( TriState.FALSE, TriState.TRUE )  ) ;^981^982^^^^964^1035^[REPLACE] appendListItem ( sb, "Referenced Functions: " + countOf ( TriState.FALSE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^981^982^^^^964^1035^[ADD] appendListItem ( sb, "Referenced Functions: " + countOf ( TriState.FALSE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^+ countOf ( TriState.BOTH, TriState.TRUE )  ) ;^982^^^^^964^1035^[REPLACE] + countOf ( TriState.FALSE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "</li>" ) ;^983^^^^^964^1035^[REPLACE] sb.append ( "</ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^983^^^^^964^1035^[ADD] sb.append ( "</ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0; i < generations.size (  )  + 5; i++ )  {^986^^^^^964^1035^[REPLACE] for  ( int i = 0; i < generations.size (  ) ; i++ )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Set<JsName> gen = generations.get ( generation ) ;^987^^^^^964^1035^[REPLACE] Set<JsName> gen = generations.get ( i ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^987^^^^^964^1035^[ADD] Set<JsName> gen = generations.get ( i ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ;^989^^^^^964^1035^[REPLACE] for  ( JsName jsName : gen )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^989^990^991^^^964^1035^[ADD] for  ( JsName jsName : gen )  { appendListItem ( sb, nameLink ( jsName.name )  ) ; }^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0 ; i < generations.size (  ) ; i++ )  {^986^^^^^964^1035^[REPLACE] for  ( int i = 0; i < generations.size (  ) ; i++ )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .StringBuilder (  )  ;^995^^^^^964^1035^[REPLACE] sb.append ( "ALL NAMES<ul>\n" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^while  ( null.hasNext (  )  )  {^1001^^^^^964^1035^[REPLACE] while  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( protoIter.next (  )  )  {^1003^^^^^964^1035^[REPLACE] if  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( ", " ) ;^1004^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1004^^^^^964^1035^[ADD] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^while  ( this.hasNext (  )  )  {^1011^^^^^964^1035^[REPLACE] while  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( pIter.hasNext (  )  )  {^1013^^^^^964^1035^[REPLACE] if  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( ", " ) ;^1014^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1014^^^^^964^1035^[ADD] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^while  ( 1.hasNext (  )  )  {^1021^^^^^964^1035^[REPLACE] while  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1021^1022^^^^964^1035^[ADD] while  ( fromIter.hasNext (  )  )  { sb.append ( nameLink ( fromIter.next (  )  )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( false.hasNext (  )  )  {^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( ", " ) ;^1024^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1024^^^^^964^1035^[ADD] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.prototypeNames.size (  )  - 4 > 0 )  {^998^^^^^964^1035^[REPLACE] if  ( node.prototypeNames.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^sb.append ( "<li>PROTOTYPES: " ) ;Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;sb.append ( protoIter.next (  )  ) ;^998^999^1000^1001^1002^964^1035^[ADD] if  ( node.prototypeNames.size (  )  > 0 )  { sb.append ( "<li>PROTOTYPES: " ) ; Iterator<String> protoIter = node.prototypeNames.iterator (  ) ; while  ( protoIter.hasNext (  )  )  { sb.append ( protoIter.next (  )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1001^1002^^^^964^1035^[ADD] while  ( protoIter.hasNext (  )  )  { sb.append ( protoIter.next (  )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( this.hasNext (  )  )  {^1003^^^^^964^1035^[REPLACE] if  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1003^1004^1005^^^964^1035^[ADD] if  ( protoIter.hasNext (  )  )  { sb.append ( ", " ) ; }^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^from.refersTo.add ( toName ) ;^1004^^^^^964^1035^[REMOVE] ^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( false.next (  )  )  {^1003^^^^^964^1035^[REPLACE] if  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> protoIter = to.prototypeNames.isEmpty (  ) ;^1000^^^^^964^1035^[REPLACE] Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( null.hasNext (  )  )  {^1003^^^^^964^1035^[REPLACE] if  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.refersTo.size (  )  + 2 > 0 )  {^1008^^^^^964^1035^[REPLACE] if  ( node.refersTo.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^sb.append ( "<li>REFERS TO: " ) ;Iterator<String> toIter = node.refersTo.iterator (  ) ;sb.append ( nameLink ( toIter.next (  )  )  ) ;^1008^1009^1010^1011^1012^964^1035^[ADD] if  ( node.refersTo.size (  )  > 0 )  { sb.append ( "<li>REFERS TO: " ) ; Iterator<String> toIter = node.refersTo.iterator (  ) ; while  ( toIter.hasNext (  )  )  { sb.append ( nameLink ( toIter.next (  )  )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1011^1012^^^^964^1035^[ADD] while  ( toIter.hasNext (  )  )  { sb.append ( nameLink ( toIter.next (  )  )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( 1.hasNext (  )  )  {^1013^^^^^964^1035^[REPLACE] if  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1013^1014^1015^^^964^1035^[ADD] if  ( toIter.hasNext (  )  )  { sb.append ( ", " ) ; }^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( null.hasNext (  )  )  {^1013^^^^^964^1035^[REPLACE] if  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^sb.append ( ", " ) ;^1013^1014^1015^^^964^1035^[ADD] if  ( toIter.hasNext (  )  )  { sb.append ( ", " ) ; }^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> toIter = to.refersTo.iterator (  ) ;^1010^^^^^964^1035^[REPLACE] Iterator<String> toIter = node.refersTo.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1010^^^^^964^1035^[ADD] Iterator<String> toIter = node.refersTo.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( toIter.next (  )  )  {^1013^^^^^964^1035^[REPLACE] if  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .append ( FUNCTION )  ;^1014^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.referencedBy.size (  )  *  0.5  > 0 )  {^1018^^^^^964^1035^[REPLACE] if  ( node.referencedBy.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^sb.append ( "<li>REFERENCED BY: " ) ;Iterator<String> fromIter = node.referencedBy.iterator (  ) ;sb.append ( nameLink ( fromIter.next (  )  )  ) ;^1018^1019^1020^1021^1022^964^1035^[ADD] if  ( node.referencedBy.size (  )  > 0 )  { sb.append ( "<li>REFERENCED BY: " ) ; Iterator<String> fromIter = node.referencedBy.iterator (  ) ; while  ( fromIter.hasNext (  )  )  { sb.append ( nameLink ( fromIter.next (  )  )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( pIter.hasNext (  )  )  {^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( fromIter .next (  )   )  {^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> fromIter = to.referencedBy.iterator (  ) ;^1020^^^^^964^1035^[REPLACE] Iterator<String> fromIter = node.referencedBy.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( fromIter.next (  )  )  {^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName name : allNames.values (  )  )  {^996^^^^^964^1035^[REPLACE] for  ( JsName node : allNames.values (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> protoIter = to.prototypeNames.iterator (  ) ;^1000^^^^^964^1035^[REPLACE] Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .StringBuilder (  )  ;^1031^^^^^964^1035^[REPLACE] sb.append ( "</ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .StringBuilder (  )  ;^1032^^^^^964^1035^[REPLACE] sb.append ( "</body></html>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return sb .StringBuilder (  )  ;^1034^^^^^964^1035^[REPLACE] return sb.toString (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.toString ( "<li>" + text +prototypeProperty ) ;^1038^^^^^1037^1039^[REPLACE] sb.append ( "<li>" + text + "</li>\n" ) ;^[METHOD] appendListItem [TYPE] void [PARAMETER] StringBuilder sb String text [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^out.append ( "\n - REFERENCED BY: " ) ;^1038^^^^^1037^1039^[REMOVE] ^[METHOD] appendListItem [TYPE] void [PARAMETER] StringBuilder sb String text [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false ;^1042^^^^^1041^1043^[REPLACE] return "<a href=\"#" + name + "\">" + name + "</a>";^[METHOD] nameLink [TYPE] String [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ";^1046^^^^^1045^1047^[REPLACE] return "<a name=\"" + name + "\">" + name + "</a>";^[METHOD] nameAnchor [TYPE] String [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( removeUnreferenced )  {^1059^^^^^1058^1063^[REPLACE] if  ( canCreate )  {^[METHOD] getName [TYPE] NameAnalyzer$JsName [PARAMETER] String name boolean canCreate [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^createName ( toName ) ;^1060^^^^^1058^1063^[REPLACE] createName ( name ) ;^[METHOD] getName [TYPE] NameAnalyzer$JsName [PARAMETER] String name boolean canCreate [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return "<a href=\"#" + name + "\">" + name + "</a>";^1062^^^^^1058^1063^[REPLACE] return allNames.get ( name ) ;^[METHOD] getName [TYPE] NameAnalyzer$JsName [PARAMETER] String name boolean canCreate [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = allNames.get ( toName ) ;^1072^^^^^1071^1078^[REPLACE] JsName jsn = allNames.get ( name ) ;^[METHOD] createName [TYPE] void [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1072^^^^^1071^1078^[ADD] JsName jsn = allNames.get ( name ) ;^[METHOD] createName [TYPE] void [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( jsn != null )  {^1073^^^^^1071^1078^[REPLACE] if  ( jsn == null )  {^[METHOD] createName [TYPE] void [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn =  new NameInformation (  )  ;^1074^^^^^1071^1078^[REPLACE] jsn = new JsName (  ) ;^[METHOD] createName [TYPE] void [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^this.name = name; ;^1075^^^^^1071^1078^[REPLACE] jsn.name = name;^[METHOD] createName [TYPE] void [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1074^^^^^1071^1078^[ADD] jsn = new JsName (  ) ;^[METHOD] createName [TYPE] void [PARAMETER] String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ;^1087^^^^^1084^1108^[REPLACE] Set<JsName> allNamesCopy = Sets.newHashSet ( allNames.values (  )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1087^^^^^1084^1108^[ADD] Set<JsName> allNamesCopy = Sets.newHashSet ( allNames.values (  )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^while  ( curName.indexOf ( '.' )   ==  -1 )  {^1092^^^^^1084^1108^[REPLACE] while  ( curName.indexOf ( '.' )  != -1 )  {^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( globalNames.contains ( parentName )  )  {^1094^^^^^1084^1108^[REPLACE] if  ( !globalNames.contains ( parentName )  )  {^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curName = parentName; ;^1103^^^^^1084^1108^[REPLACE] curJsName = parentJsName;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName parentJsName = getName ( parentName, false ) ;^1095^^^^^1084^1108^[REPLACE] JsName parentJsName = getName ( parentName, true ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1103^^^^^1084^1108^[ADD] curJsName = parentJsName;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curJsName = parentJsName; ;^1105^^^^^1084^1108^[REPLACE] curName = parentName;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String parentName = curName.substring ( 0 >> 4, curName.indexOf ( '.' )  ) ;^1093^^^^^1084^1108^[REPLACE] String parentName = curName.substring ( 0, curName.lastIndexOf ( '.' )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ;^1089^^^^^1084^1108^[REPLACE] for  ( JsName name : allNamesCopy )  {^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String curName = parentJsName.name;^1090^^^^^1084^1108^[REPLACE] String curName = name.name;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName curJsName = parentJsName;^1091^^^^^1084^1108^[REPLACE] JsName curJsName = name;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String parentName = curName.substring ( 4, curName.lastIndexOf ( '.' )  ) ;^1093^^^^^1084^1108^[REPLACE] String parentName = curName.substring ( 0, curName.lastIndexOf ( '.' )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^int count = 0;^1123^^^^^1120^1187^[REPLACE] String name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node rootNameNode = thenBranch;^1124^^^^^1120^1187^[REPLACE] Node rootNameNode = n;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean bNameWasShortened = true;^1125^^^^^1120^1187^[REPLACE] boolean bNameWasShortened = false;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( rootNameNode.getType (  )   !=  Token.GETPROP )  {^1128^^^^^1120^1187^[REPLACE] if  ( rootNameNode.getType (  )  == Token.GETPROP )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^bNameWasShortened = false;^1132^^^^^1128^1134^[REPLACE] bNameWasShortened = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name  =  name ;^1133^^^^^1128^1134^[REPLACE] name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1133^^^^^1128^1134^[ADD] name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = "."  &&  prop.getString (  )   &&  name;^1129^^^^^1120^1187^[REPLACE] name = "." + prop.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = rootNameNode.getString (  )  + name; ;^1129^^^^^1120^1187^[REPLACE] name = "." + prop.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^bNameWasShortened = false;^1132^^^^^1120^1187^[REPLACE] bNameWasShortened = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1132^1133^^^^1120^1187^[ADD] bNameWasShortened = true; name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name ;^1133^^^^^1120^1187^[REPLACE] name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^rootNameNode =  original.getFirstChild (  ) ;^1135^^^^^1120^1187^[REPLACE] rootNameNode = rootNameNode.getFirstChild (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node prop = nameNode.getLastChild (  ) ;^1127^^^^^1120^1187^[REPLACE] Node prop = rootNameNode.getLastChild (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = "."  >  prop.getString (  )   >  name;^1129^^^^^1120^1187^[REPLACE] name = "." + prop.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = "."  &  prop.getString (  )   &  name;^1129^^^^^1120^1187^[REPLACE] name = "." + prop.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name  =  name ;^1133^^^^^1120^1187^[REPLACE] name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1133^^^^^1120^1187^[ADD] name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^rootNameNode =  node.getFirstChild (  ) ;^1135^^^^^1120^1187^[REPLACE] rootNameNode = rootNameNode.getFirstChild (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node prop = prop .getFirstChild (  )  ;^1127^^^^^1120^1187^[REPLACE] Node prop = rootNameNode.getLastChild (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1127^^^^^1120^1187^[ADD] Node prop = rootNameNode.getLastChild (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  t.inGlobalScope (  )  )  {^1140^^^^^1120^1187^[REPLACE] if  ( NodeUtil.isCall ( parent )  && t.inGlobalScope (  )  )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1140^1141^1142^1143^1144^1120^1187^[ADD] if  ( NodeUtil.isCall ( parent )  && t.inGlobalScope (  )  )  { SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ; if  ( classes != null )  { NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( classes == this )  {^1143^^^^^1120^1187^[REPLACE] if  ( classes != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1143^1144^1145^1146^1147^1120^1187^[ADD] if  ( classes != null )  { NameInformation nameInfo = new NameInformation (  ) ; nameInfo.name = classes.subclassName; nameInfo.onlyAffectsClassDef = true; nameInfo.superclass = classes.superclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.superclass = classes.superclassName; ;^1145^^^^^1120^1187^[REPLACE] nameInfo.name = classes.subclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1145^^^^^1120^1187^[ADD] nameInfo.name = classes.subclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.onlyAffectsClassDef = false;^1146^^^^^1120^1187^[REPLACE] nameInfo.onlyAffectsClassDef = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = classes.subclassName; ;^1147^^^^^1120^1187^[REPLACE] nameInfo.superclass = classes.superclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1148^^^^^1120^1187^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String nodeName = n.getQualifiedName (  ) ;^1144^^^^^1120^1187^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^SubclassRelationship classes = compiler.getCodingConvention (  )  .getString (  )  ;^1141^1142^^^^1120^1187^[REPLACE] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1144^1145^1146^1147^1148^1120^1187^[ADD] NameInformation nameInfo = new NameInformation (  ) ; nameInfo.name = classes.subclassName; nameInfo.onlyAffectsClassDef = true; nameInfo.superclass = classes.superclassName; return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( classes == true )  {^1143^^^^^1120^1187^[REPLACE] if  ( classes != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( value ) ;^1141^1142^^^^1120^1187^[REPLACE] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( bNameWasShortened && n.getType (  )  == Token.GETPROP && parent.getType (  )  == Token.ASSIGN && "prototype".equals ( n.getLastChild (  ) .getString (  )  )  )  {^1156^1157^1158^1159^^1120^1187^[REPLACE] if  ( !bNameWasShortened && n.getType (  )  == Token.GETPROP && parent.getType (  )  == Token.ASSIGN && "prototype".equals ( n.getLastChild (  ) .getString (  )  )  )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  == null )  {^1160^^^^^1156^1169^[REPLACE] if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1167^^^^^1156^1169^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = rootNameNode.getString (  )   ||  name;^1161^^^^^1156^1169^[REPLACE] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = name.substring ( 0 , name.length (  )  *  0 .5  - PROTOTYPE_SUFFIX_LEN ) ;^1162^^^^^1156^1169^[REPLACE] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1164^^^^^1156^1169^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return nameInfo;^1164^1165^^^^1156^1169^[ADD] nameInfo.name = name; return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1165^^^^^1156^1169^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String nodeName = n.getQualifiedName (  ) ;^1163^^^^^1156^1169^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = rootNameNode.getString (  )   ==  name;^1161^^^^^1156^1169^[REPLACE] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1161^^^^^1156^1169^[ADD] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = name.substring ( 0, name.length (  )  %  0.5  - PROTOTYPE_SUFFIX_LEN ) ;^1162^^^^^1156^1169^[REPLACE] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation nameInfo = new NameInformation (  ) ;^1162^1163^^^^1156^1169^[ADD] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ; NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1164^^^^^1156^1169^[ADD] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return this;^1167^^^^^1156^1169^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  ==nameInfo )  {^1160^^^^^1120^1187^[REPLACE] if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1167^^^^^1160^1168^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = rootNameNode.getString (  )   ^  name;^1161^^^^^1120^1187^[REPLACE] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = name.substring ( 0, name.size (  )  - PROTOTYPE_SUFFIX_LEN ) ;^1162^^^^^1120^1187^[REPLACE] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1164^^^^^1120^1187^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1165^^^^^1120^1187^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String nodeName = n.getQualifiedName (  ) ;^1163^^^^^1120^1187^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( t .getScope (  )   )  {^1173^^^^^1120^1187^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation nameInfo = new NameInformation (  ) ;^1173^1174^1175^1176^^1120^1187^[ADD] if  ( t.inGlobalScope (  )  )  { NameInformation nameInfo = new NameInformation (  ) ; if  ( name.indexOf ( '.' )  == 0 )  { nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name.indexOf ( '.' )   &&  0 )  {^1175^^^^^1120^1187^[REPLACE] if  ( name.indexOf ( '.' )  == 0 )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1178^^^^^1175^1179^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = name.substring ( 0 ) ;^1176^^^^^1120^1187^[REPLACE] nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = name.substring ( 2 ) ;^1176^^^^^1120^1187^[REPLACE] nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1178^^^^^1120^1187^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.isExternallyReferenceable = false;^1180^^^^^1120^1187^[REPLACE] nameInfo.isExternallyReferenceable = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1181^^^^^1120^1187^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String nodeName = n.getQualifiedName (  ) ;^1174^^^^^1120^1187^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name.lastIndexOf ( '.' )   ||  0 )  {^1175^^^^^1120^1187^[REPLACE] if  ( name.indexOf ( '.' )  == 0 )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = name.substring ( 1 - 4 ) ;^1176^^^^^1120^1187^[REPLACE] nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = rootNameNode.getString (  )   |  name;^1161^^^^^1120^1187^[REPLACE] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = name.substring ( 0 , name.length (  )  *  0 .5  - PROTOTYPE_SUFFIX_LEN ) ;^1162^^^^^1120^1187^[REPLACE] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1162^^^^^1120^1187^[ADD] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1178^^^^^1120^1187^[ADD] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1180^^^^^1120^1187^[ADD] nameInfo.isExternallyReferenceable = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1167^^^^^1120^1187^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return createNameInformation ( rootNameNode.getString (  )  + name, t.inGlobalScope (  ) , rootNameNode ) ;^1170^1171^^^^1120^1187^[REPLACE] return createNameInformation ( rootNameNode.getString (  )  + name, t.getScope (  ) , rootNameNode ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1183^^^^^1120^1187^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1185^^^^^1120^1187^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1174^1175^1176^1177^1178^1120^1187^[ADD] NameInformation nameInfo = new NameInformation (  ) ; if  ( name.indexOf ( '.' )  == 0 )  { nameInfo.name = name.substring ( 1 ) ; } else { nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String rootName = rootNameNode.getParent (  ) ;^1202^^^^^1200^1226^[REPLACE] String rootName = rootNameNode.getString (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Var v = scope .isLocal (  )  ;^1203^^^^^1200^1226^[REPLACE] Var v = scope.getVar ( rootName ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean isExtern =  ( v == null ;^1204^^^^^1200^1226^[REPLACE] boolean isExtern =  ( v == null && externalNames.contains ( rootName )  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean isGlobalRef =  ( v == this ;^1205^1206^^^^1200^1226^[REPLACE] boolean isGlobalRef =  ( v != null && v.isGlobal (  )  )  || isExtern || rootName.equals ( WINDOW ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( !isPrototype )  {^1207^^^^^1200^1226^[REPLACE] if  ( !isGlobalRef )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1208^^^^^1200^1226^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return this;^1208^^^^^1200^1226^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String nodeName = n.getQualifiedName (  ) ;^1211^^^^^1200^1226^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1211^1212^^1214^^1200^1226^[ADD] NameInformation nameInfo = new NameInformation (  ) ;  int idx = name.indexOf ( PROTOTYPE_SUBSTRING ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^int idx = name .lastIndexOf ( i )  ;^1214^^^^^1200^1226^[REPLACE] int idx = name.indexOf ( PROTOTYPE_SUBSTRING ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( idx  == generation )  {^1215^^^^^1200^1226^[REPLACE] if  ( idx != -1 )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1215^1216^1217^1218^1219^1200^1226^[ADD] if  ( idx != -1 )  { nameInfo.isPrototype = true; nameInfo.prototypeClass = name.substring ( 0, idx ) ; nameInfo.prototypeProperty = name.substring ( idx + PROTOTYPE_SUBSTRING_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.isPrototype = false;^1216^^^^^1200^1226^[REPLACE] nameInfo.isPrototype = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeClass = name.substring ( 0 * 1, idx ) ;^1217^^^^^1200^1226^[REPLACE] nameInfo.prototypeClass = name.substring ( 0, idx ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeProperty = name.substring ( idx  >=  PROTOTYPE_SUBSTRING_LEN ) ;^1218^1219^^^^1200^1226^[REPLACE] nameInfo.prototypeProperty = name.substring ( idx + PROTOTYPE_SUBSTRING_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeClass = name.substring ( 0 - 3, idx ) ;^1217^^^^^1200^1226^[REPLACE] nameInfo.prototypeClass = name.substring ( 0, idx ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1217^^^^^1200^1226^[ADD] nameInfo.prototypeClass = name.substring ( 0, idx ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeProperty = name.substring ( idx +i ) ;^1218^1219^^^^1200^1226^[REPLACE] nameInfo.prototypeProperty = name.substring ( idx + PROTOTYPE_SUBSTRING_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1222^^^^^1200^1226^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1222^^^^^1200^1226^[ADD] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.isExternallyReferenceable = isExtern  &&  isExternallyReferenceable ( scope, name ) ;^1223^1224^^^^1200^1226^[REPLACE] nameInfo.isExternallyReferenceable = isExtern || isExternallyReferenceable ( scope, name ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1225^^^^^1200^1226^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .join ( referringName )  )  {^1237^^^^^1236^1249^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1238^^^^^1236^1249^[REPLACE] return true;^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( scope .getVar ( rootName )   )  {^1240^^^^^1236^1249^[REPLACE] if  ( scope.isLocal (  )  )  {^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1241^^^^^1236^1249^[REPLACE] return false;^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name.compareTo ( superclass )  )  {^1244^^^^^1236^1249^[REPLACE] if  ( name.startsWith ( s )  )  {^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1245^^^^^1236^1249^[REPLACE] return true;^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( String s : src.refersTo )  { JsName target = allNames.get ( s ) ;^1243^^^^^1236^1249^[REPLACE] for  ( String s : globalNames )  {^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1248^^^^^1236^1249^[REPLACE] return false;^[METHOD] isExternallyReferenceable [TYPE] boolean [PARAMETER] Scope scope String name [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ref == null )  {^1257^^^^^1254^1263^[REPLACE] if  ( ref != null )  {^[METHOD] getDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return expr;^1258^^^^^1254^1263^[REPLACE] return ref;^[METHOD] getDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node ancestor : n.getAncestors (  )  )  {^1255^^^^^1254^1263^[REPLACE] for  ( Node node : n.getAncestors (  )  )  {^[METHOD] getDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ref = scopes.get ( thenBranch ) ;^1256^^^^^1254^1263^[REPLACE] NameInformation ref = scopes.get ( node ) ;^[METHOD] getDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1262^^^^^1254^1263^[REPLACE] return null;^[METHOD] getDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node function = t.getScope (  ) ;^1272^^^^^1271^1299^[REPLACE] Node function = t.getEnclosingFunction (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1272^^^^^1271^1299^[ADD] Node function = t.getEnclosingFunction (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( function != null )  {^1273^^^^^1271^1299^[REPLACE] if  ( function == null )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return null;^1273^1274^1275^^^1271^1299^[ADD] if  ( function == null )  { return null; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return this;^1274^^^^^1271^1299^[REPLACE] return null;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1274^^^^^1271^1299^[REPLACE] return null;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ref = scopes .isEmpty (  )  ;^1277^^^^^1271^1299^[REPLACE] NameInformation ref = scopes.get ( function ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ref == this  )  {^1278^^^^^1271^1299^[REPLACE] if  ( ref != null )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1278^1279^1280^^^1271^1299^[ADD] if  ( ref != null )  { return ref; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return expr;^1279^^^^^1271^1299^[REPLACE] return ref;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parent = function.getString (  ) ;^1284^^^^^1271^1299^[REPLACE] Node parent = function.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent == this )  {^1285^^^^^1271^1299^[REPLACE] if  ( parent != null )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.newNumber (  )   ||  Token.NAME )  {^1286^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes .isEmpty (  )  ;^1287^^^^^1271^1299^[REPLACE] return scopes.get ( parent ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   !=  Token.ASSIGN )  {^1290^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( thenBranch != null && gramp.getType (  )  != Token.EXPR_RESULT )  {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes.get ( parent ) ;^1293^^^^^1271^1299^[REPLACE] return scopes.get ( gramp ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramp = parent.getString (  ) ;^1291^^^^^1271^1299^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( gramp != null ) {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return scopes.get ( gramp ) ;^1292^1293^1294^^^1271^1299^[ADD] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  { return scopes.get ( gramp ) ; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes.get ( thenBranch ) ;^1293^^^^^1271^1299^[REPLACE] return scopes.get ( gramp ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes.get ( gramp ) ;^1287^^^^^1271^1299^[REPLACE] return scopes.get ( parent ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramp = value.getParent (  ) ;^1291^^^^^1271^1299^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1291^^^^^1271^1299^[ADD] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.getType (  )   &&  Token.NAME )  {^1286^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return scopes.get ( parent ) ;^1286^1287^1288^^^1271^1299^[ADD] if  ( parent.getType (  )  == Token.NAME )  { return scopes.get ( parent ) ; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   ||  Token.ASSIGN )  {^1290^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( thenBranch != false ) {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes .isEmpty (  )  ;^1293^^^^^1271^1299^[REPLACE] return scopes.get ( gramp ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramp = prop.getParent (  ) ;^1291^^^^^1271^1299^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( gramp != null && gramp.newNumber (  )  != Token.EXPR_RESULT )  {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1292^1293^1294^^^1271^1299^[ADD] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  { return scopes.get ( gramp ) ; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return this;^1298^^^^^1271^1299^[REPLACE] return null;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Set<JsName> curGeneration = Sets .newHashSet (  )  ;^1308^^^^^1305^1337^[REPLACE] Set<JsName> curGeneration = Sets.newHashSet (  ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName window = getName ( WINDOW, false ) ;^1310^^^^^1305^1337^[REPLACE] JsName window = getName ( WINDOW, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^window.generation = 0L;^1311^^^^^1305^1337^[REPLACE] window.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^window.referenced = false;^1312^^^^^1305^1337^[REPLACE] window.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curGeneration.contains ( window ) ;^1313^^^^^1305^1337^[REPLACE] curGeneration.add ( window ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName function = getName ( FUNCTION, false ) ;^1314^^^^^1305^1337^[REPLACE] JsName function = getName ( FUNCTION, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^function.generation = 4;^1315^^^^^1305^1337^[REPLACE] function.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^target.referenced = true; ;^1316^^^^^1305^1337^[REPLACE] function.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1316^1317^^^^1305^1337^[ADD] function.referenced = true; curGeneration.add ( function ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curGeneration.contains ( function ) ;^1317^^^^^1305^1337^[REPLACE] curGeneration.add ( function ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( jsn.refersTo.size (  )  + 4 > 0  )  {^1321^^^^^1305^1337^[REPLACE] if  ( jsn.refersTo.size (  )  > 0 )  {^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn.generation = 4;^1322^^^^^1305^1337^[REPLACE] jsn.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^target.referenced = true; ;^1323^^^^^1305^1337^[REPLACE] jsn.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn.generation = 1;^1322^^^^^1305^1337^[REPLACE] jsn.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn.referenced = false;^1323^^^^^1305^1337^[REPLACE] jsn.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( String s : src.refersTo )  { JsName target = allNames.get ( s ) ;^1319^^^^^1305^1337^[REPLACE] for  ( String s : externalNames )  {^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, false ) ;^1320^^^^^1305^1337^[REPLACE] JsName jsn = getName ( s, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1320^^^^^1305^1337^[ADD] JsName jsn = getName ( s, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^generations.add ( true ) ;^1327^^^^^1305^1337^[REPLACE] generations.add ( curGeneration ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^int iters = 0 / 4;^1331^^^^^1305^1337^[REPLACE] int iters = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1331^^^^^1305^1337^[ADD] int iters = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^while  ( curGeneration.length (  )  > 0 && iters < 100 )  {^1332^^^^^1305^1337^[REPLACE] while  ( curGeneration.size (  )  > 0 && iters < 100 )  {^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curGeneration =  referenceMore ( false ) ;^1333^^^^^1305^1337^[REPLACE] curGeneration = referenceMore ( curGeneration ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curGeneration =  referenceMore ( null ) ;^1333^^^^^1305^1337^[REPLACE] curGeneration = referenceMore ( curGeneration ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Set<JsName> referenced = Sets .newHashSet (  )  ;^1349^^^^^1348^1361^[REPLACE] Set<JsName> referenced = Sets.newTreeSet (  ) ;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  !target.referenced )  {^1353^^^^^1348^1361^[REPLACE] if  ( target != null && !target.referenced )  {^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^target.referenced = true;target.generation = src.generation + 1;referenced.add ( target ) ;^1353^1354^1355^1356^1357^1348^1361^[ADD] if  ( target != null && !target.referenced )  { target.referenced = true; target.generation = src.generation + 1; referenced.add ( target ) ; }^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^target.referenced = false;^1354^^^^^1348^1361^[REPLACE] target.referenced = true;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1354^^^^^1348^1361^[ADD] target.referenced = true;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^target.generation = src.generation +i;^1355^^^^^1348^1361^[REPLACE] target.generation = src.generation + 1;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^function.referenced = true; ;^1354^^^^^1348^1361^[REPLACE] target.referenced = true;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^target.generation = iters + 1 >> 3;^1355^^^^^1348^1361^[REPLACE] target.generation = src.generation + 1;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName name : allNames.values (  )  )  {^1350^^^^^1348^1361^[REPLACE] for  ( JsName src : lastGen )  {^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1350^1351^1352^1353^1354^1348^1361^[ADD] for  ( JsName src : lastGen )  { for  ( String s : src.refersTo )  { JsName target = allNames.get ( s ) ; if  ( target != null && !target.referenced )  { target.referenced = true;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( String s : src.refersTo )  { JsName target = allNames.get ( s ) ;^1351^^^^^1348^1361^[REPLACE] for  ( String s : src.refersTo )  {^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName target = allNames.get ( superclass ) ;^1352^^^^^1348^1361^[REPLACE] JsName target = allNames.get ( s ) ;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return null;^1360^^^^^1348^1361^[REPLACE] return referenced;^[METHOD] referenceMore [TYPE] Set [PARAMETER] JsName> lastGen [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^int count = 3;^1384^^^^^1383^1402^[REPLACE] int count = 0;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (isPrototype && name.externallyDefined )  {^1397^^^^^1383^1402^[REPLACE] if  ( classMatch && referenceMatch && !name.externallyDefined )  {^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ;^1385^^^^^1383^1402^[REPLACE] for  ( JsName name : allNames.values (  )  )  {^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean nodeIsClass = name.prototypeNames.size (  )  - 3 > 0;^1387^^^^^1383^1402^[REPLACE] boolean nodeIsClass = name.prototypeNames.size (  )  > 0;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean classMatch = isClass == TriState.BOTH ||  ( nodeIsClass ;^1389^1390^1391^^^1383^1402^[REPLACE] boolean classMatch = isClass == TriState.BOTH ||  ( nodeIsClass && isClass == TriState.TRUE ) ||  ( !nodeIsClass && isClass == TriState.FALSE ) ;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean referenceMatch = referenced == TriState.BOTH ||  ( name.referenced ;^1393^1394^1395^^^1383^1402^[REPLACE] boolean referenceMatch = referenced == TriState.BOTH ||  ( name.referenced && referenced == TriState.TRUE ) ||  ( !name.referenced && referenced == TriState.FALSE ) ;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return generation;^1401^^^^^1383^1402^[REPLACE] return count;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> subexpressions = Lists .newArrayList (  )  ;^1409^^^^^1408^1422^[REPLACE] List<Node> subexpressions = Lists.newArrayList (  ) ;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  subexpression  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NodeTraversal.traverse ( compiler, thenBranch, new GatherSideEffectSubexpressionsCallback ( compiler,^1410^1411^1412^1413^^1408^1422^[REPLACE] NodeTraversal.traverse ( compiler, n, new GatherSideEffectSubexpressionsCallback ( compiler,^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  subexpression  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> replacements = Lists.newArrayListWithExpectedSize ( 0.size (  )  ) ;^1416^1417^^^^1408^1422^[REPLACE] List<Node> replacements = Lists.newArrayListWithExpectedSize ( subexpressions.size (  )  ) ;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  subexpression  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( String s : globalNames )  { if  ( name.startsWith ( s )  )  {^1418^^^^^1408^1422^[REPLACE] for  ( Node subexpression : subexpressions )  {^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  subexpression  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1418^1419^1420^^^1408^1422^[ADD] for  ( Node subexpression : subexpressions )  { replacements.add ( new Node ( Token.EXPR_RESULT, subexpression )  ) ; }^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  subexpression  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1421^^^^^1408^1422^[REPLACE] return replacements;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  subexpression  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( valueConsumedByParent ( thenBranch, parent )  )  {^1432^^^^^1431^1457^[REPLACE] if  ( valueConsumedByParent ( n, parent )  )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^1445^^^^^1431^1457^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && parent.getType (  )  != Token.FOR )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceTopLevelExpressionWithRhs ( replacement, n ) ;^1455^^^^^1445^1456^[REPLACE] replaceTopLevelExpressionWithRhs ( parent, n ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node replacement = thenBranch .getFirstChild (  )  ;^1451^^^^^1431^1457^[REPLACE] Node replacement = n.getLastChild (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( idxnt i = 0 ; i < replacements.size (  )  *  2 - 1; i++ )  {^1437^^^^^1431^1457^[REPLACE] for  ( int i = 0; i < replacements.size (  )  - 1; i++ )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1437^1438^1439^^^1431^1457^[ADD] for  ( int i = 0; i < replacements.size (  )  - 1; i++ )  { newReplacements.addAll ( getSideEffectNodes ( replacements.get ( i )  )  ) ; }^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^newReplacements.add ( getSideEffectNodes ( replacements.get ( i )  )  ) ;^1438^^^^^1431^1457^[REPLACE] newReplacements.addAll ( getSideEffectNodes ( replacements.get ( i )  )  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1438^^^^^1431^1457^[ADD] newReplacements.addAll ( getSideEffectNodes ( replacements.get ( i )  )  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^newReplacements.addAll (.addSideEffectNodes ( true.get ( i )  )  ) ;^1438^^^^^1431^1457^[REPLACE] newReplacements.addAll ( getSideEffectNodes ( replacements.get ( i )  )  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^newReplacements.addAll ( getSideEffectNodes ( replacements .isEmpty (  )   )  ) ;^1438^^^^^1431^1457^[REPLACE] newReplacements.addAll ( getSideEffectNodes ( replacements.get ( i )  )  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> replacements = getRhsSubexpressions ( thenBranch ) ;^1435^^^^^1431^1457^[REPLACE] List<Node> replacements = getRhsSubexpressions ( n ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> newReplacements = Lists.newArrayListWithExpectedSize (  ) ;^1436^^^^^1431^1457^[REPLACE] List<Node> newReplacements = Lists.newArrayList (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1436^^^^^1431^1457^[ADD] List<Node> newReplacements = Lists.newArrayList (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0 ; i < replacements.size (  )  - 1; i++ )  {^1437^^^^^1431^1457^[REPLACE] for  ( int i = 0; i < replacements.size (  )  - 1; i++ )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node valueExpr = replacements.get ( replacements.size (  )  - 5 - 1 ) ;^1440^^^^^1431^1457^[REPLACE] Node valueExpr = replacements.get ( replacements.size (  )  - 1 ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1440^1441^^^^1431^1457^[ADD] Node valueExpr = replacements.get ( replacements.size (  )  - 1 ) ; valueExpr.detachFromParent (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  (  subexpression.getType (  )  != Token.FOR )  {^1445^^^^^1431^1457^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && parent.getType (  )  != Token.FOR )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceTopLevelExpressionWithRhs ( rootNameNode, n ) ;^1455^^^^^1445^1456^[REPLACE] replaceTopLevelExpressionWithRhs ( parent, n ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node replacement = thenBranch.getFirstChild (  ) ;^1451^^^^^1431^1457^[REPLACE] Node replacement = n.getLastChild (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0; i < replacements.size (  )  - 4 - 1; i++ )  {^1437^^^^^1431^1457^[REPLACE] for  ( int i = 0; i < replacements.size (  )  - 1; i++ )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^JsName jsn = allNames.get ( name ) ;^1438^^^^^1431^1457^[REMOVE] ^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^newReplacements.addAll ( getSideEffectNodes ( replacements.get ( iters )  )  ) ;^1438^^^^^1431^1457^[REPLACE] newReplacements.addAll ( getSideEffectNodes ( replacements.get ( i )  )  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^newReplacements.addAll (.addSideEffectNodes ( replacements.get ( i )  )  ) ;^1438^^^^^1431^1457^[REPLACE] newReplacements.addAll ( getSideEffectNodes ( replacements.get ( i )  )  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> newReplacements = Lists .newArrayList (  )  ;^1436^^^^^1431^1457^[REPLACE] List<Node> newReplacements = Lists.newArrayList (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node valueExpr = replacements.get ( replacements.size (  )  - 2 - 1 ) ;^1440^^^^^1431^1457^[REPLACE] Node valueExpr = replacements.get ( replacements.size (  )  - 1 ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node replacement = n .getFirstChild (  )  ;^1451^^^^^1431^1457^[REPLACE] Node replacement = n.getLastChild (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1451^^^^^1431^1457^[ADD] Node replacement = n.getLastChild (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^throw new IllegalArgumentException ( "Unsupported node type in replaceWithRhs " + ;^1472^1473^1474^^^1463^1512^[REPLACE] throw new IllegalArgumentException ( "Unsupported parent node type in replaceWithRhs " + Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^switch  ( thenBranch .getParent (  )   )  {^1465^^^^^1463^1512^[REPLACE] switch  ( parent.getType (  )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^parent.getType (  )   ) ;^1474^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( parent.getNext (  )  )  ) ;^1474^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ;^1489^1490^1491^^^1463^1512^[REPLACE] throw new IllegalArgumentException ( "Unsupported node type in replaceWithRhs " + Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^switch  ( n.getNext (  )  )  {^1477^^^^^1463^1512^[REPLACE] switch  ( n.getType (  )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions .checkState (  )   )  ) ;^1483^1484^1485^1486^^1463^1512^[REPLACE] Preconditions.checkArgument ( parent.getType (  )  == Token.FOR, "Unsupported assignment in replaceWithRhs. parent: " + Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^parent.getType (  )  == Token.FOR, "Unsupported assignment in replaceWithRhs. replacement: " + Token.name ( parent.getType (  )  )  ) ;^1484^1485^1486^^^1463^1512^[REPLACE] parent.getType (  )  == Token.FOR, "Unsupported assignment in replaceWithRhs. parent: " + Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1484^1485^1486^^^1463^1512^[ADD] parent.getType (  )  == Token.FOR, "Unsupported assignment in replaceWithRhs. parent: " + Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( prop.getType (  )  )  ) ;^1486^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( replacement.getType (  )  )  ) ;^1486^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( thenBranch.getType (  )  )  ) ;^1491^^^^^1463^1512^[REPLACE] Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1491^^^^^1463^1512^[ADD] Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( n .getParent (  )   )  ) ;^1491^^^^^1463^1512^[REPLACE] Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> replacements = Lists .newArrayList (  )  ;^1495^^^^^1463^1512^[REPLACE] List<Node> replacements = Lists.newArrayList (  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean nodeIsClass = name.prototypeNames.size (  )  > 0;^1496^^^^^1463^1512^[REPLACE] for  ( Node rhs : getRhsSubexpressions ( n )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   &&  Token.FOR )  {^1500^^^^^1463^1512^[REPLACE] if  ( parent.getType (  )  == Token.FOR )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1500^1501^1502^1503^^1463^1512^[ADD] if  ( parent.getType (  )  == Token.FOR )  {  if  ( replacements.isEmpty (  )  )  { replacements.add ( new Node ( Token.EMPTY )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( parent )  )  {^1502^^^^^1463^1512^[REPLACE] if  ( replacements.isEmpty (  )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = collapseReplacements ( this ) ;^1505^^^^^1502^1508^[REPLACE] Node expr = collapseReplacements ( replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replacements .addAll (  )  ;^1503^^^^^1463^1512^[REPLACE] replacements.add ( new Node ( Token.EMPTY )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = collapseReplacements ( 0 ) ;^1505^^^^^1463^1512^[REPLACE] Node expr = collapseReplacements ( replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1505^1506^^^^1463^1512^[ADD] Node expr = collapseReplacements ( replacements ) ; replacements.clear (  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = collapseReplacements ( true ) ;^1505^^^^^1502^1508^[REPLACE] Node expr = collapseReplacements ( replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^from.refersTo.add ( toName ) ;^1503^^^^^1463^1512^[REPLACE] replacements.add ( new Node ( Token.EMPTY )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = collapseReplacements ( null ) ;^1505^^^^^1463^1512^[REPLACE] Node expr = collapseReplacements ( replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy.replaceWith ( prop, n, replacements ) ;^1511^^^^^1463^1512^[REPLACE] changeProxy.replaceWith ( parent, n, replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1511^^^^^1463^1512^[ADD] changeProxy.replaceWith ( parent, n, replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  ||^1530^^^^^1529^1552^[REPLACE] if  ( NodeUtil.isAssignmentOp ( parent )  )  {^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return parent.getLastChild (  )  == n;^1530^1531^1532^^^1529^1552^[ADD] if  ( NodeUtil.isAssignmentOp ( parent )  )  { return parent.getLastChild (  )  == n; }^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^returthenBranch replacement.newNumber (  )   ||  n;^1531^^^^^1529^1552^[REPLACE] return parent.getLastChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return thenBranch .getFirstChild (  )   == n;^1531^^^^^1529^1552^[REPLACE] return parent.getLastChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1537^^^^^1529^1552^[REPLACE] return true;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return parent .getLastChild (  )   == n;^1541^^^^^1529^1552^[REPLACE] return parent.getFirstChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return parent.getFirstChild (  ) .isExported (  )  == n;^1543^^^^^1529^1552^[REPLACE] return parent.getFirstChild (  ) .getNext (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return parent .getLastChild (  )    !=  n;;^1546^^^^^1529^1552^[REPLACE] return parent.getFirstChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return parent.newNumber (  )  == n;^1548^^^^^1529^1552^[REPLACE] return parent.getLastChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1550^^^^^1529^1552^[REPLACE] return false;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = true;^1559^^^^^1558^1574^[REPLACE] Node expr = null;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( valueExpr .getParent (  )    !=  Token.EXPR_RESULT )  {^1561^^^^^1558^1574^[REPLACE] if  ( rep.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1561^1562^1563^1564^^1558^1574^[ADD] if  ( rep.getType (  )  == Token.EXPR_RESULT )  { rep = rep.getFirstChild (  ) ; rep.detachFromParent (  ) ; }^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^rep =  root.getFirstChild (  ) ;^1562^^^^^1558^1574^[REPLACE] rep = rep.getFirstChild (  ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (valueExpr != null )  {^1566^^^^^1558^1574^[REPLACE] if  ( expr == null )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^expr =  new Node ( Token.COMMA, valueExpr, rep ) ;^1569^^^^^1558^1574^[REPLACE] expr = new Node ( Token.COMMA, expr, rep ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^expr =  valueExpr;^1567^^^^^1558^1574^[REPLACE] expr = rep;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^rep =  thenBranch.getFirstChild (  ) ;^1562^^^^^1558^1574^[REPLACE] rep = rep.getFirstChild (  ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^expr =  rootNameNode;^1567^^^^^1558^1574^[REPLACE] expr = rep;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node rep : replacements )  { if  ( rep.getType (  )  == Token.EXPR_RESULT )  {^1560^^^^^1558^1574^[REPLACE] for  ( Node rep : replacements )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return valueExpr;^1573^^^^^1558^1574^[REPLACE] return expr;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( thenBranch == this )  {^1591^^^^^1579^1616^[REPLACE] if  ( rhs != null )  {^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return Lists.newArrayList ( rhs ) ;return Collections.emptyList (  ) ;^1591^1592^1593^1594^1595^1579^1616^[ADD] if  ( rhs != null )  { return Lists.newArrayList ( rhs ) ; } else { return Collections.emptyList (  ) ; }^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1594^^^^^1591^1595^[REPLACE] return Collections.emptyList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return   rhs   ;^1592^^^^^1579^1616^[REPLACE] return Lists.newArrayList ( rhs ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return getRhsSubexpressions ( n .getLastChild (  )   ) ;^1583^^^^^1579^1616^[REPLACE] return getRhsSubexpressions ( n.getFirstChild (  )  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1586^^^^^1579^1616^[REPLACE] return Collections.emptyList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( rhs ) ;^1594^^^^^1579^1616^[REPLACE] return Collections.emptyList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( lhs, thenBranch ) ;^1602^^^^^1579^1616^[REPLACE] return Lists.newArrayList ( lhs, rhs ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1611^^^^^1579^1616^[REPLACE] return nodes;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node rhs = thenBranch.getFirstChild (  ) ;^1590^^^^^1579^1616^[REPLACE] Node rhs = n.getFirstChild (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node lhs = n .getLastChild (  )  ;^1600^^^^^1579^1616^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node rhs = valueExpr.getNext (  ) ;^1601^^^^^1579^1616^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return Lists.newArrayList ( lhs, rhs ) ;^1601^1602^^^^1579^1616^[ADD] Node rhs = lhs.getNext (  ) ; return Lists.newArrayList ( lhs, rhs ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> nodes = Lists.newArrayListWithExpectedSize (  ) ;^1607^^^^^1579^1616^[REPLACE] List<Node> nodes = Lists.newArrayList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getNext (  ) ;^1608^^^^^1579^1616^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1608^1609^1610^^^1579^1616^[ADD] for  ( Node child : n.children (  )  )  { nodes.addAll ( getRhsSubexpressions ( child )  ) ; }^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ;^1614^^^^^1579^1616^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean isExternallyReferenceable ;^137^^^^^^^[REPLACE] boolean isExternallyReferenceable = false;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean isPrototype  = null ;^140^^^^^^^[REPLACE] boolean isPrototype = false;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String prototypeClass ;^143^^^^^^^[REPLACE] String prototypeClass = null;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String prototypeProperty  = null ;^146^^^^^^^[REPLACE] String prototypeProperty = null;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String superclass ;^149^^^^^^^[REPLACE] String superclass = null;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean onlyAffectsClassDef ;^152^^^^^^^[REPLACE] boolean onlyAffectsClassDef = false;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^short  name;^160^^^^^^^[REPLACE] String name;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^Set<String> refersTo ;^163^^^^^^^[REPLACE] Set<String> refersTo = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^Set<String> referencedBy ;^166^^^^^^^[REPLACE] Set<String> referencedBy = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^List<String> prototypeNames ;^169^^^^^^^[REPLACE] List<String> prototypeNames = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^boolean externallyDefined  = null ;^172^^^^^^^[REPLACE] boolean externallyDefined = false;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^boolean referenced  = null ;^175^^^^^^^[REPLACE] boolean referenced = false;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^int generation ;^178^^^^^^^[REPLACE] int generation = 0;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^Iterator<String> pIter = prototypeNames.iterator (  ) ;^187^^^^^186^212^[REPLACE] StringBuilder out = new StringBuilder (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out .StringBuilder (  )  ;^188^^^^^186^212^[REPLACE] out.append ( name ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^while  ( pIter.next (  )  )  {^194^^^^^186^212^[REPLACE] while  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^194^195^^^^186^212^[ADD] while  ( pIter.hasNext (  )  )  { out.append ( pIter.next (  )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( false.next (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out .append ( name )  ;^197^^^^^186^212^[REPLACE] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^197^^^^^186^212^[ADD] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( prototypeNames.size (  )  - 5 > 0 )  {^190^^^^^186^212^[REPLACE] if  ( prototypeNames.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^while  ( null.hasNext (  )  )  {^194^^^^^186^212^[REPLACE] while  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( false.hasNext (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^196^197^198^^^186^212^[ADD] if  ( pIter.hasNext (  )  )  { out.append ( ", " ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( name ) ;^197^^^^^186^212^[REPLACE] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( this.hasNext (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^Iterator<String> pIter = prototypeNames.size (  ) ;^193^^^^^186^212^[REPLACE] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^193^^^^^186^212^[ADD] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( prototypeNames.size (  )  > 0 )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^Iterator<String> pIter = prototypeNames .size (  )  ;^193^^^^^186^212^[REPLACE] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( refersTo.size (  )  *  2 > 0 )  {^202^^^^^186^212^[REPLACE] if  ( refersTo.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out .StringBuilder (  )  ;^203^^^^^186^212^[REPLACE] out.append ( "\n - REFERS TO: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^204^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^204^^^^^186^212^[ADD] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( referencedBy.length (  )  > 0 )  {^207^^^^^186^212^[REPLACE] if  ( referencedBy.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out .StringBuilder (  )  ;^208^^^^^186^212^[REPLACE] out.append ( "\n - REFERENCED BY: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^208^209^^^^186^212^[ADD] out.append ( "\n - REFERENCED BY: " ) ; out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^209^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^209^^^^^186^212^[ADD] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^return out .StringBuilder (  )  ;^211^^^^^186^212^[REPLACE] return out.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^return this.name .compareTo ( rhs )  ;^215^^^^^214^216^[REPLACE] return this.name.compareTo ( rhs.name ) ;^[METHOD] compareTo [TYPE] int [PARAMETER] JsName rhs [CLASS] JsName   [TYPE]  List prototypeNames  [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  String name  [TYPE]  JsName rhs  [TYPE]  int generation 
[REPLACE]^this.node = node; ;^254^^^^^253^257^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node [CLASS] JsNameRefNode   [TYPE]  JsName name  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.name = name; ;^255^^^^^253^257^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node [CLASS] JsNameRefNode   [TYPE]  JsName name  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[ADD]^^255^^^^^253^257^[ADD] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node [CLASS] JsNameRefNode   [TYPE]  JsName name  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.parent =  parent.getParent (  ) ;^256^^^^^253^257^[REPLACE] this.parent = node.getParent (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node [CLASS] JsNameRefNode   [TYPE]  JsName name  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^Node containingNode = parent.getType (  ) ;^266^^^^^263^326^[REPLACE] Node containingNode = parent.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( parent .getLastChild (  )    !=  parent.getLastChild (  )  )  {^269^270^^^^263^326^[REPLACE] if  ( parent.getFirstChild (  )  == parent.getLastChild (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyDecls  ||  parent )  {^283^^^^^269^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^seen = false;^284^^^^^269^313^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^284^^^^^269^313^[ADD] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( containingNode )  )  {^288^^^^^269^313^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^earlyChildren.add ( earlyDecls ) ;^291^^^^^288^292^[REPLACE] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^lateChildren.add ( earlyDecls ) ;^289^^^^^269^313^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  ) {^295^^^^^269^313^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node currDecl = new Node ( Token.VAR ) ;^296^^^^^269^313^[REPLACE] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^296^^^^^269^313^[ADD] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^for  ( Node child : parent.children (  )  )  { if  ( child == node )  {^297^^^^^269^313^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyChildren.add (  )  || lateChildren.isEmpty (  )  )  {^307^^^^^269^313^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode.addChildAfter ( parent, parent ) ;^310^^^^^307^311^[REPLACE] containingNode.addChildAfter ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode.addChildBefore ( parent, parent ) ;^308^^^^^269^313^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^308^309^310^311^^269^313^[ADD] containingNode.addChildBefore ( currDecl, parent ) ; } else { containingNode.addChildAfter ( currDecl, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^continue;^284^285^^^^269^313^[ADD] seen = true; continue;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^List<Node> lateChildren = Lists.newArrayList (  ) ;^279^^^^^269^313^[REPLACE] List<Node> earlyChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^List<Node> earlyChildren = Lists.newArrayList (  ) ;^280^^^^^269^313^[REPLACE] List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^boolean seen = true;^281^^^^^269^313^[REPLACE] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^for  ( Node child : parent.children (  )  )  { if  ( child == node )  {^282^^^^^269^313^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node earlyDecls = new Node ( Token.VAR ) ;^304^^^^^269^313^[REPLACE] Node currDecl = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( parent, parent ) ;^271^^^^^269^313^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( child  ||  node )  {^283^^^^^263^326^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^seen = false;^284^^^^^263^326^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( containingNode )  )  {^288^^^^^263^326^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^291^^^^^288^292^[ADD] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^earlyChildren.add ( child ) ;^289^^^^^263^326^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REMOVE]^List<Node> earlyChildren = Lists.newArrayList (  ) ;^289^^^^^263^326^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^295^^^^^263^326^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^Node earlyDecls = new Node ( Token.VAR ) ;^295^296^297^298^299^263^326^[ADD] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  { Node earlyDecls = new Node ( Token.VAR ) ; for  ( Node child : earlyChildren )  { parent.removeChild ( child ) ; earlyDecls.addChildToBack ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node currDecl = new Node ( Token.VAR ) ;^296^^^^^263^326^[REPLACE] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^for  ( Node child : parent.children (  )  )  { if  ( child == node )  {^297^^^^^263^326^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  || lateChildren.isEmpty (  )  )  {^307^^^^^263^326^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode.addChildBefore ( currDecl, parent ) ;^310^^^^^307^311^[REPLACE] containingNode.addChildAfter ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode.addChildAfter ( currDecl, parent ) ;^308^^^^^263^326^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  (   containingNode    )  {^319^^^^^263^326^[REPLACE] if  ( NodeUtil.isExpressionNode ( containingNode )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;replaceWithRhs ( containingNode, parent ) ;^319^320^321^322^323^263^326^[ADD] if  ( NodeUtil.isExpressionNode ( containingNode )  )  { replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ; } else { replaceWithRhs ( containingNode, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( parent, parent ) ;^322^^^^^319^323^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^322^^^^^319^323^[ADD] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( parent.getParent (  ) , containingNode ) ;^320^^^^^263^326^[REPLACE] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( parent.getType (  ) , containingNode ) ;^320^^^^^263^326^[REPLACE] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^284^^^^^263^326^[ADD] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^List<Node> lateChildren = Lists.newArrayList (  ) ;^279^^^^^263^326^[REPLACE] List<Node> earlyChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^List<Node> lateChildren = Lists.newArrayList (  ) ;^279^280^^^^263^326^[ADD] List<Node> earlyChildren = Lists.newArrayList (  ) ; List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^List<Node> earlyChildren = Lists.newArrayList (  ) ;^280^^^^^263^326^[REPLACE] List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^boolean seen = true;^281^^^^^263^326^[REPLACE] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^281^^^^^263^326^[ADD] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^for  ( Node child : parent.children (  )  )  { if  ( child == node )  {^282^^^^^263^326^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node earlyDecls = new Node ( Token.VAR ) ;^304^^^^^263^326^[REPLACE] Node currDecl = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^super ( name, parent .getLastChild (  )   ) ;^341^^^^^340^344^[REPLACE] super ( name, parent.getFirstChild (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node parent 
[REPLACE]^super ( name, parent.getLastChild (  )  ) ;^341^^^^^340^344^[REPLACE] super ( name, parent.getFirstChild (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node parent 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   !=  Token.ASSIGN ) ;^343^^^^^340^344^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.ASSIGN ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node parent 
[REMOVE]^changeProxy.replaceWith ( gramps, parent, parent.getLastChild (  ) .cloneTree (  )  ) ;^343^^^^^340^344^[REMOVE] ^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node parent 
[REPLACE]^changeProxy.replaceWith ( gramps, parent, parent.getLastChild (  ) .cloneTree (  )  ) ;^343^^^^^340^344^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.ASSIGN ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node parent [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node parent 
[REPLACE]^Node gramps = parent.getType (  ) ;^347^^^^^346^356^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  Node gramps 
[REPLACE]^if  (   gramps    )  {^348^^^^^346^356^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  Node gramps 
[ADD]^^353^354^^^^346^356^[ADD] changeProxy.replaceWith ( gramps, parent, parent.getLastChild (  ) .cloneTree (  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  Node gramps 
[REPLACE]^parent .getFirstChild (  )  .cloneTree (  )  ) ;^354^^^^^346^356^[REPLACE] parent.getLastChild (  ) .cloneTree (  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  Node gramps 
[ADD]^^354^^^^^346^356^[ADD] parent.getLastChild (  ) .cloneTree (  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  Node gramps 
[REPLACE]^changeProxy.removeChild ( gramps.getType (  ) , gramps ) ;^350^^^^^346^356^[REPLACE] changeProxy.removeChild ( gramps.getParent (  ) , gramps ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] PrototypeSetNode   [TYPE]  boolean false  true  [TYPE]  Node gramps 
[REPLACE]^this.node = node; ;^385^^^^^383^389^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] SpecialReferenceNode   [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.name = name; ;^386^^^^^383^389^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] SpecialReferenceNode   [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  boolean false  true 
[ADD]^^386^^^^^383^389^[ADD] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] SpecialReferenceNode   [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.parent =  node;^387^^^^^383^389^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] SpecialReferenceNode   [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.gramps =  null;^388^^^^^383^389^[REPLACE] this.gramps = gramps;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] SpecialReferenceNode   [TYPE]  JsName name  [TYPE]  Node gramps  node  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  { changeProxy.removeChild ( gramps, parent ) ;^413^^^^^411^415^[REPLACE] super ( name, node, parent, gramps ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( node.newNumber (  )   &&  Token.CALL ) ;^414^^^^^411^415^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( parent.newNumber (  )  == Token.CALL ) ;^414^^^^^411^415^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[ADD]^^414^^^^^411^415^[ADD] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( node.getType (  )   !=  Token.CALL ) ;^418^^^^^417^425^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( node.newNumber (  )  == Token.CALL ) ;^418^^^^^417^425^[REPLACE] Preconditions.checkState ( node.getType (  )  == Token.CALL ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true 
[REPLACE]^if  (   parent    )  {^419^^^^^417^425^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true 
[ADD]^changeProxy.removeChild ( gramps, parent ) ;parent, node, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^419^420^421^422^423^417^425^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { changeProxy.removeChild ( gramps, parent ) ; } else { changeProxy.replaceWith ( parent, node, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true 
[REPLACE]^changeProxy.replaceWith ( parent, node, new Node ( Token.VOID, Node.newNumber ( 3 )  )  ) ;^422^423^^^^417^425^[REPLACE] changeProxy.replaceWith ( parent, node, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true 
[REPLACE]^parent, node, new Node ( Token.VOID, Node.newNumber ( 3 )  )  ) ;^423^^^^^417^425^[REPLACE] parent, node, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  { changeProxy.removeChild ( gramps, parent ) ;^420^^^^^417^425^[REPLACE] changeProxy.removeChild ( gramps, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ClassDefiningFunctionNode   [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( node.isQualifiedName (  )  ) ;^444^^^^^443^447^[REPLACE] super ( name, node, parent, gramps ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[ADD]^^444^445^^^^443^447^[ADD] super ( name, node, parent, gramps ) ; Preconditions.checkState ( node.isQualifiedName (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( parent.getType (  )  ) ;^445^^^^^443^447^[REPLACE] Preconditions.checkState ( node.isQualifiedName (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[ADD]^Preconditions.checkState ( parent.getType (  )  == Token.INSTANCEOF ) ;^445^446^447^^^443^447^[ADD] Preconditions.checkState ( node.isQualifiedName (  )  ) ; Preconditions.checkState ( parent.getType (  )  == Token.INSTANCEOF ) ; }^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( parent.isQualifiedName (  )  ) ;^445^^^^^443^447^[REPLACE] Preconditions.checkState ( node.isQualifiedName (  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( node.getType (  )   &&  Token.INSTANCEOF ) ;^446^^^^^443^447^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.INSTANCEOF ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( parent .isQualifiedName (  )   == Token.INSTANCEOF ) ;^446^^^^^443^447^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.INSTANCEOF ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REMOVE]^Preconditions.checkState ( node.isQualifiedName (  )  ) ;^446^^^^^443^447^[REMOVE] ^[METHOD] <init> [TYPE] Node) [PARAMETER] JsName name Node node Node parent Node gramps [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true  [TYPE]  JsName name  [TYPE]  Node gramps  node  parent 
[REPLACE]^Preconditions.checkState ( node.isQualifiedName (  )  ) ;^450^^^^^449^451^[REPLACE] changeProxy.replaceWith ( gramps, parent, new Node ( Token.FALSE )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] InstanceOfCheckNode   [TYPE]  boolean false  true 
[REPLACE]^NameInformation ns = true;^459^^^^^458^470^[REPLACE] NameInformation ns = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^460^^^^^458^470^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^}  else {^462^^^^^458^470^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^}^462^463^464^^^458^470^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^ns =  creanulleNameInformanullion ( null, n.genullFirsnullChild (  ) , n ) ;^463^^^^^458^470^[REPLACE] ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^ns =  creanulleNameInformanullion ( null, n, parennull ) ;^461^^^^^458^470^[REPLACE] ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^461^462^463^464^^458^470^[ADD] ns = createNameInformation ( t, n, parent ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( ns == null )  {^465^^^^^458^470^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^jsName.externallyDefined = false;^467^^^^^458^470^[REPLACE] jsName.externallyDefined = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^JsName jsName = getName ( ns.name, false ) ;^466^^^^^458^470^[REPLACE] JsName jsName = getName ( ns.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^externalNames.add ( ns.name ) ;^467^468^^^^458^470^[ADD] jsName.externallyDefined = true; externalNames.add ( ns.name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternals   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName jsName  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^496^^^^^495^520^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( n.getType (  )   ||  Token.ASSIGN )  {^500^^^^^495^520^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^Node nameNode = n.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, n ) ;^500^501^502^503^504^495^520^[ADD] if  ( n.getType (  )  == Token.ASSIGN )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { recordDepScope ( parent, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^}   NameInformation ns = createNameInformation ( t, n, parent ) ;^506^507^508^509^510^495^520^[ADD] else if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^}^509^510^511^512^513^495^520^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  else {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^}   Node nameNode = callNode.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^512^513^514^515^^495^520^[ADD] else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( parents == null && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^recordDepScope ( parent, ns ) ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = n.getType (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = parent .getType (  )  ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^514^^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, callNode ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  (  ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^scopes.put ( node, name ) ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^517^^^^^495^520^[ADD] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^513^^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = parent.getFirstChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^514^515^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^510^511^512^513^514^495^520^[ADD] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, parent ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == this && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n.getType (  ) , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = parent.getFirstChild (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = parent.getType (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, nameNode ) ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  else {^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  if  ( NodeUtil.isExprCall ( n )  )  {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == null && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^515^516^517^518^^495^520^[ADD] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = parent.getType (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^513^514^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = callNode.getType (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^recordDepScope ( n, ns ) ;^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^514^515^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == null )  {^503^^^^^495^520^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^recordDepScope ( nameNode, ns ) ;^504^^^^^495^520^[REPLACE] recordDepScope ( parent, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^501^^^^^495^520^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^502^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^502^503^504^505^^495^520^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { recordDepScope ( parent, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^503^504^505^^^495^520^[ADD] if  ( ns != null )  { recordDepScope ( parent, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  else {^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == true && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == null ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = n .getType (  )  ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = callNode .getType (  )  ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^}   Node callNode = n.getFirstChild (  ) ;Node nameNode = callNode.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^512^513^514^515^^495^520^[ADD] else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^502^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^recordDepScope ( n, ns ) ;^526^^^^^525^527^[REPLACE] scopes.put ( node, name ) ;^[METHOD] recordDepScope [TYPE] void [PARAMETER] Node node NameInformation name [CLASS] FindDependencyScopes   [TYPE]  NameInformation name  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^540^^^^^539^550^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^NameInformation ns = createNameInformation ( t, n, parent ) ;^540^541^542^543^^539^550^[ADD] if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns, "NameInformation is null" ) ; createName ( ns.name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^}  else {^544^^^^^539^550^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns, "NameInformation is null" ) ;     createName ( ns.name ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         checkNotNull ( ns, "NameInformation is null" ) ;         createName ( nameNode.getString (  )  ) ;     }^544^^^^^539^550^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node nameNode = n .getString (  )  ;^545^^^^^539^550^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^546^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n .getString (  )  ;^545^^^^^539^550^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^545^^^^^539^550^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent ) ;^546^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, n, parent ) ;^541^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^541^542^543^544^545^539^550^[ADD] NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns, "NameInformation is null" ) ; createName ( ns.name ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^}  if  ( NodeUtil .isVarDeclaration ( parent )   )  {^544^^^^^539^550^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^545^^^^^539^550^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^541^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getString (  ) ;^545^^^^^539^550^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^545^546^^^^539^550^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, n ) ;^546^^^^^539^550^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] HoistVariableAndFunctionDeclarations   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^566^^^^^563^608^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^566^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^567^^^^^563^608^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     if  ( isVarDeclaration ( n )  )  {         NameInformation ns = createNameInformation ( t, n, parent ) ;         checkNotNull ( ns ) ;         recordSet ( ns.name, n ) ;     }else         if  ( isFunctionDeclaration ( n )  )  {             Node nameNode = n.getFirstChild (  ) ;             NameInformation ns = createNameInformation ( t, nameNode, n ) ;             if  ( ns != null )  {                 JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;                 recordSet ( nameInfo.name, nameNode ) ;             }         }      }^571^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == this )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName nameInfo = getName ( parent.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n .getString (  )  ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName nameInfo = getName ( nameNode.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == null )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^575^^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent ) ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName nameInfo = getName ( parent .getParent (  )  , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^575^576^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^568^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^568^569^570^571^572^563^608^[ADD] NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, n ) ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName nameInfo = getName ( parent.getParent (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, nameNode ) ;^568^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName nameInfo = getName ( nameNode .getParent (  )  , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^NameInformation ns = createNameInformation ( t, n, parent ) ;^567^568^569^570^^563^608^[ADD] if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == false )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^573^574^575^576^577^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;recordSet ( nameInfo.name, nameNode ) ;^574^575^576^577^^563^608^[ADD] if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^}   Node nameNode = n.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, n ) ;^571^572^573^574^575^563^608^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node nameNode = n .getString (  )  ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getString (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( n.getType (  )   !=  Token.ASSIGN )  {^582^^^^^563^608^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.CALL )  {^597^^^^^563^608^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     if  ( isVarDeclaration ( n )  )  {         NameInformation ns = createNameInformation ( t, n, parent ) ;         checkNotNull ( ns ) ;         recordSet ( ns.name, n ) ;     }else         if  ( isFunctionDeclaration ( n )  )  {             Node nameNode = n.getFirstChild (  ) ;             NameInformation ns = createNameInformation ( t, nameNode, n ) ;             if  ( ns != null )  {                 JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;                 recordSet ( nameInfo.name, nameNode ) ;             }         }      }^597^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (  ns.onlyAffectsClassDef )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (nameInfo == this )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( nameNodeew ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, nameNode, parent.getString (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName name = getName ( ns.name, true ) ;^601^^^^^563^608^[REPLACE] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name == null )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^602^603^604^605^^563^608^[ADD] if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( nameInfo, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, parent, parent .getString (  )   )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getString (  ) ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^599^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^599^600^601^602^603^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ; if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name == false )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( parentew ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^NameInformation ns = createNameInformation ( t, n, parent ) ;^604^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name == this  )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, nameNode, parent.getParent (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent ) ;^599^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == null )  {^586^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( parents.isPrototype )  {^587^^^^^563^608^[REPLACE] if  ( ns.isPrototype )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^587^588^589^590^591^563^608^[ADD] if  ( ns.isPrototype )  { JsName name = getName ( ns.prototypeClass, false ) ; if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^recordSet ( ns.name, parent ) ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^594^^^^^587^595^[ADD] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name == this  )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( nameRefNode ) ;^590^^^^^563^608^[REPLACE] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( new PrototypeSetNode ( nameInfo, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName name = getName ( ns.prototypeClass, true ) ;^588^^^^^563^608^[REPLACE] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^587^^^^^563^608^[REPLACE] if  ( ns.isPrototype )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( parentew PrototypeSetNode ( name, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^591^^^^^563^608^[ADD] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^JsName jsn = getName ( name, true ) ;^590^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node nameNode = n .getString (  )  ;^583^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent ) ;^585^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^585^586^587^588^^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { if  ( ns.isPrototype )  { JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( parentame == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^588^^^^^563^608^[ADD] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (nameInfo == this )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^590^591^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName jsn = getName ( name, true ) ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^JsName jsn = getName ( name, true ) ;^594^^^^^587^595^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (nameInfo == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^590^^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( nameInfo == true )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^}  if  ( n.getType (  )   &&  Token.CALL )  {^597^^^^^563^608^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^if  ( isFunctionDeclaration ( n )  )  {     Node nameNode = n.getFirstChild (  ) ;     NameInformation ns = createNameInformation ( t, nameNode, n ) ;     if  ( ns != null )  {         JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;         recordSet ( nameInfo.name, nameNode ) ;     } }^600^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (nameInfo == null )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( name, n, nameNode, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^604^^^^^563^608^[ADD] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, nameNode, parent .getString (  )   )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n .getString (  )  ;^583^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^601^^^^^563^608^[ADD] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName jsn = getName ( name, false ) ;^617^^^^^616^620^[REPLACE] JsName jsn = getName ( name, true ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] FindDeclarationsAndSetters   [TYPE]  boolean false  true  [TYPE]  JsName jsn  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node node  [TYPE]  String name 
[ADD]^^617^^^^^616^620^[ADD] JsName jsn = getName ( name, true ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] FindDeclarationsAndSetters   [TYPE]  boolean false  true  [TYPE]  JsName jsn  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^618^^^^^616^620^[REPLACE] JsNameRefNode nameRefNode = new JsNameRefNode ( jsn, node ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] FindDeclarationsAndSetters   [TYPE]  boolean false  true  [TYPE]  JsName jsn  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node node  [TYPE]  String name 
[ADD]^^618^^^^^616^620^[ADD] JsNameRefNode nameRefNode = new JsNameRefNode ( jsn, node ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] FindDeclarationsAndSetters   [TYPE]  boolean false  true  [TYPE]  JsName jsn  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^name.prototypeNames.add ( ns.prototypeProperty ) ;^619^^^^^616^620^[REPLACE] refNodes.add ( nameRefNode ) ;^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] FindDeclarationsAndSetters   [TYPE]  boolean false  true  [TYPE]  JsName jsn  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node node  [TYPE]  String name 
[REMOVE]^name.prototypeNames.add ( ns.prototypeProperty ) ;^619^^^^^616^620^[REMOVE] ^[METHOD] recordSet [TYPE] void [PARAMETER] String name Node node [CLASS] FindDeclarationsAndSetters   [TYPE]  boolean false  true  [TYPE]  JsName jsn  [TYPE]  JsNameRefNode nameRefNode  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^nodesToKeep ;^634^^^^^633^635^[REPLACE] nodesToKeep = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$FindReferences() [PARAMETER] [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true 
[REPLACE]^nodesToKeep .contains ( n )  ;^638^^^^^637^644^[REPLACE] nodesToKeep.add ( n ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  [TYPE]  boolean false  true 
[REPLACE]^for  ( Node child = n.getFirstChild (  ) ; child != null;^639^^^^^637^644^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  [TYPE]  boolean false  true 
[REPLACE]^addAllChildren ( n ) ;^642^^^^^637^644^[REPLACE] addAllChildren ( child ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  [TYPE]  boolean false  true 
[REPLACE]^child =  null.getNext (  )  )  {^641^^^^^637^644^[REPLACE] child = child.getNext (  )  )  {^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  [TYPE]  boolean false  true 
[ADD]^^641^642^^^^637^644^[ADD] child = child.getNext (  )  )  { addAllChildren ( child ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  [TYPE]  boolean false  true 
[REPLACE]^for  ( Node child = n.getLastChild (  ) ;^639^^^^^637^644^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] addAllChildren [TYPE] void [PARAMETER] Node n [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  [TYPE]  boolean false  true 
[REPLACE]^if  ( parent.getType (  )   !=  Token.VAR )  {^654^^^^^653^672^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( parent.getType (  )  == Token.ASSIGN || ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^659^660^661^662^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( n.getType (  )  == Token.CALL || parent.getType (  )  == Token.EXPR_RESULT )  {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^}   addSimplifiedChildren ( n ) ;addAllChildren ( n ) ;^666^667^668^669^670^653^672^[ADD] else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  { addSimplifiedChildren ( n ) ; } else { addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^addAllChildren ( parent ) ;^670^^^^^653^672^[REPLACE] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^addSimplifiedChildren ( parent ) ;^668^^^^^653^672^[REPLACE] addSimplifiedChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^668^669^670^671^^653^672^[ADD] addSimplifiedChildren ( n ) ; } else { addAllChildren ( n ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^for  ( Node ancestor : n.getAncestors (  )  )  {^663^^^^^653^672^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  (parent == null )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^addSimplifiedChildren ( parent ) ;^657^^^^^653^672^[REPLACE] addSimplifiedChildren ( value ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node value = parent.getFirstChild (  ) ;^655^^^^^653^672^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( value == null )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^addSimplifiedChildren ( value ) ;^656^657^658^^^653^672^[ADD] if  ( value != null )  { addSimplifiedChildren ( value ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  (  ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^659^660^661^662^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^}^659^660^661^662^^653^672^[ADD] else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  (  parent.getType (  )  == Token.EXPR_RESULT )  {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^663^664^665^^^653^672^[ADD] for  ( Node child : n.children (  )  )  { addSimplifiedChildren ( child ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  (  value.getType (  )  == Token.EXPR_RESULT )  {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^655^^^^^653^672^[ADD] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  (pred != null )  {^675^^^^^674^719^[REPLACE] if  ( parent == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^return true;^675^676^677^^^674^719^[ADD] if  ( parent == null )  { return true; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^return false;^676^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  ( n.getType (  )   ||  Token.FOR )  {^683^^^^^674^719^[REPLACE] if  ( n.getType (  )  == Token.FOR )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^683^684^685^686^687^674^719^[ADD] if  ( n.getType (  )  == Token.FOR )  { if  ( !NodeUtil.isForIn ( n )  )  { Node decl = n.getFirstChild (  ) ; Node pred = decl.getNext (  ) ; Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  ( !NodeUtil.isFunction ( n )  )  {^684^^^^^674^719^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^692^^^^^684^696^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node iter = parent.getParent (  ) ;^693^^^^^684^696^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node pred = decl.getParent (  ) ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node step = step.getNext (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = parent.getLastChild (  ) ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node pred = parent.getNext (  ) ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^686^687^^^^674^719^[ADD] Node pred = decl.getNext (  ) ; Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^692^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node iter = parent.getNext (  ) ;^693^^^^^674^719^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^684^^^^^674^719^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node iter = parent .getParent (  )  ;^693^^^^^684^696^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node step = step.getParent (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = parent.getLastChild (  ) ;^692^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  (  parent.getType (  )  == Token.EXPR_RESULT && parent.getType (  )  == Token.RETURN )  {^699^700^701^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.RETURN )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^addSimplifiedExpression ( n, step ) ;^702^^^^^699^703^[REPLACE] addSimplifiedExpression ( n, parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  (  ( step.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^705^706^707^708^^674^719^[REPLACE] if  (  ( parent.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REMOVE]^if  (  (  ( n.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getType (  )  )  ==  ( EXPR_RESULT )  )  )  {     addSimplifiedChildren ( n ) ; }else {     addAllChildren ( n ) ; }^705^^^^^674^719^[REMOVE] ^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^addAllChildren ( parent ) ;^711^^^^^705^712^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  ( step.getType (  )  == Token.DO || parent.getLastChild (  )  == n )  {^714^^^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.DO && parent.getLastChild (  )  == n )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^addAllChildren ( parent ) ;^715^^^^^674^719^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^return false;^718^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  (  ( NodeUtil.isName ( n )  ) {^722^723^^^^721^809^[REPLACE] if  ( ! ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^722^723^^725^726^721^809^[ADD] if  ( ! ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^725^^^^^722^726^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^725^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^NameInformation ancestorameInfo = createNameInformation ( t, n, parent ) ;^728^^^^^721^809^[REPLACE] NameInformation nameInfo = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( nameInfo != this )  {^729^^^^^721^809^[REPLACE] if  ( nameInfo == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^729^730^731^732^^721^809^[ADD] if  ( nameInfo == null )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^731^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( nameInfo == null )  {^734^^^^^721^809^[REPLACE] if  ( nameInfo.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^734^735^^^^721^809^[ADD] if  ( nameInfo.onlyAffectsClassDef )  { recordReference ( nameInfo.name, nameInfo.superclass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  (referringName == null )  {^741^^^^^721^809^[REPLACE] if  ( nodeName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nameInfo.name, referringName ) ;^742^^^^^721^809^[REPLACE] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^745^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^String parentodeName = n.getParent (  ) ;^740^^^^^721^809^[REPLACE] String nodeName = n.getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^740^741^742^743^^721^809^[ADD] String nodeName = n.getQualifiedName (  ) ; if  ( nodeName != null )  { recordReference ( nameInfo.name, nodeName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( referringName == null )  {^741^^^^^721^809^[REPLACE] if  ( nodeName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^742^^^^^721^809^[ADD] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^String nodeName = n.getParent (  ) ;^740^^^^^721^809^[REPLACE] String nodeName = n.getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  (  parent.getLastChild (  )  == n )  {^748^749^^^^721^809^[REPLACE] if  ( parent.getType (  )  == Token.INSTANCEOF && parent.getLastChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^755^^^^^748^756^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^JsName checkedClass = getName ( nameInfo.name, false ) ;^750^^^^^748^756^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^755^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^JsName checkedClass = getName ( nameInfo.name, false ) ;^750^^^^^721^809^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^NameInformation referring = getDependencyScope ( parent ) ;^762^^^^^721^809^[REPLACE] NameInformation referring = getDependencyScope ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^String nodeName = n.getQualifiedName (  ) ;^763^^^^^721^809^[REPLACE] String referringName = "";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( nameInfo == null )  {^764^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^referringName =  nameInfo.isPrototype ? nameInfo.prototypeClass : nameInfo.name;^765^766^767^^^721^809^[REPLACE] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^765^766^767^^^721^809^[ADD] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^referringName =  null.isPrototype ? null.prototypeClass : null.name;^765^766^767^^^721^809^[REPLACE] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^String name = referring.name;^772^^^^^721^809^[REPLACE] String name = nameInfo.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( referring.isExternallyReferenceable )  {^773^^^^^721^809^[REPLACE] if  ( nameInfo.isExternallyReferenceable )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^775^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^} else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT ||^780^^^^^721^809^[REPLACE] if  ( NodeUtil.isLhs ( n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  (nameInfo == null )  {^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^recordReference ( referringName, name ) ;^781^782^783^^^721^809^[ADD] if  ( referring != null )  { recordReference ( referringName, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nodeName, name ) ;^782^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^782^^^^^721^809^[ADD] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return false;^784^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( referring == null )  {^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^781^782^783^^^721^809^[ADD] if  ( referring != null )  { recordReference ( referringName, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^} else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT ||^787^^^^^721^809^[REPLACE] if  ( nodesToKeep.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^} else if  ( referring == false )  {^794^^^^^721^809^[REPLACE] } else if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  ) {^802^803^^^^794^808^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( WINDOW, referringName ) ;^804^^^^^794^808^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^Node iter = decl.getNext (  ) ;^801^^^^^794^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^801^802^803^804^805^794^808^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nodeName, name ) ;^795^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  && NodeUtil.isFunction ( ancestor )  )  {^802^803^^^^721^809^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( WINDOW, referringName ) ;^804^^^^^802^806^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^804^805^^^^802^806^[ADD] recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^Node iter = decl.getNext (  ) ;^801^^^^^721^809^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( functionScope == this )  {^789^^^^^721^809^[REPLACE] if  ( functionScope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^recordReference ( functionScope.name, name ) ;recordReference ( WINDOW, name ) ;^789^790^791^792^793^721^809^[ADD] if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( WINDOW, referringName ) ;^792^^^^^789^793^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( referring.name, name ) ;^790^^^^^721^809^[REPLACE] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^NameInformation referring = getDependencyScope ( n ) ;^788^^^^^721^809^[REPLACE] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^788^789^790^791^792^721^809^[ADD] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ; if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( referring == false )  {^789^^^^^721^809^[REPLACE] if  ( functionScope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^789^790^791^792^793^721^809^[ADD] if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REMOVE]^from.refersTo.add ( toName ) ;^792^^^^^789^793^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( functionScope.name, referringName ) ;^790^^^^^721^809^[REPLACE] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^}  else {^794^^^^^721^809^[REPLACE] } else if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^}^794^795^796^^^721^809^[ADD] else if  ( referring != null )  { recordReference ( referringName, name ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REMOVE]^from.refersTo.add ( toName ) ;^804^^^^^794^808^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^804^^^^^802^806^[ADD] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^JsName from = getName ( fromName, false ) ;^815^^^^^814^819^[REPLACE] JsName from = getName ( fromName, true ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  String fromName  toName  [TYPE]  boolean false  true  [TYPE]  JsName from  to 
[ADD]^^815^^^^^814^819^[ADD] JsName from = getName ( fromName, true ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  String fromName  toName  [TYPE]  boolean false  true  [TYPE]  JsName from  to 
[REPLACE]^JsName to = getName ( fromName, false ) ;^816^^^^^814^819^[REPLACE] JsName to = getName ( toName, true ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  String fromName  toName  [TYPE]  boolean false  true  [TYPE]  JsName from  to 
[REPLACE]^from.refersTo.add ( fromName ) ;^817^^^^^814^819^[REPLACE] from.refersTo.add ( toName ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  String fromName  toName  [TYPE]  boolean false  true  [TYPE]  JsName from  to 
[REPLACE]^to.referencedBy .contains ( this )  ;^818^^^^^814^819^[REPLACE] to.referencedBy.add ( fromName ) ;^[METHOD] recordReference [TYPE] void [PARAMETER] String fromName String toName [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  String fromName  toName  [TYPE]  boolean false  true  [TYPE]  JsName from  to 
[REPLACE]^return true;^830^^^^^829^831^[REPLACE] return false;^[METHOD] classDefiningCallsHaveSideEffects [TYPE] boolean [PARAMETER] [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true 
[REPLACE]^addAllChildren ( child ) ;^835^^^^^834^836^[REPLACE] addAllChildren ( original ) ;^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node original  [TYPE]  boolean false  true 
[ADD]^^835^^^^^834^836^[ADD] addAllChildren ( original ) ;^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node original  [TYPE]  boolean false  true 
[REPLACE]^Node condition = thenBranch.getFirstChild (  ) ;^840^^^^^839^844^[REPLACE] Node condition = original.getFirstChild (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  original  thenBranch  [TYPE]  boolean false  true 
[REPLACE]^Node thenBranch = thenBranch.getNext (  ) ;^841^^^^^839^844^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  original  thenBranch  [TYPE]  boolean false  true 
[ADD]^addAllChildren ( condition ) ;^841^842^^^^839^844^[ADD] Node thenBranch = condition.getNext (  ) ; addAllChildren ( condition ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  original  thenBranch  [TYPE]  boolean false  true 
[REPLACE]^addAllChildren ( thenBranch ) ;^842^^^^^839^844^[REPLACE] addAllChildren ( condition ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  original  thenBranch  [TYPE]  boolean false  true 
[REPLACE]^addSimplifiedChildren ( original ) ;^843^^^^^839^844^[REPLACE] addSimplifiedChildren ( thenBranch ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  original  thenBranch  [TYPE]  boolean false  true 
[REPLACE]^Node condition = thenBranch.getFirstChild (  ) ;^850^^^^^847^860^[REPLACE] Node condition = hook.getFirstChild (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^Node thenBranch = thenBranch.getNext (  ) ;^851^^^^^847^860^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^Node elseBranch = hook.getParent (  ) ;^852^^^^^847^860^[REPLACE] Node elseBranch = thenBranch.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^addAllChildren ( thenBranch ) ;^853^^^^^847^860^[REPLACE] addAllChildren ( condition ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^if  ( elseHasSideEffects )  {^854^^^^^847^860^[REPLACE] if  ( thenHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REMOVE]^if  ( elseHasSideEffects )  {     addSimplifiedChildren ( elseBranch ) ; }^854^^^^^847^860^[REMOVE] ^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^addSimplifiedChildren ( hook ) ;^855^^^^^847^860^[REPLACE] addSimplifiedChildren ( thenBranch ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[ADD]^^855^856^^^^847^860^[ADD] addSimplifiedChildren ( thenBranch ) ; }^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^if  ( thenHasSideEffects )  {^857^^^^^847^860^[REPLACE] if  ( elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^addSimplifiedChildren ( thenBranch ) ;^858^^^^^847^860^[REPLACE] addSimplifiedChildren ( elseBranch ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node condition  elseBranch  hook  thenBranch  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true 
[REPLACE]^return true;^830^^^^^829^831^[REPLACE] return false;^[METHOD] classDefiningCallsHaveSideEffects [TYPE] boolean [PARAMETER] [CLASS] NodeAccumulator   [TYPE]  boolean false  true 
[REPLACE]^addSimplifiedChildren ( elseBranch ) ;^835^^^^^834^836^[REPLACE] addAllChildren ( original ) ;^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] NodeAccumulator   [TYPE]  boolean false  true  [TYPE]  Node original 
[REPLACE]^Node condition = thenBranch.getFirstChild (  ) ;^840^^^^^839^844^[REPLACE] Node condition = original.getFirstChild (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NodeAccumulator   [TYPE]  boolean false  true  [TYPE]  Node condition  original  thenBranch 
[ADD]^Node thenBranch = condition.getNext (  ) ;^840^841^^^^839^844^[ADD] Node condition = original.getFirstChild (  ) ; Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NodeAccumulator   [TYPE]  boolean false  true  [TYPE]  Node condition  original  thenBranch 
[REPLACE]^Node thenBranch = thenBranch.getFirstChild (  ) ;^841^^^^^839^844^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NodeAccumulator   [TYPE]  boolean false  true  [TYPE]  Node condition  original  thenBranch 
[REPLACE]^addAllChildren ( thenBranch ) ;^842^^^^^839^844^[REPLACE] addAllChildren ( condition ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NodeAccumulator   [TYPE]  boolean false  true  [TYPE]  Node condition  original  thenBranch 
[REPLACE]^addSimplifiedChildren ( original ) ;^843^^^^^839^844^[REPLACE] addSimplifiedChildren ( thenBranch ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] NodeAccumulator   [TYPE]  boolean false  true  [TYPE]  Node condition  original  thenBranch 
[REPLACE]^Node condition = thenBranch .getNext (  )  ;^850^^^^^847^860^[REPLACE] Node condition = hook.getFirstChild (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[ADD]^^850^^^^^847^860^[ADD] Node condition = hook.getFirstChild (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REPLACE]^Node thenBranch = thenBranch.getNext (  ) ;^851^^^^^847^860^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REPLACE]^Node elseBranch = hook.getNext (  ) ;^852^^^^^847^860^[REPLACE] Node elseBranch = thenBranch.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[ADD]^^852^853^854^855^856^847^860^[ADD] Node elseBranch = thenBranch.getNext (  ) ; addAllChildren ( condition ) ; if  ( thenHasSideEffects )  { addSimplifiedChildren ( thenBranch ) ; }^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REPLACE]^addAllChildren ( thenBranch ) ;^853^^^^^847^860^[REPLACE] addAllChildren ( condition ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REMOVE]^addSimplifiedChildren ( elseBranch ) ;^853^^^^^847^860^[REMOVE] ^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REPLACE]^if  ( true )  {^854^^^^^847^860^[REPLACE] if  ( thenHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[ADD]^^854^855^856^^^847^860^[ADD] if  ( thenHasSideEffects )  { addSimplifiedChildren ( thenBranch ) ; }^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REPLACE]^addSimplifiedChildren ( hook ) ;^855^^^^^847^860^[REPLACE] addSimplifiedChildren ( thenBranch ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REPLACE]^if  ( true )  {^857^^^^^847^860^[REPLACE] if  ( elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[REPLACE]^addSimplifiedChildren ( thenBranch ) ;^858^^^^^847^860^[REPLACE] addSimplifiedChildren ( elseBranch ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
[ADD]^^858^859^^^^847^860^[ADD] addSimplifiedChildren ( elseBranch ) ; }^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] NodeAccumulator   [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  Node condition  elseBranch  hook  thenBranch 
