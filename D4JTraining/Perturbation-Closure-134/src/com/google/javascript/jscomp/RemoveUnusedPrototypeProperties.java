[REPLACE]^private static  Logger logger = Logger.getLogger ( RemoveUnusedPrototypeProperties.class.getName (  )  ) ;^34^35^^^^34^35^[REPLACE] private static final Logger logger = Logger.getLogger ( RemoveUnusedPrototypeProperties.class.getName (  )  ) ;^ [CLASS] RemoveUnusedPrototypeProperties  
[REPLACE]^private  boolean canModifyExterns;^38^^^^^^^[REPLACE] private final boolean canModifyExterns;^ [CLASS] RemoveUnusedPrototypeProperties  
[REPLACE]^boolean changed = true;^71^^^^^70^86^[REPLACE] boolean changed = false;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^if  ( nameInfo.isReferenced (  )  )  {^73^^^^^70^86^[REPLACE] if  ( !nameInfo.isReferenced (  )  )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^for  ( Symbol declaration : nameInfo .isReferenced (  )   )  {^74^^^^^73^80^[REPLACE] for  ( Symbol declaration : nameInfo.getDeclarations (  )  )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^changed = false;^76^^^^^73^80^[REPLACE] changed = true;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^NameInfo nameInfo  ;^74^^^^^73^80^[REPLACE] for  ( Symbol declaration : nameInfo.getDeclarations (  )  )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^for  ( NameInfo nameInfo : null )  {^72^^^^^70^86^[REPLACE] for  ( NameInfo nameInfo : allNameInfo )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[ADD]^^74^75^76^77^^73^80^[ADD] for  ( Symbol declaration : nameInfo.getDeclarations (  )  )  { declaration.remove (  ) ; changed = true; }^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[ADD]^^76^^^^^73^80^[ADD] changed = true;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^for  ( Symbol declaration : nameInfo.isReferenced (  )  )  {^74^^^^^73^80^[REPLACE] for  ( Symbol declaration : nameInfo.getDeclarations (  )  )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[ADD]^^72^73^74^75^76^73^80^[ADD] for  ( NameInfo nameInfo : allNameInfo )  { if  ( !nameInfo.isReferenced (  )  )  { for  ( Symbol declaration : nameInfo.getDeclarations (  )  )  { declaration.remove (  ) ; changed = true;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^if  ( true )  {^83^^^^^70^86^[REPLACE] if  ( changed )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^super (  )  ;^84^^^^^70^86^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
