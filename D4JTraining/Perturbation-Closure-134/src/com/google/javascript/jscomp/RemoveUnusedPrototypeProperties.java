[REPLACE]^private static final Logger logger ;^34^35^^^^34^35^[REPLACE] private static final Logger logger = Logger.getLogger ( RemoveUnusedPrototypeProperties.class.getName (  )  ) ;^ [CLASS] RemoveUnusedPrototypeProperties  
[REPLACE]^private  AbstractCompiler compiler;^37^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RemoveUnusedPrototypeProperties  
[REPLACE]^private  boolean canModifyExterns;^38^^^^^^^[REPLACE] private final boolean canModifyExterns;^ [CLASS] RemoveUnusedPrototypeProperties  
[REPLACE]^this.compiler =  null;^53^^^^^51^56^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean canModifyExterns boolean anchorUnusedVars [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  true  [TYPE]  Logger logger 
[REPLACE]^this.canModifyExterns =  true;^54^^^^^51^56^[REPLACE] this.canModifyExterns = canModifyExterns;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean canModifyExterns boolean anchorUnusedVars [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  true  [TYPE]  Logger logger 
[REPLACE]^this.anchorUnusedVars =  null;^55^^^^^51^56^[REPLACE] this.anchorUnusedVars = anchorUnusedVars;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean canModifyExterns boolean anchorUnusedVars [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  true  [TYPE]  Logger logger 
[REPLACE]^analyzer .getAllNameInfo (  )  ;^62^^^^^58^64^[REPLACE] analyzer.process ( externRoot, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  true  [TYPE]  Logger logger  [TYPE]  Node externRoot  root  [TYPE]  AnalyzePrototypeProperties analyzer 
[REPLACE]^logger.fine ( "Removed unused prototype property: " + nameInfo.name ) ;^63^^^^^58^64^[REPLACE] removeUnusedSymbols ( analyzer.getAllNameInfo (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  true  [TYPE]  Logger logger  [TYPE]  Node externRoot  root  [TYPE]  AnalyzePrototypeProperties analyzer 
[REPLACE]^removeUnusedSymbols ( analyzer .process ( externRoot , externRoot )   ) ;^63^^^^^58^64^[REPLACE] removeUnusedSymbols ( analyzer.getAllNameInfo (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  true  [TYPE]  Logger logger  [TYPE]  Node externRoot  root  [TYPE]  AnalyzePrototypeProperties analyzer 
[REPLACE]^boolean changed = true;^71^^^^^70^86^[REPLACE] boolean changed = false;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^if  ( nameInfo.isReferenced (  )  )  {^73^^^^^70^86^[REPLACE] if  ( !nameInfo.isReferenced (  )  )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^changed = false;^76^^^^^70^86^[REPLACE] changed = true;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[ADD]^^76^^^^^70^86^[ADD] changed = true;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^for  ( NameInfo nameInfo : allNameInfo )  { if  ( !nameInfo.isReferenced (  )  )  {^74^^^^^70^86^[REPLACE] for  ( Symbol declaration : nameInfo.getDeclarations (  )  )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[ADD]^^74^75^76^77^^70^86^[ADD] for  ( Symbol declaration : nameInfo.getDeclarations (  )  )  { declaration.remove (  ) ; changed = true; }^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^for  ( NameInfo nameInfo : allNameInfo )  { if  ( !nameInfo.isReferenced (  )  )  {^72^^^^^70^86^[REPLACE] for  ( NameInfo nameInfo : allNameInfo )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^if  ( true )  {^83^^^^^70^86^[REPLACE] if  ( changed )  {^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[ADD]^^83^84^85^^^70^86^[ADD] if  ( changed )  { compiler.reportCodeChange (  ) ; }^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
[REPLACE]^declaration.remove (  ) ;^84^^^^^70^86^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeUnusedSymbols [TYPE] void [PARAMETER] NameInfo> allNameInfo [CLASS] RemoveUnusedPrototypeProperties   [TYPE]  Collection allNameInfo  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  changed  false  true  [TYPE]  NameInfo nameInfo  [TYPE]  Logger logger  [TYPE]  Symbol declaration 
