[REPLACE]^static  DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^40^41^42^43^^40^43^[REPLACE] static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^ [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  
[REPLACE]^if  ( t.getScope (  )  )  {^103^^^^^102^128^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^return;  ;^104^^^^^102^128^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope parentScope = scope.getParent (  )  ;^107^^^^^102^128^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var var = vars.next (  )  ;^108^^^^^102^128^[REPLACE] Scope parentScope = scope.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  ( externalNoShadowVariableNames.contains ( shadowedVar.getName (  )  )  )  {^112^^^^^102^128^[REPLACE] if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.isLocal (  )  )  ) ;^113^114^115^^^102^128^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var.isLocal (  )  )  ) ;^115^^^^^102^128^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^115^116^^^^102^128^[ADD] var.getName (  )  )  ) ; continue;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  (  ( shadowedVar == null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^[REPLACE] if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^122^123^124^^^120^126^[ADD] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var.isLocal (  )  )  ) ;^124^^^^^120^126^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = parentScope.getVar (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^110^^^^^102^128^[ADD] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^119^^^^^102^128^[ADD] Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  ( t.getScope (  )  )  {^103^^^^^102^128^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^return;  ;^104^^^^^102^128^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope parentScope = scope.getParent (  )  ;^107^^^^^102^128^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope parentScope = parentScope.getParent (  ) ;^108^^^^^102^128^[REPLACE] Scope parentScope = scope.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  ( externalNoShadowVariableNames.contains ( shadowedVar.getName (  )  )  )  {^112^^^^^102^128^[REPLACE] if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.isLocal (  )  )  ) ;^113^114^115^^^102^128^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var .isNoShadow (  )   )  ) ;^115^^^^^102^128^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  (  ( shadowedVar == true )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^[REPLACE] if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var.isLocal (  )  )  ) ;^124^^^^^120^126^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = parentScope.getVars (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var var = null.next (  ) ;^110^^^^^102^128^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope parentScope = scope.getParent (  )  ;^119^^^^^102^128^[REPLACE] Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
