[REPLACE]^private  List<Export> exports;^43^^^^^^^[REPLACE] private final List<Export> exports;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  Map<String, String> mappedPaths;^55^^^^^^^[REPLACE] private final Map<String, String> mappedPaths;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  List<String> paths;^58^^^^^^^[REPLACE] private final List<String> paths;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  Node value;^167^^^^^^^[REPLACE] private final Node value;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  String symbolName;^204^^^^^^^[REPLACE] private final String symbolName;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  Node value;^205^^^^^^^[REPLACE] private final Node value;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^List<String> pieces = Lists.newArrayList ( path .compareTo ( symbolName )   ) ;^81^^^^^78^104^[REPLACE] List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i == pieces.size (  )  + 4 - 0  || !paths.contains ( cPath )  )  {^90^^^^^78^104^[REPLACE] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^90^91^92^93^^78^104^[ADD] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i  ||  0 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^sb.append ( "var " ) ;^91^92^93^^^78^104^[ADD] if  ( i == 0 )  { sb.append ( "var " ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb.append ( ";\n" )  ;^92^^^^^78^104^[REPLACE] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  + 5 - 0  )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^sb.append ( ";\n" ) ;^97^98^99^^^78^104^[ADD] if  ( i < pieces.size (  )  - 1 )  { sb.append ( ";\n" ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb.append ( "var " )  ;^98^^^^^78^104^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^98^^^^^78^104^[ADD] sb.append ( ";\n" ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  (   0 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^92^^^^^78^104^[ADD] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  %  0.5  - 1 )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^[REPLACE] for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String cPath = Joiner.on ( "." )  .getNext (  )  ;^86^^^^^78^104^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String qualifiedName = definitionParent.getQualifiedName (  ) ;^113^^^^^112^131^[REPLACE] String qualifiedName = value.getQualifiedName (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if   (  qualifiedName != null  )   {  ;^115^^^^^112^131^[REPLACE] if  ( qualifiedName == null )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^115^116^117^^^112^131^[ADD] if  ( qualifiedName == null )  { return null; }^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return false;^116^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( !definitionMap.containsKey ( symbolName )  )  {^119^^^^^112^131^[REPLACE] if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^119^120^121^^^112^131^[ADD] if  ( !definitionMap.containsKey ( qualifiedName )  )  { return null; }^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return true;^120^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return false;^120^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node definitionParent = definitionMap.get ( symbolName ) ;^123^^^^^112^131^[REPLACE] Node definitionParent = definitionMap.get ( qualifiedName ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^124^^^^^112^131^[ADD] Node definition = definitionParent.getLastChild (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( definition.getType (  )   ==  Token.FUNCTION )  {^126^^^^^112^131^[REPLACE] if  ( definition.getType (  )  != Token.FUNCTION )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return null;  ;^127^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return false;^127^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return definitionParent;^130^^^^^112^131^[REPLACE] return definition;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^sb.append ( "var " )  ;^138^^^^^137^159^[REPLACE] sb.append ( " = " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^e2.getExportedPath (  )  ;^139^^^^^137^159^[REPLACE] sb.append ( "function ( " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^139^^^^^137^159^[ADD] sb.append ( "function ( " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^Node parameters = definition.getLastChild (  ) .getNext (  ) ;^142^^^^^137^159^[REPLACE] Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^int i = 0 - 3;^144^^^^^137^159^[REPLACE] int i = 0;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i  <  0 )  {^149^^^^^137^159^[REPLACE] if  ( i > 0 )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REMOVE]^if  ( i == 0 )  {     sb.append ( "var " ) ; }^149^^^^^137^159^[REMOVE] ^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb.append ( "var " )  ;^150^^^^^137^159^[REPLACE] sb.append ( ", " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^current =  value.getNext (  )  )  {^147^^^^^137^159^[REPLACE] current = current.getNext (  )  )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( Node current = value.getLastChild (  ) ;^145^^^^^137^159^[REPLACE] for  ( Node current = parameters.getFirstChild (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb.append ( "var " )  ;^158^^^^^137^159^[REPLACE] sb.append ( " )  {}" ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^158^^^^^137^159^[ADD] sb.append ( " )  {}" ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^217^^^^^214^237^[ADD] List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if   (  i == 0  )   {  ;^225^^^^^214^237^[REPLACE] if  ( mappedPaths.containsKey ( cPath )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^String newPath = mappedPaths.get ( cPath ) ;newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^225^226^^228^229^214^237^[ADD] if  ( mappedPaths.containsKey ( cPath )  )  { String newPath = mappedPaths.get ( cPath ) ; if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if   (  i < pieces.size  (    )   - 1  )   {  ;^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^228^229^230^^^214^237^[ADD] if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^newPath = "."  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^229^^^^^214^237^[ADD] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^return newPath  "."  symbolName;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^226^^^^^214^237^[ADD] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  - 4 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^228^229^230^^^214^237^[ADD] if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^return symbolName  "."  symbolName;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( int i = true.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^[REPLACE] for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^221^^^^^214^237^[ADD] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String newPath = mappedPaths.get ( symbolName ) ;^226^^^^^214^237^[REPLACE] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^return exportPath  "."  symbolName;^236^^^^^214^237^[REPLACE] return exportPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^new NodeTraversal ( compiler, this ) .traverse ( parameters ) ;^271^^^^^270^289^[REPLACE] new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return export.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^270^289^[REPLACE] return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^e2.getExportedPath (  )  ;^284^^^^^270^289^[REPLACE] sorted.addAll ( exports ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^for  ( Export export : this )  {^286^^^^^270^289^[REPLACE] for  ( Export export : sorted )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^export.Export (  ) ;^287^^^^^270^289^[REPLACE] export.generateExterns (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^286^287^288^^^270^289^[ADD] for  ( Export export : sorted )  { export.generateExterns (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  (   Token.ASSIGN )  {^306^^^^^301^337^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^definitionMap.put ( n.getQualifiedName (  ) , value ) ;^307^^^^^301^337^[REPLACE] definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^307^308^^^^301^337^[ADD] definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^definitionMap.put ( parent.getLastChild (  ) , parent ) ;^307^^^^^301^337^[REPLACE] definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( parent.getType (  )   ==  Token.CALL )  {^312^^^^^301^337^[REPLACE] if  ( parent.getType (  )  != Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return;  ;^313^^^^^301^337^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( exportPropertyNames.contains ( parent.getLastChild (  )  )  )  {^329^^^^^301^337^[REPLACE] if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^handleSymbolExport ( parent )  ;^330^^^^^301^337^[REPLACE] handlePropertyExport ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if   (  exportPropertyNames.contains  (  n.getQualifiedName  (    )    )    )   {  ;^333^^^^^301^337^[REPLACE] if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^handlePropertyExport ( parent )  ;^334^^^^^301^337^[REPLACE] handleSymbolExport ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^String> pieces = newArrayList ( exportPath.split ( "\\." )  )  ;^316^^^^^301^337^[REPLACE] List<String> exportSymbolNames = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^String> pieces = newArrayList ( exportPath.split ( "\\." )  )  ;^317^^^^^301^337^[REPLACE] List<String> exportPropertyNames = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( parent.getChildCount (  )   ==  4 )  {^342^^^^^339^358^[REPLACE] if  ( parent.getChildCount (  )  != 3 )  {^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^return;^342^343^344^^^339^358^[ADD] if  ( parent.getChildCount (  )  != 3 )  { return; }^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return;  ;^343^^^^^339^358^[REPLACE] return;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node current = parameters.getFirstChild (  )  ;^346^^^^^339^358^[REPLACE] Node thisNode = parent.getFirstChild (  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node objectArg = thisNode.getNext (  )  ;^347^^^^^339^358^[REPLACE] Node nameArg = thisNode.getNext (  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node valueArg = value .join (  )  ;^348^^^^^339^358^[REPLACE] Node valueArg = nameArg.getNext (  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( nameArg.getType (  )   ==  Token.STRING )  {^352^^^^^339^358^[REPLACE] if  ( nameArg.getType (  )  != Token.STRING )  {^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return;  ;^353^^^^^339^358^[REPLACE] return;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , value )  ) ;^357^^^^^339^358^[REPLACE] this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^357^^^^^339^358^[ADD] this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exports.add ( new SymbolExport ( valueArg.getType (  ) , valueArg )  ) ;^357^^^^^339^358^[REPLACE] this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REMOVE]^objectArg.getNext (  )  ;^357^^^^^339^358^[REMOVE] ^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( parent.getChildCount (  )   ==  4 )  {^363^^^^^360^387^[REPLACE] if  ( parent.getChildCount (  )  != 4 )  {^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^return;^363^364^365^^^360^387^[ADD] if  ( parent.getChildCount (  )  != 4 )  { return; }^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return;  ;^364^^^^^360^387^[REPLACE] return;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node current = parameters.getFirstChild (  )  ;^367^^^^^360^387^[REPLACE] Node thisNode = parent.getFirstChild (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node objectArg = value.getNext (  ) ;^368^^^^^360^387^[REPLACE] Node objectArg = thisNode.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node nameArg = valueArg.getNext (  ) ;^369^^^^^360^387^[REPLACE] Node nameArg = objectArg.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node valueArg = value.getType (  ) ;^370^^^^^360^387^[REPLACE] Node valueArg = nameArg.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( objectArg.getQualifiedName (  )  != false )  {^374^^^^^360^387^[REPLACE] if  ( objectArg.getQualifiedName (  )  == null )  {^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return;  ;^375^^^^^360^387^[REPLACE] return;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if   (  parent.getType  (    )   == Token.ASSIGN  )   {  ;^378^^^^^360^387^[REPLACE] if  ( nameArg.getType (  )  != Token.STRING )  {^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return;  ;^379^^^^^360^387^[REPLACE] return;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , value )  ) ;^383^384^385^386^^360^387^[REPLACE] this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^new PropertyExport ( parent.getLastChild (  ) , nameArg.getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^[REPLACE] new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^384^385^386^387^^360^387^[ADD] new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ; }^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^nameArg .getLastChild (  )  , valueArg )  ) ;^385^386^^^^360^387^[REPLACE] nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^81^^^^^78^104^[ADD] List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i == this.size (  )  + 1 - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^[REPLACE] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^90^91^92^93^^78^104^[ADD] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i  !=  0 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^sb.append ( " = " )  ;^92^^^^^78^104^[REPLACE] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^92^^^^^78^104^[ADD] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  - 4 - 1 )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REMOVE]^if  ( i > 0 )  {     sb.append ( ", " ) ; }^97^^^^^78^104^[REMOVE] ^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^sb.append ( " = " )  ;^98^^^^^78^104^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i  ||  0 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REMOVE]^sb.append ( " = " )  ;^92^^^^^78^104^[REMOVE] ^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  + 5 - 0  )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^97^98^99^^^78^104^[ADD] if  ( i < pieces.size (  )  - 1 )  { sb.append ( ";\n" ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^[REPLACE] for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^86^^^^^78^104^[ADD] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^String qualifiedName = definitionParent.getQualifiedName (  ) ;^113^^^^^112^131^[REPLACE] String qualifiedName = value.getQualifiedName (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^if  ( qualifiedName != true )  {^115^^^^^112^131^[REPLACE] if  ( qualifiedName == null )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return true;^116^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^if  ( !definitionMap.get ( qualifiedName )  )  {^119^^^^^112^131^[REPLACE] if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return this;^120^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[ADD]^Node definition = definitionParent.getLastChild (  ) ;return null;^123^124^^126^127^112^131^[ADD] Node definitionParent = definitionMap.get ( qualifiedName ) ; Node definition = definitionParent.getLastChild (  ) ; if  ( definition.getType (  )  != Token.FUNCTION )  { return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[ADD]^^124^^^^^112^131^[ADD] Node definition = definitionParent.getLastChild (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^if  ( definitionParent.getType (  )   ==  Token.FUNCTION )  {^126^^^^^112^131^[REPLACE] if  ( definition.getType (  )  != Token.FUNCTION )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return null;  ;^127^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return definitionParent;^130^^^^^112^131^[REPLACE] return definition;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^sb.append ( cPath )  ;^138^^^^^137^159^[REPLACE] sb.append ( " = " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^sb.append ( " = " )  ;^139^^^^^137^159^[REPLACE] sb.append ( "function ( " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[ADD]^^139^^^^^137^159^[ADD] sb.append ( "function ( " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[ADD]^^142^^^^^137^159^[ADD] Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[ADD]^^144^145^^^^137^159^[ADD] int i = 0; for  ( Node current = parameters.getFirstChild (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^if  ( i  <=  0 )  {^149^^^^^137^159^[REPLACE] if  ( i > 0 )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^sb.append ( " = " )  ;^150^^^^^137^159^[REPLACE] sb.append ( ", " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REMOVE]^sb.append ( " = " )  ;^150^^^^^137^159^[REMOVE] ^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^current =  null.getNext (  )  )  {^147^^^^^137^159^[REPLACE] current = current.getNext (  )  )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^Node parameters = definition.getFirstChild (  ) .getNext (  )  ;^145^^^^^137^159^[REPLACE] for  ( Node current = parameters.getFirstChild (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^sb.append ( " = " )  ;^158^^^^^137^159^[REPLACE] sb.append ( " )  {}" ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^private  Node value;^167^^^^^^^[REPLACE] private final Node value;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] SymbolExport   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^private final  double  exportPath;^203^^^^^^^[REPLACE] private final String exportPath;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^private  Node value;^205^^^^^^^[REPLACE] private final Node value;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^Node functionValue = getFunctionValue ( value )  ;^217^^^^^214^237^[REPLACE] List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if   (  functionValue != null  )   {  ;^225^^^^^214^237^[REPLACE] if  ( mappedPaths.containsKey ( cPath )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if  ( i < pieces.size (  )  /  0.5  )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^newPath = "."  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^return newPath  "."  symbolName;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^String newPath = mappedPaths.get ( symbolName ) ;^226^^^^^214^237^[REPLACE] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if  ( i < pieces.size (  )  %  2 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^return newPath  "."  newPath;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^for  ( int i = 1.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^[REPLACE] for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^Node functionValue = getFunctionValue ( value )  ;^221^^^^^214^237^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^return exportPath  "." newPath;^236^^^^^214^237^[REPLACE] return exportPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
