[REPLACE]^private  List<Export> exports;^43^^^^^^^[REPLACE] private final List<Export> exports;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  Map<String, Node> definitionMap;^46^^^^^^^[REPLACE] private final Map<String, Node> definitionMap;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  StringBuilder sb;^52^^^^^^^[REPLACE] private final StringBuilder sb;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private final  double  symbolName;^166^^^^^^^[REPLACE] private final String symbolName;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private   double  exportPath;^203^^^^^^^[REPLACE] private final String exportPath;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private final  char  symbolName;^204^^^^^^^[REPLACE] private final String symbolName;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^private  Node value;^205^^^^^^^[REPLACE] private final Node value;^ [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  
[REPLACE]^this.symbolName =  qualifiedName;^170^^^^^169^178^[REPLACE] this.symbolName = symbolName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.value =  null;^171^^^^^169^178^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^String qualifiedName = value .getLastChild (  )  ;^173^^^^^169^178^[REPLACE] String qualifiedName = value.getQualifiedName (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( qualifiedName == null )  {^175^^^^^169^178^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^mappedPaths.put ( qualifiedName, symbolName ) ;^175^176^177^^^169^178^[ADD] if  ( qualifiedName != null )  { mappedPaths.put ( qualifiedName, symbolName ) ; }^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^mappedPaths.put ( qualifiedName, exportPath ) ;^176^^^^^169^178^[REPLACE] mappedPaths.put ( qualifiedName, symbolName ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exportPath =  null;^208^^^^^207^211^[REPLACE] this.exportPath = exportPath;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.symbolName =  qualifiedName;^209^^^^^207^211^[REPLACE] this.symbolName = symbolName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^209^210^^^^207^211^[ADD] this.symbolName = symbolName; this.value = value;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.value =  null;^210^^^^^207^211^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.paths = Lists.newArrayList (  ) ; ;^259^^^^^258^265^[REPLACE] this.exports = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.compiler =  null;^260^^^^^258^265^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.definitionMap  =  this.definitionMap ;^261^^^^^258^265^[REPLACE] this.definitionMap = Maps.newHashMap (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.sb  =  this.sb ;^262^^^^^258^265^[REPLACE] this.sb = new StringBuilder (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exports = Lists.newArrayList (  ) ; ;^263^^^^^258^265^[REPLACE] this.paths = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.mappedPaths  =  this.mappedPaths ;^264^^^^^258^265^[REPLACE] this.mappedPaths = Maps.newHashMap (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  [TYPE]  String exportPath  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^List<String> pieces =   symbolName.split ( "\\." )  ;^81^^^^^78^104^[REPLACE] List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^81^^^^^78^104^[ADD] List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i == pieces.length (  )  - 0  || !paths.contains ( cPath )  )  {^90^^^^^78^104^[REPLACE] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^90^91^92^93^^78^104^[ADD] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i  ||  0 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb.append ( " = " ) ;^92^^^^^78^104^[REPLACE] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.length (  )  - 1 )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb.append ( " = " ) ;^98^^^^^78^104^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i  !=  3 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^sb.append ( "var " ) ;^91^92^93^^^78^104^[ADD] if  ( i == 0 )  { sb.append ( "var " ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^92^^^^^78^104^[ADD] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  *  2 - 0  )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < pieces.size (  )  - 2; ++i )  {^84^^^^^78^104^[REPLACE] for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^84^85^86^^^78^104^[ADD] for  ( int i = 0; i < pieces.size (  ) ; ++i )  {  String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i == pieces.size (  )  - 1 - 1 ) {^90^^^^^78^104^[REPLACE] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb .StringBuilder (  )  ;^92^^^^^78^104^[REPLACE] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  - 3 - 1 )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb .StringBuilder (  )  ;^98^^^^^78^104^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i  !=  0L )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < false.size (  )  - 2 - 0  )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  >=  1 )  ) ;^86^^^^^78^104^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^86^^^^^78^104^[ADD] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^[REPLACE] for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String qualifiedName = definitionParent.getLastChild (  ) ;^113^^^^^112^131^[REPLACE] String qualifiedName = value.getQualifiedName (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^113^114^115^116^117^112^131^[ADD] String qualifiedName = value.getQualifiedName (  ) ;  if  ( qualifiedName == null )  { return null; }^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( symbolName != null )  {^115^^^^^112^131^[REPLACE] if  ( qualifiedName == null )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REMOVE]^if  ( ! ( definitionMap.containsKey ( qualifiedName )  )  )  {     return null; }^115^^^^^112^131^[REMOVE] ^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return false;^116^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return true;^116^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( !definitionMap.containsKey ( symbolName )  )  {^119^^^^^112^131^[REPLACE] if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return false;^120^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return this;^120^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node definitionParent = definitionMap.get ( symbolName ) ;^123^^^^^112^131^[REPLACE] Node definitionParent = definitionMap.get ( qualifiedName ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node definition = value.getLastChild (  ) ;^124^^^^^112^131^[REPLACE] Node definition = definitionParent.getLastChild (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( definition .getString (  )    ==  Token.FUNCTION )  {^126^^^^^112^131^[REPLACE] if  ( definition.getType (  )  != Token.FUNCTION )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return false;^127^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return this;^127^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return definitionParent;^130^^^^^112^131^[REPLACE] return definition;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node definition  definitionParent  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^sb .StringBuilder (  )  ;^138^^^^^137^159^[REPLACE] sb.append ( " = " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb .StringBuilder (  )  ;^139^^^^^137^159^[REPLACE] sb.append ( "function ( " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REMOVE]^sb.append ( ";\n" ) ;^139^^^^^137^159^[REMOVE] ^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^Node parameters = definition.getLastChild (  ) .getNext (  ) ;^142^^^^^137^159^[REPLACE] Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^int i = 4;^144^^^^^137^159^[REPLACE] int i = 0;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i  >=  0L )  {^149^^^^^137^159^[REPLACE] if  ( i > 0 )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^sb.append ( ", " ) ;^149^150^151^^^137^159^[ADD] if  ( i > 0 )  { sb.append ( ", " ) ; }^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb.append ( ";\n" ) ;^150^^^^^137^159^[REPLACE] sb.append ( ", " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( Node current = value.getFirstChild (  ) ;^145^^^^^137^159^[REPLACE] for  ( Node current = parameters.getFirstChild (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i  <  0 )  {^149^^^^^137^159^[REPLACE] if  ( i > 0 )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^current =  parameters.getNext (  )  )  {^147^^^^^137^159^[REPLACE] current = current.getNext (  )  )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( Node current = parameters.getLastChild (  ) ;^145^^^^^137^159^[REPLACE] for  ( Node current = parameters.getFirstChild (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^sb .StringBuilder (  )   {}" ) ;^158^^^^^137^159^[REPLACE] sb.append ( " )  {}" ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^return;^182^^^^^181^183^[REPLACE] return symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^appendInferredPaths ( exportedPath ) ;^187^^^^^186^196^[REPLACE] appendInferredPaths ( symbolName ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node thisNode = parent.getFirstChild (  ) ;^189^^^^^186^196^[REPLACE] Node functionValue = getFunctionValue ( value ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^189^^^^^186^196^[ADD] Node functionValue = getFunctionValue ( value ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  (value == true )  {^191^^^^^186^196^[REPLACE] if  ( functionValue != null )  {^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^appendFunctionValue ( value ) ;^192^^^^^186^196^[REPLACE] appendFunctionValue ( functionValue ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^192^^^^^186^196^[ADD] appendFunctionValue ( functionValue ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^sb .StringBuilder (  )  ;^195^^^^^186^196^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^195^^^^^186^196^[ADD] sb.append ( ";\n" ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^List<String> pieces = Lists.newArrayList ( exportPath.compareTo ( "\\." )  ) ;^217^^^^^214^237^[REPLACE] List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^217^^^^^214^237^[ADD] List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i == 0 )  {^225^^^^^214^237^[REPLACE] if  ( mappedPaths.containsKey ( cPath )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REMOVE]^if  ( i <  ( pieces.size (  )  )  )  {     newPath += "." +  ( on ( "." ) .join ( skip ( pieces, i )  )  ) ; }^225^^^^^214^237^[REMOVE] ^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  %  2 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^newPath  && = "."  &&  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^229^^^^^214^237^[ADD] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^newPath  || = "."  ||  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^return exportPath + "." + symbolName;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String newPath = mappedPaths.get ( symbolName ) ;^226^^^^^214^237^[REPLACE] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[ADD]^^226^^^^^214^237^[ADD] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  *  2 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^newPath  != = "."  !=  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( int i = pieces.size (  )  + 5; i > 0 ; i-- )  {^219^^^^^214^237^[REPLACE] for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  - 1 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^newPath  == = "."  ==  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  - 2 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^newPath  & = "."  &  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^221^^^^^214^237^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String newPath = mappedPaths.get ( qualifiedName ) ;^226^^^^^214^237^[REPLACE] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^newPath  >= = "."  >=  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^for  ( int i = null.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^[REPLACE] for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String cPath = Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^221^^^^^214^237^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String newPath = mappedPaths .put ( null , 1 )  ;^226^^^^^214^237^[REPLACE] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^return newPath + "." + symbolName;^236^^^^^214^237^[REPLACE] return exportPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths  [TYPE]  int i 
[REPLACE]^String qualifiedName = value.getQualifiedName (  ) ;^241^^^^^240^252^[REPLACE] String exportedPath = getExportedPath (  ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^appendInferredPaths ( qualifiedName ) ;^243^^^^^240^252^[REPLACE] appendInferredPaths ( exportedPath ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node thisNode = parent.getFirstChild (  ) ;^245^^^^^240^252^[REPLACE] Node functionValue = getFunctionValue ( value ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( functionValue == false )  {^247^^^^^240^252^[REPLACE] if  ( functionValue != null )  {^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^247^248^249^^^240^252^[ADD] if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^appendFunctionValue ( value ) ;^248^^^^^240^252^[REPLACE] appendFunctionValue ( functionValue ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^sb.append ( " = " ) ;^251^^^^^240^252^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  functionValue  parameters  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^new NodeTraversal ( compiler, this ) .traverse ( parameters ) ;^271^^^^^270^289^[REPLACE] new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return e1.Export (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^270^289^[REPLACE] return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^276^277^278^^^270^289^[ADD] Set<Export> sorted = new TreeSet<Export> ( new Comparator<Export> (  )  { @Override^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^sb.append ( ";\n" ) ;^284^^^^^270^289^[REPLACE] sorted.addAll ( exports ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^for  ( Node current = parameters.getFirstChild (  ) ;^286^^^^^270^289^[REPLACE] for  ( Export export : sorted )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^286^287^288^^^270^289^[ADD] for  ( Export export : sorted )  { export.generateExterns (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set sorted  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  export  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return e1.Export (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^279^281^[REPLACE] return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Export e1 Export e2 [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  Export e1  e2  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return sb.StringBuilder (  ) ;^295^^^^^294^296^[REPLACE] return sb.toString (  ) ;^[METHOD] getGeneratedExterns [TYPE] String [PARAMETER] [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  parameters  root  value  [TYPE]  List exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( parent.getType (  )   !=  Token.ASSIGN )  {^306^^^^^301^337^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^definitionMap.put ( functionValue.getQualifiedName (  ) , parent ) ;^307^^^^^301^337^[REPLACE] definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^307^308^^^^301^337^[ADD] definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^definitionMap.put ( parent .getLastChild (  )  , parent ) ;^307^^^^^301^337^[REPLACE] definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( parent.getType (  )   ==  Token.CALL )  {^312^^^^^301^337^[REPLACE] if  ( parent.getType (  )  != Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return null;^313^^^^^301^337^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( exportPropertyNames.contains ( parent.getQualifiedName (  )  )  )  {^329^^^^^301^337^[REPLACE] if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^handlePropertyExport ( value ) ;^330^^^^^301^337^[REPLACE] handlePropertyExport ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^330^^^^^301^337^[ADD] handlePropertyExport ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( exportSymbolNames.contains ( n.getLastChild (  )  )  )  {^333^^^^^301^337^[REPLACE] if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^333^334^335^^^301^337^[ADD] if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  { handleSymbolExport ( parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^handleSymbolExport ( n ) ;^334^^^^^301^337^[REPLACE] handleSymbolExport ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^List<String> exportSymbolNames = Lists .newArrayList ( this )  ;^316^^^^^301^337^[REPLACE] List<String> exportSymbolNames = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^List<String> exportSymbolNames = Lists.newArrayList (  ) ;^317^^^^^301^337^[REPLACE] List<String> exportPropertyNames = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  NodeTraversal t  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( parent.getChildCount (  )   ==  3 << 0 )  {^342^^^^^339^358^[REPLACE] if  ( parent.getChildCount (  )  != 3 )  {^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^return;^342^343^344^^^339^358^[ADD] if  ( parent.getChildCount (  )  != 3 )  { return; }^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return null;^343^^^^^339^358^[REPLACE] return;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node thisNode = root.getLastChild (  ) ;^346^^^^^339^358^[REPLACE] Node thisNode = parent.getFirstChild (  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node nameArg = value.getType (  ) ;^347^^^^^339^358^[REPLACE] Node nameArg = thisNode.getNext (  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node valueArg = valueArg.getType (  ) ;^348^^^^^339^358^[REPLACE] Node valueArg = nameArg.getNext (  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( value .getString (  )    ==  Token.STRING )  {^352^^^^^339^358^[REPLACE] if  ( nameArg.getType (  )  != Token.STRING )  {^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return null;^353^^^^^339^358^[REPLACE] return;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , value )  ) ;^357^^^^^339^358^[REPLACE] this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exports.add ( new SymbolExport ( valueArg.getString (  ) , valueArg )  ) ;^357^^^^^339^358^[REPLACE] this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handleSymbolExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( parent.getChildCount (  )   ==  4 )  {^363^^^^^360^387^[REPLACE] if  ( parent.getChildCount (  )  != 4 )  {^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return null;^364^^^^^360^387^[REPLACE] return;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node thisNode = valueArg.getFirstChild (  ) ;^367^^^^^360^387^[REPLACE] Node thisNode = parent.getFirstChild (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^367^368^^^^360^387^[ADD] Node thisNode = parent.getFirstChild (  ) ; Node objectArg = thisNode.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node objectArg = thisNode.getType (  ) ;^368^^^^^360^387^[REPLACE] Node objectArg = thisNode.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^368^^^^^360^387^[ADD] Node objectArg = thisNode.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node nameArg = valueArg.getType (  ) ;^369^^^^^360^387^[REPLACE] Node nameArg = objectArg.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^369^^^^^360^387^[ADD] Node nameArg = objectArg.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^Node valueArg = value.getNext (  ) ;^370^^^^^360^387^[REPLACE] Node valueArg = nameArg.getNext (  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( objectArg.getQualifiedName (  )  != null )  {^374^^^^^360^387^[REPLACE] if  ( objectArg.getQualifiedName (  )  == null )  {^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^^374^375^376^^^360^387^[ADD] if  ( objectArg.getQualifiedName (  )  == null )  { return; }^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return null;^375^^^^^360^387^[REPLACE] return;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^if  ( valueArg.getType (  )   ==  Token.STRING )  {^378^^^^^360^387^[REPLACE] if  ( nameArg.getType (  )  != Token.STRING )  {^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[ADD]^return;^378^379^380^^^360^387^[ADD] if  ( nameArg.getType (  )  != Token.STRING )  { return; }^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^return null;^379^^^^^360^387^[REPLACE] return;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg .getLastChild (  )  , value )  ) ;^383^384^385^386^^360^387^[REPLACE] this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^new PropertyExport ( parent.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^[REPLACE] new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^nameArg.getType (  ) , valueArg )  ) ;^385^386^^^^360^387^[REPLACE] nameArg.getString (  ) , valueArg )  ) ;^[METHOD] handlePropertyExport [TYPE] void [PARAMETER] Node parent [CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  [TYPE]  List exportPropertyNames  exportSymbolNames  exports  paths  pieces  [TYPE]  String cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  [TYPE]  Map definitionMap  mappedPaths 
[REPLACE]^List<String> pieces = Lists.newArrayList ( cPath.split ( "\\." )  ) ;^81^^^^^78^104^[REPLACE] List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^81^^^^^78^104^[ADD] List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i == pieces.length (  )  - 1 ) {^90^^^^^78^104^[REPLACE] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i  &&  0L )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^sb.append ( ", " ) ;^92^^^^^78^104^[REPLACE] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  *  2 - 1 )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^sb.append ( ", " ) ;^98^^^^^78^104^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^98^^^^^78^104^[ADD] sb.append ( ";\n" ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i  ||  0 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  %  2 - 1 )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < this.size (  )  *  2; ++i )  {^84^^^^^78^104^[REPLACE] for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i == pieces.size (  )  *  0.5  - 1 ) {^90^^^^^78^104^[REPLACE] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^90^91^92^93^^78^104^[ADD] if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i  &&  0 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REMOVE]^if  ( i <  (  ( pieces.size (  )  )  - 1 )  )  {     sb.append ( ";\n" ) ; }^91^^^^^78^104^[REMOVE] ^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i < pieces.size (  )  %  0.5  - 0  )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i  ||  3 )  {^91^^^^^78^104^[REPLACE] if  ( i == 0 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^91^92^93^^^78^104^[ADD] if  ( i == 0 )  { sb.append ( "var " ) ; }^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^92^^^^^78^104^[ADD] sb.append ( "var " ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^if  ( i < this.size (  )  /  2 - 0  )  {^97^^^^^78^104^[REPLACE] if  ( i < pieces.size (  )  - 1 )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  &  1 )  ) ;^86^^^^^78^104^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^[REPLACE] for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[ADD]^^86^^^^^78^104^[ADD] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[METHOD] appendInferredPaths [TYPE] void [PARAMETER] String path [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  List pieces  [TYPE]  String cPath  path  [TYPE]  int i 
[REPLACE]^String qualifiedName = definitionParent.getLastChild (  ) ;^113^^^^^112^131^[REPLACE] String qualifiedName = value.getQualifiedName (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^if  ( qualifiedName != this )  {^115^^^^^112^131^[REPLACE] if  ( qualifiedName == null )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return this;^116^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return false;^116^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^if  ( !definitionMap.get ( qualifiedName )  )  {^119^^^^^112^131^[REPLACE] if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return true;^120^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return false;^120^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^Node definitionParent = definitionMap.containsKey ( qualifiedName ) ;^123^^^^^112^131^[REPLACE] Node definitionParent = definitionMap.get ( qualifiedName ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^Node definition = value.getLastChild (  ) ;^124^^^^^112^131^[REPLACE] Node definition = definitionParent.getLastChild (  ) ;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^if  ( definition.getType (  )   ==  Token.FUNCTION )  {^126^^^^^112^131^[REPLACE] if  ( definition.getType (  )  != Token.FUNCTION )  {^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return true;^127^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return false;^127^^^^^112^131^[REPLACE] return null;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^return definitionParent;^130^^^^^112^131^[REPLACE] return definition;^[METHOD] getFunctionValue [TYPE] Node [PARAMETER] Node value [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node definition  definitionParent  value  [TYPE]  String qualifiedName 
[REPLACE]^sb.append ( ";\n" ) ;^138^^^^^137^159^[REPLACE] sb.append ( " = " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^sb.append ( ";\n" ) ;^139^^^^^137^159^[REPLACE] sb.append ( "function ( " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^Node parameters = parameters.getFirstChild (  ) .getNext (  ) ;^142^^^^^137^159^[REPLACE] Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^int i = 0 - 2;^144^^^^^137^159^[REPLACE] int i = 0;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^if  ( i  >=  0 )  {^149^^^^^137^159^[REPLACE] if  ( i > 0 )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^sb.append ( ";\n" ) ;^150^^^^^137^159^[REPLACE] sb.append ( ", " ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^for  ( Nodeparameters = parameters.getFirstChild (  ) ;^145^^^^^137^159^[REPLACE] for  ( Node current = parameters.getFirstChild (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[ADD]^^145^146^147^^^137^159^[ADD] for  ( Node current = parameters.getFirstChild (  ) ; current != null; current = current.getNext (  )  )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^if  ( i  <=  0 )  {^149^^^^^137^159^[REPLACE] if  ( i > 0 )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^current =  parameters.getNext (  )  )  {^147^^^^^137^159^[REPLACE] current = current.getNext (  )  )  {^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^for  ( Node current = definition.getFirstChild (  ) ;^145^^^^^137^159^[REPLACE] for  ( Node current = parameters.getFirstChild (  ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^sb.append ( ";\n" ) ;^158^^^^^137^159^[REPLACE] sb.append ( " )  {}" ) ;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] Export   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^private final  byte  symbolName;^166^^^^^^^[REPLACE] private final String symbolName;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] SymbolExport   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^private  Node value;^167^^^^^^^[REPLACE] private final Node value;^[METHOD] appendFunctionValue [TYPE] void [PARAMETER] Node definition [CLASS] SymbolExport   [TYPE]  boolean false  true  [TYPE]  Node current  definition  parameters  [TYPE]  int i 
[REPLACE]^this.symbolName =  qualifiedName;^170^^^^^169^178^[REPLACE] this.symbolName = symbolName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] SymbolExport   [TYPE]  Node value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^this.value =  null;^171^^^^^169^178^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] SymbolExport   [TYPE]  Node value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^Node functionValue = getFunctionValue ( value ) ;^173^^^^^169^178^[REPLACE] String qualifiedName = value.getQualifiedName (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] SymbolExport   [TYPE]  Node value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^if  ( qualifiedName == null )  {^175^^^^^169^178^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] <init> [TYPE] Node) [PARAMETER] String symbolName Node value [CLASS] SymbolExport   [TYPE]  Node value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^appendFunctionValue ( functionValue ) ;^187^^^^^186^196^[REPLACE] appendInferredPaths ( symbolName ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] SymbolExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^String qualifiedName = value.getQualifiedName (  ) ;^189^^^^^186^196^[REPLACE] Node functionValue = getFunctionValue ( value ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] SymbolExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^if  ( functionValue == true )  {^191^^^^^186^196^[REPLACE] if  ( functionValue != null )  {^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] SymbolExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^appendFunctionValue ( value ) ;^192^^^^^186^196^[REPLACE] appendFunctionValue ( functionValue ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] SymbolExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^String qualifiedName = value.getQualifiedName (  ) ;^195^^^^^186^196^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] SymbolExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^private  String exportPath;^203^^^^^^^[REPLACE] private final String exportPath;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^private final  boolean  symbolName;^204^^^^^^^[REPLACE] private final String symbolName;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String qualifiedName  symbolName  [TYPE]  boolean false  true 
[REPLACE]^this.exportPath =  symbolName;^208^^^^^207^211^[REPLACE] this.exportPath = exportPath;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] PropertyExport   [TYPE]  Node value  [TYPE]  String exportPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^this.symbolName =  exportPath;^209^^^^^207^211^[REPLACE] this.symbolName = symbolName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] PropertyExport   [TYPE]  Node value  [TYPE]  String exportPath  symbolName  [TYPE]  boolean false  true 
[ADD]^^209^^^^^207^211^[ADD] this.symbolName = symbolName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] PropertyExport   [TYPE]  Node value  [TYPE]  String exportPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^this.value =  null;^210^^^^^207^211^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] Node) [PARAMETER] String exportPath String symbolName Node value [CLASS] PropertyExport   [TYPE]  Node value  [TYPE]  String exportPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^List<String> pieces =   exportPath.split ( "\\." )  ;^217^^^^^214^237^[REPLACE] List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[ADD]^^217^^^^^214^237^[ADD] List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if  ( functionValue != null )  {^225^^^^^214^237^[REPLACE] if  ( mappedPaths.containsKey ( cPath )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[ADD]^String newPath = mappedPaths.get ( cPath ) ;newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^225^226^^228^229^214^237^[ADD] if  ( mappedPaths.containsKey ( cPath )  )  { String newPath = mappedPaths.get ( cPath ) ; if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if  ( i < pieces.size (  )  + 4 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^newPath  | = "."  |  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^newPath  || = "."  ||  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^return exportPath + "." + symbolName;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^String newPath = mappedPaths.get ( symbolName ) ;^226^^^^^214^237^[REPLACE] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if  ( i < pieces.size (  )  *  0.5  )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^newPath  > = "."  >  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^for  ( int i = pieces.size (  )  - 4; i > 0; i-- )  {^219^^^^^214^237^[REPLACE] for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[ADD]^^219^220^221^^^214^237^[ADD] for  ( int i = pieces.size (  ) ; i > 0; i-- )  {  String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if  ( i < pieces.size (  )  *  2 )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^newPath  != = "."  !=  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[ADD]^^226^^^^^214^237^[ADD] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^if  ( i < pieces.length (  )  )  {^228^^^^^214^237^[REPLACE] if  ( i < pieces.size (  )  )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^newPath  == = "."  ==  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^newPath  && = "."  &&  Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^[REPLACE] newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^return newPath + "." +newPath;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^String cPath =   "."   .join ( Iterables.limit ( pieces, i )  ) ;^221^^^^^214^237^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^String newPath = mappedPaths .containsKey ( true )  ;^226^^^^^214^237^[REPLACE] String newPath = mappedPaths.get ( cPath ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^return symbolName + "." + symbolName;^232^^^^^214^237^[REPLACE] return newPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^for  ( int i = true.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^[REPLACE] for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^String cPath = Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^221^^^^^214^237^[REPLACE] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[ADD]^^221^^^^^214^237^[ADD] String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^return newPath + "." + symbolName;^236^^^^^214^237^[REPLACE] return exportPath + "." + symbolName;^[METHOD] getExportedPath [TYPE] String [PARAMETER] [CLASS] PropertyExport   [TYPE]  List pieces  [TYPE]  String cPath  exportPath  newPath  symbolName  [TYPE]  boolean false  true  [TYPE]  int i  [TYPE]  Node value 
[REPLACE]^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^241^^^^^240^252^[REPLACE] String exportedPath = getExportedPath (  ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^appendInferredPaths ( symbolName ) ;^243^^^^^240^252^[REPLACE] appendInferredPaths ( exportedPath ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[ADD]^^243^^^^^240^252^[ADD] appendInferredPaths ( exportedPath ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^245^^^^^240^252^[REPLACE] Node functionValue = getFunctionValue ( value ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^if  ( functionValue ==value )  {^247^^^^^240^252^[REPLACE] if  ( functionValue != null )  {^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[ADD]^appendFunctionValue ( functionValue ) ;^247^248^249^^^240^252^[ADD] if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^appendFunctionValue ( value ) ;^248^^^^^240^252^[REPLACE] appendFunctionValue ( functionValue ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[ADD]^^248^^^^^240^252^[ADD] appendFunctionValue ( functionValue ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^251^^^^^240^252^[REPLACE] sb.append ( ";\n" ) ;^[METHOD] generateExterns [TYPE] void [PARAMETER] [CLASS] PropertyExport   [TYPE]  Node functionValue  value  [TYPE]  String cPath  exportPath  exportedPath  newPath  symbolName  [TYPE]  boolean false  true 
