[REPLACE]^static final String GET_CSS_NAME_FUNCTION ;^60^^^^^^^[REPLACE] static final String GET_CSS_NAME_FUNCTION = "goog.getCssName";^ [CLASS] ReplaceCssNames Traversal  
[REPLACE]^static  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^62^63^64^^^62^64^[REPLACE] static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^ [CLASS] ReplaceCssNames Traversal  
[REPLACE]^final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^66^67^68^69^^66^69^[REPLACE] static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^ [CLASS] ReplaceCssNames Traversal  
[REPLACE]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR ;^71^72^73^74^^71^75^[REPLACE] static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^ [CLASS] ReplaceCssNames Traversal  
[REPLACE]^static final DiagnosticType UNKNOWN_SYMBOL_WARNING ;^77^78^79^80^^77^80^[REPLACE] static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^ [CLASS] ReplaceCssNames Traversal  
[REPLACE]^private  AbstractCompiler compiler;^83^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] ReplaceCssNames Traversal  
[REPLACE]^private  Map<String, Integer> cssNames;^85^^^^^^^[REPLACE] private final Map<String, Integer> cssNames;^ [CLASS] ReplaceCssNames Traversal  
[REPLACE]^if  ( n.getType (  )  == Token.CALL || GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^113^162^[REPLACE] if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^114^115^116^117^^113^162^[ADD] if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  { int count = n.getChildCount (  ) ; Node first = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^if  ( first.getType (  )   !=  Token.STRING )  {^121^^^^^114^161^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first .getString (  )   )  )  ) ;^127^128^^^^121^129^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^121^129^[REPLACE] Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^first.getNext (  )  ;^128^^^^^121^129^[REPLACE] Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^processStringNode ( t, replacement ) ;^122^^^^^114^161^[REPLACE] processStringNode ( t, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^n .replaceChild ( n , second )  ;^123^^^^^114^161^[REPLACE] n.removeChild ( first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^parent.replaceChild ( second, first ) ;^124^^^^^114^161^[REPLACE] parent.replaceChild ( n, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler .report (  )  ;^125^^^^^114^161^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^if  (   Token.STRING )  {^138^^^^^114^161^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^138^139^140^141^^114^161^[ADD] if  ( first.getType (  )  == Token.STRING )  { compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^}  if  ( second.getType (  )   &&  Token.STRING )  {^143^^^^^114^161^[REPLACE] } else if  ( second.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  second.removeChild (  )  )  ) ;^146^147^^^^114^161^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  second.getString (  )  )  ) ;^146^147^^^^114^161^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, replacement.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^114^161^[REPLACE] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , replacement.getString (  )  )  ) ;^139^140^141^^^114^161^[REPLACE] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^n.getString (  )  ;^141^^^^^114^161^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^first.getString (  ) , replacement.getString (  )  )  ) ;^141^^^^^114^161^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^}  else {^143^^^^^114^161^[REPLACE] } else if  ( second.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^}   processStringNode ( t, second ) ;n.removeChild ( first ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^143^144^145^146^147^114^161^[ADD] else if  ( second.getType (  )  == Token.STRING )  { processStringNode ( t, second ) ; n.removeChild ( first ) ; Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second .getString (  )   )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getNext (  )  )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^Token.name ( second.getNext (  )  )  )  ) ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^153^^^^^143^154^[ADD] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, replacement, Node.newString ( "-"  second.getString (  )  )  ) ;^146^147^^^^114^161^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^int count = second.getChildCount (  ) ;^116^^^^^114^161^[REPLACE] int count = n.getChildCount (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^117^^^^^114^161^[ADD] Node first = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^136^^^^^114^161^[ADD] Node second = first.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^} else if   (  second.getType  (    )   == Token.STRING  )   {  ;^121^^^^^113^162^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^processStringNode ( t, first ) ;n.removeChild ( first ) ;parent.replaceChild ( n, first ) ;compiler.reportCodeChange (  ) ;^121^122^123^124^125^113^162^[ADD] if  ( first.getType (  )  == Token.STRING )  { processStringNode ( t, first ) ; n.removeChild ( first ) ; parent.replaceChild ( n, first ) ; compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError .make ( t , first , INVALID_NUM_ARGUMENTS_ERROR )   )  ) ;^127^128^^^^121^129^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError .make ( t , parent , STRING_LITERAL_EXPECTED_ERROR )   )  ) ;^127^128^^^^121^129^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^name ( second.getType (  )  )  ;^128^^^^^121^129^[REPLACE] Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^processStringNode ( t, replacement ) ;^122^^^^^113^162^[REPLACE] processStringNode ( t, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^cssNames.get ( parts[i] )  ;^123^^^^^113^162^[REPLACE] n.removeChild ( first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^123^^^^^113^162^[ADD] n.removeChild ( first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^parent.replaceChild ( second, first ) ;^124^^^^^113^162^[REPLACE] parent.replaceChild ( n, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report (  ) ;^125^^^^^113^162^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^125^^^^^113^162^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^if  ( first.getType (  )   !=  Token.STRING )  {^138^^^^^113^162^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^}  else {^143^^^^^113^162^[REPLACE] } else if  ( second.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^}   processStringNode ( t, second ) ;n.removeChild ( first ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^143^144^145^146^147^113^162^[ADD] else if  ( second.getType (  )  == Token.STRING )  { processStringNode ( t, second ) ; n.removeChild ( first ) ; Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler .reportCodeChange (  )   )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^name ( first.getType (  )  )  ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^146^147^^^^113^162^[ADD] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , replacement.getString (  )  )  ) ;^139^140^141^^^113^162^[REPLACE] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^first .setString (  )  , second^141^^^^^113^162^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^first.setString (  ) , replacement.getString (  )  )  ) ;^141^^^^^113^162^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^152^153^^^^143^154^[ADD] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^int count = second.getChildCount (  ) ;^116^^^^^113^162^[REPLACE] int count = n.getChildCount (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^117^^^^^113^162^[ADD] Node first = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[ADD]^^136^^^^^113^162^[ADD] Node second = first.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, first, Node.getString ( "-"  second.getString (  )  )  ) ;^146^147^^^^113^162^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReplaceCssNames Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  String GET_CSS_NAME_FUNCTION  [TYPE]  Map cssNames  [TYPE]  int count 
[REPLACE]^if  ( symbolMap == false || cssNames != false )  {^176^^^^^175^201^[REPLACE] if  ( symbolMap != null || cssNames != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^String[] parts = n.getString (  ) .split ( "-" ) ;^176^177^178^179^180^175^201^[ADD] if  ( symbolMap != null || cssNames != null )  { String[] parts = n.getString (  ) .split ( "-" ) ; for  ( int i = 0; i < parts.length; i++ )  { if  ( cssNames != null )  { Integer count = cssNames.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( cssNames == null )  {^179^^^^^175^201^[REPLACE] if  ( cssNames != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( count != true )  {^181^^^^^175^201^[REPLACE] if  ( count == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 0 << 4 ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 3 ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^Node replacement = new Node ( ADD, first, newString (  ( "-" +  ( second.getString (  )  )  )  )  )  ;^180^^^^^175^201^[REPLACE] Integer count = cssNames.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( count != null )  {^181^^^^^175^201^[REPLACE] if  ( count == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^^182^^^^^175^201^[ADD] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( symbolMap == null )  {^186^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^String replacement = symbolMap.get ( parts[i] ) ;^186^187^188^^190^175^201^[ADD] if  ( symbolMap != null )  { String replacement = symbolMap.get ( parts[i] ) ; if  ( replacement == null )  { compiler.report ( JSError.make (^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( replacement != this )  {^188^^^^^175^201^[REPLACE] if  ( replacement == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^^188^189^190^191^192^175^201^[ADD] if  ( replacement == null )  {  compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^return;  ;^192^^^^^175^201^[REPLACE] return;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^parts[i]  =  parts[i] ;^194^^^^^175^201^[REPLACE] parts[i] = replacement;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^Node replacement = new Node ( ADD, first, newString (  ( "-" +  ( second.getString (  )  )  )  )  )  ;^187^^^^^175^201^[REPLACE] String replacement = symbolMap.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( replacement !=GET_CSS_NAME_FUNCTION )  {^188^^^^^175^201^[REPLACE] if  ( replacement == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( symbolMap == true )  {^197^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^197^198^199^^^175^201^[ADD] if  ( symbolMap != null )  { n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ; }^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^on ( "-" ) .join ( parts )  ;^198^^^^^175^201^[REPLACE] n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^on ( "-" )  ;^198^^^^^175^201^[REPLACE] n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^^198^^^^^175^201^[ADD] n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 0 - 3 ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^parts[i] ;^194^^^^^175^201^[REPLACE] parts[i] = replacement;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^^177^^^^^175^201^[ADD] String[] parts = n.getString (  ) .split ( "-" ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[ADD]^^178^179^180^181^182^175^201^[ADD] for  ( int i = 0; i < parts.length; i++ )  { if  ( cssNames != null )  { Integer count = cssNames.get ( parts[i] ) ; if  ( count == null )  { count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^String replacement = symbolMap .put ( 1 , false )  ;^187^^^^^175^201^[REPLACE] String replacement = symbolMap.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( count != this )  {^181^^^^^175^201^[REPLACE] if  ( count == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 1 ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 0L ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( symbolMap == this  )  {^186^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( replacement != null )  {^188^^^^^175^201^[REPLACE] if  ( replacement == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( GET_CSS_NAME_FUNCTION != null )  {^188^^^^^175^201^[REPLACE] if  ( replacement == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( symbolMap == null )  {^197^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^String[] parts = n.getString (  ) .join ( "-" ) ;^177^^^^^175^201^[REPLACE] String[] parts = n.getString (  ) .split ( "-" ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < parts.length; i++ )  {^178^^^^^175^201^[REPLACE] for  ( int i = 0; i < parts.length; i++ )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^String replacement = symbolMap .put ( 0 , this )  ;^187^^^^^175^201^[REPLACE] String replacement = symbolMap.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ReplaceCssNames Traversal   [TYPE]  Integer count  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CssRenamingMap symbolMap  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  [TYPE]  Node n  [TYPE]  String GET_CSS_NAME_FUNCTION  replacement  [TYPE]  String[] parts  [TYPE]  Map cssNames  [TYPE]  int i 
[REPLACE]^if  ( n.removeChild (  )  == Token.CALL || GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^113^162^[REPLACE] if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^if  (   Token.STRING )  {^121^^^^^114^161^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^121^122^123^124^125^114^161^[ADD] if  ( first.getType (  )  == Token.STRING )  { processStringNode ( t, first ) ; n.removeChild ( first ) ; parent.replaceChild ( n, first ) ; compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^121^129^[REPLACE] Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^first.getNext (  )  ;^128^^^^^121^129^[REPLACE] Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REMOVE]^second.getType (  )  ;^128^^^^^121^129^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^processStringNode ( t, second )  ;^122^^^^^114^161^[REPLACE] processStringNode ( t, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^n.removeChild ( replacement ) ;^123^^^^^114^161^[REPLACE] n.removeChild ( first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^parent.replaceChild ( n, replacement ) ;^124^^^^^114^161^[REPLACE] parent.replaceChild ( n, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REMOVE]^n.removeChild ( first )  ;^124^^^^^114^161^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report (  ) ;^125^^^^^114^161^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^if  ( first.getType (  )   ) {^138^^^^^114^161^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^}  if  ( second.getType (  )   ||  Token.STRING )  {^143^^^^^114^161^[REPLACE] } else if  ( second.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^}   n.removeChild ( first ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^143^144^145^146^147^114^161^[ADD] else if  ( second.getType (  )  == Token.STRING )  { processStringNode ( t, second ) ; n.removeChild ( first ) ; Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getNext (  )  )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^( second.getType (  )  )  ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^146^147^^^^114^161^[ADD] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  second.getString (  )  )  ) ;^146^147^^^^114^161^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.setString (  ) , replacement.getString (  )  )  ) ;^139^140^141^^^114^161^[REPLACE] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^139^140^141^^^114^161^[ADD] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^114^161^[REPLACE] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^first .setString (  )  , second^141^^^^^114^161^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^second.getType (  )  ;^141^^^^^114^161^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^} else if  ( second.getType (  )   !=  Token.STRING )  {^143^^^^^114^161^[REPLACE] } else if  ( second.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler .reportCodeChange (  )   )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^152^153^^^^143^154^[ADD] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second .getString (  )   )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^name ( first.getType (  )  )  ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^153^^^^^143^154^[ADD] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Token.name ( replacement .getString (  )   )  )  ) ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^int count = second.getChildCount (  ) ;^116^^^^^114^161^[REPLACE] int count = n.getChildCount (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Node first = second.getFirstChild (  ) .getNext (  ) ;^117^^^^^114^161^[REPLACE] Node first = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^136^^^^^114^161^[ADD] Node second = first.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^} else if   (  second.getType  (    )   == Token.STRING  )   {  ;^121^^^^^113^162^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REMOVE]^if  (  ( first.getType (  )  )  ==  ( STRING )  )  {     compiler.report ( make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ; }else     if  (  ( second.getType (  )  )  ==  ( STRING )  )  {         processStringNode ( t, second ) ;         n.removeChild ( first ) ;         Node replacement = new Node ( ADD, first, newString (  ( "-" +  ( second.getString (  )  )  )  )  ) ;         parent.replaceChild ( n, replacement ) ;         compiler.reportCodeChange (  ) ;     }else {         compiler.report ( make ( t, n, STRING_LITERAL_EXPECTED_ERROR, name ( second.getType (  )  )  )  ) ;     }^121^^^^^113^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^127^128^^^^121^129^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^127^128^^^^121^129^[ADD] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Token.name ( replacement.getNext (  )  )  )  ) ;^128^^^^^121^129^[REPLACE] Token.name ( first.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^processStringNode ( t, replacement ) ;^122^^^^^113^162^[REPLACE] processStringNode ( t, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^n .replaceChild ( replacement , first )  ;^123^^^^^113^162^[REPLACE] n.removeChild ( first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^parent.replaceChild ( n, replacement )  ;^124^^^^^113^162^[REPLACE] parent.replaceChild ( n, first ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler .report (  )  ;^125^^^^^113^162^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^if  ( first.getType (  )   !=  Token.STRING )  {^138^^^^^113^162^[REPLACE] if  ( first.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^138^139^140^141^^113^162^[ADD] if  ( first.getType (  )  == Token.STRING )  { compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^}  else {^143^^^^^113^162^[REPLACE] } else if  ( second.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^}   processStringNode ( t, second ) ;n.removeChild ( first ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^143^144^145^146^147^113^162^[ADD] else if  ( second.getType (  )  == Token.STRING )  { processStringNode ( t, second ) ; n.removeChild ( first ) ; Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^[REPLACE] compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Token.name ( replacement.getNext (  )  )  )  ) ;^153^^^^^143^154^[REPLACE] Token.name ( second.getType (  )  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" this (  )  )  ) ;^146^147^^^^113^162^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  second.getString (  )  )  ) ;^146^147^^^^113^162^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, replacement.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^113^162^[REPLACE] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.setString (  ) , second.getString (  )  )  ) ;^139^140^141^^^113^162^[REPLACE] compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^n.getString (  )  ;^141^^^^^113^162^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^first.getString (  ) , replacement.getString (  )  )  ) ;^141^^^^^113^162^[REPLACE] first.getString (  ) , second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REMOVE]^cssNames.get ( parts[i] )  ;^141^^^^^113^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^}  if  ( second.getType (  )   ||  Token.STRING )  {^143^^^^^113^162^[REPLACE] } else if  ( second.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Node replacement = new Node ( Token.ADD, replacement, Node.getString ( "-"  second.getString (  )  )  ) ;^146^147^^^^113^162^[REPLACE] Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[ADD]^^116^^^^^113^162^[ADD] int count = n.getChildCount (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Node second = first.getNext (  )  ;^117^^^^^113^162^[REPLACE] Node first = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^Node second = first .getQualifiedName (  )  ;^136^^^^^113^162^[REPLACE] Node second = first.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node first  n  parent  replacement  second  [TYPE]  int count 
[REPLACE]^if  ( symbolMap == this ) {^176^^^^^175^201^[REPLACE] if  ( symbolMap != null || cssNames != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( this == false )  {^179^^^^^175^201^[REPLACE] if  ( cssNames != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( count != this )  {^181^^^^^175^201^[REPLACE] if  ( count == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^182^^^^^175^201^[ADD] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 3 ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^Integer count = cssNames .put ( null , null )  ;^180^^^^^175^201^[REPLACE] Integer count = cssNames.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( symbolMap == null )  {^186^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( replacement != null )  {^188^^^^^175^201^[REPLACE] if  ( replacement == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^188^189^190^191^192^175^201^[ADD] if  ( replacement == null )  {  compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^return;  ;^192^^^^^175^201^[REPLACE] return;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^parts[i]  = null ;^194^^^^^175^201^[REPLACE] parts[i] = replacement;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^String replacement = symbolMap .put ( null , 1 )  ;^187^^^^^175^201^[REPLACE] String replacement = symbolMap.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( replacement != this )  {^188^^^^^175^201^[REPLACE] if  ( replacement == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( false == true )  {^197^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^on ( "-" ) .join ( parts )  ;^198^^^^^175^201^[REPLACE] n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^198^^^^^175^201^[ADD] n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^on ( "-" )  ;^198^^^^^175^201^[REPLACE] n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^194^^^^^175^201^[ADD] parts[i] = replacement;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^String[] parts = n.getString (  ) .join ( "-" ) ;^177^^^^^175^201^[REPLACE] String[] parts = n.getString (  ) .split ( "-" ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < parts.length; i++ )  {^178^^^^^175^201^[REPLACE] for  ( int i = 0; i < parts.length; i++ )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^Node replacement = new Node ( ADD, first, newString (  ( "-" +  ( second.getString (  )  )  )  )  )  ;^180^^^^^175^201^[REPLACE] Integer count = cssNames.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^Node replacement = new Node ( ADD, first, newString (  ( "-" +  ( second.getString (  )  )  )  )  )  ;^187^^^^^175^201^[REPLACE] String replacement = symbolMap.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( cssNames == null )  {^179^^^^^175^201^[REPLACE] if  ( cssNames != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^179^180^181^182^183^175^201^[ADD] if  ( cssNames != null )  { Integer count = cssNames.get ( parts[i] ) ; if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( count != null )  {^181^^^^^175^201^[REPLACE] if  ( count == null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^181^182^183^^^175^201^[ADD] if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 1 ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( symbolMap == this  )  {^186^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^186^187^188^^190^175^201^[ADD] if  ( symbolMap != null )  { String replacement = symbolMap.get ( parts[i] ) ; if  ( replacement == null )  { compiler.report ( JSError.make (^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^String replacement = symbolMap .put ( null , null )  ;^187^^^^^175^201^[REPLACE] String replacement = symbolMap.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^if  ( symbolMap == null )  {^197^^^^^175^201^[REPLACE] if  ( symbolMap != null )  {^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^n.removeChild ( Joiner.on ( "-" ) .join ( parts )  ) ;^198^^^^^175^201^[REPLACE] n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^count = Integer.valueOf ( 0 * 1 ) ;^182^^^^^175^201^[REPLACE] count = Integer.valueOf ( 0 ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[REPLACE]^String[] parts = n.setString (  ) .split ( "-" ) ;^177^^^^^175^201^[REPLACE] String[] parts = n.getString (  ) .split ( "-" ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
[ADD]^^187^^^^^175^201^[ADD] String replacement = symbolMap.get ( parts[i] ) ;^[METHOD] processStringNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  Integer count  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String[] parts  [TYPE]  String replacement  [TYPE]  int i 
