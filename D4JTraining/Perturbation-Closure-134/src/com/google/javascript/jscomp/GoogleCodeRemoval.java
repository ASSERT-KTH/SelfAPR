[REPLACE]^static final  char  ABSTRACT_METHOD_NAME = "goog.abstractMethod";^45^^^^^^^[REPLACE] static final String ABSTRACT_METHOD_NAME = "goog.abstractMethod";^ [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  
[REPLACE]^private final List<RemovableAssignment> abstractMethodAssignmentNodes  = null ;^51^52^^^^51^52^[REPLACE] private final List<RemovableAssignment> abstractMethodAssignmentNodes = Lists.newArrayList (  ) ;^ [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  
[REPLACE]^Node node;^62^^^^^^^[REPLACE] final Node node;^ [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  
[REPLACE]^Node parent;^67^^^^^^^[REPLACE] final Node parent;^ [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  
[REPLACE]^final List<Node> assignAncestors ;^72^^^^^^^[REPLACE] final List<Node> assignAncestors = Lists.newArrayList (  ) ;^ [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  
[REPLACE]^Node lastAncestor;^77^^^^^^^[REPLACE] final Node lastAncestor;^ [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  
[REPLACE]^this.node =  node;^88^^^^^86^98^[REPLACE] this.node = nameNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^this.parent =  parent;^89^^^^^86^98^[REPLACE] this.parent = assignNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^Node ancestor = parent;^91^^^^^86^98^[REPLACE] Node ancestor = assignNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^lastAncestor = ancestor.getParent (  ) ; ;^93^^^^^86^98^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^ancestor = ancestor.getParent (  ) ; ;^97^^^^^86^98^[REPLACE] lastAncestor = ancestor.getParent (  ) ;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^this.compiler =  null;^149^^^^^148^150^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^Node rhs = node .getParent (  )  ;^104^^^^^103^116^[REPLACE] Node rhs = node.getNext (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^Node ancestor = assignNode;^105^^^^^103^116^[REPLACE] Node last = parent;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^if  (   ancestor    )  {^107^^^^^103^116^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^rhs.getParent (  ) ;^110^^^^^103^116^[REPLACE] rhs.detachFromParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^ancestor.replaceChild ( last, parent ) ;^111^^^^^103^116^[REPLACE] ancestor.replaceChild ( last, rhs ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^lastAncestor.removeChild ( rhs ) ;^108^^^^^103^116^[REPLACE] lastAncestor.removeChild ( ancestor ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^last =  parent;^113^^^^^103^116^[REPLACE] last = ancestor;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[ADD]^^113^^^^^103^116^[ADD] last = ancestor;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^Node ancestor = assignNode;^106^^^^^103^116^[REPLACE] for  ( Node ancestor : assignAncestors )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^assignment.remove (  ) ;^115^^^^^103^116^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs 
[REPLACE]^if  ( n.getType (  )   ||  Token.ASSIGN )  {^127^^^^^126^138^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[ADD]^^127^128^129^^131^126^138^[ADD] if  ( n.getType (  )  == Token.ASSIGN )  { Node nameNode = n.getFirstChild (  ) ; Node valueNode = n.getLastChild (  ) ; if  ( nameNode.isQualifiedName (  )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^if  ( nameNode.isQualifiedName (  )  ) {^131^132^133^^^126^138^[REPLACE] if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^abstractMethodAssignmentNodes.add ( valueNodeew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^[REPLACE] abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^n .getLastChild (  )  , n, t )  ) ;^135^^^^^126^138^[REPLACE] n.getFirstChild (  ) , n, t )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^Node valueNodeameNode = n.getFirstChild (  ) ;^128^^^^^126^138^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^Node valueNode = valueNode.getLastChild (  ) ;^129^^^^^126^138^[REPLACE] Node valueNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     Node nameNode = n.getFirstChild (  ) ;     Node valueNode = n.getLastChild (  ) ;     if  (  (  ( nameNode.isQualifiedName (  )  )  &&  ( valueNode.isQualifiedName (  )  )  )  &&  ( equals ( valueNode.getQualifiedName (  )  )  )  )  {         abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;     } }^131^^^^^126^138^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^n.getFirstChild (  ) , valueNode, t )  ) ;^135^^^^^126^138^[REPLACE] n.getFirstChild (  ) , n, t )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[ADD]^^128^^^^^126^138^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^Node valueNode = parent.getLastChild (  ) ;^129^^^^^126^138^[REPLACE] Node valueNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[ADD]^^129^^^^^126^138^[ADD] Node valueNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode 
[REPLACE]^NodeTraversal.traverse ( compiler, rhs, new FindAbstractMethods (  )  ) ;^156^^^^^155^161^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  RemovableAssignment assignment  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode 
[REPLACE]^for  ( Node ancestor : assignAncestors )  { if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^158^^^^^155^161^[REPLACE] for  ( RemovableAssignment assignment : abstractMethodAssignmentNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  RemovableAssignment assignment  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode 
[REPLACE]^Node parent;^67^^^^^^^[REPLACE] final Node parent;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemovableAssignment   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  RemovableAssignment assignment  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode 
[REPLACE]^final List<Node> assignAncestors ;^72^^^^^^^[REPLACE] final List<Node> assignAncestors = Lists.newArrayList (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemovableAssignment   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  RemovableAssignment assignment  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode 
[REPLACE]^Node lastAncestor;^77^^^^^^^[REPLACE] final Node lastAncestor;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemovableAssignment   [TYPE]  AbstractCompiler compiler  [TYPE]  List abstractMethodAssignmentNodes  assignAncestors  [TYPE]  RemovableAssignment assignment  [TYPE]  String ABSTRACT_METHOD_NAME  [TYPE]  boolean false  true  [TYPE]  Node ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode 
[REPLACE]^this.node =  node;^88^^^^^86^98^[REPLACE] this.node = nameNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[ADD]^^88^^^^^86^98^[ADD] this.node = nameNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^this.parent =  parent;^89^^^^^86^98^[REPLACE] this.parent = assignNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[ADD]^^89^^^^^86^98^[ADD] this.parent = assignNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^Node ancestor = node;^91^^^^^86^98^[REPLACE] Node ancestor = assignNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[ADD]^^91^^^^^86^98^[ADD] Node ancestor = assignNode;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^lastAncestor = ancestor.getParent (  ) ; ;^93^^^^^86^98^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[ADD]^^93^94^^^^86^98^[ADD] ancestor = ancestor.getParent (  ) ; assignAncestors.add ( ancestor ) ;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^ancestor = ancestor.getParent (  ) ; ;^97^^^^^86^98^[REPLACE] lastAncestor = ancestor.getParent (  ) ;^[METHOD] <init> [TYPE] NodeTraversal) [PARAMETER] Node nameNode Node assignNode NodeTraversal traversal [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node ancestor  assignNode  lastAncestor  nameNode  node  parent 
[REPLACE]^Node rhs = node.getParent (  ) ;^104^^^^^103^116^[REPLACE] Node rhs = node.getNext (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^Node ancestor = assignNode;^105^^^^^103^116^[REPLACE] Node last = parent;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[ADD]^^105^^^^^103^116^[ADD] Node last = parent;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^if  (   ancestor    )  {^107^^^^^103^116^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^rhs.getParent (  ) ;^110^^^^^103^116^[REPLACE] rhs.detachFromParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^ancestor .removeChild ( nameNode )  ;^111^^^^^103^116^[REPLACE] ancestor.replaceChild ( last, rhs ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[ADD]^^111^^^^^103^116^[ADD] ancestor.replaceChild ( last, rhs ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^lastAncestor.removeChild ( parent ) ;^108^^^^^103^116^[REPLACE] lastAncestor.removeChild ( ancestor ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[ADD]^^108^^^^^103^116^[ADD] lastAncestor.removeChild ( ancestor ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^last =  rhs;^113^^^^^103^116^[REPLACE] last = ancestor;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^Node ancestor = assignNode;^106^^^^^103^116^[REPLACE] for  ( Node ancestor : assignAncestors )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^ancestor.replaceChild ( last, rhs ) ;^115^^^^^103^116^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] RemovableAssignment   [TYPE]  List assignAncestors  [TYPE]  Node ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  [TYPE]  boolean false  true 
[REPLACE]^if  ( n.getType (  )   !=  Token.ASSIGN )  {^127^^^^^126^138^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[ADD]^Node nameNode = n.getFirstChild (  ) ;Node valueNode = n.getLastChild (  ) ;^127^128^129^^131^126^138^[ADD] if  ( n.getType (  )  == Token.ASSIGN )  { Node nameNode = n.getFirstChild (  ) ; Node valueNode = n.getLastChild (  ) ; if  ( nameNode.isQualifiedName (  )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^if  (  valueNode.isQualifiedName (  )  || ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^[REPLACE] if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getLastChild (  ) , n, t )  ) ;^134^135^^^^126^138^[REPLACE] abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^n .getLastChild (  )  , valueNode, t )  ) ;^135^^^^^126^138^[REPLACE] n.getFirstChild (  ) , n, t )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^Node valueNodeameNode = n.getFirstChild (  ) ;^128^^^^^126^138^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^Node valueNode = n.getFirstChild (  ) ;^129^^^^^126^138^[REPLACE] Node valueNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^if  ( nameNode.isQualifiedName (  )  ) {^131^132^133^^^126^138^[REPLACE] if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^n.getFirstChild (  ) , valueNode, t )  ) ;^135^^^^^126^138^[REPLACE] n.getFirstChild (  ) , n, t )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[ADD]^^128^^^^^126^138^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
[REPLACE]^Node valueNode = valueNode.getLastChild (  ) ;^129^^^^^126^138^[REPLACE] Node valueNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAbstractMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  valueNode 
