[REPLACE]^private  Compiler compiler;^33^^^^^^^[REPLACE] private final Compiler compiler;^ [CLASS] RecordFunctionInformation 1  
[REPLACE]^newBuilder (  ) .setName ( name ) .setCompiledSource ( source )  ;^63^^^^^62^78^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^JSModuleGraph graph = compiler.setModuleName (  ) ;^65^^^^^62^78^[REPLACE] JSModuleGraph graph = compiler.getModuleGraph (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( graph != null )  {^66^^^^^62^78^[REPLACE] if  ( graph == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[ADD]^^66^67^68^^^62^78^[ADD] if  ( graph == null )  { addModuleInformation ( null ) ; } else {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^return o1.getName  (    )  .compareTo  (  o2.getName  (    )    )  ;  ;^72^^^^^66^77^[REPLACE] return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^String source  ;^70^^^^^66^77^[REPLACE] for  ( JSModule m : Sets.newTreeSet ( new Comparator<JSModule> (  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^addModuleInformation ( true ) ;^67^^^^^62^78^[REPLACE] addModuleInformation ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[ADD]^^67^68^^70^^62^78^[ADD] addModuleInformation ( null ) ; } else { for  ( JSModule m : Sets.newTreeSet ( new Comparator<JSModule> (  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^return o1.getName  (    )  .compareTo  (  o2.getName  (    )    )  ;  ;^72^^^^^68^77^[REPLACE] return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^String source  ;^70^^^^^68^77^[REPLACE] for  ( JSModule m : Sets.newTreeSet ( new Comparator<JSModule> (  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  Builder mapBuilder  [TYPE]  Node externs  root  [TYPE]  JSModule m  o1  o2  [TYPE]  JSModuleGraph graph  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( n.getType (  )   ==  Token.FUNCTION )  {^82^^^^^81^102^[REPLACE] if  ( n.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^return;  ;^83^^^^^81^102^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[ADD]^^86^^^^^81^102^[ADD] int id = functionNames.getFunctionId ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( id  ==  0 )  {^87^^^^^81^102^[REPLACE] if  ( id < 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^return;  ;^89^^^^^81^102^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^String compiledSource = compiler.toSource ( parent ) ;^92^^^^^81^102^[REPLACE] String compiledSource = compiler.toSource ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^JSModuleGraph graph = compiler.getModuleGraph (  )  ;^93^^^^^81^102^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( parent.getLineno (  )  )^94^95^96^97^^81^102^[REPLACE] mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[ADD]^^94^95^96^97^98^81^102^[ADD] mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setSize ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^94^95^96^97^^81^102^[REPLACE] mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^.setSourceName ( t.getModule (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  )^96^97^98^99^^81^102^[REPLACE] .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^.setLineNumber ( parent.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  )^97^98^99^100^^81^102^[REPLACE] .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
[REPLACE]^.setName ( functionNames .getFunctionId ( parent )   ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^100^101^^^^81^102^[REPLACE] .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RecordFunctionInformation 1   [TYPE]  Compiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Builder mapBuilder  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  String compiledSource  [TYPE]  int id  [TYPE]  FunctionNames functionNames 
