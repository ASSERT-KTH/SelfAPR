[REPLACE]^private  AbstractCompiler compiler;^41^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] ObjectPropertyStringPostprocess Callback  
[REPLACE]^this.compiler =  null;^44^^^^^43^45^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[REPLACE]^Node.newString ( secondArgument.getString (  )  )  ) ;^48^^^^^47^49^[REPLACE] NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^if  ( secondArgument.removeChild (  )   ==  Token.NEW )  {^53^^^^^52^91^[REPLACE] if  ( n.getType (  )  != Token.NEW )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node objectName = secondArgument.getFirstChild (  ) ;^57^^^^^52^91^[REPLACE] Node objectName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( parent.getQualifiedName (  )  )  )  {^59^60^^^^52^91^[REPLACE] if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^59^60^61^62^^52^91^[ADD] if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node firstArgument = objectName .getType (  )  ;^64^^^^^52^91^[REPLACE] Node firstArgument = objectName.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node secondArgument = secondArgument.getNext (  ) ;^65^^^^^52^91^[REPLACE] Node secondArgument = firstArgument.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^int parentType = secondArgument.getNext (  ) ;^66^^^^^52^91^[REPLACE] int secondArgumentType = secondArgument.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( secondArgumentType  &&  Token.GETPROP )  {^67^^^^^52^91^[REPLACE] if  ( secondArgumentType == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^}  else {^75^^^^^52^91^[REPLACE] } else if  ( secondArgumentType == Token.GETELEM )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[ADD]^}   Node newFirstArgument = secondArgument.getFirstChild (  ) ;secondArgument.removeChild ( newFirstArgument ) ;^75^76^^78^79^52^91^[ADD] else if  ( secondArgumentType == Token.GETELEM )  {  Node newFirstArgument = secondArgument.getFirstChild (  ) ; secondArgument.removeChild ( newFirstArgument ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^[REPLACE] n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^87^88^^^^75^89^[ADD] n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^75^89^[REPLACE] Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newFirstArgument = newSecondArgument.getLastChild (  ) ;^78^^^^^52^91^[REPLACE] Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newSecondArgument = parent.getFirstChild (  ) ;^80^^^^^52^91^[REPLACE] Node newSecondArgument = secondArgument.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newFirstArgument = secondArgument.getLastChild (  ) ;^78^^^^^52^91^[REPLACE] Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newSecondArgument = objectName.getLastChild (  ) ;^80^^^^^52^91^[REPLACE] Node newSecondArgument = secondArgument.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newChild = parent.getFirstChild (  ) ;^70^^^^^52^91^[REPLACE] Node newChild = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^70^71^^^^52^91^[ADD] Node newChild = secondArgument.getFirstChild (  ) ; secondArgument.removeChild ( newChild ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^n.replaceChild ( secondArgument, Node.removeChild ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^[REPLACE] n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^88^^^^^75^89^[ADD] Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newSecondArgument = parent.getLastChild (  ) ;^80^^^^^52^91^[REPLACE] Node newSecondArgument = secondArgument.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node firstArgument = objectName.getNext (  ) ;^90^^^^^52^91^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPostprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int secondArgumentType  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( n.getType (  )   ==  Token.NEW )  {^53^^^^^52^91^[REPLACE] if  ( n.getType (  )  != Token.NEW )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[ADD]^return;^53^54^55^^^52^91^[ADD] if  ( n.getType (  )  != Token.NEW )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node objectName = secondArgument.getFirstChild (  ) ;^57^^^^^52^91^[REPLACE] Node objectName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[ADD]^^57^^^^^52^91^[ADD] Node objectName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( parent.getQualifiedName (  )  )  )  {^59^60^^^^52^91^[REPLACE] if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[ADD]^^59^60^61^62^^52^91^[ADD] if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node firstArgument = secondArgument.getNext (  ) ;^64^^^^^52^91^[REPLACE] Node firstArgument = objectName.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node secondArgument = secondArgument.getType (  ) ;^65^^^^^52^91^[REPLACE] Node secondArgument = firstArgument.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[ADD]^^65^^^^^52^91^[ADD] Node secondArgument = firstArgument.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^int parentType = secondArgument.getNext (  ) ;^66^^^^^52^91^[REPLACE] int secondArgumentType = secondArgument.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[ADD]^^66^^^^^52^91^[ADD] int secondArgumentType = secondArgument.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^if  ( secondArgumentType  &&  Token.GETPROP )  {^67^^^^^52^91^[REPLACE] if  ( secondArgumentType == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^}  if  ( secondArgumentType  !=  Token.GETELEM )  {^75^^^^^52^91^[REPLACE] } else if  ( secondArgumentType == Token.GETELEM )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^[REPLACE] n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[ADD]^^87^88^^^^75^89^[ADD] n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node.newString ( parent.newString (  )  )  ) ;^88^^^^^75^89^[REPLACE] Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node.newString ( objectName.newString (  )  )  ) ;^88^^^^^75^89^[REPLACE] Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newFirstArgument = parent.getFirstChild (  ) ;^78^^^^^52^91^[REPLACE] Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newSecondArgument = parent.getFirstChild (  ) ;^80^^^^^52^91^[REPLACE] Node newSecondArgument = secondArgument.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newFirstArgument = newSecondArgument.getFirstChild (  ) ;^78^^^^^52^91^[REPLACE] Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[ADD]^^78^^^^^52^91^[ADD] Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newSecondArgument = secondArgument.getFirstChild (  ) ;^80^^^^^52^91^[REPLACE] Node newSecondArgument = secondArgument.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newChild = parent.getFirstChild (  ) ;^70^^^^^52^91^[REPLACE] Node newChild = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^} else if  ( secondArgumentType  ||  Token.GETELEM )  {^75^^^^^52^91^[REPLACE] } else if  ( secondArgumentType == Token.GETELEM )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^75^89^[REPLACE] Node.newString ( secondArgument.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newFirstArgument = secondArgument .getLastChild (  )  ;^78^^^^^52^91^[REPLACE] Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newSecondArgument = parent.getLastChild (  ) ;^80^^^^^52^91^[REPLACE] Node newSecondArgument = secondArgument.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node newChild = secondArgument.getLastChild (  ) ;^70^^^^^52^91^[REPLACE] Node newChild = secondArgument.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
[REPLACE]^Node firstArgument = objectName.getNext (  ) ;^90^^^^^52^91^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  [TYPE]  int secondArgumentType 
