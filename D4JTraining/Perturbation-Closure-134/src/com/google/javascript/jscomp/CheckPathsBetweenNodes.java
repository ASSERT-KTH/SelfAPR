[REPLACE]^private static final Annotation BACK_EDGE  = null ;^56^^^^^^^[REPLACE] private static final Annotation BACK_EDGE = new Annotation (  )  {};^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^private static  Annotation WHITE = null;^58^^^^^^^[REPLACE] private static final Annotation WHITE = null;^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^private  final Annotation GRAY = new Annotation (  )  {};^60^^^^^^^[REPLACE] private static final Annotation GRAY = new Annotation (  )  {};^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^private static final Annotation BLACK  = null ;^62^^^^^^^[REPLACE] private static final Annotation BLACK = new Annotation (  )  {};^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^this.edgePredicate = edgePredicate; ;^82^^^^^79^93^[REPLACE] this.nodePredicate = nodePredicate;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[ADD]^^82^^^^^79^93^[ADD] this.nodePredicate = nodePredicate;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^this.nodePredicate = nodePredicate; ;^83^^^^^79^93^[REPLACE] this.edgePredicate = edgePredicate;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^graph.pushEdgeAnnotations (  ) ;^85^^^^^79^93^[REPLACE] graph.pushNodeAnnotations (  ) ;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^graph.pushNodeAnnotations (  ) ;^86^^^^^79^93^[REPLACE] graph.pushEdgeAnnotations (  ) ;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^discoverBackEdges ( null ) ;^88^^^^^79^93^[REPLACE] discoverBackEdges ( a ) ;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[ADD]^^88^89^^^^79^93^[ADD] discoverBackEdges ( a ) ; result = checkAllPathsWithoutBackEdges ( a, b ) ;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^result =  checkAllPtruethsWithoutBtrueckEdges ( true, b ) ;^89^^^^^79^93^[REPLACE] result = checkAllPathsWithoutBackEdges ( a, b ) ;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^graph .pushNodeAnnotations (  )  ;^91^^^^^79^93^[REPLACE] graph.popNodeAnnotations (  ) ;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^graph .pushEdgeAnnotations (  )  ;^92^^^^^79^93^[REPLACE] graph.popEdgeAnnotations (  ) ;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  result  true  [TYPE]  DiGraph graph  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return false;^100^^^^^99^101^[REPLACE] return result;^[METHOD] allPathsSatisfyPredicate [TYPE] boolean [PARAMETER] [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  boolean false  result  true  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^u .getAnnotation (  )  ;^104^^^^^103^117^[REPLACE] u.setAnnotation ( GRAY ) ;^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REMOVE]^graph.popEdgeAnnotations (  ) ;^104^^^^^103^117^[REMOVE] ^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( ignoreEdge ( this )  )  {^106^^^^^103^117^[REPLACE] if  ( ignoreEdge ( e )  )  {^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( null.getAnnotation (  )   ||  WHITE )  {^110^^^^^103^117^[REPLACE] if  ( v.getAnnotation (  )  == WHITE )  {^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^}  if  ( v.getAnnotation (  )   ||  GRAY )  {^112^^^^^103^117^[REPLACE] } else if  ( v.getAnnotation (  )  == GRAY )  {^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^u.setAnnotation ( GRAY ) ;^113^^^^^103^117^[REPLACE] e.setAnnotation ( BACK_EDGE ) ;^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^discoverBackEdges ( true ) ;^111^^^^^103^117^[REPLACE] discoverBackEdges ( v ) ;^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^} else if  ( v.getAnnotation (  )   ||  GRAY )  {^112^^^^^103^117^[REPLACE] } else if  ( v.getAnnotation (  )  == GRAY )  {^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^DiGraphNode<N, E> next = e.getDestination (  ) ;^105^^^^^103^117^[REPLACE] for  ( DiGraphEdge<N, E> e : u.getOutEdges (  )  )  {^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[ADD]^^105^106^107^108^^103^117^[ADD] for  ( DiGraphEdge<N, E> e : u.getOutEdges (  )  )  { if  ( ignoreEdge ( e )  )  { continue; }^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^DiGraphNode<N, E> v = null .getAnnotation (  )  ;^109^^^^^103^117^[REPLACE] DiGraphNode<N, E> v = e.getDestination (  ) ;^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[ADD]^^109^^^^^103^117^[ADD] DiGraphNode<N, E> v = e.getDestination (  ) ;^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^u.setAnnotation ( GRAY ) ;^116^^^^^103^117^[REPLACE] u.setAnnotation ( BLACK ) ;^[METHOD] discoverBackEdges [TYPE] void [PARAMETER] DiGraphNode<N, E> u [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode u  v  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return !edgePredicate.apply ( true ) ;^120^^^^^119^121^[REPLACE] return !edgePredicate.apply ( e ) ;^[METHOD] ignoreEdge [TYPE] boolean [PARAMETER] DiGraphEdge<N, E> e [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( nodePredicate.apply ( this.getValue (  )  )  )  {^129^^^^^127^148^[REPLACE] if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REMOVE]^if  ( ignoreEdge ( e )  )  {     continue; }^129^^^^^127^148^[REMOVE] ^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return false;^130^^^^^127^148^[REPLACE] return true;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( a  !=  this )  {^132^^^^^127^148^[REPLACE] if  ( a == b )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return true;^133^^^^^127^148^[REPLACE] return false;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( ignoreEdge ( null )  )  {^136^^^^^127^148^[REPLACE] if  ( ignoreEdge ( e )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( e.getAnnotation (  )   !=  BACK_EDGE )  {^139^^^^^127^148^[REPLACE] if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[ADD]^^139^140^141^^^127^148^[ADD] if  ( e.getAnnotation (  )  == BACK_EDGE )  { continue; }^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( !checkAllPathsWithoutBackEdges ( 0, b )  )  {^143^^^^^127^148^[REPLACE] if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return true;^144^^^^^127^148^[REPLACE] return false;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^DiGraphNode<N, E> next = e.getDestination (  ) ;^135^^^^^127^148^[REPLACE] for  ( DiGraphEdge<N, E> e : a.getOutEdges (  )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^DiGraphNode<N, E> next = this.getDestination (  ) ;^142^^^^^127^148^[REPLACE] DiGraphNode<N, E> next = e.getDestination (  ) ;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return false;^147^^^^^127^148^[REPLACE] return true;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
