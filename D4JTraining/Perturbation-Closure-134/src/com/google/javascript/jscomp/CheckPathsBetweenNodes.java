[REPLACE]^private static  Annotation BACK_EDGE = new Annotation (  )  {};^56^^^^^^^[REPLACE] private static final Annotation BACK_EDGE = new Annotation (  )  {};^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^private  final Annotation WHITE = null;^58^^^^^^^[REPLACE] private static final Annotation WHITE = null;^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^private static final Annotation GRAY  = null ;^60^^^^^^^[REPLACE] private static final Annotation GRAY = new Annotation (  )  {};^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^private static final Annotation BLACK ;^62^^^^^^^[REPLACE] private static final Annotation BLACK = new Annotation (  )  {};^ [CLASS] CheckPathsBetweenNodes 1 2 3  
[REPLACE]^if  ( nodePredicate.apply ( this.getValue (  )  )  )  {^129^^^^^128^148^[REPLACE] if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return false;^130^^^^^128^148^[REPLACE] return true;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( a  ) {^132^^^^^128^148^[REPLACE] if  ( a == b )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[ADD]^return false;^132^133^134^^^128^148^[ADD] if  ( a == b )  { return false; }^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return true;^133^^^^^128^148^[REPLACE] return false;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( ignoreEdge ( this )  )  {^136^^^^^128^148^[REPLACE] if  ( ignoreEdge ( e )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  (   BACK_EDGE )  {^139^^^^^128^148^[REPLACE] if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[ADD]^^139^140^141^^^128^148^[ADD] if  ( e.getAnnotation (  )  == BACK_EDGE )  { continue; }^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( !checkAllPathsWithoutBackEdges ( next, null )  )  {^143^^^^^128^148^[REPLACE] if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REMOVE]^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {     return true; }^143^^^^^128^148^[REMOVE] ^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return true;^144^^^^^128^148^[REPLACE] return false;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( ignoreEdge ( 1 )  )  {^136^^^^^128^148^[REPLACE] if  ( ignoreEdge ( e )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^if  ( e.getAnnotation (  )   !=  BACK_EDGE )  {^139^^^^^128^148^[REPLACE] if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^DiGraphNode<N, E> v = e.getDestination (  )  ;^142^^^^^128^148^[REPLACE] DiGraphNode<N, E> next = e.getDestination (  ) ;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^DiGraphNode<N, E> v = e.getDestination (  )  ;^135^^^^^128^148^[REPLACE] for  ( DiGraphEdge<N, E> e : a.getOutEdges (  )  )  {^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^DiGraphNode<N, E> next = this .getAnnotation (  )  ;^142^^^^^128^148^[REPLACE] DiGraphNode<N, E> next = e.getDestination (  ) ;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
[REPLACE]^return false;^147^^^^^128^148^[REPLACE] return true;^[METHOD] checkAllPathsWithoutBackEdges [TYPE] boolean [PARAMETER] DiGraphNode<N, E> a DiGraphNode<N, E> b [CLASS] CheckPathsBetweenNodes 1 2 3   [TYPE]  DiGraphNode a  b  next  [TYPE]  boolean false  result  true  [TYPE]  DiGraphEdge e  [TYPE]  Annotation BACK_EDGE  BLACK  GRAY  WHITE  [TYPE]  Predicate edgePredicate  nodePredicate 
