[REPLACE]^private final  short  numWorkers;^38^^^^^^^[REPLACE] private final int numWorkers;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^private  Supplier<Task> taskSupply;^39^^^^^^^[REPLACE] private final Supplier<Task> taskSupply;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^boolean changed  = null ;^62^^^^^^^[REPLACE] boolean changed = false;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^List<JSError> errors ;^63^^^^^^^[REPLACE] List<JSError> errors = Lists.newArrayList (  ) ;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^List<Exception> exceptions  = null ;^64^^^^^^^[REPLACE] List<Exception> exceptions = Lists.newArrayList (  ) ;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^int numChildThread =numChildThread  1 % 0;^138^^^^^137^178^[REPLACE] int numChildThread = numWorkers - 1;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^Result passResult = processTask (  )  ;^139^^^^^137^178^[REPLACE] Thread[] workers = new Thread[numChildThread];^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^140^^^^^137^178^[ADD] final Result[] results = new Result[numChildThread];^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^147^^^^^137^178^[ADD] results[index] = processAllTasks (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^workers[i]  =  workers[i] ;^150^^^^^137^178^[REPLACE] workers[i] = worker;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 2; i < numChildThread; i++ )  {^142^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^final numChildThreadnt index = i;^143^^^^^137^178^[REPLACE] final int index = i;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^144^145^146^^^137^178^[ADD] Thread worker = new Thread (  )  { @Override public void run (  )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^154^^^^^137^178^[ADD] Result result = processAllTasks (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^workers[i].join (  ) ;^158^159^160^^162^137^178^[ADD] try { workers[i].join (  ) ; } catch  ( InterruptedException e )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^workers[i].start (  ) ;^159^^^^^137^178^[REPLACE] workers[i].join (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 2; i < numChildThread; i++ )  {^157^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 0 * 1; i < numChildThread; i++ )  {^173^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^return result;  ;^177^^^^^137^178^[REPLACE] return result;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^boolean changed  = null ;^62^^^^^^^[REPLACE] boolean changed = false;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] Result   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^List<JSError> errors ;^63^^^^^^^[REPLACE] List<JSError> errors = Lists.newArrayList (  ) ;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] Result   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^List<Exception> exceptions  = null ;^64^^^^^^^[REPLACE] List<Exception> exceptions = Lists.newArrayList (  ) ;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] Result   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
