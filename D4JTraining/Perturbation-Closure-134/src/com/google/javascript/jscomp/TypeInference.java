[REPLACE]^static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE ;^61^62^63^64^^61^64^[REPLACE] static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE", "The template type must be an object type" ) ;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED", "A function type with the template type as the type of this must be a " +^66^67^68^69^^66^70^[REPLACE] static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED", "A function type with the template type as the type of this must be a " +^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^private  JSTypeRegistry registry;^74^^^^^^^[REPLACE] private final JSTypeRegistry registry;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^private  ReverseAbstractInterpreter reverseInterpreter;^75^^^^^^^[REPLACE] private final ReverseAbstractInterpreter reverseInterpreter;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^private  Scope syntacticScope;^76^^^^^^^[REPLACE] private final Scope syntacticScope;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^private  FlowScope bottomScope;^78^^^^^^^[REPLACE] private final FlowScope bottomScope;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^BooleanLiteralSet toBooleanOutcomes;^1077^^^^^^^[REPLACE] final BooleanLiteralSet toBooleanOutcomes;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^FlowScope rightScope;^1084^^^^^^^[REPLACE] final FlowScope rightScope;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^FlowScope joinedScope ;^1087^^^^^^^[REPLACE] FlowScope joinedScope = null;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^super ( null, new LinkedFlowScope.FlowScopeJoinOp (  )  ) ;^83^^^^^82^106^[REPLACE] super ( cfg, new LinkedFlowScope.FlowScopeJoinOp (  )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.compiler =  null;^84^^^^^82^106^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[ADD]^^84^85^^^^82^106^[ADD] this.compiler = compiler; this.registry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.registry =  null.getTypeRegistry (  ) ;^85^^^^^82^106^[REPLACE] this.registry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.reverseInterpreter =  null;^86^^^^^82^106^[REPLACE] this.reverseInterpreter = reverseInterpreter;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.syntacticScope =  syntacticScope;^87^^^^^82^106^[REPLACE] this.syntacticScope = functionScope;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.functionScope =  LinkedFlowScope.createEntryLattice ( syntacticScope ) ;^88^^^^^82^106^[REPLACE] this.functionScope = LinkedFlowScope.createEntryLattice ( functionScope ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[ADD]^^88^^^^^82^106^[ADD] this.functionScope = LinkedFlowScope.createEntryLattice ( functionScope ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^Iterator<Var> varIt = syntacticScope.getVars (  ) ;^89^^^^^82^106^[REPLACE] Iterator<Var> varIt = functionScope.getVars (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^while  ( this.hasNext (  )  )  {^90^^^^^82^106^[REPLACE] while  ( varIt.hasNext (  )  )  {^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^if  ( var.getParentNode (  )  != false ) {^95^96^97^98^^82^106^[REPLACE] if  ( var.getParentNode (  )  != null && var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.functionScope.inferSlotType ( var.getType (  ) , getNativeType ( VOID_TYPE )  ) ;^99^100^^^^82^106^[REPLACE] this.functionScope.inferSlotType ( var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^var.getType (  ) , getNativeType ( VOID_TYPE )  ) ;^100^^^^^82^106^[REPLACE] var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^name.setJSType ( type ) ;^100^^^^^82^106^[REPLACE] var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^Var var = null.next (  ) ;^91^^^^^82^106^[REPLACE] Var var = varIt.next (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^if  (  var.getType (  )  != null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^95^96^97^98^^82^106^[REPLACE] if  ( var.getParentNode (  )  != null && var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.functionScope.getSlot ( var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^99^100^^^^82^106^[REPLACE] this.functionScope.inferSlotType ( var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.bottomScope =  LinkedFlowScope.createEntryLattice ( new Scope ( syntacticScope.getRootNode (  ) , syntacticScope.getTypeOfThis (  )  )  ) ;^104^105^^^^82^106^[REPLACE] this.bottomScope = LinkedFlowScope.createEntryLattice ( new Scope ( functionScope.getRootNode (  ) , functionScope.getTypeOfThis (  )  )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.toBooleanOutcomes =  booleanValues;^1092^^^^^1089^1096^[REPLACE] this.toBooleanOutcomes = toBooleanOutcomes;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.booleanValues =  null;^1093^^^^^1089^1096^[REPLACE] this.booleanValues = booleanValues;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.rightScope = rightScope; ;^1094^^^^^1089^1096^[REPLACE] this.leftScope = leftScope;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.leftScope = leftScope; ;^1095^^^^^1089^1096^[REPLACE] this.rightScope = rightScope;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^return functionScope;^110^^^^^109^111^[REPLACE] return bottomScope;^[METHOD] createInitialEstimateLattice [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^return joinedScope;^115^^^^^114^116^[REPLACE] return functionScope;^[METHOD] createEntryLattice [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^if  ( input  !=  bottomScope )  {^122^^^^^119^129^[REPLACE] if  ( input == bottomScope )  {^[METHOD] flowThrough [TYPE] FlowScope [PARAMETER] Node n FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope 
[ADD]^return input;^122^123^124^^^119^129^[ADD] if  ( input == bottomScope )  { return input; }^[METHOD] flowThrough [TYPE] FlowScope [PARAMETER] Node n FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope 
[REPLACE]^return rightScope;^123^^^^^119^129^[REPLACE] return input;^[METHOD] flowThrough [TYPE] FlowScope [PARAMETER] Node n FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope 
[REPLACE]^FlowScope output = rightScope.createChildFlowScope (  ) ;^126^^^^^119^129^[REPLACE] FlowScope output = input.createChildFlowScope (  ) ;^[METHOD] flowThrough [TYPE] FlowScope [PARAMETER] Node n FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope 
[ADD]^output = traverse ( n, output ) ;^126^127^^^^119^129^[ADD] FlowScope output = input.createChildFlowScope (  ) ; output = traverse ( n, output ) ;^[METHOD] flowThrough [TYPE] FlowScope [PARAMETER] Node n FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope 
[REPLACE]^output =  traverse ( null, output ) ;^127^^^^^119^129^[REPLACE] output = traverse ( n, output ) ;^[METHOD] flowThrough [TYPE] FlowScope [PARAMETER] Node n FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope 
[REPLACE]^return functionScope;^128^^^^^119^129^[REPLACE] return output;^[METHOD] flowThrough [TYPE] FlowScope [PARAMETER] Node n FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope 
[REPLACE]^FlowScope output = flowThrough ( source, rightScope ) ;^139^^^^^133^223^[REPLACE] FlowScope output = flowThrough ( source, input ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node condition = false;^140^^^^^133^223^[REPLACE] Node condition = null;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope conditionFlowScope = false;^141^^^^^133^223^[REPLACE] FlowScope conditionFlowScope = null;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^BooleanOutcomePair conditionOutcomes = this;^142^^^^^133^223^[REPLACE] BooleanOutcomePair conditionOutcomes = null;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^List<DiGraphEdge<Node, Branch>> branchEdges = getCfg (  ) .getOutEdges ( condition ) ;^144^^^^^133^223^[REPLACE] List<DiGraphEdge<Node, Branch>> branchEdges = getCfg (  ) .getOutEdges ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^List<FlowScope> result = Lists.newArrayListWithCapacity ( null.size (  )  ) ;^145^^^^^133^223^[REPLACE] List<FlowScope> result = Lists.newArrayListWithCapacity ( branchEdges.size (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^145^^^^^133^223^[ADD] List<FlowScope> result = Lists.newArrayListWithCapacity ( branchEdges.size (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^152^^^^^133^223^[REPLACE] if  ( NodeUtil.isForIn ( source )  )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition.getType (  )   &&  Token.VAR )  {^155^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.VAR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^item =  condition.getFirstChild (  ) ;^156^^^^^133^223^[REPLACE] item = item.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item.getType (  )   &&  Token.NAME )  {^158^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.NAME )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^FlowScope informed = output.createChildFlowScope (  ) ;^158^159^160^161^162^133^223^[ADD] if  ( item.getType (  )  == Token.NAME )  { FlowScope informed = output.createChildFlowScope (  ) ; redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ; newScope = informed;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope =  rightScope;^162^^^^^133^223^[REPLACE] newScope = informed;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope informed = leftScope.createChildFlowScope (  ) ;^159^^^^^133^223^[REPLACE] FlowScope informed = output.createChildFlowScope (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node item = condition.getFirstChild (  ) ;^154^^^^^133^223^[REPLACE] Node item = source.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition.getType (  )   !=  Token.VAR )  {^155^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.VAR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item.getType (  )   ||  Token.NAME )  {^158^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.NAME )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^159^160^161^162^163^133^223^[ADD] FlowScope informed = output.createChildFlowScope (  ) ; redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ; newScope = informed; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition != null )  {^170^^^^^133^223^[REPLACE] if  ( condition == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  (  source.getType (  )  == Token.CASE )  {^172^^^^^133^223^[REPLACE] if  ( condition == null && source.getType (  )  == Token.CASE )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^condition = NodeUtil.getConditionExpression ( source ) ; ;^173^^^^^133^223^[REPLACE] condition = createSwitchCaseConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^173^^^^^133^223^[ADD] condition = createSwitchCaseConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^condition = createSwitchCaseConditionExpression ( source ) ; ;^171^^^^^133^223^[REPLACE] condition = NodeUtil.getConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item != null ) {^172^^^^^133^223^[REPLACE] if  ( condition == null && source.getType (  )  == Token.CASE )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition == null )  {^177^^^^^133^223^[REPLACE] if  ( condition != null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  (  condition.getType (  )  == Token.OR )  {^178^179^^^^133^223^[REPLACE] if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionFlowScope != this )  {^208^^^^^178^215^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionFlowScope =  traverse ( source, output.createChildFlowScope (  )  ) ;^209^210^^^^178^215^[REPLACE] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch  !=  Branch.ON_TRUE ) ;^212^213^214^^^178^215^[REPLACE] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionOutcomes != true )  {^194^^^^^178^215^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^178^215^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseAnd ( condition, output.createChildFlowScope (  )  )  ;^195^196^197^^^178^215^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^199^200^201^^^178^215^[ADD] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition,^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionOutcomes != true )  {^194^^^^^133^223^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^133^223^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^195^196^197^^^133^223^[ADD] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionFlowScope != null )  {^208^^^^^133^223^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^208^209^210^211^^133^223^[ADD] if  ( conditionFlowScope == null )  { conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionFlowScope =  traverse ( source, output.createChildFlowScope (  )  ) ;^209^210^^^^133^223^[REPLACE] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch  ||  Branch.ON_TRUE ) ;^212^213^214^^^133^223^[REPLACE] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^178^179^^^^133^223^[ADD] if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  (rightScope != null )  {^208^^^^^178^215^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionOutcomes != null )  {^194^^^^^178^215^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionOutcomes != null )  {^194^^^^^133^223^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseAnd ( condition, output.createChildFlowScope (  )  )  ;^195^196^197^^^133^223^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionFlowScope =  traverse ( null, output.createChildFlowScope (  )  ) ;^209^210^^^^133^223^[REPLACE] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^171^^^^^133^223^[ADD] condition = NodeUtil.getConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Branch branch = branchEdge.getValue (  ) ;^146^^^^^133^223^[REPLACE] for  ( DiGraphEdge<Node, Branch> branchEdge : branchEdges )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^146^147^148^^^133^223^[ADD] for  ( DiGraphEdge<Node, Branch> branchEdge : branchEdges )  { Branch branch = branchEdge.getValue (  ) ; FlowScope newScope = output;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Branch branch = this.getValue (  ) ;^147^^^^^133^223^[REPLACE] Branch branch = branchEdge.getValue (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope newScope = rightScope;^148^^^^^133^223^[REPLACE] FlowScope newScope = output;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node item = condition .getLastChild (  )  ;^154^^^^^133^223^[REPLACE] Node item = source.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope informed = rightScope.inferSlotType (  ) ;^159^^^^^133^223^[REPLACE] FlowScope informed = output.createChildFlowScope (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^return null;^222^^^^^133^223^[REPLACE] return result;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node switchNode = findSwitchFromCase ( switchNode ) ;^230^^^^^229^235^[REPLACE] Node switchNode = findSwitchFromCase ( caseNode ) ;^[METHOD] createSwitchCaseConditionExpression [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseExpressionNode  caseNode  switchExpressionNode  switchNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node switchExpressionNode = switchExpressionNode.getFirstChild (  ) ;^231^^^^^229^235^[REPLACE] Node switchExpressionNode = switchNode.getFirstChild (  ) ;^[METHOD] createSwitchCaseConditionExpression [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseExpressionNode  caseNode  switchExpressionNode  switchNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^231^232^^^^229^235^[ADD] Node switchExpressionNode = switchNode.getFirstChild (  ) ; Node caseExpressionNode = caseNode.getFirstChild (  ) ;^[METHOD] createSwitchCaseConditionExpression [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseExpressionNode  caseNode  switchExpressionNode  switchNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node caseExpressionNode = caseNode.getLastChild (  ) ;^232^^^^^229^235^[REPLACE] Node caseExpressionNode = caseNode.getFirstChild (  ) ;^[METHOD] createSwitchCaseConditionExpression [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseExpressionNode  caseNode  switchExpressionNode  switchNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^232^^^^^229^235^[ADD] Node caseExpressionNode = caseNode.getFirstChild (  ) ;^[METHOD] createSwitchCaseConditionExpression [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseExpressionNode  caseNode  switchExpressionNode  switchNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^return new Node ( Token.SHEQ, switchExpressionNode .getType (  )  , caseExpressionNode^233^234^^^^229^235^[REPLACE] return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[METHOD] createSwitchCaseConditionExpression [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseExpressionNode  caseNode  switchExpressionNode  switchNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^return caseNode;^246^^^^^240^252^[REPLACE] return n;^[METHOD] findSwitchFromCase [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphNode gn  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseNode  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^return findSwitchFromCase ( caseNode ) ;^248^^^^^240^252^[REPLACE] return findSwitchFromCase ( n ) ;^[METHOD] findSwitchFromCase [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphNode gn  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseNode  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^241^242^243^244^245^240^252^[ADD] for  ( DiGraphNode<Node, Branch> gn : getCfg (  ) .getDirectedPredNodes ( caseNode )  )  { Node n = gn.getValue (  ) ; switch  ( n.getType (  )  )  { case Token.SWITCH:^[METHOD] findSwitchFromCase [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphNode gn  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseNode  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node n = null.getValue (  ) ;^243^^^^^240^252^[REPLACE] Node n = gn.getValue (  ) ;^[METHOD] findSwitchFromCase [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphNode gn  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseNode  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^return ;^251^^^^^240^252^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findSwitchFromCase [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphNode gn  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseNode  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^251^^^^^240^252^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] findSwitchFromCase [TYPE] Node [PARAMETER] Node caseNode [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphNode gn  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node caseNode  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( n.getFirstChild (  ) .getType (  )   ||  Token.GETPROP )  {^396^^^^^254^429^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.GETPROP )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^ensurePropertyDeclared ( n.getFirstChild (  )  ) ;^396^397^398^^^254^429^[ADD] if  ( n.getFirstChild (  ) .getType (  )  == Token.GETPROP )  { ensurePropertyDeclared ( n.getFirstChild (  )  ) ; }^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^ensurePropertyDeclared ( n.getLastChild (  )  ) ;^397^^^^^254^429^[REPLACE] ensurePropertyDeclared ( n.getFirstChild (  )  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^257^^^^^254^429^[REPLACE] scope = traverseAssign ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^261^^^^^254^429^[REPLACE] scope = traverseName ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^265^^^^^254^429^[REPLACE] scope = traverseGetProp ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope =  traverseAnulld ( null, scope ) .getJoinulledFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^429^[REPLACE] scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope =  traverseOr ( null, scope ) .getJoinulledFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^254^429^[REPLACE] scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^279^^^^^254^429^[REPLACE] scope = traverseHook ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^283^^^^^254^429^[REPLACE] scope = traverseObjectLiteral ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^287^^^^^254^429^[REPLACE] scope = traverseCall ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverse ( el, scope ) ; ;^291^^^^^254^429^[REPLACE] scope = traverseNew ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^296^^^^^254^429^[REPLACE] scope = traverseAdd ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^296^^^^^254^429^[ADD] scope = traverseAdd ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope =  traverse ( null.getFirstChild (  ) , scope ) ;^301^^^^^254^429^[REPLACE] scope = traverse ( n.getFirstChild (  ) , scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^314^^^^^254^429^[REPLACE] scope = traverseArrayLiteral ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^353^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope =  traverse ( null.getFirstChild (  ) , scope ) ;^359^^^^^254^429^[REPLACE] scope = traverse ( n.getFirstChild (  ) , scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^364^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^364^^^^^254^429^[ADD] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^370^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^386^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^391^^^^^254^429^[REPLACE] scope = traverseGetElem ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^391^^^^^254^429^[ADD] scope = traverseGetElem ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^395^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^395^^^^^254^429^[ADD] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^404^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^408^^^^^254^429^[REPLACE] scope = traverseCatch ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.getType (  )   ==  Token.FUNCTION )  {^411^^^^^254^429^[REPLACE] if  ( n.getType (  )  != Token.FUNCTION )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (  info.hasType (  )  )  {^413^^^^^254^429^[REPLACE] if  ( info != null && info.hasType (  )  )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (  n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^419^420^^^^254^429^[REPLACE] if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^419^420^421^422^^254^429^[ADD] if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  { updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ; }^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( scope, n, n.setJSType (  ) , castType ) ;^421^^^^^419^422^[REPLACE] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^421^^^^^419^422^[ADD] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType castType = info.getType (  )  .equals ( false )  ;^414^^^^^254^429^[REPLACE] JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.isQualifiedName (  )  || n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^419^420^^^^254^429^[REPLACE] if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSDocInfo info = n .getString (  )  ;^412^^^^^254^429^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^413^414^^^^254^429^[ADD] if  ( info != null && info.hasType (  )  )  { JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.isQualifiedName (  )  ) {^419^420^^^^254^429^[REPLACE] if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType castType = info .getType (  )  .evaluate ( syntacticScope ) ;^414^^^^^254^429^[REPLACE] JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( scope, n, n .getJSType ( n )  , castType ) ;^421^^^^^419^422^[REPLACE] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^412^^^^^254^429^[ADD] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType castType = info.hasType (  ) .evaluate ( syntacticScope ) ;^414^^^^^254^429^[REPLACE] JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return leftScope;^428^^^^^254^429^[REPLACE] return scope;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node nameame = n.getLastChild (  ) ;^436^^^^^435^441^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] traverseCatch [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType falseType = falseNode.getJSType (  ) ;^437^^^^^435^441^[REPLACE] JSType type = getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] traverseCatch [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^name .getJSType ( n )  ;^438^^^^^435^441^[REPLACE] name.setJSType ( type ) ;^[METHOD] traverseCatch [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^redeclare ( rightScope, name.getString (  ) , type ) ;^439^^^^^435^441^[REPLACE] redeclare ( scope, name.getString (  ) , type ) ;^[METHOD] traverseCatch [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^439^^^^^435^441^[ADD] redeclare ( scope, name.getString (  ) , type ) ;^[METHOD] traverseCatch [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^redeclare ( scope, n.getString (  ) , type ) ;^439^^^^^435^441^[REPLACE] redeclare ( scope, name.getString (  ) , type ) ;^[METHOD] traverseCatch [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return newScope;^440^^^^^435^441^[REPLACE] return scope;^[METHOD] traverseCatch [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node left = n.getLastChild (  ) ;^444^^^^^443^454^[REPLACE] Node left = n.getFirstChild (  ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node right = n .getFirstChild (  )  ;^445^^^^^443^454^[REPLACE] Node right = n.getLastChild (  ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^446^^^^^443^454^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType rightType = left .getJSType ( n )  ;^448^^^^^443^454^[REPLACE] JSType leftType = left.getJSType (  ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^448^^^^^443^454^[ADD] JSType leftType = left.getJSType (  ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType leftType = getJSType ( right ) ;^449^^^^^443^454^[REPLACE] JSType rightType = getJSType ( right ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n.setJSType ( castType ) ;^450^^^^^443^454^[REPLACE] n.setJSType ( rightType ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( rightScope, left, leftType, rightType ) ;^452^^^^^443^454^[REPLACE] updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return functionScope;^453^^^^^443^454^[REPLACE] return scope;^[METHOD] traverseAssign [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Preconditions.checkNotNull ( oldType ) ;^462^^^^^461^503^[REPLACE] Preconditions.checkNotNull ( resultType ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( !isVarDeclaration ) {^479^^^^^461^503^[REPLACE] if  ( !isVarDeclaration || var == null || var.isTypeInferred (  )  )  {^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^redeclare ( scope, varName, resultType ) ;^479^480^481^^^461^503^[ADD] if  ( !isVarDeclaration || var == null || var.isTypeInferred (  )  )  { redeclare ( scope, varName, resultType ) ; }^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^redeclare ( scope, qualifiedName, resultType ) ;^480^^^^^461^503^[REPLACE] redeclare ( scope, varName, resultType ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == null && var.isTypeInferred (  )  )  {^485^^^^^461^503^[REPLACE] if  ( var != null && var.isTypeInferred (  )  )  {^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType oldType = var.setType (  ) ;^486^^^^^461^503^[REPLACE] JSType oldType = var.getType (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (varName == null )  {^493^^^^^461^503^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope.inferQualifiedSlot   getNativeType ( UNKNOWN_TYPE )  ;^494^495^496^^^461^503^[REPLACE] scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^494^495^496^497^^461^503^[ADD] scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ; }^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String varName = left.getParent (  ) ;^465^^^^^461^503^[REPLACE] String varName = left.getString (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^465^^^^^461^503^[ADD] String varName = left.getString (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Var var = syntacticScope.getVar ( qualifiedName ) ;^466^^^^^461^503^[REPLACE] Var var = syntacticScope.getVar ( varName ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^466^^^^^461^503^[ADD] Var var = syntacticScope.getVar ( varName ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean isVarDeclaration = left.getChildCount (  ) ;^478^^^^^461^503^[REPLACE] boolean isVarDeclaration = left.hasChildren (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^486^^^^^461^503^[ADD] JSType oldType = var.getType (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String qualifiedName = left .isQualifiedName (  )  ;^492^^^^^461^503^[REPLACE] String qualifiedName = left.getQualifiedName (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^492^493^494^495^496^461^503^[ADD] String qualifiedName = left.getQualifiedName (  ) ; if  ( qualifiedName != null )  { scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^ObjectType objectType = ObjectType.cast ( getJSType ( getprop.getLastChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^509^510^^^^508^547^[REPLACE] ObjectType objectType = ObjectType.cast ( getJSType ( getprop.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType == null )  {^511^^^^^508^547^[REPLACE] if  ( objectType != null )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^511^512^513^514^^508^547^[ADD] if  ( objectType != null )  { if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  { return; }^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^512^^^^^508^547^[REPLACE] if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^return;^512^513^514^^^508^547^[ADD] if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  { return; }^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return functionScope;^513^^^^^508^547^[REPLACE] return;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType.isPropertyTypeDeclared ( propName )  )  {^517^^^^^508^547^[REPLACE] if  ( !objectType.isPropertyTypeDeclared ( propName )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType.hasProperty ( propName )  || objectType.isInstanceType (  )  )  {^530^531^^^^508^547^[REPLACE] if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (  getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^538^539^540^541^542^530^544^[ADD] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  { objectType.defineInferredProperty ( propName, rightType, false ) ; } else { registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^propertyType = objType.findPropertyType ( propName ) ;^542^^^^^530^544^[REPLACE] registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^propertyType = objType.findPropertyType ( propName ) ;^542^^^^^530^544^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^540^^^^^530^544^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^532^^^^^530^544^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^if  (  (  ( getprop.getFirstChild (  ) .getType (  )  )  ==  ( THIS )  )  &&  ( getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  )  {     objectType.defineInferredProperty ( propName, rightType, false ) ; }else {     registry.registerPropertyOnType ( propName, objectType ) ; }^532^^^^^530^544^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, true ) ;^535^^^^^530^544^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, true ) ;^533^^^^^530^544^[REPLACE] objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^533^^^^^530^544^[ADD] objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^532^^^^^508^547^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, true ) ;^535^^^^^532^536^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^533^^^^^508^547^[REPLACE] objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS ) {^538^539^^^^508^547^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^propertyType = objType.findPropertyType ( propName ) ;^542^^^^^538^543^[REPLACE] registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^propertyType = objType.findPropertyType ( propName ) ;^542^^^^^538^543^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, true ) ;^540^^^^^538^543^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType.hasProperty ( propName )  ) {^530^531^^^^508^547^[REPLACE] if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^530^531^532^533^^508^547^[ADD] if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  { if  ( "prototype".equals ( propName )  )  { objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS ) {^538^539^^^^530^544^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, true ) ;^540^^^^^530^544^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^533^^^^^530^544^[REPLACE] objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^objectType.defineDeclaredProperty ( propName, rightType, false ) ;objectType.defineInferredProperty ( propName, rightType, false ) ;^532^533^534^535^536^508^547^[ADD] if  ( "prototype".equals ( propName )  )  { objectType.defineDeclaredProperty ( propName, rightType, false ) ; } else { objectType.defineInferredProperty ( propName, rightType, false ) ; }^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String propName = getprop.getFirstChild (  ) .getString (  ) ;^516^^^^^508^547^[REPLACE] String propName = getprop.getLastChild (  ) .getString (  ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (  objectType.isInstanceType (  )  )  {^530^531^^^^508^547^[REPLACE] if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^registry .createUnionType (  )  ;^542^^^^^530^544^[REPLACE] registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^535^^^^^530^544^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^535^^^^^530^544^[ADD] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS || getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^508^547^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^registry .createUnionType (  )  ;^542^^^^^538^543^[REPLACE] registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^540^^^^^538^543^[ADD] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType.hasProperty ( propName )  || objectType.hasProperty (  )  )  {^530^531^^^^508^547^[REPLACE] if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType .defineDeclaredProperty ( propName )  ;^533^^^^^530^544^[REPLACE] objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^if  (  (  ( getprop.getFirstChild (  ) .getType (  )  )  ==  ( THIS )  )  &&  ( getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  )  {     objectType.defineInferredProperty ( propName, rightType, false ) ; }else {     registry.registerPropertyOnType ( propName, objectType ) ; }^532^^^^^508^547^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^535^^^^^532^536^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^535^^^^^532^536^[ADD] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String propName = getprop.getLastChild (  )  .getParent (  )  ;^516^^^^^508^547^[REPLACE] String propName = getprop.getLastChild (  ) .getString (  ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^ObjectType ownerType = ObjectType.cast ( getJSType ( getprop.getFirstChild (  )  ) .getDirectedPredNodes (  )  ) ;^557^558^^^^556^562^[REPLACE] ObjectType ownerType = ObjectType.cast ( getJSType ( getprop.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] ensurePropertyDeclared [TYPE] void [PARAMETER] Node getprop [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType ownerType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^557^558^^^^556^562^[ADD] ObjectType ownerType = ObjectType.cast ( getJSType ( getprop.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] ensurePropertyDeclared [TYPE] void [PARAMETER] Node getprop [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType ownerType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( ownerType == null )  {^559^^^^^556^562^[REPLACE] if  ( ownerType != null )  {^[METHOD] ensurePropertyDeclared [TYPE] void [PARAMETER] Node getprop [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType ownerType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^559^560^561^^^556^562^[ADD] if  ( ownerType != null )  { ensurePropertyDeclaredHelper ( getprop, ownerType ) ; }^[METHOD] ensurePropertyDeclared [TYPE] void [PARAMETER] Node getprop [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType ownerType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^560^^^^^556^562^[REPLACE] ensurePropertyDeclaredHelper ( getprop, ownerType ) ;^[METHOD] ensurePropertyDeclared [TYPE] void [PARAMETER] Node getprop [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType ownerType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^560^^^^^556^562^[ADD] ensurePropertyDeclaredHelper ( getprop, ownerType ) ;^[METHOD] ensurePropertyDeclared [TYPE] void [PARAMETER] Node getprop [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType ownerType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String propName = getprop.getFirstChild (  ) .getString (  ) ;^570^^^^^568^585^[REPLACE] String propName = getprop.getLastChild (  ) .getString (  ) ;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String qName = getprop.isQualifiedName (  ) ;^571^^^^^568^585^[REPLACE] String qName = getprop.getQualifiedName (  ) ;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (propName == true )  {^572^^^^^568^585^[REPLACE] if  ( qName != null )  {^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == true && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^568^585^[REPLACE] if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return false;^581^^^^^568^585^[REPLACE] return true;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Var var = syntacticScope.getVar ( propName ) ;^573^^^^^568^585^[REPLACE] Var var = syntacticScope.getVar ( qName ) ;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^568^585^[REPLACE] if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^574^575^576^577^^568^585^[ADD] if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return true;^584^^^^^568^585^[REPLACE] return false;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String varName = n.getParent (  ) ;^588^^^^^587^604^[REPLACE] String varName = n.getString (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node value = n .getLastChild (  )  ;^589^^^^^587^604^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^589^^^^^587^604^[ADD] Node value = n.getFirstChild (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType type = n.setJSType (  ) ;^590^^^^^587^604^[REPLACE] JSType type = n.getJSType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( value == null )  {^591^^^^^587^604^[REPLACE] if  ( value != null )  {^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == this  )  {^598^^^^^587^604^[REPLACE] if  ( var != null )  {^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type =  null.getType (  ) ;^599^^^^^587^604^[REPLACE] type = var.getType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^StaticSlot<JSType> var = rightScope.getSlot ( varName ) ;^597^^^^^587^604^[REPLACE] StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^592^^^^^587^604^[REPLACE] scope = traverse ( value, scope ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^595^^^^^587^604^[REPLACE] return scope;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( null == true )  {^598^^^^^587^604^[REPLACE] if  ( var != null )  {^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type =  0.getType (  ) ;^599^^^^^587^604^[REPLACE] type = var.getType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^599^^^^^587^604^[ADD] type = var.getType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^592^^^^^587^604^[ADD] scope = traverse ( value, scope ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return newScope;^595^^^^^587^604^[REPLACE] return scope;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^StaticSlot<JSType> var = newScope .inferSlotType (  )  ;^597^^^^^587^604^[REPLACE] StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^597^^^^^587^604^[ADD] StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^name.setJSType ( type ) ;^602^^^^^587^604^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^603^^^^^587^604^[REPLACE] return scope;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^608^^^^^607^611^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseArrayLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^608^^^^^607^611^[ADD] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseArrayLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n .getJSType ( n )  ;^609^^^^^607^611^[REPLACE] n.setJSType ( getNativeType ( ARRAY_TYPE )  ) ;^[METHOD] traverseArrayLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^return scope;^609^610^^^^607^611^[ADD] n.setJSType ( getNativeType ( ARRAY_TYPE )  ) ; return scope;^[METHOD] traverseArrayLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n.setJSType ( getNativeType ( BOOLEAN_TYPE )  ) ;^609^^^^^607^611^[REPLACE] n.setJSType ( getNativeType ( ARRAY_TYPE )  ) ;^[METHOD] traverseArrayLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^610^^^^^607^611^[REPLACE] return scope;^[METHOD] traverseArrayLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.getJSType (  )  == null )  {^614^^^^^613^639^[REPLACE] if  ( n.getJSType (  )  != null )  {^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^614^615^^^618^613^639^[ADD] if  ( n.getJSType (  )  != null )  {  return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^618^^^^^613^639^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^ObjectType objectType = registry.createUnionType (  ) ;^620^^^^^613^639^[REPLACE] ObjectType objectType = registry.createAnonymousObjectType (  ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( memberName == false )  {^627^^^^^613^639^[REPLACE] if  ( memberName != null )  {^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return output;^634^^^^^627^635^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( memberName, getJSType ( value ) , true ) ;^631^^^^^613^639^[REPLACE] objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^631^^^^^613^639^[ADD] objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( memberName, getJSType ( name ) , false ) ;^631^^^^^613^639^[REPLACE] objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^for  ( Node name = n.getFirstChild (  ) ; name == false;^621^^^^^613^639^[REPLACE] for  ( Node name = n.getFirstChild (  ) ; name != null;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( memberName == null )  {^627^^^^^621^636^[REPLACE] if  ( memberName != null )  {^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return output;^634^^^^^621^636^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( memberName, getJSType ( value ) , true ) ;^631^^^^^621^636^[REPLACE] objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( memberName, getJSType ( name ) , false ) ;^631^^^^^621^636^[REPLACE] objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^624^^^^^621^636^[REPLACE] scope = traverse ( name, scope ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^625^^^^^621^636^[REPLACE] scope = traverse ( value, scope ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^634^^^^^621^636^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node value = value.getParent (  ) ;^623^^^^^621^636^[REPLACE] Node value = name.getNext (  ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String memberName = NodeUtil .getSourceName ( name )  ;^626^^^^^621^636^[REPLACE] String memberName = NodeUtil.getStringValue ( name ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^626^^^^^621^636^[ADD] String memberName = NodeUtil.getStringValue ( name ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^name =  value.getNext (  ) .getNext (  )  )  {^622^^^^^613^639^[REPLACE] name = name.getNext (  ) .getNext (  )  )  {^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^622^623^^^^613^639^[ADD] name = name.getNext (  ) .getNext (  )  )  { Node value = name.getNext (  ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^624^^^^^613^639^[REPLACE] scope = traverse ( name, scope ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^625^^^^^613^639^[REPLACE] scope = traverse ( value, scope ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^634^^^^^613^639^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^for  ( Node nameame = n.getLastChild (  ) ; name != null;^621^^^^^613^639^[REPLACE] for  ( Node name = n.getFirstChild (  ) ; name != null;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node value = value.getNext (  ) ;^623^^^^^613^639^[REPLACE] Node value = name.getNext (  ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String memberName = NodeUtil.getSourceName ( value ) ;^626^^^^^613^639^[REPLACE] String memberName = NodeUtil.getStringValue ( name ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^propertyType = objType.findPropertyType ( propName ) ;^637^^^^^613^639^[REPLACE] n.setJSType ( objectType ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return leftScope;^638^^^^^613^639^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node left = n.getLastChild (  ) ;^642^^^^^641^673^[REPLACE] Node left = n.getFirstChild (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node right = right .getParent (  )  ;^643^^^^^641^673^[REPLACE] Node right = left.getNext (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^643^^^^^641^673^[ADD] Node right = left.getNext (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^644^^^^^641^673^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType leftType = left.setJSType (  ) ;^646^^^^^641^673^[REPLACE] JSType leftType = left.getJSType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType leftType = right.getJSType (  ) ;^647^^^^^641^673^[REPLACE] JSType rightType = right.getJSType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType narrowed = type.restrictByNotNullOrUndefined (  ) ;^649^^^^^641^673^[REPLACE] JSType type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^649^^^^^641^673^[ADD] JSType type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( leftType == null ) {^650^^^^^641^673^[REPLACE] if  ( leftType != null && rightType != null )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( true )  {^653^^^^^641^673^[REPLACE] if  ( leftIsUnknown && rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^653^654^655^656^657^641^673^[ADD] if  ( leftIsUnknown && rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ; } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  { type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  else {^655^656^^^^641^673^[REPLACE] } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = getNativeType ( STRING_TYPE ) ;type = getNativeType ( UNKNOWN_TYPE ) ;^655^656^657^658^659^641^673^[ADD] else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  { type = getNativeType ( STRING_TYPE ) ; } else if  ( leftIsUnknown || rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  else {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = getNativeType ( UNKNOWN_TYPE ) ;type = getNativeType ( NUMBER_TYPE ) ;^658^659^660^661^^641^673^[ADD] else if  ( leftIsUnknown || rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ; } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  { type = getNativeType ( NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^} else if  (  isAddedAsNumber ( rightType )  )  {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^660^661^662^663^664^641^673^[ADD] else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  { type = getNativeType ( NUMBER_TYPE ) ; } else { type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ; }^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type ;^663^^^^^660^664^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( STRING_TYPE ) ; ;^661^^^^^641^673^[REPLACE] type = getNativeType ( NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  =  type ;^663^^^^^641^673^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( NUMBER_TYPE ) ; ;^659^^^^^641^673^[REPLACE] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  else {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  =  type ;^663^^^^^660^664^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type ;^663^^^^^641^673^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^663^^^^^641^673^[ADD] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( NUMBER_TYPE ) ; ;^657^^^^^655^664^[REPLACE] type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  (  rightIsUnknown )  {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( isAddedAsNumber ( type )  ) {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  = null ;^663^^^^^660^664^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  = null ;^663^^^^^641^673^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( NUMBER_TYPE ) ; ;^657^^^^^641^673^[REPLACE] type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^659^^^^^641^673^[ADD] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( NUMBER_TYPE ) ; ;^654^^^^^641^673^[REPLACE] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^} else if  (  ( leftIsUnknown && leftType.isString (  )  )  ) {^655^656^^^^641^673^[REPLACE] } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^663^^^^^660^664^[ADD] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^661^^^^^641^673^[ADD] type = getNativeType ( NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^657^^^^^655^664^[ADD] type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( isAddedAsNumber ( leftType )  || isAddedAsNumber ( rightType )  )  {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = getNativeType ( NUMBER_TYPE ) ;type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^660^661^662^663^664^641^673^[ADD] else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  { type = getNativeType ( NUMBER_TYPE ) ; } else { type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ; }^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean leftIsUnknown = type.isSubtype (  ) ;^651^^^^^641^673^[REPLACE] boolean leftIsUnknown = leftType.isUnknownType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean rightIsUnknown = type .isSubtype (  )  ;^652^^^^^641^673^[REPLACE] boolean rightIsUnknown = rightType.isUnknownType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( leftIsUnknown || rightIsUnknown )  {^653^^^^^641^673^[REPLACE] if  ( leftIsUnknown && rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^type = getNativeType ( UNKNOWN_TYPE ) ;type = getNativeType ( STRING_TYPE ) ;^653^654^655^656^657^641^673^[ADD] if  ( leftIsUnknown && rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ; } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  { type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^} else if  ( leftIsUnknown && rightIsUnknown )  {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  (  ( !rightIsUnknown && rightType.isString (  )  )  )  {^655^656^^^^641^673^[REPLACE] } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  (true && rightIsUnknown )  {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean rightIsUnknown = type.isUnknownType (  ) ;^652^^^^^641^673^[REPLACE] boolean rightIsUnknown = rightType.isUnknownType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^name.setJSType ( type ) ;^666^^^^^641^673^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.getType (  )   &&  Token.ASSIGN_ADD )  {^668^^^^^641^673^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN_ADD )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^669^^^^^641^673^[REPLACE] updateScopeForTypeChange ( scope, left, leftType, type ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^669^^^^^641^673^[ADD] updateScopeForTypeChange ( scope, left, leftType, type ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return leftScope;^672^^^^^641^673^[REPLACE] return scope;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return type.isSubtype ( registry .createAnonymousObjectType (  )   ) ;^676^677^^^^675^678^[REPLACE] return type.isSubtype ( registry.createUnionType ( VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE )  ) ;^[METHOD] isAddedAsNumber [TYPE] boolean [PARAMETER] JSType type [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node condition = n.getLastChild (  ) ;^681^^^^^680^712^[REPLACE] Node condition = n.getFirstChild (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^681^682^^^^680^712^[ADD] Node condition = n.getFirstChild (  ) ; Node trueNode = condition.getNext (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node trueNode = n.getNext (  ) ;^682^^^^^680^712^[REPLACE] Node trueNode = condition.getNext (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^682^^^^^680^712^[ADD] Node trueNode = condition.getNext (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node falseNode = n.getFirstChild (  ) ;^683^^^^^680^712^[REPLACE] Node falseNode = n.getLastChild (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^686^^^^^680^712^[REPLACE] scope = traverse ( condition, scope ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^689^690^691^^^680^712^[REPLACE] FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^689^690^691^^^680^712^[ADD] FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( n, scope, true ) ;^692^693^694^^^680^712^[REPLACE] FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^692^693^694^^^680^712^[ADD] FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^traverse ( trueNode, trueScope.inferSlotType (  )  ) ;^697^^^^^680^712^[REPLACE] traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^traverse ( trueNode, newScope.createChildFlowScope (  )  ) ;^697^^^^^680^712^[REPLACE] traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^traverse ( trueNode, falseScope.createChildFlowScope (  )  ) ;^700^^^^^680^712^[REPLACE] traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^traverse ( falseNode, trueScope .inferSlotType (  )   ) ;^700^^^^^680^712^[REPLACE] traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType trueType = n.setJSType (  ) ;^703^^^^^680^712^[REPLACE] JSType trueType = trueNode.getJSType (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType falseType = trueNode.setJSType (  ) ;^704^^^^^680^712^[REPLACE] JSType falseType = falseNode.getJSType (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  falseType != null )  {^705^^^^^680^712^[REPLACE] if  ( trueType != null && falseType != null )  {^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.getChildAtIndex ( false ) ;^708^^^^^705^709^[REPLACE] n.setJSType ( null ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( trueType.getRestrictedTypeGivenToBooleanOutcome ( falseType )  ) ;^706^^^^^680^712^[REPLACE] n.setJSType ( trueType.getLeastSupertype ( falseType )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return scope.inferSlotType (  ) ;^711^^^^^680^712^[REPLACE] return scope.createChildFlowScope (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^715^^^^^714^730^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node left = n.getLastChild (  ) ;^717^^^^^714^730^[REPLACE] Node left = n.getFirstChild (  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType functionType = getJSType ( left ) .getDirectedPredNodes (  ) ;^718^^^^^714^730^[REPLACE] JSType functionType = getJSType ( left ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^718^^^^^714^730^[ADD] JSType functionType = getJSType ( left ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( functionType == true )  {^719^^^^^714^730^[REPLACE] if  ( functionType != null )  {^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^719^720^721^722^723^714^730^[ADD] if  ( functionType != null )  { if  ( functionType instanceof FunctionType )  { FunctionType fnType =  ( FunctionType )  functionType; n.setJSType ( fnType.getReturnType (  )  ) ; updateTypeOfParametersOnClosure ( n, fnType ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! functionType instanceof FunctionType )  {^720^^^^^714^730^[REPLACE] if  ( functionType instanceof FunctionType )  {^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^FunctionType fnType =  ( FunctionType )  functionType;n.setJSType ( fnType.getReturnType (  )  ) ;updateTypeOfParametersOnClosure ( n, fnType ) ;updateTypeOfThisOnClosure ( n, fnType ) ;^720^721^722^723^724^714^730^[ADD] if  ( functionType instanceof FunctionType )  { FunctionType fnType =  ( FunctionType )  functionType; n.setJSType ( fnType.getReturnType (  )  ) ; updateTypeOfParametersOnClosure ( n, fnType ) ; updateTypeOfThisOnClosure ( n, fnType ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^}  else {^725^^^^^714^730^[REPLACE] } else if  ( functionType.equals ( getNativeType ( CHECKED_UNKNOWN_TYPE )  )  )  {^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^}^725^726^727^^^714^730^[ADD] else if  ( functionType.equals ( getNativeType ( CHECKED_UNKNOWN_TYPE )  )  )  { n.setJSType ( getNativeType ( CHECKED_UNKNOWN_TYPE )  ) ; }^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( getNativeType ( UNKNOWN_TYPE )  ) ;^726^^^^^714^730^[REPLACE] n.setJSType ( getNativeType ( CHECKED_UNKNOWN_TYPE )  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^726^^^^^714^730^[ADD] n.setJSType ( getNativeType ( CHECKED_UNKNOWN_TYPE )  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^721^^^^^714^730^[REPLACE] FunctionType fnType =  ( FunctionType )  functionType;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^721^722^^^^714^730^[ADD] FunctionType fnType =  ( FunctionType )  functionType; n.setJSType ( fnType.getReturnType (  )  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REMOVE]^scope = scope.createChildFlowScope (  ) ;^726^^^^^714^730^[REMOVE] ^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^721^^^^^714^730^[ADD] FunctionType fnType =  ( FunctionType )  functionType;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return trueScope;^729^^^^^714^730^[REPLACE] return scope;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int i = 0 / 0;^737^^^^^736^757^[REPLACE] int i = 0;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! iParameterType instanceof FunctionType )  {^740^^^^^736^757^[REPLACE] if  ( iParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 1  >  n.getChildCount (  )  )  {^743^^^^^736^757^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^743^744^745^746^^736^757^[ADD] if  ( i + 1 >= n.getChildCount (  )  )  {  return; }^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^745^^^^^736^757^[REPLACE] return;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^[REPLACE] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^749^750^751^752^753^736^757^[ADD] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  { iArgument.setJSType ( iParameterFnType ) ; }^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iArgument .getJSType ( iArgument )  ;^752^^^^^736^757^[REPLACE] iArgument.setJSType ( iParameterFnType ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FunctionType jParameterFnType =  ( FunctionType )  jParameterType;^741^^^^^736^757^[REPLACE] FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node iArgument = n.getChildCount ( i  ||  2 ) ;^747^^^^^736^757^[REPLACE] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType nType = getJSType ( iArgument ) ;^748^^^^^736^757^[REPLACE] JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^748^^^^^736^757^[ADD] JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgument.getType (  )  != Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^[REPLACE] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iArgument.setJSType ( fnType ) ;^752^^^^^736^757^[REPLACE] iArgument.setJSType ( iParameterFnType ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^752^^^^^736^757^[ADD] iArgument.setJSType ( iParameterFnType ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = fnType.getSource (  ) ;^738^^^^^736^757^[REPLACE] for  ( Node iParameter : fnType.getParameters (  )  )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iArgumentType = iParameter.setJSType (  ) ;^739^^^^^736^757^[REPLACE] JSType iParameterType = iParameter.getJSType (  ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node iArgument = n.getChildAtIndex ( i  &&  4 ) ;^747^^^^^736^757^[REPLACE] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( fnType.getTemplateTypeName (  )  != null )  {^767^^^^^764^843^[REPLACE] if  ( fnType.getTemplateTypeName (  )  == null )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^768^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int i = 3;^771^^^^^764^843^[REPLACE] int i = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^776^^^^^764^843^[REPLACE] if  ( iParameterType.isTemplateType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^776^777^778^^780^764^843^[ADD] if  ( iParameterType.isTemplateType (  )  )  {  if  ( i + 1 >= n.getChildCount (  )  )  { return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 1  ==  jArgument.getChildCount (  )  )  {^778^^^^^764^843^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^780^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgumentType == true )  {^784^^^^^764^843^[REPLACE] if  ( iArgumentType != null )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! ! ( jParameterType instanceof ObjectType )  )  {^786^^^^^764^843^[REPLACE] if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^790^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! sourceType instanceof FunctionType )  {^798^^^^^764^843^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^800^^^^^764^843^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  < j (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^805^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.setJSType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^809^810^^^813^764^843^[ADD] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  { FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^814^815^^817^818^809^825^[ADD] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {  jArgument.setJSType ( new FunctionType (^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^819^820^821^^^809^825^[ADD] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getInstanceType (  ) , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^809^825^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^813^^^^^809^825^[REPLACE] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getInstanceType (  )  , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^764^843^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^822^823^^^^764^843^[ADD] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^foundTemplateTypeOfThisParameter = false;^801^^^^^764^843^[REPLACE] foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = jArgument.getChildAtIndex ( j  <=  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^JSType jArgumentType = getJSType ( jArgument ) ;^807^808^^^^764^843^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ; JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iArgumentType = getJSType ( iArgument ) ;^808^^^^^764^843^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^813^^^^^764^843^[REPLACE] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  ==  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( nFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, nFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^821^822^823^^^809^825^[ADD] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getSource (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParametersNode (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getInstanceType (  ) , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^764^843^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^801^^^^^764^843^[ADD] foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^799^^^^^764^843^[REPLACE] FunctionType jParameterFnType =  ( FunctionType )  jParameterType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  ==  2 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 0  ==  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION ) {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getSource (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParametersNode (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getInstanceType (  )  , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^809^825^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^817^818^819^^^764^843^[ADD] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^819^820^821^^^764^843^[ADD] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  ^  0 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( jArgument ) ;^808^^^^^764^843^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <  n.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^820^821^822^^^764^843^[ADD] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( foundTemplateTypeOfThisParameter )  {^833^^^^^764^843^[REPLACE] if  ( !foundTemplateTypeOfThisParameter )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^Node source = fnType.getSource (  ) ;TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;return;^833^834^835^836^837^764^843^[ADD] if  ( !foundTemplateTypeOfThisParameter )  { Node source = fnType.getSource (  ) ; compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ; return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^837^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = jParameterFnType.getSource (  ) ;^834^^^^^764^843^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iParameterType = iParameterType.restrictByNotNullOrUndefined (  ) ; ;^785^^^^^764^843^[REPLACE] iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^boolean foundTemplateTypeOfThisParameter = true;^794^^^^^764^843^[REPLACE] boolean foundTemplateTypeOfThisParameter = false;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int j = 3;^795^^^^^764^843^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^795^^^^^764^843^[ADD] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = fnType.getSource (  ) ;^796^^^^^764^843^[REPLACE] for  ( Node jParameter : fnType.getParameters (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iParameterType = getJSType ( iParameter ) ;^797^^^^^764^843^[REPLACE] JSType jParameterType = getJSType ( jParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n .getChildCount (  )  ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^807^^^^^764^843^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = jParameterFnType.getReturnType (  ) ;^834^^^^^764^843^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! ! ( sourceType instanceof ObjectType )  )  {^786^^^^^764^843^[REPLACE] if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jParameterType instanceof FunctionType )  {^798^^^^^764^843^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isSubtype ( iParameterType )  )  {^800^^^^^764^843^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^800^801^^803^^764^843^[ADD] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  { foundTemplateTypeOfThisParameter = true; if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 4  == j (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^803^804^805^806^^764^843^[ADD] if  ( j + 1 >= n.getChildCount (  )  )  {  return; }^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  jArgumentType instanceof FunctionType )  {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isSubtype (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^813^^^^^809^825^[ADD] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^821^822^823^^^764^843^[ADD] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  &&  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^813^^^^^764^843^[ADD] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^822^823^^^^809^825^[ADD] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType .getReturnType (  )  ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^807^808^^^^764^843^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ; JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType nType = getJSType ( jArgument ) ;^808^^^^^764^843^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^814^815^^817^818^764^843^[ADD] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {  jArgument.setJSType ( new FunctionType (^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  <  1 / 3 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  )  .isSubtype (  )   )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^833^^^^^764^843^[REPLACE] if  ( !foundTemplateTypeOfThisParameter )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node iArgument = n.getChildAtIndex ( i  >  1 ) ;^782^^^^^764^843^[REPLACE] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( iArgument ) ;^783^^^^^764^843^[REPLACE] JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^783^^^^^764^843^[ADD] JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int j = 0 >> 2;^795^^^^^764^843^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( jParameter ) ;^797^^^^^764^843^[REPLACE] JSType jParameterType = getJSType ( jParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^797^^^^^764^843^[ADD] JSType jParameterType = getJSType ( jParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildCount ( j  |  4 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 1  !=  n.getChildCount (  )  )  {^778^^^^^764^843^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (jParameterType == null )  {^784^^^^^764^843^[REPLACE] if  ( iArgumentType != null )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! ! ( iArgumentType instanceof ObjectType )  )  {^786^^^^^764^843^[REPLACE] if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgumentType instanceof FunctionType )  {^798^^^^^764^843^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <=  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^817^818^819^^^809^825^[ADD] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  &  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <  jArgument.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  ) .isSubtype (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  |  1 - 1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  >  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^834^^^^^764^843^[ADD] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int j = 4;^795^^^^^764^843^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  <  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  !=  n.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = jArgument.getChildCount ( j  ^  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^820^821^822^^^809^825^[ADD] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  |  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION && jParameterType instanceof FunctionType )  {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument .getJSType ( iArgument )  ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getParameters (  ) .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  >=  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <= j (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  ) .isSubtype (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ; ;^775^^^^^764^843^[REPLACE] iParameterType = iParameterType.restrictByNotNullOrUndefined (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^785^^^^^764^843^[ADD] iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = fnType.getSource (  ) ;^773^^^^^764^843^[REPLACE] for  ( Node iParameter : fnType.getParameters (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( iParameter ) ;^774^^^^^764^843^[REPLACE] JSType iParameterType = getJSType ( iParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node iArgument = n.getChildCount ( i  &  1 ) ;^782^^^^^764^843^[REPLACE] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int j = 0 + 0;^795^^^^^764^843^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  ||  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node constructor = constructor.getFirstChild (  ) ;^846^^^^^845^868^[REPLACE] Node constructor = n.getFirstChild (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverse ( el, scope ) ; ;^847^^^^^845^868^[REPLACE] scope = traverse ( constructor, scope ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType constructorType = constructor .getJSType ( constructor )  ;^849^^^^^845^868^[REPLACE] JSType constructorType = constructor.getJSType (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = false;^850^^^^^845^868^[REPLACE] JSType type = null;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( constructorType == this )  {^851^^^^^845^868^[REPLACE] if  ( constructorType != null )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^constructorType = constructorType.restrictByNotNullOrUndefined (  ) ;type = getNativeType ( UNKNOWN_TYPE ) ;^851^852^853^854^^845^868^[ADD] if  ( constructorType != null )  { constructorType = constructorType.restrictByNotNullOrUndefined (  ) ; if  ( constructorType.isUnknownType (  )  )  { type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^853^^^^^845^868^[REPLACE] if  ( constructorType.isUnknownType (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^type = getNativeType ( UNKNOWN_TYPE ) ;FunctionType ct =  ( FunctionType )  constructorType;^853^854^855^856^^845^868^[ADD] if  ( constructorType.isUnknownType (  )  )  { type = getNativeType ( UNKNOWN_TYPE ) ; } else if  ( constructorType instanceof FunctionType )  { FunctionType ct =  ( FunctionType )  constructorType;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^}  else {^855^^^^^845^868^[REPLACE] } else if  ( constructorType instanceof FunctionType )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^}   FunctionType ct =  ( FunctionType )  constructorType;type = ct.getInstanceType (  ) ;^855^856^857^858^859^845^868^[ADD] else if  ( constructorType instanceof FunctionType )  { FunctionType ct =  ( FunctionType )  constructorType; if  ( ct.isConstructor (  )  )  { type = ct.getInstanceType (  ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ct .isSubtype (  )   )  {^857^^^^^845^868^[REPLACE] if  ( ct.isConstructor (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  null.getInstanceType (  ) ;^858^^^^^845^868^[REPLACE] type = ct.getInstanceType (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^856^^^^^845^868^[REPLACE] FunctionType ct =  ( FunctionType )  constructorType;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^856^^^^^845^868^[ADD] FunctionType ct =  ( FunctionType )  constructorType;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ct.getInstanceType (  )  )  {^857^^^^^845^868^[REPLACE] if  ( ct.isConstructor (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^type = ct.getInstanceType (  ) ;^857^858^859^^^845^868^[ADD] if  ( ct.isConstructor (  )  )  { type = ct.getInstanceType (  ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type = getNativeType ( NUMBER_TYPE ) ; ;^854^^^^^845^868^[REPLACE] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^858^^^^^845^868^[ADD] type = ct.getInstanceType (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ; ;^852^^^^^845^868^[REPLACE] constructorType = constructorType.restrictByNotNullOrUndefined (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^854^^^^^845^868^[ADD] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (type.isUnknownType (  )  )  {^853^^^^^845^868^[REPLACE] if  ( constructorType.isUnknownType (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^} else if  ( ! constructorType instanceof FunctionType )  {^855^^^^^845^868^[REPLACE] } else if  ( constructorType instanceof FunctionType )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^}   type = ct.getInstanceType (  ) ;^855^856^857^858^859^845^868^[ADD] else if  ( constructorType instanceof FunctionType )  { FunctionType ct =  ( FunctionType )  constructorType; if  ( ct.isConstructor (  )  )  { type = ct.getInstanceType (  ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^857^^^^^845^868^[REPLACE] if  ( ct.isConstructor (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^857^858^859^^^845^868^[ADD] if  ( ct.isConstructor (  )  )  { type = ct.getInstanceType (  ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^name.setJSType ( type ) ;^862^^^^^845^868^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^for  ( Nodeconstructor = constructor.getNext (  ) ; constructor == null; arg = arg.getNext (  )  )  {^864^^^^^845^868^[REPLACE] for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^865^^^^^845^868^[REPLACE] scope = traverse ( arg, scope ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  { scope = traverse ( arg, scope ) ; ;^864^^^^^845^868^[REPLACE] for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^for  ( Node arg = constructor .getParent (  )  ; arg != null; arg = arg^864^^^^^845^868^[REPLACE] for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return output;^867^^^^^845^868^[REPLACE] return scope;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return traverseShortCircuitingBinOp ( n, scope, false ) ;^871^^^^^870^872^[REPLACE] return traverseShortCircuitingBinOp ( n, scope, true ) ;^[METHOD] traverseAnd [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^for  ( Node el = n.getFirstChild (  ) ; el == null; el = el.getNext (  )  )  {^875^^^^^874^879^[REPLACE] for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^[METHOD] traverseChildren [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node el  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^876^^^^^874^879^[REPLACE] scope = traverse ( el, scope ) ;^[METHOD] traverseChildren [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node el  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  { scope = traverse ( el, scope ) ; ;^875^^^^^874^879^[REPLACE] for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^[METHOD] traverseChildren [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node el  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^875^876^877^^^874^879^[ADD] for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  { scope = traverse ( el, scope ) ; }^[METHOD] traverseChildren [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node el  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^for  ( Node el = n.getLastChild (  ) ; el != null; el = el.getNext (  )  )  {^875^^^^^874^879^[REPLACE] for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^[METHOD] traverseChildren [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node el  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return rightScope;^878^^^^^874^879^[REPLACE] return scope;^[METHOD] traverseChildren [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node el  n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^882^^^^^881^892^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^882^^^^^881^892^[ADD] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^ObjectType objType = ObjectType .hasProperty ( this )  .restrictByNotNullOrUndefined (  )  ) ;^883^884^^^^881^892^[REPLACE] ObjectType objType = ObjectType.cast ( getJSType ( n.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^883^884^^^^881^892^[ADD] ObjectType objType = ObjectType.cast ( getJSType ( n.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( objType == true )  {^885^^^^^881^892^[REPLACE] if  ( objType != null )  {^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( type == null )  {^887^^^^^881^892^[REPLACE] if  ( type != null )  {^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^name.setJSType ( type ) ;^888^^^^^881^892^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = objType.isInstanceType (  ) ;^886^^^^^881^892^[REPLACE] JSType type = objType.getParameterType (  ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^887^888^889^^^881^892^[ADD] if  ( type != null )  { n.setJSType ( type ) ; }^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n .getJSType ( n )  ;^888^^^^^881^892^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return dereferencePointer ( n .getLastChild (  )  , scope ) ;^891^^^^^881^892^[REPLACE] return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[METHOD] traverseGetElem [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node objNode = objNode.getFirstChild (  ) ;^895^^^^^894^902^[REPLACE] Node objNode = n.getFirstChild (  ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^Node property = n.getLastChild (  ) ;^895^896^^^^894^902^[ADD] Node objNode = n.getFirstChild (  ) ; Node property = n.getLastChild (  ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node property = objNode.getLastChild (  ) ;^896^^^^^894^902^[REPLACE] Node property = n.getLastChild (  ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^897^^^^^894^902^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( getPropertyType ( n.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^898^899^900^^^894^902^[REPLACE] n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^getPropertyType ( objNode.setJSType (  ) , property.getString (  ) , n, scope )  ) ;^899^900^^^^894^902^[REPLACE] getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^objNode.setJSType (  ) , property.getString (  ) , n, scope )  ) ;^900^^^^^894^902^[REPLACE] objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^objNode.getJSType (  ) , property.getParent (  ) , n, scope )  ) ;^900^^^^^894^902^[REPLACE] objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return dereferencePointer ( objNode.getFirstChild (  ) , scope ) ;^901^^^^^894^902^[REPLACE] return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[METHOD] traverseGetProp [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  objNode  property  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^909^^^^^908^918^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( type  ==  narrowed )  {^912^^^^^908^918^[REPLACE] if  ( type != narrowed )  {^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^912^913^914^915^^908^918^[ADD] if  ( type != narrowed )  { scope = scope.createChildFlowScope (  ) ; redeclare ( scope, n.getString (  ) , narrowed ) ; }^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope =  rightScope.createChildFlowScope (  ) ;^913^^^^^908^918^[REPLACE] scope = scope.createChildFlowScope (  ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^913^914^^^^908^918^[ADD] scope = scope.createChildFlowScope (  ) ; redeclare ( scope, n.getString (  ) , narrowed ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope =  null.createChildFlowScope (  ) ;^913^^^^^908^918^[REPLACE] scope = scope.createChildFlowScope (  ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType jsType = n.getJSType (  ) ;^910^^^^^908^918^[REPLACE] JSType type = getJSType ( n ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^910^911^^^^908^918^[ADD] JSType type = getJSType ( n ) ; JSType narrowed = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType narrowed = narrowed.restrictByNotNullOrUndefined (  ) ;^911^^^^^908^918^[REPLACE] JSType narrowed = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope =  newScope.createChildFlowScope (  ) ;^913^^^^^908^918^[REPLACE] scope = scope.createChildFlowScope (  ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^redeclare ( scope, n.getString (  ) , narrowed ) ;^913^914^^^^908^918^[ADD] scope = scope.createChildFlowScope (  ) ; redeclare ( scope, n.getString (  ) , narrowed ) ;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return output;^917^^^^^908^918^[REPLACE] return scope;^[METHOD] dereferencePointer [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType narrowed  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^String qualifiedName = n .isQualifiedName (  )  ;^923^^^^^921^954^[REPLACE] String qualifiedName = n.getQualifiedName (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^923^924^925^926^^921^954^[ADD] String qualifiedName = n.getQualifiedName (  ) ; StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ; if  ( var != null )  { JSType varType = var.getType (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^StaticSlot<JSType> var = newScope.getSlot ( qualifiedName ) ;^924^^^^^921^954^[REPLACE] StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( null == null )  {^925^^^^^921^954^[REPLACE] if  ( var != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (propertyType == null )  {^927^^^^^921^954^[REPLACE] if  ( varType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^927^928^929^^^921^954^[ADD] if  ( varType != null )  { if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^921^954^[REPLACE] if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return propertyType;^934^^^^^928^935^[REPLACE] return varType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return getNativeType ( UNKNOWN_TYPE ) ;^932^^^^^928^935^[REPLACE] return getNativeType ( CHECKED_UNKNOWN_TYPE ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return getNativeType ( UNKNOWN_TYPE ) ;^932^^^^^921^954^[REPLACE] return getNativeType ( CHECKED_UNKNOWN_TYPE ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return propertyType;^934^^^^^921^954^[REPLACE] return varType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  || var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^921^954^[REPLACE] if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^928^929^^^932^921^954^[ADD] if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  { return getNativeType ( CHECKED_UNKNOWN_TYPE ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType thisType = var.getType (  ) ;^926^^^^^921^954^[REPLACE] JSType varType = var.getType (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType trueType = var.getType (  ) ;^926^^^^^921^954^[REPLACE] JSType varType = var.getType (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType propertyType = this;^939^^^^^921^954^[REPLACE] JSType propertyType = null;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^939^^^^^921^954^[ADD] JSType propertyType = null;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( objType == true )  {^940^^^^^921^954^[REPLACE] if  ( objType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^propertyType =  null.findPropertyType ( propName ) ;^941^^^^^921^954^[REPLACE] propertyType = objType.findPropertyType ( propName ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^propertyType =  varType.findPropertyType ( propName ) ;^941^^^^^921^954^[REPLACE] propertyType = objType.findPropertyType ( propName ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^944^945^^^^921^954^[REPLACE] if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^944^945^^947^^921^954^[ADD] if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  { ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( regType == null )  {^948^^^^^944^951^[REPLACE] if  ( regType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^948^949^950^^^944^951^[ADD] if  ( regType != null )  { propertyType = regType.getConstructor (  ) ; }^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^propertyType =  null.getConstructor (  ) ;^949^^^^^944^951^[REPLACE] propertyType = regType.getConstructor (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^949^^^^^944^951^[ADD] propertyType = regType.getConstructor (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^ObjectType regType = ObjectType .hasProperty ( propName )  ;^947^^^^^944^951^[REPLACE] ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( regType == null )  {^948^^^^^921^954^[REPLACE] if  ( regType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^propertyType =  null.getConstructor (  ) ;^949^^^^^921^954^[REPLACE] propertyType = regType.getConstructor (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^ObjectType regType = ObjectType.cast ( registry.getType ( propName )  ) ;^947^^^^^921^954^[REPLACE] ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return varType;^953^^^^^921^954^[REPLACE] return propertyType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return traverseShortCircuitingBinOp ( n, scope, true ) ;^957^^^^^956^958^[REPLACE] return traverseShortCircuitingBinOp ( n, scope, false ) ;^[METHOD] traverseOr [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node left = n.getLastChild (  ) ;^962^^^^^961^1022^[REPLACE] Node left = n.getFirstChild (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node right = n.getFirstChild (  ) ;^963^^^^^961^1022^[REPLACE] Node right = n.getLastChild (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^966^967^968^^^961^1022^[REPLACE] BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^966^967^968^^^961^1022^[ADD] BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType rightType = left.getJSType (  ) ;^969^^^^^961^1022^[REPLACE] JSType leftType = left.getJSType (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^969^^^^^961^1022^[ADD] JSType leftType = left.getJSType (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , true ) , condition ) ;^973^974^975^976^^961^1022^[REPLACE] FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^973^974^975^^^961^1022^[ADD] FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) ,^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^979^980^981^^^961^1022^[REPLACE] BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType leftType = right.getJSType (  ) ;^982^^^^^961^1022^[REPLACE] JSType rightType = right.getJSType (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType propertyType = null;^984^^^^^961^1022^[REPLACE] JSType type;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^boolean foundTemplateTypeOfThisParameter = false;^985^^^^^961^1022^[REPLACE] BooleanOutcomePair literals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( leftType == null && rightType != null )  {^986^^^^^961^1022^[REPLACE] if  ( leftType != null && rightType != null )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^986^987^988^989^^961^1022^[ADD] if  ( leftType != null && rightType != null )  { leftType = leftType.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ; if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type = this;^1013^^^^^986^1018^[REPLACE] type = null;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, rightLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^986^1018^[REPLACE] literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( condition )  )  {^988^989^^^^961^1022^[REPLACE] if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^988^989^^^992^961^1022^[ADD] if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  { type = leftType;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  rightType.getLeastSupertype ( rightType ) ;^997^^^^^988^1000^[REPLACE] type = leftType.getLeastSupertype ( rightType ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^997^^^^^988^1000^[ADD] type = leftType.getLeastSupertype ( rightType ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  getBooleanOutcomePair ( rightLiterals, rightLiterals, condition ) ;^998^999^^^^988^1000^[REPLACE] literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  rightType;^992^^^^^988^1000^[REPLACE] type = leftType;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  rightLiterals;^993^^^^^988^1000^[REPLACE] literals = leftLiterals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  getNativeType ( BOOLEAN_TYPE ) .isSubtype ( rightType )  )  {^1004^1005^^^^961^1022^[REPLACE] if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! type instanceof UnionType )  {^1007^^^^^1004^1011^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =   (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^1008^1009^^^^1004^1011^[REPLACE] type =  (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1008^1009^^^^1004^1011^[ADD] type =  (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! type instanceof UnionType )  {^1007^^^^^961^1022^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =   (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^1008^1009^^^^961^1022^[REPLACE] type =  (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^leftType =  type.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ;^987^^^^^961^1022^[REPLACE] leftType = leftType.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  null;^992^^^^^961^1022^[REPLACE] type = leftType;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  rightLiterals;^993^^^^^961^1022^[REPLACE] literals = leftLiterals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  rightType.getLeastSupertype ( rightType ) ;^997^^^^^961^1022^[REPLACE] type = leftType.getLeastSupertype ( rightType ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^997^^^^^961^1022^[ADD] type = leftType.getLeastSupertype ( rightType ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  getBooleanOutcomePair ( rightLiterals, rightLiterals, condition ) ;^998^999^^^^961^1022^[REPLACE] literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1008^1009^^^^961^1022^[ADD] type =  (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( rightLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( condition )  )  {^988^989^^^^961^1022^[REPLACE] if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  getBooleanOutcomePair ( null, rightLiterals, condition ) ;^998^999^^^^988^1000^[REPLACE] literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^998^999^^^^988^1000^[ADD] literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY || getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^961^1022^[REPLACE] if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1004^1005^^1007^1008^961^1022^[ADD] if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  { if  ( type instanceof UnionType )  { type =  (  ( UnionType )  type ) .getRestrictedUnion (^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^987^^^^^961^1022^[ADD] leftType = leftType.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  rightType;^992^^^^^961^1022^[REPLACE] type = leftType;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type = this;^1013^^^^^961^1022^[REPLACE] type = null;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =   new BooleanOutcomePair ( BOTH, BOTH, flowScope, flowScope )  , rightLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^961^1022^[REPLACE] literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^name.setJSType ( type ) ;^1019^^^^^961^1022^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REMOVE]^name.setJSType ( type ) ;^1019^^^^^961^1022^[REMOVE] ^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return rightLiterals;^1021^^^^^961^1022^[REPLACE] return literals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseNew ( n, scope ) ; ;^1034^^^^^1024^1037^[REPLACE] scope = traverse ( n, scope ) ;^[METHOD] traverseWithinShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return traverseOr ( n, scope ) ;^1028^^^^^1024^1037^[REPLACE] return traverseAnd ( n, scope ) ;^[METHOD] traverseWithinShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return traverseOr ( n, trueScope ) ;^1031^^^^^1024^1037^[REPLACE] return traverseOr ( n, scope ) ;^[METHOD] traverseWithinShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return newBooleanOutcomePair ( n.setJSType (  ) , scope ) ;^1035^^^^^1024^1037^[REPLACE] return newBooleanOutcomePair ( n.getJSType (  ) , scope ) ;^[METHOD] traverseWithinShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, true ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^[REPLACE] return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[METHOD] getBooleanOutcomePair [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] BooleanOutcomePair left BooleanOutcomePair right boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair left  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return right.union ( left .union (  )   ) ;^1067^^^^^1065^1068^[REPLACE] return right.union ( left.intersection ( BooleanLiteralSet.get ( !condition )  )  ) ;^[METHOD] getBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] BooleanLiteralSet left BooleanLiteralSet right boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( joinedScope != this  )  {^1103^^^^^1102^1111^[REPLACE] if  ( joinedScope == null )  {^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( leftScope  !=  rightScope )  {^1104^^^^^1102^1111^[REPLACE] if  ( leftScope == rightScope )  {^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^joinedScope  = null ;^1107^^^^^1102^1111^[REPLACE] joinedScope = join ( leftScope, rightScope ) ;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1107^^^^^1102^1111^[ADD] joinedScope = join ( leftScope, rightScope ) ;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^joinedScope  =  joinedScope ;^1105^^^^^1102^1111^[REPLACE] joinedScope = rightScope;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^joinedScope ;^1105^^^^^1102^1111^[REPLACE] joinedScope = rightScope;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^joinedScope  =  joinedScope ;^1107^^^^^1102^1111^[REPLACE] joinedScope = join ( leftScope, rightScope ) ;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (trueScope  ||  rightScope )  {^1104^^^^^1102^1111^[REPLACE] if  ( leftScope == rightScope )  {^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1104^1105^1106^1107^1108^1102^1111^[ADD] if  ( leftScope == rightScope )  { joinedScope = rightScope; } else { joinedScope = join ( leftScope, rightScope ) ; }^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^1110^^^^^1102^1111^[REPLACE] return joinedScope;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( nodeType == Token.AND && outcome ) {^1118^1119^^^^1117^1125^[REPLACE] if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[METHOD] getOutcomeFlowScope [TYPE] FlowScope [PARAMETER] int nodeType boolean outcome [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  outcome  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  int nodeType  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^1123^^^^^1117^1125^[REPLACE] return getJoinedFlowScope (  ) ;^[METHOD] getOutcomeFlowScope [TYPE] FlowScope [PARAMETER] int nodeType boolean outcome [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  outcome  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  int nodeType  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^1121^^^^^1117^1125^[REPLACE] return rightScope;^[METHOD] getOutcomeFlowScope [TYPE] FlowScope [PARAMETER] int nodeType boolean outcome [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  outcome  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  int nodeType  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jsType != null )  {^1130^^^^^1128^1138^[REPLACE] if  ( jsType == null )  {^[METHOD] newBooleanOutcomePair [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] JSType jsType FlowScope flowScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return  new BooleanOutcomePair ( BOTH, BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  )  ;^1131^1132^^^^1128^1138^[REPLACE] return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope ) ;^[METHOD] newBooleanOutcomePair [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] JSType jsType FlowScope flowScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return new BooleanOutcomePair ( jsType.getJSDocInfo (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^1134^1135^1136^1137^^1128^1138^[REPLACE] return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[METHOD] newBooleanOutcomePair [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] JSType jsType FlowScope flowScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( varType != true )  {^1141^^^^^1140^1145^[REPLACE] if  ( varType == null )  {^[METHOD] redeclare [TYPE] void [PARAMETER] FlowScope scope String varName JSType varType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType varType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^varType = getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^1141^1142^1143^^^1140^1145^[ADD] if  ( varType == null )  { varType = getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[METHOD] redeclare [TYPE] void [PARAMETER] FlowScope scope String varName JSType varType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType varType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type = getNativeType ( UNKNOWN_TYPE ) ; ;^1142^^^^^1140^1145^[REPLACE] varType = getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] redeclare [TYPE] void [PARAMETER] FlowScope scope String varName JSType varType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType varType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1142^^^^^1140^1145^[ADD] varType = getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] redeclare [TYPE] void [PARAMETER] FlowScope scope String varName JSType varType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType varType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope.inferQualifiedSlot ( varName, varType ) ;^1144^^^^^1140^1145^[REPLACE] scope.inferSlotType ( varName, varType ) ;^[METHOD] redeclare [TYPE] void [PARAMETER] FlowScope scope String varName JSType varType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType varType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REMOVE]^propertyType = objType.findPropertyType ( propName ) ;^1144^^^^^1140^1145^[REMOVE] ^[METHOD] redeclare [TYPE] void [PARAMETER] FlowScope scope String varName JSType varType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType varType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType jsType = n.setJSType (  ) ;^1152^^^^^1151^1162^[REPLACE] JSType jsType = n.getJSType (  ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jsType != this  )  {^1153^^^^^1151^1162^[REPLACE] if  ( jsType == null )  {^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;^1160^^^^^1151^1162^[REPLACE] return jsType;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return getNativeType ( CHECKED_UNKNOWN_TYPE ) ;^1158^^^^^1151^1162^[REPLACE] return getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return registry.getType ( typeId ) ;^1165^^^^^1164^1166^[REPLACE] return registry.getNativeType ( typeId ) ;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  JSTypeNative typeId  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^BooleanLiteralSet booleanValues;^1078^^^^^^^[REPLACE] final BooleanLiteralSet booleanValues;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  JSTypeNative typeId  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope rightScope;^1084^^^^^^^[REPLACE] final FlowScope rightScope;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  JSTypeNative typeId  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope joinedScope ;^1087^^^^^^^[REPLACE] FlowScope joinedScope = null;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  JSTypeNative typeId  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^this.toBooleanOutcomes =  booleanValues;^1092^^^^^1089^1096^[REPLACE] this.toBooleanOutcomes = toBooleanOutcomes;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[ADD]^^1092^^^^^1089^1096^[ADD] this.toBooleanOutcomes = toBooleanOutcomes;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^this.booleanValues =  toBooleanOutcomes;^1093^^^^^1089^1096^[REPLACE] this.booleanValues = booleanValues;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^this.rightScope = rightScope; ;^1094^^^^^1089^1096^[REPLACE] this.leftScope = leftScope;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^this.leftScope = leftScope; ;^1095^^^^^1089^1096^[REPLACE] this.rightScope = rightScope;^[METHOD] <init> [TYPE] FlowScope) [PARAMETER] BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^if  (rightScope != this )  {^1103^^^^^1102^1111^[REPLACE] if  ( joinedScope == null )  {^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^if  (joinedScope  &&  rightScope )  {^1104^^^^^1102^1111^[REPLACE] if  ( leftScope == rightScope )  {^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^joinedScope  =  joinedScope ;^1107^^^^^1102^1111^[REPLACE] joinedScope = join ( leftScope, rightScope ) ;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^joinedScope ;^1105^^^^^1102^1111^[REPLACE] joinedScope = rightScope;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^joinedScope  =  joinedScope ;^1105^^^^^1102^1111^[REPLACE] joinedScope = rightScope;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[ADD]^^1105^^^^^1102^1111^[ADD] joinedScope = rightScope;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^if  ( leftScope  &&  rightScope )  {^1104^^^^^1102^1111^[REPLACE] if  ( leftScope == rightScope )  {^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[ADD]^^1107^^^^^1102^1111^[ADD] joinedScope = join ( leftScope, rightScope ) ;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^return rightScope;^1110^^^^^1102^1111^[REPLACE] return joinedScope;^[METHOD] getJoinedFlowScope [TYPE] FlowScope [PARAMETER] [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope joinedScope  leftScope  rightScope  [TYPE]  boolean false  true 
[REPLACE]^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && outcome )  {^1118^1119^^^^1117^1125^[REPLACE] if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[METHOD] getOutcomeFlowScope [TYPE] FlowScope [PARAMETER] int nodeType boolean outcome [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  boolean false  outcome  true  [TYPE]  int nodeType  [TYPE]  FlowScope joinedScope  leftScope  rightScope 
[REPLACE]^return joinedScope;^1123^^^^^1117^1125^[REPLACE] return getJoinedFlowScope (  ) ;^[METHOD] getOutcomeFlowScope [TYPE] FlowScope [PARAMETER] int nodeType boolean outcome [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  boolean false  outcome  true  [TYPE]  int nodeType  [TYPE]  FlowScope joinedScope  leftScope  rightScope 
[REPLACE]^return joinedScope;^1121^^^^^1117^1125^[REPLACE] return rightScope;^[METHOD] getOutcomeFlowScope [TYPE] FlowScope [PARAMETER] int nodeType boolean outcome [CLASS] BooleanOutcomePair   [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  boolean false  outcome  true  [TYPE]  int nodeType  [TYPE]  FlowScope joinedScope  leftScope  rightScope 
