[REPLACE]^static  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE", "The template type must be an object type" ) ;^61^62^63^64^^61^64^[REPLACE] static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE", "The template type must be an object type" ) ;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED", "A function type with the template type as the type of this must be a " +^66^67^68^69^^66^70^[REPLACE] static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED", "A function type with the template type as the type of this must be a " +^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^private  FlowScope bottomScope;^78^^^^^^^[REPLACE] private final FlowScope bottomScope;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^BooleanLiteralSet booleanValues;^1078^^^^^^^[REPLACE] final BooleanLiteralSet booleanValues;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^FlowScope leftScope;^1081^^^^^^^[REPLACE] final FlowScope leftScope;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^FlowScope joinedScope ;^1087^^^^^^^[REPLACE] FlowScope joinedScope = null;^ [CLASS] TypeInference BooleanOutcomePair  
[REPLACE]^super ( null, new LinkedFlowScope.FlowScopeJoinOp (  )  ) ;^83^^^^^82^106^[REPLACE] super ( cfg, new LinkedFlowScope.FlowScopeJoinOp (  )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.compiler =  null;^84^^^^^82^106^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.registry =  null.getTypeRegistry (  ) ;^85^^^^^82^106^[REPLACE] this.registry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.reverseInterpreter =  null;^86^^^^^82^106^[REPLACE] this.reverseInterpreter = reverseInterpreter;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[ADD]^^87^^^^^82^106^[ADD] this.syntacticScope = functionScope;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.functionScope =  LinkedFlowScope.createEntryLattice ( syntacticScope ) ;^88^^^^^82^106^[REPLACE] this.functionScope = LinkedFlowScope.createEntryLattice ( functionScope ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[ADD]^^89^^^^^82^106^[ADD] Iterator<Var> varIt = functionScope.getVars (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^if  ( var.getParentNode (  )  != null && var.getType (  )  != null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^95^96^97^98^^82^106^[REPLACE] if  ( var.getParentNode (  )  != null && var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.functionScope.inferSlotType ( var.getType (  ) , getNativeType ( VOID_TYPE )  ) ;^99^100^^^^95^101^[REPLACE] this.functionScope.inferSlotType ( var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^var.getType (  ) , getNativeType ( VOID_TYPE )  ) ;^100^^^^^95^101^[REPLACE] var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^n.setJSType ( getNativeType ( VOID_TYPE )  )  ;^100^^^^^95^101^[REPLACE] var.getName (  ) , getNativeType ( VOID_TYPE )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[ADD]^^91^^^^^82^106^[ADD] Var var = varIt.next (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^this.bottomScope =  LinkedFlowScope.createEntryLattice ( new Scope ( null.getRootNode (  ) , null.getTypeOfThis (  )  )  ) ;^104^105^^^^82^106^[REPLACE] this.bottomScope = LinkedFlowScope.createEntryLattice ( new Scope ( functionScope.getRootNode (  ) , functionScope.getTypeOfThis (  )  )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  ControlFlowGraph cfg  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  Iterator varIt  [TYPE]  FlowScope bottomScope  functionScope  joinedScope  leftScope  rightScope 
[REPLACE]^FlowScope output = input.createChildFlowScope (  )  ;^139^^^^^133^223^[REPLACE] FlowScope output = flowThrough ( source, input ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^140^^^^^133^223^[ADD] Node condition = null;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^141^142^^^^133^223^[ADD] FlowScope conditionFlowScope = null; BooleanOutcomePair conditionOutcomes = null;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^BooleanOutcomePair literals  ;^142^^^^^133^223^[REPLACE] BooleanOutcomePair conditionOutcomes = null;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node, Branch> branchEdge  ;^144^^^^^133^223^[REPLACE] List<DiGraphEdge<Node, Branch>> branchEdges = getCfg (  ) .getOutEdges ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^List<FlowScope> result = Lists.newArrayListWithCapacity ( 0.size (  )  ) ;^145^^^^^133^223^[REPLACE] List<FlowScope> result = Lists.newArrayListWithCapacity ( branchEdges.size (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^152^^^^^133^223^[REPLACE] if  ( NodeUtil.isForIn ( source )  )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item .setType (  )    !=  Token.VAR )  {^155^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.VAR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^item =  condition.getFirstChild (  ) ;^156^^^^^133^223^[REPLACE] item = item.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item.setJSType (  )   !=  Token.NAME )  {^158^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.NAME )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope =  leftScope;^162^^^^^133^223^[REPLACE] newScope = informed;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^159^160^161^162^163^133^223^[ADD] FlowScope informed = output.createChildFlowScope (  ) ; redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ; newScope = informed; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^156^^^^^133^223^[ADD] item = item.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope =  rightScope;^162^^^^^133^223^[REPLACE] newScope = informed;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^154^^^^^133^223^[ADD] Node item = source.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item.getType (  )   ||  Token.VAR )  {^155^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.VAR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item.getType (  )   ||  Token.NAME )  {^158^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.NAME )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^162^163^^^^133^223^[ADD] newScope = informed; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item !=source )  {^170^^^^^133^223^[REPLACE] if  ( condition == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^condition = NodeUtil.getConditionExpression ( source ) ;condition = createSwitchCaseConditionExpression ( source ) ;^170^171^172^173^174^133^223^[ADD] if  ( condition == null )  { condition = NodeUtil.getConditionExpression ( source ) ; if  ( condition == null && source.getType (  )  == Token.CASE )  { condition = createSwitchCaseConditionExpression ( source ) ; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  (  source.getType (  )  == Token.CASE )  {^172^^^^^133^223^[REPLACE] if  ( condition == null && source.getType (  )  == Token.CASE )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^173^^^^^133^223^[ADD] condition = createSwitchCaseConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^condition =  NodeUtil.getConditionExpression ( null ) ;^171^^^^^133^223^[REPLACE] condition = NodeUtil.getConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^condition =  createSwitchCaseConditionExpression ( null ) ;^173^^^^^133^223^[REPLACE] condition = createSwitchCaseConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition != null ) {^172^^^^^133^223^[REPLACE] if  ( condition == null && source.getType (  )  == Token.CASE )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^172^173^174^^^133^223^[ADD] if  ( condition == null && source.getType (  )  == Token.CASE )  { condition = createSwitchCaseConditionExpression ( source ) ; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( source == null )  {^177^^^^^133^223^[REPLACE] if  ( condition != null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition.getType (  )  == Token.AND && condition.getType (  )  == Token.OR )  {^178^179^^^^133^223^[REPLACE] if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^178^179^^^^133^223^[ADD] if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionFlowScope != this )  {^208^^^^^178^215^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^209^210^^^^178^215^[ADD] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionFlowScope =  traverse ( source, output.createChildFlowScope (  )  ) ;^209^210^^^^178^215^[REPLACE] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch  &&  Branch.ON_TRUE ) ;^212^213^214^^^178^215^[REPLACE] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionOutcomes != null )  {^194^^^^^178^215^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^194^195^196^197^198^178^215^[ADD] if  ( conditionOutcomes == null )  { conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseAnd ( condition, output.createChildFlowScope (  )  )  ;^195^196^197^^^178^215^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionOutcomes != null )  {^194^^^^^133^223^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseAnd ( condition, output.createChildFlowScope (  )  )  ;^195^196^197^^^133^223^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( sourceFlowScope != null )  {^208^^^^^133^223^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^208^209^210^211^^133^223^[ADD] if  ( conditionFlowScope == null )  { conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^209^210^^^^133^223^[ADD] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^133^223^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionFlowScope =  traverse ( source, output.createChildFlowScope (  )  ) ;^209^210^^^^133^223^[REPLACE] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^212^213^214^^^133^223^[ADD] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if   (  conditionOutcomes == null  )   {  ;^208^^^^^178^215^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionFlowScope =  traverse ( null, output.createChildFlowScope (  )  ) ;^209^210^^^^178^215^[REPLACE] conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes  =  traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^178^215^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^195^196^197^^^178^215^[ADD] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^199^200^201^^^178^215^[ADD] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition,^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionOutcomes != this  )  {^194^^^^^133^223^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^195^196^197^^^133^223^[ADD] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionFlowScope != false )  {^208^^^^^133^223^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( NodeUtil.isForIn ( condition )  )  {^152^^^^^133^223^[REPLACE] if  ( NodeUtil.isForIn ( source )  )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition.getType (  )   ||  Token.VAR )  {^155^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.VAR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item.getType (  )   &&  Token.NAME )  {^158^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.NAME )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope informed = rightScope.createChildFlowScope (  ) ;^159^^^^^133^223^[REPLACE] FlowScope informed = output.createChildFlowScope (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node item = condition.getFirstChild (  ) ;^154^^^^^133^223^[REPLACE] Node item = source.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope output = input.createChildFlowScope (  )  ;^159^^^^^133^223^[REPLACE] FlowScope informed = output.createChildFlowScope (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^155^^^^^133^223^[REPLACE] if  ( item.getType (  )  == Token.VAR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^155^156^157^^^133^223^[ADD] if  ( item.getType (  )  == Token.VAR )  { item = item.getFirstChild (  ) ; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope informed = leftScope .inferSlotType (  )  ;^159^^^^^133^223^[REPLACE] FlowScope informed = output.createChildFlowScope (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition != null )  {^170^^^^^133^223^[REPLACE] if  ( condition == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( item != null && source.getType (  )  == Token.CASE )  {^172^^^^^133^223^[REPLACE] if  ( condition == null && source.getType (  )  == Token.CASE )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition != null && source.getType (  )  == Token.CASE )  {^172^^^^^133^223^[REPLACE] if  ( condition == null && source.getType (  )  == Token.CASE )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^177^178^179^^^133^223^[ADD] if  ( condition != null )  { if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  (rightScope != null )  {^208^^^^^178^215^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch  !=  Branch.ON_TRUE ) ;^212^213^214^^^178^215^[REPLACE] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if   (  condition == null  )   {  ;^194^^^^^178^215^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes = condition.getType (  )   &&  Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^178^215^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( sourceOutcomes != null )  {^194^^^^^133^223^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes = condition.getType (  )   &&  Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^133^223^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if   (  conditionOutcomes == null  )   {  ;^208^^^^^133^223^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^conditionOutcomes = condition.getType (  )   !=  Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^133^223^[REPLACE] conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^199^200^201^^^133^223^[ADD] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition,^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( condition.getType (  )  == Token.AND ) {^178^179^^^^133^223^[REPLACE] if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( conditionFlowScope != this  )  {^208^^^^^178^215^[REPLACE] if  ( conditionFlowScope == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch  ||  Branch.ON_TRUE ) ;^212^213^214^^^178^215^[REPLACE] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if   (  condition == null  )   {  ;^194^^^^^133^223^[REPLACE] if  ( conditionOutcomes == null )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^194^195^196^197^198^133^223^[ADD] if  ( conditionOutcomes == null )  { conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ; }^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch  ||  Branch.ON_TRUE ) ;^212^213^214^^^133^223^[REPLACE] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Branch branch = this.getValue (  ) ;^147^^^^^133^223^[REPLACE] Branch branch = branchEdge.getValue (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope newScope = rightScope;^148^^^^^133^223^[REPLACE] FlowScope newScope = output;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node item = source.getLastChild (  ) ;^154^^^^^133^223^[REPLACE] Node item = source.getFirstChild (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[ADD]^^171^^^^^133^223^[ADD] condition = NodeUtil.getConditionExpression ( source ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch  &&  Branch.ON_TRUE ) ;^212^213^214^^^133^223^[REPLACE] newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^Node, Branch>> branchEdges = getCfg (  ) .getOutEdges ( source )  ;^146^^^^^133^223^[REPLACE] for  ( DiGraphEdge<Node, Branch> branchEdge : branchEdges )  {^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^FlowScope informed = output.inferSlotType (  ) ;^159^^^^^133^223^[REPLACE] FlowScope informed = output.createChildFlowScope (  ) ;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^return true;^222^^^^^133^223^[REPLACE] return result;^[METHOD] branchedFlowThrough [TYPE] List [PARAMETER] Node source FlowScope input [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  Node condition  item  source  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  DiGraphEdge branchEdge  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair conditionOutcomes  [TYPE]  Branch branch  [TYPE]  List branchEdges  result  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope 
[REPLACE]^if  ( n.getFirstChild (  ) .getType (  )   ) {^396^^^^^254^429^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.GETPROP )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^ensurePropertyDeclared ( n.getLastChild (  )  ) ;^397^^^^^254^429^[REPLACE] ensurePropertyDeclared ( n.getFirstChild (  )  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^257^^^^^254^429^[REPLACE] scope = traverseAssign ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^261^^^^^254^429^[REPLACE] scope = traverseName ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^265^^^^^254^429^[REPLACE] scope = traverseGetProp ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope =  traverseAnulld ( null, scope ) .getJoinulledFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^429^[REPLACE] scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope =  traverseOr ( null, scope ) .getJoinulledFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^254^429^[REPLACE] scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^279^^^^^254^429^[REPLACE] scope = traverseHook ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^283^284^^^^254^429^[ADD] scope = traverseObjectLiteral ( n, scope ) ; break;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^287^^^^^254^429^[ADD] scope = traverseCall ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^291^^^^^254^429^[REPLACE] scope = traverseNew ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^296^^^^^254^429^[REPLACE] scope = traverseAdd ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^301^302^^^^254^429^[ADD] scope = traverse ( n.getFirstChild (  ) , scope ) ; n.setJSType ( getNativeType ( NUMBER_TYPE )  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^314^^^^^254^429^[REPLACE] scope = traverseArrayLiteral ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseCatch ( n, scope )  ;^353^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope =  traverse ( null.getFirstChild (  ) , scope ) ;^359^^^^^254^429^[REPLACE] scope = traverse ( n.getFirstChild (  ) , scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseCatch ( n, scope )  ;^364^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseCatch ( n, scope )  ;^370^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^386^387^^^^254^429^[ADD] scope = traverseChildren ( n, scope ) ; n.setJSType ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^391^^^^^254^429^[REPLACE] scope = traverseGetElem ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseCatch ( n, scope )  ;^395^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseCatch ( n, scope )  ;^404^^^^^254^429^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^408^^^^^254^429^[REPLACE] scope = traverseCatch ( n, scope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^411^^^^^254^429^[REPLACE] if  ( n.getType (  )  != Token.FUNCTION )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^411^412^413^414^^254^429^[ADD] if  ( n.getType (  )  != Token.FUNCTION )  { JSDocInfo info = n.getJSDocInfo (  ) ; if  ( info != null && info.hasType (  )  )  { JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( info == null && info.hasType (  )  )  {^413^^^^^254^429^[REPLACE] if  ( info != null && info.hasType (  )  )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.isQualifiedName (  )  || n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^419^420^^^^254^429^[REPLACE] if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( scope, n, n.setJSType (  ) , castType ) ;^421^^^^^419^422^[REPLACE] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^n.setJSType ( castType )  ;^421^^^^^419^422^[REMOVE] ^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType castType = info .getType (  )  .evaluate ( syntacticScope ) ;^414^^^^^254^429^[REPLACE] JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( rightScope, n, n.getJSType (  ) , castType ) ;^421^^^^^419^422^[REPLACE] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node name = n.getFirstChild (  )  ;^412^^^^^254^429^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType castType = info.getType (  ) .equals ( syntacticScope ) ;^414^^^^^254^429^[REPLACE] JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( scope, left, leftType, rightType )  ;^421^^^^^419^422^[REPLACE] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^421^^^^^419^422^[ADD] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (  n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^419^420^^^^254^429^[REPLACE] if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n.setJSType ( type )  ;^421^^^^^419^422^[REPLACE] updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSDocInfo info = n .getString (  )  ;^412^^^^^254^429^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return newScope;^428^^^^^254^429^[REPLACE] return scope;^[METHOD] traverse [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType castType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  JSDocInfo info  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Preconditions.checkNotNull ( oldType ) ;^462^^^^^461^503^[REPLACE] Preconditions.checkNotNull ( resultType ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( !isVarDeclaration || var != null || var.isTypeInferred (  )  )  {^479^^^^^461^503^[REPLACE] if  ( !isVarDeclaration || var == null || var.isTypeInferred (  )  )  {^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^redeclare ( leftScope, varName, resultType ) ;^480^^^^^461^503^[REPLACE] redeclare ( scope, varName, resultType ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == null && var.isTypeInferred (  )  )  {^485^^^^^461^503^[REPLACE] if  ( var != null && var.isTypeInferred (  )  )  {^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType iParameterType = iParameter.getJSType (  )  ;^486^^^^^461^503^[REPLACE] JSType oldType = var.getType (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( qualifiedName == null )  {^493^^^^^461^503^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^493^494^495^496^497^461^503^[ADD] if  ( qualifiedName != null )  { scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ; }^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope.inferQualifiedSlot   getNativeType ( UNKNOWN_TYPE )  ;^494^495^496^^^461^503^[REPLACE] scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String varName = n.getString (  )  ;^465^^^^^461^503^[REPLACE] String varName = left.getString (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Var var = syntacticScope.getVar ( qualifiedName ) ;^466^^^^^461^503^[REPLACE] Var var = syntacticScope.getVar ( varName ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean isVarDeclaration = left.getChildCount (  ) ;^478^^^^^461^503^[REPLACE] boolean isVarDeclaration = left.hasChildren (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String qualifiedName = left.isQualifiedName (  ) ;^492^^^^^461^503^[REPLACE] String qualifiedName = left.getQualifiedName (  ) ;^[METHOD] updateScopeForTypeChange [TYPE] void [PARAMETER] FlowScope scope Node left JSType leftType JSType resultType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  oldType  resultType  [TYPE]  boolean false  isVarDeclaration  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node left  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String qualifiedName  varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^ObjectType objectType = ObjectType.cast ( getJSType ( getprop .getLastChild (  )   ) .restrictByNotNullOrUndefined (  )  ) ;^509^510^^^^508^547^[REPLACE] ObjectType objectType = ObjectType.cast ( getJSType ( getprop.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType == null )  {^511^^^^^508^547^[REPLACE] if  ( objectType != null )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^512^^^^^508^547^[REPLACE] if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return;  ;^513^^^^^508^547^[REPLACE] return;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType.isPropertyTypeDeclared ( propName )  )  {^517^^^^^508^547^[REPLACE] if  ( !objectType.isPropertyTypeDeclared ( propName )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType.hasProperty ( propName )  || objectType.isInstanceType (  )  )  {^530^531^^^^508^547^[REPLACE] if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^if  (  (  ( getprop.getFirstChild (  ) .getType (  )  )  ==  ( THIS )  )  &&  ( getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  )  {     objectType.defineInferredProperty ( propName, rightType, false ) ; }else {     registry.registerPropertyOnType ( propName, objectType ) ; }^530^^^^^508^547^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS || getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^538^539^540^541^542^530^544^[ADD] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  { objectType.defineInferredProperty ( propName, rightType, false ) ; } else { registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^532^^^^^530^544^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^532^^^^^508^547^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^532^533^534^535^536^508^547^[ADD] if  ( "prototype".equals ( propName )  )  { objectType.defineDeclaredProperty ( propName, rightType, false ) ; } else { objectType.defineInferredProperty ( propName, rightType, false ) ; }^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false )  ;^535^^^^^532^536^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, scope, false )  ;^535^^^^^532^536^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, false )  ;^533^^^^^508^547^[REPLACE] objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  (  getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^508^547^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n.setJSType ( castType )  ;^542^^^^^538^543^[REPLACE] registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, true ) ;^540^^^^^538^543^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^if  (  (  ( getprop.getFirstChild (  ) .getType (  )  )  ==  ( THIS )  )  &&  ( getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  )  {     objectType.defineInferredProperty ( propName, rightType, false ) ; }else {     registry.registerPropertyOnType ( propName, objectType ) ; }^532^^^^^530^544^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( propName, rightType, true ) ;^535^^^^^532^536^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType .defineDeclaredProperty ( propName )  ;^533^^^^^508^547^[REPLACE] objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS || getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^508^547^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^registry .createUnionType (  )  ;^542^^^^^538^543^[REPLACE] registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^540^^^^^538^543^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String propName = getprop.getLastChild (  ) .getOutEdges (  ) ;^516^^^^^508^547^[REPLACE] String propName = getprop.getLastChild (  ) .getString (  ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^512^513^514^^^508^547^[ADD] if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  { return; }^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( objectType.hasProperty ( propName )  ) {^530^531^^^^508^547^[REPLACE] if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS ) {^538^539^^^^530^544^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .equals (  )  == Token.THIS || getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^508^547^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^542^^^^^538^543^[ADD] registry.registerPropertyOnType ( propName, objectType ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false )  ;^540^^^^^538^543^[REPLACE] objectType.defineInferredProperty ( propName, rightType, false ) ;^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, scope, false )  ;^540^^^^^538^543^[REMOVE] ^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS ) {^538^539^^^^508^547^[REPLACE] if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[METHOD] ensurePropertyDefined [TYPE] void [PARAMETER] Node getprop JSType rightType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType rightType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^570^^^^^569^585^[ADD] String propName = getprop.getLastChild (  ) .getString (  ) ;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String qName = getprop .isQualifiedName (  )  ;^571^^^^^569^585^[REPLACE] String qName = getprop.getQualifiedName (  ) ;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if   (  varType != null  )   {  ;^572^^^^^569^585^[REPLACE] if  ( qName != null )  {^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == true && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( qName )  && ( !objectType.hasProperty (  )  ||^574^575^576^577^^569^585^[REPLACE] if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^574^575^576^577^^569^585^[ADD] if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return true;  ;^581^^^^^574^582^[REPLACE] return true;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return false;^581^^^^^569^585^[REPLACE] return true;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Var var = syntacticScope .getVars (  )  ;^573^^^^^569^585^[REPLACE] Var var = syntacticScope.getVar ( qName ) ;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == false && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^569^585^[REPLACE] if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return false;^581^^^^^574^582^[REPLACE] return true;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^573^^^^^569^585^[ADD] Var var = syntacticScope.getVar ( qName ) ;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return true;^584^^^^^569^585^[REPLACE] return false;^[METHOD] ensurePropertyDeclaredHelper [TYPE] boolean [PARAMETER] Node getprop ObjectType objectType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Var var  [TYPE]  Node getprop  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String varName = n .getParent (  )  ;^588^^^^^587^604^[REPLACE] String varName = n.getString (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^JSType type = n.getJSType (  ) ;^589^590^^^^587^604^[ADD] Node value = n.getFirstChild (  ) ; JSType type = n.getJSType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^590^^^^^587^604^[ADD] JSType type = n.getJSType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( value == null )  {^591^^^^^587^604^[REPLACE] if  ( value != null )  {^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( var == null )  {^598^^^^^591^601^[REPLACE] if  ( var != null )  {^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type =  this.getType (  ) ;^599^^^^^591^601^[REPLACE] type = var.getType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType> var = scope.getSlot ( qualifiedName )  ;^597^^^^^591^601^[REPLACE] StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^592^^^^^587^604^[REPLACE] scope = traverse ( value, scope ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return scope;  ;^595^^^^^587^604^[REPLACE] return scope;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( 0 == false )  {^598^^^^^587^604^[REPLACE] if  ( var != null )  {^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type =  0.getType (  ) ;^599^^^^^587^604^[REPLACE] type = var.getType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type =  this.getType (  ) ;^599^^^^^587^604^[REPLACE] type = var.getType (  ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^595^^^^^587^604^[REPLACE] return scope;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType> var = scope.getSlot ( qualifiedName )  ;^597^^^^^587^604^[REPLACE] StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n.setJSType ( castType )  ;^602^^^^^587^604^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return output;^603^^^^^587^604^[REPLACE] return scope;^[METHOD] traverseName [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String varName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( n.getJSType (  )  == true )  {^614^^^^^613^639^[REPLACE] if  ( n.getJSType (  )  != null )  {^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^618^^^^^613^639^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return leftScope;^618^^^^^613^639^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^ObjectType objectType = registry.createUnionType (  ) ;^620^^^^^613^639^[REPLACE] ObjectType objectType = registry.createAnonymousObjectType (  ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( memberName == null )  {^627^^^^^613^639^[REPLACE] if  ( memberName != null )  {^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return output;^634^^^^^627^635^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^objectType.defineInferredProperty ( memberName, getJSType ( value ) , true ) ;^631^^^^^613^639^[REPLACE] objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^getJSType ( n )  ;^631^^^^^613^639^[REPLACE] objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^622^623^^^^613^639^[ADD] name = name.getNext (  ) .getNext (  )  )  { Node value = name.getNext (  ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^624^625^^^^613^639^[ADD] scope = traverse ( name, scope ) ; scope = traverse ( value, scope ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^625^^^^^613^639^[ADD] scope = traverse ( value, scope ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return output;^634^^^^^613^639^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^621^622^623^624^625^613^639^[ADD] for  ( Node name = n.getFirstChild (  ) ; name != null; name = name.getNext (  ) .getNext (  )  )  { Node value = name.getNext (  ) ; scope = traverse ( name, scope ) ; scope = traverse ( value, scope ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^623^^^^^613^639^[ADD] Node value = name.getNext (  ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^String memberName = NodeUtil.getStringValue ( value ) ;^626^^^^^613^639^[REPLACE] String memberName = NodeUtil.getStringValue ( name ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n .getJSType ( n )  ;^637^^^^^613^639^[REPLACE] n.setJSType ( objectType ) ;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REMOVE]^n.setJSType ( castType )  ;^637^^^^^613^639^[REMOVE] ^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return rightScope;^638^^^^^613^639^[REPLACE] return scope;^[METHOD] traverseObjectLiteral [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node n  name  value  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String memberName  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node left = n .getLastChild (  )  ;^642^^^^^641^673^[REPLACE] Node left = n.getFirstChild (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^Node right = right.getParent (  ) ;^643^^^^^641^673^[REPLACE] Node right = left.getNext (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^scope = traverseCatch ( n, scope )  ;^644^^^^^641^673^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^646^647^^^^641^673^[ADD] JSType leftType = left.getJSType (  ) ; JSType rightType = right.getJSType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^JSType leftType = right.setJSType (  ) ;^647^^^^^641^673^[REPLACE] JSType rightType = right.getJSType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^649^^^^^641^673^[ADD] JSType type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( leftType == null ) {^650^^^^^641^673^[REPLACE] if  ( leftType != null && rightType != null )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^boolean leftIsUnknown = leftType.isUnknownType (  ) ;boolean rightIsUnknown = rightType.isUnknownType (  ) ;type = getNativeType ( UNKNOWN_TYPE ) ;^650^651^652^653^654^641^673^[ADD] if  ( leftType != null && rightType != null )  { boolean leftIsUnknown = leftType.isUnknownType (  ) ; boolean rightIsUnknown = rightType.isUnknownType (  ) ; if  ( leftIsUnknown && rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( leftIsUnknown || true )  {^653^^^^^641^673^[REPLACE] if  ( leftIsUnknown && rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^type = getNativeType ( UNKNOWN_TYPE ) ;type = getNativeType ( STRING_TYPE ) ;^653^654^655^656^657^641^673^[ADD] if  ( leftIsUnknown && rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ; } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  { type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  (  ( leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^655^656^^^^641^673^[REPLACE] } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = getNativeType ( STRING_TYPE ) ;type = getNativeType ( UNKNOWN_TYPE ) ;^655^656^657^658^659^641^673^[ADD] else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  { type = getNativeType ( STRING_TYPE ) ; } else if  ( leftIsUnknown || rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( leftIsUnknown && rightIsUnknown )  {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = getNativeType ( UNKNOWN_TYPE ) ;type = getNativeType ( NUMBER_TYPE ) ;^658^659^660^661^^641^673^[ADD] else if  ( leftIsUnknown || rightIsUnknown )  { type = getNativeType ( UNKNOWN_TYPE ) ; } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  { type = getNativeType ( NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( isAddedAsNumber ( type )  || isAddedAsNumber ( rightType )  )  {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type ;^663^^^^^660^664^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^661^^^^^641^673^[ADD] type = getNativeType ( NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( STRING_TYPE )  ;^661^^^^^641^673^[REPLACE] type = getNativeType ( NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  =  type ;^663^^^^^641^673^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( STRING_TYPE )  ;^659^^^^^641^673^[REPLACE] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( isAddedAsNumber ( leftType )  || isAddedAsNumber ( rightType )  )  {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  =  type ;^663^^^^^660^664^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^663^^^^^641^673^[ADD] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( UNKNOWN_TYPE )  ;^657^^^^^655^664^[REPLACE] type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( leftIsUnknown ) {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( isAddedAsNumber ( leftType )  || isAddedAsNumber ( type )  )  {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^663^^^^^660^664^[ADD] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  (  isAddedAsNumber ( rightType )  )  {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^657^^^^^641^673^[ADD] type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( STRING_TYPE )  ;^654^^^^^641^673^[REPLACE] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^} else if  (  ( leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^655^656^^^^641^673^[REPLACE] } else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  else {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  else {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( isAddedAsNumber ( leftType )  ) {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = getNativeType ( NUMBER_TYPE ) ;type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^660^661^662^663^664^641^673^[ADD] else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  { type = getNativeType ( NUMBER_TYPE ) ; } else { type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ; }^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^659^^^^^641^673^[ADD] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  = null ;^663^^^^^660^664^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^654^^^^^641^673^[ADD] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type  = null ;^663^^^^^641^673^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean leftIsUnknown = type .isSubtype (  )  ;^651^^^^^641^673^[REPLACE] boolean leftIsUnknown = leftType.isUnknownType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^^652^^^^^641^673^[ADD] boolean rightIsUnknown = rightType.isUnknownType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if  ( leftIsUnknown || rightIsUnknown )  {^653^^^^^641^673^[REPLACE] if  ( leftIsUnknown && rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  (  rightIsUnknown )  {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^} else if  ( isAddedAsNumber ( leftType )  ) {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type ;^663^^^^^641^673^[REPLACE] type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^} else if  ( isAddedAsNumber ( leftType )  || isAddedAsNumber ( rightType )  )  {^660^^^^^641^673^[REPLACE] } else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^} else if  ( leftIsUnknown && rightIsUnknown )  {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^}   type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ;^660^661^662^663^664^641^673^[ADD] else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  { type = getNativeType ( NUMBER_TYPE ) ; } else { type = registry.createUnionType ( STRING_TYPE, NUMBER_TYPE ) ; }^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^type = getNativeType ( UNKNOWN_TYPE )  ;^657^^^^^641^673^[REPLACE] type = getNativeType ( STRING_TYPE ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^}  if  ( leftIsUnknown &&true )  {^658^^^^^641^673^[REPLACE] } else if  ( leftIsUnknown || rightIsUnknown )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean leftIsUnknown = type.isSubtype (  ) ;^651^^^^^641^673^[REPLACE] boolean leftIsUnknown = leftType.isUnknownType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^boolean rightIsUnknown = rightType.isSubtype (  ) ;^652^^^^^641^673^[REPLACE] boolean rightIsUnknown = rightType.isUnknownType (  ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^n.setJSType ( castType )  ;^666^^^^^641^673^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^668^^^^^641^673^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN_ADD )  {^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^669^^^^^641^673^[REPLACE] updateScopeForTypeChange ( scope, left, leftType, type ) ;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[REPLACE]^return scope;  ;^672^^^^^641^673^[REPLACE] return scope;^[METHOD] traverseAdd [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType leftType  rightType  type  [TYPE]  boolean false  leftIsUnknown  rightIsUnknown  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope 
[ADD]^Node trueNode = condition.getNext (  ) ;^681^682^^^^680^712^[ADD] Node condition = n.getFirstChild (  ) ; Node trueNode = condition.getNext (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node trueNode = n.getNext (  ) ;^682^^^^^680^712^[REPLACE] Node trueNode = condition.getNext (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^683^^^^^680^712^[ADD] Node falseNode = n.getLastChild (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^686^^^^^680^712^[REPLACE] scope = traverse ( condition, scope ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^689^690^691^^^680^712^[ADD] FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^692^693^694^^^680^712^[REPLACE] FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^traverse ( n, trueScope.createChildFlowScope (  )  ) ;^697^^^^^680^712^[REPLACE] traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^traverse ( trueNode, scope.createChildFlowScope (  )  ) ;^697^^^^^680^712^[REPLACE] traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^697^^^^^680^712^[ADD] traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^traverse ( trueNode, trueScope.createChildFlowScope (  )  )  ;^700^^^^^680^712^[REPLACE] traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^input.createChildFlowScope (  )  ;^700^^^^^680^712^[REPLACE] traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^703^704^^^^680^712^[ADD] JSType trueType = trueNode.getJSType (  ) ; JSType falseType = falseNode.getJSType (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType falseType = trueNode.getJSType (  ) ;^704^^^^^680^712^[REPLACE] JSType falseType = falseNode.getJSType (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  falseType != null )  {^705^^^^^680^712^[REPLACE] if  ( trueType != null && falseType != null )  {^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( true ) ;^708^^^^^705^709^[REPLACE] n.setJSType ( null ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REMOVE]^n.setJSType ( castType )  ;^708^^^^^705^709^[REMOVE] ^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^trueType.getLeastSupertype ( falseType )  ;^706^^^^^680^712^[REPLACE] n.setJSType ( trueType.getLeastSupertype ( falseType )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( trueType .isSubtype (  )   ) ;^706^^^^^680^712^[REPLACE] n.setJSType ( trueType.getLeastSupertype ( falseType )  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return leftScope.inferSlotType (  ) ;^711^^^^^680^712^[REPLACE] return scope.createChildFlowScope (  ) ;^[METHOD] traverseHook [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType falseType  trueType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node condition  falseNode  n  trueNode  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseCatch ( n, scope )  ;^715^^^^^714^730^[REPLACE] scope = traverseChildren ( n, scope ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^717^718^^^^714^730^[ADD] Node left = n.getFirstChild (  ) ; JSType functionType = getJSType ( left ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType functionType = getJSType ( left ) .getDirectedPredNodes (  ) ;^718^^^^^714^730^[REPLACE] JSType functionType = getJSType ( left ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( functionType == null )  {^719^^^^^714^730^[REPLACE] if  ( functionType != null )  {^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! functionType instanceof FunctionType )  {^720^^^^^714^730^[REPLACE] if  ( functionType instanceof FunctionType )  {^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^}  else {^725^^^^^714^730^[REPLACE] } else if  ( functionType.equals ( getNativeType ( CHECKED_UNKNOWN_TYPE )  )  )  {^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^}   n.setJSType ( getNativeType ( CHECKED_UNKNOWN_TYPE )  ) ;^725^726^727^^^714^730^[ADD] else if  ( functionType.equals ( getNativeType ( CHECKED_UNKNOWN_TYPE )  )  )  { n.setJSType ( getNativeType ( CHECKED_UNKNOWN_TYPE )  ) ; }^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( getNativeType ( VOID_TYPE )  )  ;^726^^^^^714^730^[REPLACE] n.setJSType ( getNativeType ( CHECKED_UNKNOWN_TYPE )  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^721^^^^^714^730^[ADD] FunctionType fnType =  ( FunctionType )  functionType;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^}  if  ( functionType.equals ( getNativeType ( CHECKED_UNKNOWN_TYPE )  )  )  {^725^^^^^714^730^[REPLACE] } else if  ( functionType.equals ( getNativeType ( CHECKED_UNKNOWN_TYPE )  )  )  {^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^726^^^^^714^730^[ADD] n.setJSType ( getNativeType ( CHECKED_UNKNOWN_TYPE )  ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = getNativeType ( UNKNOWN_TYPE )  ;^721^^^^^714^730^[REPLACE] FunctionType fnType =  ( FunctionType )  functionType;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^720^721^722^723^724^714^730^[ADD] if  ( functionType instanceof FunctionType )  { FunctionType fnType =  ( FunctionType )  functionType; n.setJSType ( fnType.getReturnType (  )  ) ; updateTypeOfParametersOnClosure ( n, fnType ) ; updateTypeOfThisOnClosure ( n, fnType ) ;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REMOVE]^n.setJSType ( getNativeType ( VOID_TYPE )  )  ;^726^^^^^714^730^[REMOVE] ^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return output;^729^^^^^714^730^[REPLACE] return scope;^[METHOD] traverseCall [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType functionType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node left  n  [TYPE]  FunctionType fnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int i = 2;^737^^^^^736^757^[REPLACE] int i = 0;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  functionType instanceof FunctionType  )   {  ;^740^^^^^736^757^[REPLACE] if  ( iParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 1  ==  n.getChildCount (  )  )  {^743^^^^^736^757^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^743^744^745^746^^736^757^[ADD] if  ( i + 1 >= n.getChildCount (  )  )  {  return; }^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^745^^^^^736^757^[REPLACE] return;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgument.getType (  )  != Token.FUNCTION && iParameterType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^[REPLACE] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^749^750^751^752^753^736^757^[ADD] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  { iArgument.setJSType ( iParameterFnType ) ; }^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iArgument .getJSType ( n )  ;^752^^^^^749^753^[REPLACE] iArgument.setJSType ( iParameterFnType ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = getNativeType ( UNKNOWN_TYPE )  ;^741^^^^^736^757^[REPLACE] FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node iArgument = n .getChildCount (  )  ;^747^^^^^736^757^[REPLACE] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iParameterType = iParameter.getJSType (  )  ;^748^^^^^736^757^[REPLACE] JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 4  <=  n.getChildCount (  )  )  {^743^^^^^736^757^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgument.getType (  )  != Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == false )  {^749^750^751^^^736^757^[REPLACE] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iArgument.setJSType ( fnType ) ;^752^^^^^749^753^[REPLACE] iArgument.setJSType ( iParameterFnType ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^738^739^740^741^^736^757^[ADD] for  ( Node iParameter : fnType.getParameters (  )  )  { JSType iParameterType = iParameter.getJSType (  ) ; if  ( iParameterType instanceof FunctionType )  { FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! iParameterType instanceof FunctionType )  {^740^^^^^736^757^[REPLACE] if  ( iParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 1  <= i (  )  )  {^743^^^^^736^757^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgument.getType (  )  != Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.findPropertyType (  )  == false )  {^749^750^751^^^736^757^[REPLACE] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^752^^^^^749^753^[ADD] iArgument.setJSType ( iParameterFnType ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node iArgument = n.getChildAtIndex ( i  1 ) ;^747^^^^^736^757^[REPLACE] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 0  ==  n.getChildAtIndex (  )  )  {^743^^^^^736^757^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgument.getType (  )  != Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^[REPLACE] if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType jsType = n.getJSType (  )  ;^739^^^^^736^757^[REPLACE] JSType iParameterType = iParameter.getJSType (  ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^741^^^^^736^757^[ADD] FunctionType iParameterFnType =  ( FunctionType )  iParameterType;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^747^748^^^^736^757^[ADD] Node iArgument = n.getChildAtIndex ( i + 1 ) ; JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^748^^^^^736^757^[ADD] JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node condition = null  ;^738^^^^^736^757^[REPLACE] for  ( Node iParameter : fnType.getParameters (  )  )  {^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^739^^^^^736^757^[ADD] JSType iParameterType = iParameter.getJSType (  ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^JSType iArgumentType = getJSType ( iArgument ) ;^747^748^^^^736^757^[ADD] Node iArgument = n.getChildAtIndex ( i + 1 ) ; JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfParametersOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  n  [TYPE]  FunctionType fnType  iParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( fnType.getTemplateTypeName (  )  != null )  {^767^^^^^764^843^[REPLACE] if  ( fnType.getTemplateTypeName (  )  == null )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^return;^767^768^769^^^764^843^[ADD] if  ( fnType.getTemplateTypeName (  )  == null )  { return; }^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^768^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int i = 3;^771^^^^^764^843^[REPLACE] int i = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^776^^^^^764^843^[REPLACE] if  ( iParameterType.isTemplateType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 2  <  n.getChildCount (  )  )  {^778^^^^^764^843^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^780^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  varType != null  )   {  ;^784^^^^^764^843^[REPLACE] if  ( iArgumentType != null )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! ! ( iArgumentType instanceof ObjectType )  )  {^786^^^^^764^843^[REPLACE] if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^790^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jParameterType instanceof FunctionType )  {^798^^^^^764^843^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^800^^^^^764^843^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 2  ==  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^805^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  iArgument.getType  (    )   == Token.FUNCTION && iArgumentType instanceof FunctionType &&  ;^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^809^810^^^813^764^843^[ADD] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  { FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  ) .isSubtype (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^814^815^^817^818^809^825^[ADD] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {  jArgument.setJSType ( new FunctionType (^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getSource (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParametersNode (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getInstanceType (  ) , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^809^825^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = getNativeType ( UNKNOWN_TYPE )  ;^813^^^^^809^825^[REPLACE] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getSource (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^820^821^822^^^764^843^[ADD] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getInstanceType (  ) , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^764^843^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^801^^^^^764^843^[ADD] foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node name = n.getFirstChild (  )  ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^808^^^^^764^843^[ADD] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = getNativeType ( UNKNOWN_TYPE )  ;^813^^^^^764^843^[REPLACE] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  i + 1 >= n.getChildCount  (    )    )   {  ;^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType .getSlot ( 0 )  .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^820^821^822^^^809^825^[ADD] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^813^^^^^809^825^[ADD] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^foundTemplateTypeOfThisParameter = false;^801^^^^^764^843^[REPLACE] foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^799^^^^^764^843^[ADD] FunctionType jParameterFnType =  ( FunctionType )  jParameterType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^JSType jArgumentType = getJSType ( jArgument ) ;^807^808^^^^764^843^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ; JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( jArgument ) ;^808^^^^^764^843^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType .getSlot ( null )  .equals ( iParameterType )  )  {^800^^^^^764^843^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^800^801^^803^^764^843^[ADD] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  { foundTemplateTypeOfThisParameter = true; if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  !=  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^803^804^805^806^^764^843^[ADD] if  ( j + 1 >= n.getChildCount (  )  )  {  return; }^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType.getTypeOfThis (  )  .isSubtype (  )   )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^822^823^^^^809^825^[ADD] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParametersNode (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^821^822^823^^^764^843^[ADD] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^813^^^^^764^843^[ADD] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  ==  jArgument.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( nFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^821^822^823^^^809^825^[ADD] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^817^818^819^^^764^843^[ADD] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^822^823^^^^764^843^[ADD] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( foundTemplateTypeOfThisParameter )  {^833^^^^^764^843^[REPLACE] if  ( !foundTemplateTypeOfThisParameter )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^837^^^^^764^843^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = fnType.getReturnType (  ) ;^834^^^^^764^843^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jParameterType instanceof FunctionType )  {^798^^^^^784^839^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^800^^^^^784^839^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  i + 1 >= n.getChildCount  (    )    )   {  ;^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^805^^^^^784^839^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^784^839^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^809^810^^^813^784^839^[ADD] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  { FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType .getSlot ( this )  .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^819^820^821^^^809^825^[ADD] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^784^839^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^784^839^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^784^839^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParametersNode (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^784^839^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getInstanceType (  )  , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^784^839^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^foundTemplateTypeOfThisParameter = false;^801^^^^^784^839^[REPLACE] foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^807^^^^^784^839^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( jArgument ) ;^808^^^^^784^839^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^813^^^^^784^839^[ADD] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <=  n.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^784^839^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^819^820^821^^^784^839^[ADD] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getInstanceType (  ) , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^784^839^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = getNativeType ( UNKNOWN_TYPE )  ;^799^^^^^784^839^[REPLACE] FunctionType jParameterFnType =  ( FunctionType )  jParameterType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  1 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^808^^^^^784^839^[ADD] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = getNativeType ( UNKNOWN_TYPE )  ;^813^^^^^784^839^[REPLACE] FunctionType jArgumentFnType = ( FunctionType )  jArgumentType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^800^^^^^784^839^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  >  jArgument.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^803^804^805^806^^784^839^[ADD] if  ( j + 1 >= n.getChildCount (  )  )  {  return; }^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  jArgumentType instanceof FunctionType )  {^809^810^^^^784^839^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getInstanceType (  )  , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^809^825^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  ) .isSubtype (  )  )  {^814^^^^^784^839^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^814^815^^817^818^784^839^[ADD] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {  jArgument.setJSType ( new FunctionType (^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^817^818^819^^^784^839^[ADD] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^784^839^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^820^821^822^^^784^839^[ADD] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^821^822^823^^^784^839^[ADD] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^801^^^^^784^839^[ADD] foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node name = n.getFirstChild (  )  ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( nFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^784^839^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^784^839^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getSource (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^784^839^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iParameterType = iParameter.getJSType (  )  ;^797^^^^^784^839^[REPLACE] JSType jParameterType = getJSType ( jParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^799^^^^^784^839^[ADD] FunctionType jParameterFnType =  ( FunctionType )  jParameterType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  1 - 1 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType nType = getJSType ( jArgument ) ;^808^^^^^784^839^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^iParameterType = iParameterType.restrictByNotNullOrUndefined (  )  ;^785^^^^^784^839^[REPLACE] iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^790^^^^^784^839^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^837^^^^^784^839^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^794^795^^^^784^839^[ADD] boolean foundTemplateTypeOfThisParameter = false; int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int j = 3;^795^^^^^784^839^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^796^797^798^799^^784^839^[ADD] for  ( Node jParameter : fnType.getParameters (  )  )  { JSType jParameterType = getJSType ( jParameter ) ; if  ( jParameterType instanceof FunctionType )  { FunctionType jParameterFnType =  ( FunctionType )  jParameterType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( jParameter ) ;^797^^^^^784^839^[REPLACE] JSType jParameterType = getJSType ( jParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = jArgument.getChildAtIndex ( j  3 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^834^^^^^784^839^[ADD] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1 * 4  ==  n.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  jArgumentType instanceof FunctionType )  {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isSubtype (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^814^815^^817^818^764^843^[ADD] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {  jArgument.setJSType ( new FunctionType (^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n .getChildCount (  )  ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  >  jArgument.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^817^818^819^^^809^825^[ADD] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = getNativeType ( UNKNOWN_TYPE )  ;^799^^^^^764^843^[REPLACE] FunctionType jParameterFnType =  ( FunctionType )  jParameterType;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iParameterType = iParameter.getJSType (  )  ;^808^^^^^764^843^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  > j (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^807^808^^^^764^843^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ; JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 4  >  n.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  ) .isSubtype (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getInstanceType (  )  , ( ObjectType )  iArgumentType )  ) ;^822^823^^^^764^843^[REPLACE] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( !true )  {^833^^^^^764^843^[REPLACE] if  ( !foundTemplateTypeOfThisParameter )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = jParameterFnType.getReturnType (  ) ;^834^^^^^764^843^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^for  ( Node source : fnType.getParameters (  )  )  {^796^^^^^784^839^[REPLACE] for  ( Node jParameter : fnType.getParameters (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgumentType instanceof FunctionType )  {^798^^^^^784^839^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^foundTemplateTypeOfThisParameter = true;^800^801^^803^^784^839^[ADD] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  { foundTemplateTypeOfThisParameter = true; if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  >  n.getChildAtIndex (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getParameters (  ) .isUnknownType (  )  )  {^814^^^^^784^839^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^784^839^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^822^823^^^^784^839^[ADD] jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n .getChildCount (  )  ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iParameterType = iParameter.getJSType (  )  ;^808^^^^^784^839^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  != j (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION && jParameterType instanceof FunctionType )  {^809^810^^^^784^839^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^814^^^^^784^839^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1 - 0  !=  n.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^784^839^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^784^839^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  >  n.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^797^^^^^784^839^[ADD] JSType jParameterType = getJSType ( jParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return;  ;^780^^^^^784^839^[REPLACE] return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^782^^^^^784^839^[ADD] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType sourceType = getJSType ( iArgument ) ;^783^^^^^784^839^[REPLACE] JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^boolean foundTemplateTypeOfThisParameter = true;^794^^^^^784^839^[REPLACE] boolean foundTemplateTypeOfThisParameter = false;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int j = 2;^795^^^^^784^839^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node condition = null  ;^796^^^^^784^839^[REPLACE] for  ( Node jParameter : fnType.getParameters (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = jParameterFnType.getSource (  ) ;^834^^^^^784^839^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( i + 0  >  n.getChildCount (  )  )  {^778^^^^^764^843^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgumentType == null )  {^784^^^^^764^843^[REPLACE] if  ( iArgumentType != null )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isSubtype ( iParameterType )  )  {^800^^^^^764^843^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <=  n.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, nFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 2  <=  jArgument.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION ) {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^819^820^821^^^764^843^[ADD] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument .getJSType ( iArgument )  ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getReturnType (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^807^^^^^764^843^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  )  .isSubtype (  )   )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = jParameterFnType.getSource (  ) ;^834^^^^^764^843^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^798^799^800^801^^784^839^[ADD] if  ( jParameterType instanceof FunctionType )  { FunctionType jParameterFnType =  ( FunctionType )  jParameterType; if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  { foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument.getType (  )  == Token.FUNCTION ) {^809^810^^^^784^839^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^807^808^^^^784^839^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ; JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <  n.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, nFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( jParameterType )  )  {^800^^^^^784^839^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  ==  jArgument.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildCount ( j  1 + 4 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, nFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType .getReturnType (  )  ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^784^839^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^785^^^^^784^839^[ADD] iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^int j = 0;^794^795^^^^784^839^[ADD] boolean foundTemplateTypeOfThisParameter = false; int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int j = 0L;^795^^^^^784^839^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  )  .isSubtype (  )   )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 0  ==  n .getChildAtIndex ( i )   )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getReturnType (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  >  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType .getReturnType (  )  ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType .getSlot ( null )  .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^Node source = fnType.getSource (  ) ;TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;return;^833^834^835^836^837^764^843^[ADD] if  ( !foundTemplateTypeOfThisParameter )  { Node source = fnType.getSource (  ) ; compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ; return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^773^774^775^776^^764^843^[ADD] for  ( Node iParameter : fnType.getParameters (  )  )  { JSType iParameterType = getJSType ( iParameter ) ; iParameterType = iParameterType.restrictByNotNullOrUndefined (  ) ; if  ( iParameterType.isTemplateType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^776^777^778^^780^764^843^[ADD] if  ( iParameterType.isTemplateType (  )  )  {  if  ( i + 1 >= n.getChildCount (  )  )  { return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  j + 1 >= n.getChildCount  (    )    )   {  ;^778^^^^^764^843^[REPLACE] if  ( i + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^778^779^780^781^^764^843^[ADD] if  ( i + 1 >= n.getChildCount (  )  )  {  return; }^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^786^787^788^789^790^764^843^[ADD] if  ( ! ( iArgumentType instanceof ObjectType )  )  { compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ; return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgumentType instanceof FunctionType )  {^798^^^^^764^843^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 4  <=  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getParameters (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( nFnType.getTypeOfThis (  )  .isSubtype (  )   )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  ==  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^764^843^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = jArgument.getChildAtIndex ( j  1 + 1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType nType = getJSType ( jArgument ) ;^808^^^^^764^843^[REPLACE] JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^foundTemplateTypeOfThisParameter = true;^800^801^^803^^764^843^[ADD] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  { foundTemplateTypeOfThisParameter = true; if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  functionType instanceof FunctionType  )   {  ;^798^^^^^784^839^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  ==  n.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  1L ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1 / 4  !=  n .getChildAtIndex ( j )   )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType .getSlot ( true )  .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType .getReturnType (  )  ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getReturnType (  )  , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^784^839^[REPLACE] jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  1 / 2 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  < j (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^784^839^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  2 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^int i = 0  ;^795^^^^^784^839^[REPLACE] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = fnType.getReturnType (  ) ;^834^^^^^784^839^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! ! ( sourceType instanceof ObjectType )  )  {^786^^^^^764^843^[REPLACE] if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! jArgument .setType (  )   == Token.FUNCTION ) {^809^810^^^^764^843^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1 / 4  !=  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getParameters (  ) .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = jArgument.getChildAtIndex ( j  1 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 4  !=  n.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 2  <  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  iArgument.getType  (    )   == Token.FUNCTION && iArgumentType instanceof FunctionType &&  ;^809^810^^^^784^839^[REPLACE] if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType .getReturnType (  )  ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jParameterFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^784^839^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  1 << 2 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument .getJSType ( jArgument )  ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^JSType jArgumentType = getJSType ( jArgument ) ;^807^808^^^^784^839^[ADD] Node jArgument = n.getChildAtIndex ( j + 1 ) ; JSType jArgumentType = getJSType ( jArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getParameters (  ) .equals ( iParameterType )  )  {^800^^^^^784^839^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1 + 3  <  n.getChildAtIndex (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getTypeOfThis (  )  .isSubtype (  )   )  {^814^^^^^784^839^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^782^783^^^^784^839^[ADD] Node iArgument = n.getChildAtIndex ( i + 1 ) ; JSType iArgumentType = getJSType ( iArgument ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^794^^^^^784^839^[ADD] boolean foundTemplateTypeOfThisParameter = false;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = jParameterFnType.getReturnType (  ) ;^834^^^^^784^839^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( iArgumentType == false )  {^784^^^^^764^843^[REPLACE] if  ( iArgumentType != null )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! ! ( jParameterType instanceof ObjectType )  )  {^786^^^^^764^843^[REPLACE] if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^798^799^800^801^^764^843^[ADD] if  ( jParameterType instanceof FunctionType )  { FunctionType jParameterFnType =  ( FunctionType )  jParameterType; if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  { foundTemplateTypeOfThisParameter = true;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <=  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType.getParameters (  ) .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jArgumentFnType .getSlot ( null )  .isUnknownType (  )  )  {^814^^^^^764^843^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) ,^817^818^819^820^^764^843^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  4 ) ;^807^^^^^764^843^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( jParameterType )  )  {^800^^^^^764^843^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^764^843^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  < j (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^834^^^^^764^843^[ADD] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( sourceFnType .getSlot ( null )  .isUnknownType (  )  )  {^814^^^^^809^825^[REPLACE] if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument .getJSType ( jParameter )  ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  1 % 3 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^registry, jArgumentFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^784^839^[REPLACE] registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType.getParameters (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^784^839^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  functionType instanceof FunctionType  )   {  ;^798^^^^^764^843^[REPLACE] if  ( jParameterType instanceof FunctionType )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <  n.getChildCount (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 2  ==  n.getChildAtIndex (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgumentFnType .getParameters (  )  , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^764^843^[REPLACE] jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.setJSTypeOfThis (  ) .equals ( iParameterType )  )  {^800^^^^^764^843^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  <  n .getChildAtIndex ( i )   )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 3  < j (  )  )  {^803^^^^^764^843^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^833^834^835^836^837^764^843^[ADD] if  ( !foundTemplateTypeOfThisParameter )  { Node source = fnType.getSource (  ) ; compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ; return;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node source = fnType .getReturnType (  )  ;^834^^^^^764^843^[REPLACE] Node source = fnType.getSource (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( jParameterFnType.getTypeOfThis (  ) .isSubtype ( iParameterType )  )  {^800^^^^^784^839^[REPLACE] if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildCount ( j  1 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 1  !=  n.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, nFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^784^839^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^constructorType = constructorType.restrictByNotNullOrUndefined (  )  ;^775^^^^^784^839^[REPLACE] iParameterType = iParameterType.restrictByNotNullOrUndefined (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^774^^^^^784^839^[ADD] JSType iParameterType = getJSType ( iParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node iArgument = n.getChildCount ( i  1 ) ;^782^^^^^784^839^[REPLACE] Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^795^^^^^784^839^[ADD] int j = 0;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 4  <= j (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType .getTemplateTypeName (  )  , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( j + 4  <  n.getChildCount (  )  )  {^803^^^^^784^839^[REPLACE] if  ( j + 1 >= n.getChildCount (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReturnType (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^[REPLACE] jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^constructorType = constructorType.restrictByNotNullOrUndefined (  )  ;^785^^^^^784^839^[REPLACE] iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node condition = null  ;^773^^^^^784^839^[REPLACE] for  ( Node iParameter : fnType.getParameters (  )  )  {^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType iParameterType = iParameter.getJSType (  )  ;^774^^^^^784^839^[REPLACE] JSType iParameterType = getJSType ( iParameter ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node jArgument = n.getChildAtIndex ( j  3 ) ;^807^^^^^784^839^[REPLACE] Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[METHOD] updateTypeOfThisOnClosure [TYPE] void [PARAMETER] Node n FunctionType fnType [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType iArgumentType  iParameterType  jArgumentType  jParameterType  [TYPE]  boolean false  foundTemplateTypeOfThisParameter  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node iArgument  iParameter  jArgument  jParameter  n  source  [TYPE]  FunctionType fnType  jArgumentFnType  jParameterFnType  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  int i  j  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node name = n.getFirstChild (  )  ;^846^^^^^845^868^[REPLACE] Node constructor = n.getFirstChild (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^scope = traverseChildren ( n, scope )  ;^847^^^^^845^868^[REPLACE] scope = traverse ( constructor, scope ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType nType = constructor.getJSType (  ) ;^849^^^^^845^868^[REPLACE] JSType constructorType = constructor.getJSType (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType type = false;^850^^^^^845^868^[REPLACE] JSType type = null;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  objectType != null  )   {  ;^851^^^^^845^868^[REPLACE] if  ( constructorType != null )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( type.isUnknownType (  )  )  {^853^^^^^845^868^[REPLACE] if  ( constructorType.isUnknownType (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^}  if  ( ! type instanceof FunctionType )  {^855^^^^^845^868^[REPLACE] } else if  ( constructorType instanceof FunctionType )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^}   type = ct.getInstanceType (  ) ;^855^856^857^858^859^845^868^[ADD] else if  ( constructorType instanceof FunctionType )  { FunctionType ct =  ( FunctionType )  constructorType; if  ( ct.isConstructor (  )  )  { type = ct.getInstanceType (  ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^857^^^^^845^868^[REPLACE] if  ( ct.isConstructor (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^857^858^859^^^845^868^[ADD] if  ( ct.isConstructor (  )  )  { type = ct.getInstanceType (  ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  null.getInstanceType (  ) ;^858^^^^^845^868^[REPLACE] type = ct.getInstanceType (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^858^^^^^845^868^[ADD] type = ct.getInstanceType (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FunctionType fnType =  (  ( FunctionType )   ( functionType )  )  ;^856^^^^^845^868^[REPLACE] FunctionType ct =  ( FunctionType )  constructorType;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ct .isSubtype (  )   )  {^857^^^^^845^868^[REPLACE] if  ( ct.isConstructor (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type = getNativeType ( STRING_TYPE )  ;^854^^^^^845^868^[REPLACE] type = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^} else if  ( ! constructorType instanceof FunctionType )  {^855^^^^^845^868^[REPLACE] } else if  ( constructorType instanceof FunctionType )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^type = ct.getInstanceType (  ) ;^857^858^859^^^845^868^[ADD] if  ( ct.isConstructor (  )  )  { type = ct.getInstanceType (  ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^852^^^^^845^868^[ADD] constructorType = constructorType.restrictByNotNullOrUndefined (  ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^856^^^^^845^868^[ADD] FunctionType ct =  ( FunctionType )  constructorType;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (type.isUnknownType (  )  )  {^853^^^^^845^868^[REPLACE] if  ( constructorType.isUnknownType (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ct.getInstanceType (  )  )  {^857^^^^^845^868^[REPLACE] if  ( ct.isConstructor (  )  )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^}  if  ( ! constructorType instanceof FunctionType )  {^855^^^^^845^868^[REPLACE] } else if  ( constructorType instanceof FunctionType )  {^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( castType )  ;^862^^^^^845^868^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^864^865^866^^^845^868^[ADD] for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  { scope = traverse ( arg, scope ) ; }^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^865^^^^^845^868^[ADD] scope = traverse ( arg, scope ) ;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return trueScope;^867^^^^^845^868^[REPLACE] return scope;^[METHOD] traverseNew [TYPE] FlowScope [PARAMETER] Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  JSType constructorType  type  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  Node arg  constructor  n  [TYPE]  FunctionType ct  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^String qualifiedName = n.isQualifiedName (  ) ;^923^^^^^921^954^[REPLACE] String qualifiedName = n.getQualifiedName (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^StaticSlot<JSType> var = newScope.getSlot ( qualifiedName ) ;^924^^^^^921^954^[REPLACE] StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( var == null )  {^925^^^^^921^954^[REPLACE] if  ( var != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( propertyType == null )  {^927^^^^^921^954^[REPLACE] if  ( varType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^921^954^[REPLACE] if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return propertyType;^934^^^^^928^935^[REPLACE] return varType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;  ;^932^^^^^928^935^[REPLACE] return getNativeType ( CHECKED_UNKNOWN_TYPE ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return functionScope;  ;^932^^^^^921^954^[REPLACE] return getNativeType ( CHECKED_UNKNOWN_TYPE ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return propertyType;^934^^^^^921^954^[REPLACE] return varType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  || var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^921^954^[REPLACE] if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return varType;  ;^934^^^^^921^954^[REPLACE] return varType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType 1Type = var .getType (  )  ;^926^^^^^921^954^[REPLACE] JSType varType = var.getType (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( varType == this )  {^927^^^^^921^954^[REPLACE] if  ( varType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  || var != syntacticScope.getSlot ( propName )  )  {^928^929^^^^921^954^[REPLACE] if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return varType;  ;^934^^^^^928^935^[REPLACE] return varType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( propertyType.findPropertyType ( getNativeType ( UNKNOWN_TYPE )  )  || var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^921^954^[REPLACE] if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType nullType = var.getType (  ) ;^926^^^^^921^954^[REPLACE] JSType varType = var.getType (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType jsType = n.getJSType (  )  ;^939^^^^^921^954^[REPLACE] JSType propertyType = null;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (varType == false )  {^940^^^^^921^954^[REPLACE] if  ( objType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^propertyType =  varType.findPropertyType ( propName ) ;^941^^^^^921^954^[REPLACE] propertyType = objType.findPropertyType ( propName ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  (  ( propertyType != null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^944^945^^^^921^954^[REPLACE] if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^944^945^^947^^921^954^[ADD] if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  { ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( regType == true )  {^948^^^^^944^951^[REPLACE] if  ( regType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^propertyType = regType.getConstructor (  ) ;^948^949^950^^^944^951^[ADD] if  ( regType != null )  { propertyType = regType.getConstructor (  ) ; }^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^propertyType =  null.getConstructor (  ) ;^949^^^^^944^951^[REPLACE] propertyType = regType.getConstructor (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^ObjectType regType = ObjectType.cast ( registry.getType ( propName )  ) ;^947^^^^^944^951^[REPLACE] ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( regType == this )  {^948^^^^^921^954^[REPLACE] if  ( regType != null )  {^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^948^949^950^^^921^954^[ADD] if  ( regType != null )  { propertyType = regType.getConstructor (  ) ; }^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^propertyType =  null.getConstructor (  ) ;^949^^^^^921^954^[REPLACE] propertyType = regType.getConstructor (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^949^^^^^921^954^[ADD] propertyType = regType.getConstructor (  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^ObjectType regType = ObjectType.cast ( registry.getType ( propName )  ) ;^947^^^^^921^954^[REPLACE] ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return propertyType;  ;^953^^^^^921^954^[REPLACE] return propertyType;^[METHOD] getPropertyType [TYPE] JSType [PARAMETER] JSType objType String propName Node n FlowScope scope [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  JSType objType  propertyType  varType  [TYPE]  Node n  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  String propName  qualifiedName  [TYPE]  ObjectType regType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  StaticSlot var  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node left = n .getLastChild (  )  ;^962^^^^^961^1022^[REPLACE] Node left = n.getFirstChild (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^Node right = n.getFirstChild (  ) ;^963^^^^^961^1022^[REPLACE] Node right = n.getLastChild (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( left, scope.inferSlotType (  )  ) ;^966^967^968^^^961^1022^[REPLACE] BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^969^^^^^961^1022^[ADD] JSType leftType = left.getJSType (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , true ) , condition ) ;^973^974^975^976^^961^1022^[REPLACE] FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^979^980^981^^^961^1022^[ADD] BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType leftType = right.getJSType (  ) ;^982^^^^^961^1022^[REPLACE] JSType rightType = right.getJSType (  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^JSType jsType = n.getJSType (  )  ;^984^^^^^961^1022^[REPLACE] JSType type;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^BooleanOutcomePair conditionOutcomes = null  ;^985^^^^^961^1022^[REPLACE] BooleanOutcomePair literals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( leftType == true && rightType != true )  {^986^^^^^961^1022^[REPLACE] if  ( leftType != null && rightType != null )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type = true;^1013^^^^^986^1018^[REPLACE] type = null;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, null.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^986^1018^[REPLACE] literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( true )  )  {^988^989^^^^961^1022^[REPLACE] if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  null.getLeastSupertype ( rightType ) ;^997^^^^^988^1000^[REPLACE] type = leftType.getLeastSupertype ( rightType ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  getBooleanOutcomePair ( null, rightLiterals, condition ) ;^998^999^^^^988^1000^[REPLACE] literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  rightType;^992^^^^^988^1000^[REPLACE] type = leftType;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^993^^^^^988^1000^[ADD] literals = leftLiterals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY || getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^961^1022^[REPLACE] if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! type instanceof UnionType )  {^1007^^^^^1004^1011^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =   (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^1008^1009^^^^1004^1011^[REPLACE] type =  (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( ! type instanceof UnionType )  {^1007^^^^^961^1022^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1008^1009^^^^961^1022^[ADD] type =  (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^leftType =  type.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ;^987^^^^^961^1022^[REPLACE] leftType = leftType.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  rightType;^992^^^^^961^1022^[REPLACE] type = leftType;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  rightLiterals;^993^^^^^961^1022^[REPLACE] literals = leftLiterals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^997^^^^^961^1022^[ADD] type = leftType.getLeastSupertype ( rightType ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  getBooleanOutcomePair ( rightLiterals, rightLiterals, condition ) ;^998^999^^^^961^1022^[REPLACE] literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =   (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^1008^1009^^^^961^1022^[REPLACE] type =  (  ( UnionType )  type ) .getRestrictedUnion ( getNativeType ( BOOLEAN_TYPE )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( condition )  )  {^988^989^^^^961^1022^[REPLACE] if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^998^999^^^^988^1000^[ADD] literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  rightLiterals;^993^^^^^988^1000^[REPLACE] literals = leftLiterals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^if   (  functionType instanceof FunctionType  )   {  ;^1007^^^^^1004^1011^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  null;^992^^^^^961^1022^[REPLACE] type = leftType;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^type =  rightType.getLeastSupertype ( rightType ) ;^997^^^^^961^1022^[REPLACE] type = leftType.getLeastSupertype ( rightType ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[ADD]^^1013^^^^^961^1022^[ADD] type = null;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^literals =  new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, rightLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^961^1022^[REPLACE] literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^n.setJSType ( castType )  ;^1019^^^^^961^1022^[REPLACE] n.setJSType ( type ) ;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^return literals;  ;^1021^^^^^961^1022^[REPLACE] return literals;^[METHOD] traverseShortCircuitingBinOp [TYPE] TypeInference$BooleanOutcomePair [PARAMETER] Node n FlowScope scope boolean condition [CLASS] TypeInference BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean condition  false  true  [TYPE]  JSType leftType  rightType  type  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanOutcomePair leftLiterals  literals  rightLiterals  [TYPE]  Node left  n  right  [TYPE]  BooleanLiteralSet booleanValues  toBooleanOutcomes  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^BooleanLiteralSet booleanValues;^1078^^^^^^^[REPLACE] final BooleanLiteralSet booleanValues;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  JSTypeNative typeId  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
[REPLACE]^FlowScope joinedScope ;^1087^^^^^^^[REPLACE] FlowScope joinedScope = null;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] BooleanOutcomePair   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true  [TYPE]  Scope functionScope  syntacticScope  [TYPE]  DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  [TYPE]  BooleanLiteralSet booleanValues  left  right  toBooleanOutcomes  [TYPE]  JSTypeNative typeId  [TYPE]  FlowScope bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope 
