[REPLACE]^static final DiagnosticType GLOBAL_THIS ;^59^60^61^^^59^61^[REPLACE] static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning ( "JSC_USED_GLOBAL_THIS", "dangerous use of the global 'this' object" ) ;^ [CLASS] CheckGlobalThis  
[REPLACE]^private  CheckLevel level;^64^^^^^^^[REPLACE] private final CheckLevel level;^ [CLASS] CheckGlobalThis  
[REPLACE]^private Node assignLhsChild ;^71^^^^^^^[REPLACE] private Node assignLhsChild = null;^ [CLASS] CheckGlobalThis  
[REPLACE]^this.compiler =  null;^74^^^^^73^76^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild 
[REPLACE]^this.level =  null;^75^^^^^73^76^[REPLACE] this.level = level;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild 
[REPLACE]^if  ( n.getType (  )   !=  Token.FUNCTION )  {^84^^^^^82^120^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^^84^85^^87^^82^120^[ADD] if  ( n.getType (  )  == Token.FUNCTION )  {  JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  (  jsDoc.hasThisType (  )  )  )  {^88^^^^^82^120^[REPLACE] if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^return true;^89^^^^^82^120^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^JSDocInfo jsDoc = getFunctionJsDocInfo ( parent ) ;^87^^^^^82^120^[REPLACE] JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  (  parent.getType (  )  != Token.ASSIGN )  {^93^^^^^82^120^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^Node lhs = parent.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^93^94^95^^^82^120^[ADD] if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  { Node lhs = parent.getFirstChild (  ) ; Node rhs = lhs.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( n  !=  lhs )  {^97^^^^^82^120^[REPLACE] if  ( n == lhs )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( lhs.getType (  )   ||  Token.GETPROP )  {^107^^^^^97^116^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^^107^108^109^110^^97^116^[ADD] if  ( lhs.getType (  )  == Token.GETPROP )  { if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( rhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^[REPLACE] if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^return false;^108^109^110^^^97^116^[ADD] if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^return true;^109^^^^^97^116^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( leftName == null && leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^[REPLACE] if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^return true;^113^^^^^97^116^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^String leftName = lhs .getParent (  )  ;^111^^^^^97^116^[REPLACE] String leftName = lhs.getQualifiedName (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^^112^113^114^^^97^116^[ADD] if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^String leftName = rhs.getQualifiedName (  ) ;^111^^^^^97^116^[REPLACE] String leftName = lhs.getQualifiedName (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( assignLhsChild != this )  {^101^^^^^82^120^[REPLACE] if  ( assignLhsChild == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^assignLhsChild = null; ;^102^^^^^82^120^[REPLACE] assignLhsChild = lhs;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( assignLhsChild != null )  {^101^^^^^82^120^[REPLACE] if  ( assignLhsChild == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^assignLhsChild = lhs;^101^102^103^^^82^120^[ADD] if  ( assignLhsChild == null )  { assignLhsChild = lhs; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( lhs.getType (  )   &&  Token.GETPROP )  {^107^^^^^82^120^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( rhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^82^120^[REPLACE] if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^return true;^109^^^^^82^120^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( leftName == null && leftName.contains ( ".prototype." )  )  {^112^^^^^82^120^[REPLACE] if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^return true;^113^^^^^82^120^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^String leftName = rhs.getParent (  ) ;^111^^^^^82^120^[REPLACE] String leftName = lhs.getQualifiedName (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  (  leftName.contains ( ".prototype." )  )  {^112^^^^^82^120^[REPLACE] if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^Node lhs = rhs.getFirstChild (  ) ;^94^^^^^82^120^[REPLACE] Node lhs = parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^Node rhs = rhs.getNext (  ) ;^95^^^^^82^120^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^String leftName = rhs.getQualifiedName (  ) ;^111^^^^^82^120^[REPLACE] String leftName = lhs.getQualifiedName (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( lhs.getType (  )   &&  Token.GETPROP )  {^107^^^^^97^116^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( leftName == this && leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^[REPLACE] if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( assignLhsChild !=rhs )  {^101^^^^^82^120^[REPLACE] if  ( assignLhsChild == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^^101^102^103^^^82^120^[ADD] if  ( assignLhsChild == null )  { assignLhsChild = lhs; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( lhs.getType (  )   !=  Token.GETPROP )  {^107^^^^^82^120^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  (  leftName.contains (true.prototype." )  )  {^112^^^^^82^120^[REPLACE] if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^return false;^112^113^114^^^82^120^[ADD] if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^String leftName = lhs.getParent (  ) ;^111^^^^^82^120^[REPLACE] String leftName = lhs.getQualifiedName (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^^108^109^110^^^82^120^[ADD] if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( leftName == null ) {^112^^^^^82^120^[REPLACE] if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^Node lhs = rhs .getLastChild (  )  ;^94^^^^^82^120^[REPLACE] Node lhs = parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[ADD]^^94^^^^^82^120^[ADD] Node lhs = parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^return false;^119^^^^^82^120^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs  [TYPE]  String leftName  [TYPE]  JSDocInfo jsDoc 
[REPLACE]^if  ( assignLhsChild != null ) {^123^^^^^122^129^[REPLACE] if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs 
[REPLACE]^compiler.report ( JSError.make ( t, parent, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^[REPLACE] compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs 
[REMOVE]^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  { compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs 
[REPLACE]^if  (parent  &&  assignLhsChild )  {^126^^^^^122^129^[REPLACE] if  ( n == assignLhsChild )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs 
[REPLACE]^assignLhsChild = true;^127^^^^^122^129^[REPLACE] assignLhsChild = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  lhs  n  parent  rhs 
[REPLACE]^JSDocInfo jsDoc = parent.getJSDocInfo (  ) ;^142^^^^^141^157^[REPLACE] JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^Node parent = parent.getParent (  ) ;^143^^^^^141^157^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( jsDoc != null )  {^144^^^^^141^157^[REPLACE] if  ( jsDoc == null )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( parentType == Token.NAME ) {^146^^^^^141^157^[REPLACE] if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[ADD]^jsDoc = parent.getJSDocInfo (  ) ;Node gramps = parent.getParent (  ) ;^146^147^148^149^^141^157^[ADD] if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  { jsDoc = parent.getJSDocInfo (  ) ; if  ( jsDoc == null && parentType == Token.NAME )  { Node gramps = parent.getParent (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( jsDoc != null && parentType == Token.NAME )  {^148^^^^^141^157^[REPLACE] if  ( jsDoc == null && parentType == Token.NAME )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[ADD]^Node gramps = parent.getParent (  ) ;jsDoc = gramps.getJSDocInfo (  ) ;^148^149^150^151^152^141^157^[ADD] if  ( jsDoc == null && parentType == Token.NAME )  { Node gramps = parent.getParent (  ) ; if  ( gramps.getType (  )  == Token.VAR )  { jsDoc = gramps.getJSDocInfo (  ) ; }^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( gramps.getType (  )   ||  Token.VAR )  {^150^^^^^141^157^[REPLACE] if  ( gramps.getType (  )  == Token.VAR )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^jsDoc = parent.getJSDocInfo (  ) ; ;^151^^^^^141^157^[REPLACE] jsDoc = gramps.getJSDocInfo (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[ADD]^^151^^^^^141^157^[ADD] jsDoc = gramps.getJSDocInfo (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^Node gramps = rhs.getParent (  ) ;^149^^^^^141^157^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[ADD]^jsDoc = gramps.getJSDocInfo (  ) ;^150^151^152^^^141^157^[ADD] if  ( gramps.getType (  )  == Token.VAR )  { jsDoc = gramps.getJSDocInfo (  ) ; }^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^jsDoc = gramps.getJSDocInfo (  ) ; ;^147^^^^^141^157^[REPLACE] jsDoc = parent.getJSDocInfo (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( jsDoc != null ) {^148^^^^^141^157^[REPLACE] if  ( jsDoc == null && parentType == Token.NAME )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( gramps.getType (  )   &&  Token.VAR )  {^150^^^^^141^157^[REPLACE] if  ( gramps.getType (  )  == Token.VAR )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( rhs.getType (  )   &&  Token.VAR )  {^150^^^^^141^157^[REPLACE] if  ( gramps.getType (  )  == Token.VAR )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^int rhsType = parent.getNext (  ) ;^145^^^^^141^157^[REPLACE] int parentType = parent.getType (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  (  parentType == Token.NAME )  {^148^^^^^141^157^[REPLACE] if  ( jsDoc == null && parentType == Token.NAME )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^Node gramps = parent .getNext (  )  ;^149^^^^^141^157^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[ADD]^^149^^^^^141^157^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^Node gramps = parent.getNext (  ) ;^149^^^^^141^157^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  (  rhsType == Token.NAME )  {^148^^^^^141^157^[REPLACE] if  ( jsDoc == null && parentType == Token.NAME )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^if  ( gramps.getType (  )   !=  Token.VAR )  {^150^^^^^141^157^[REPLACE] if  ( gramps.getType (  )  == Token.VAR )  {^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
[REPLACE]^return false;^156^^^^^141^157^[REPLACE] return jsDoc;^[METHOD] getFunctionJsDocInfo [TYPE] JSDocInfo [PARAMETER] Node n [CLASS] CheckGlobalThis   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType GLOBAL_THIS  [TYPE]  CheckLevel level  [TYPE]  Node assignLhsChild  gramps  lhs  n  parent  rhs  [TYPE]  JSDocInfo jsDoc  [TYPE]  int parentType 
