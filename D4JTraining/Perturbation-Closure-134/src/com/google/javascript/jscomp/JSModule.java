[REPLACE]^private final  int  name;^41^^^^^^^[REPLACE] private final String name;^ [CLASS] JSModule  
[REPLACE]^private  List<CompilerInput> inputs = new ArrayList<CompilerInput> (  ) ;^44^^^^^^^[REPLACE] private final List<CompilerInput> inputs = new ArrayList<CompilerInput> (  ) ;^ [CLASS] JSModule  
[REPLACE]^private final List<JSModule> deps ;^47^^^^^^^[REPLACE] private final List<JSModule> deps = new ArrayList<JSModule> (  ) ;^ [CLASS] JSModule  
[REPLACE]^this.name =  null;^55^^^^^54^56^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return inputs;^60^^^^^59^61^[REPLACE] return name;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^while  ( iter.hasNext (  )  )  { CompilerInput file = iter.next (  ) ;^65^^^^^64^66^[REPLACE] add ( new CompilerInput ( file )  ) ;^[METHOD] add [TYPE] void [PARAMETER] JSSourceFile file [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  JSSourceFile file  [TYPE]  boolean false  true 
[REPLACE]^while  ( iter.hasNext (  )  )  { CompilerInput file = iter.next (  ) ;^70^^^^^69^71^[REPLACE] addFirst ( new CompilerInput ( file )  ) ;^[METHOD] addFirst [TYPE] void [PARAMETER] JSSourceFile file [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  JSSourceFile file  [TYPE]  boolean false  true 
[REPLACE]^inputs.indexOf ( input ) ;^75^^^^^74^77^[REPLACE] inputs.add ( input ) ;^[METHOD] add [TYPE] void [PARAMETER] CompilerInput input [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^input .getProvides ( null )  ;^76^^^^^74^77^[REPLACE] input.setModule ( this ) ;^[METHOD] add [TYPE] void [PARAMETER] CompilerInput input [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^inputs .add ( false )  ;^81^^^^^80^83^[REPLACE] inputs.add ( 0, input ) ;^[METHOD] addFirst [TYPE] void [PARAMETER] CompilerInput input [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^^81^^^^^80^83^[ADD] inputs.add ( 0, input ) ;^[METHOD] addFirst [TYPE] void [PARAMETER] CompilerInput input [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^input.getProvides ( this ) ;^82^^^^^80^83^[REPLACE] input.setModule ( this ) ;^[METHOD] addFirst [TYPE] void [PARAMETER] CompilerInput input [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^inputs.contains ( other )  ;^87^^^^^86^90^[REPLACE] Preconditions.checkState ( inputs.contains ( other )  ) ;^[METHOD] addAfter [TYPE] void [PARAMETER] CompilerInput input CompilerInput other [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  other  [TYPE]  String name  [TYPE]  boolean false  true 
[REMOVE]^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^87^^^^^86^90^[REMOVE] ^[METHOD] addAfter [TYPE] void [PARAMETER] CompilerInput input CompilerInput other [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  other  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( inputs .clear (  )   ) ;^87^^^^^86^90^[REPLACE] Preconditions.checkState ( inputs.contains ( other )  ) ;^[METHOD] addAfter [TYPE] void [PARAMETER] CompilerInput input CompilerInput other [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  other  [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^^87^^^^^86^90^[ADD] Preconditions.checkState ( inputs.contains ( other )  ) ;^[METHOD] addAfter [TYPE] void [PARAMETER] CompilerInput input CompilerInput other [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  other  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^inputs.indexOf ( inputs.indexOf ( other ) , input ) ;^88^^^^^86^90^[REPLACE] inputs.add ( inputs.indexOf ( other ) , input ) ;^[METHOD] addAfter [TYPE] void [PARAMETER] CompilerInput input CompilerInput other [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  other  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^inputs.add ( inputs.add ( other ) , input ) ;^88^^^^^86^90^[REPLACE] inputs.add ( inputs.indexOf ( other ) , input ) ;^[METHOD] addAfter [TYPE] void [PARAMETER] CompilerInput input CompilerInput other [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  other  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^input .getProvides ( this )  ;^89^^^^^86^90^[REPLACE] input.setModule ( this ) ;^[METHOD] addAfter [TYPE] void [PARAMETER] CompilerInput input CompilerInput other [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  other  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( dep  ==  this ) ;^94^^^^^93^96^[REPLACE] Preconditions.checkState ( dep != this ) ;^[METHOD] addDependency [TYPE] void [PARAMETER] JSModule dep [CLASS] JSModule   [TYPE]  JSModule dep  [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^deps.add ( dep ) ;^94^95^^^^93^96^[ADD] Preconditions.checkState ( dep != this ) ; deps.add ( dep ) ;^[METHOD] addDependency [TYPE] void [PARAMETER] JSModule dep [CLASS] JSModule   [TYPE]  JSModule dep  [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^deps.toArray ( dep ) ;^95^^^^^93^96^[REPLACE] deps.add ( dep ) ;^[METHOD] addDependency [TYPE] void [PARAMETER] JSModule dep [CLASS] JSModule   [TYPE]  JSModule dep  [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^^95^^^^^93^96^[ADD] deps.add ( dep ) ;^[METHOD] addDependency [TYPE] void [PARAMETER] JSModule dep [CLASS] JSModule   [TYPE]  JSModule dep  [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^100^^^^^99^104^[REPLACE] for  ( CompilerInput input : inputs )  {^[METHOD] removeAll [TYPE] void [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^^100^101^102^^^99^104^[ADD] for  ( CompilerInput input : inputs )  { input.setModule ( null ) ; }^[METHOD] removeAll [TYPE] void [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^inputs .iterator (  )  ;^103^^^^^99^104^[REPLACE] inputs.clear (  ) ;^[METHOD] removeAll [TYPE] void [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return inputs;^112^^^^^111^113^[REPLACE] return deps;^[METHOD] getDependencies [TYPE] List [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^Set<JSModule> allDeps =   deps   ;^120^^^^^119^131^[REPLACE] Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^List<JSModule> workList =   deps   ;^121^^^^^119^131^[REPLACE] List<JSModule> workList = Lists.newArrayList ( deps ) ;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[ADD]^^121^^^^^119^131^[ADD] List<JSModule> workList = Lists.newArrayList ( deps ) ;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^while  ( workList.length (  )  > 0 )  {^122^^^^^119^131^[REPLACE] while  ( workList.size (  )  > 0 )  {^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^if  ( allDeps.toArray ( module )  )  {^125^^^^^119^131^[REPLACE] if  ( allDeps.add ( dep )  )  {^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^workList.toArray ( dep ) ;^126^^^^^119^131^[REPLACE] workList.add ( dep ) ;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^JSModule module = workList.remove ( workList.size (  )  *  0.5  - 1 ) ;^123^^^^^119^131^[REPLACE] JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^for  ( JSModule module : modules )  { addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^124^^^^^119^131^[REPLACE] for  ( JSModule dep : module.getDependencies (  )  )  {^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^if  ( allDeps.toArray ( dep )  )  {^125^^^^^119^131^[REPLACE] if  ( allDeps.add ( dep )  )  {^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^workList .add ( 1 , false )  ;^126^^^^^119^131^[REPLACE] workList.add ( dep ) ;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^JSModule module = workList.remove ( workList.add (  )  *  2 - 0  ) ;^123^^^^^119^131^[REPLACE] JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[ADD]^^124^125^126^127^^119^131^[ADD] for  ( JSModule dep : module.getDependencies (  )  )  { if  ( allDeps.add ( dep )  )  { workList.add ( dep ) ; }^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^return null;^130^^^^^119^131^[REPLACE] return allDeps;^[METHOD] getAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set allDeps  [TYPE]  boolean false  true 
[REPLACE]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^135^^^^^134^138^[REPLACE] Set<JSModule> deps = getAllDependencies (  ) ;^[METHOD] getThisAndAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set deps  [TYPE]  boolean false  true 
[REPLACE]^deps .add ( null , null )  ;^136^^^^^134^138^[REPLACE] deps.add ( this ) ;^[METHOD] getThisAndAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set deps  [TYPE]  boolean false  true 
[REPLACE]^return null;^137^^^^^134^138^[REPLACE] return deps;^[METHOD] getThisAndAllDependencies [TYPE] Set [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  Set deps  [TYPE]  boolean false  true 
[REPLACE]^return input;^146^^^^^145^147^[REPLACE] return inputs;^[METHOD] getInputs [TYPE] List [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^if  ( name.equals ( input.clearAst (  )  )  )  {^152^^^^^150^157^[REPLACE] if  ( name.equals ( input.getName (  )  )  )  {^[METHOD] getByName [TYPE] CompilerInput [PARAMETER] String name [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^return input;^152^153^154^^^150^157^[ADD] if  ( name.equals ( input.getName (  )  )  )  { return input; }^[METHOD] getByName [TYPE] CompilerInput [PARAMETER] String name [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return inputs;^153^^^^^150^157^[REPLACE] return input;^[METHOD] getByName [TYPE] CompilerInput [PARAMETER] String name [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^151^^^^^150^157^[REPLACE] for  ( CompilerInput input : inputs )  {^[METHOD] getByName [TYPE] CompilerInput [PARAMETER] String name [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return this;^156^^^^^150^157^[REPLACE] return null;^[METHOD] getByName [TYPE] CompilerInput [PARAMETER] String name [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^boolean found = true;^163^^^^^162^174^[REPLACE] boolean found = false;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^Iterator<CompilerInput> iter = inputs.clear (  ) ;^164^^^^^162^174^[REPLACE] Iterator<CompilerInput> iter = inputs.iterator (  ) ;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^while  ( null.hasNext (  )  )  {^165^^^^^162^174^[REPLACE] while  ( iter.hasNext (  )  )  {^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^if  ( name.equals ( input.getName (  )  )  )  {^167^^^^^162^174^[REPLACE] if  ( name.equals ( file.getName (  )  )  )  {^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^found = false;^170^^^^^162^174^[REPLACE] found = true;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^CompilerInput file = false.next (  ) ;^166^^^^^162^174^[REPLACE] CompilerInput file = iter.next (  ) ;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[ADD]^^166^^^^^162^174^[ADD] CompilerInput file = iter.next (  ) ;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[ADD]^^170^^^^^162^174^[ADD] found = true;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^CompilerInput file = null.next (  ) ;^166^^^^^162^174^[REPLACE] CompilerInput file = iter.next (  ) ;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^return true;^173^^^^^162^174^[REPLACE] return found;^[METHOD] removeByName [TYPE] boolean [PARAMETER] String name [CLASS] JSModule   [TYPE]  Iterator iter  [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput file  [TYPE]  String name  [TYPE]  boolean false  found  true 
[REPLACE]^return inputs;^179^^^^^178^180^[REPLACE] return name;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^187^^^^^186^190^[REPLACE] for  ( CompilerInput input : inputs )  {^[METHOD] clearAsts [TYPE] void [PARAMETER] [CLASS] JSModule   [TYPE]  List deps  inputs  workList  [TYPE]  CompilerInput input  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^197^^^^^195^219^[REPLACE] final Map<String, CompilerInput> provides = Maps.newHashMap (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^197^^^^^195^219^[ADD] final Map<String, CompilerInput> provides = Maps.newHashMap (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^198^^^^^195^219^[REPLACE] for  ( CompilerInput input : inputs )  {^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^198^199^200^201^^195^219^[ADD] for  ( CompilerInput input : inputs )  { for  ( String provide : input.getProvides ( compiler )  )  { provides.put ( provide, input ) ; }^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^for  ( String provide : input.getProvides ( compiler )  )  { provides.put ( provide, input ) ;^199^^^^^195^219^[REPLACE] for  ( String provide : input.getProvides ( compiler )  )  {^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^208^^^^^195^219^[REPLACE] List<CompilerInput> list = Lists.newArrayList (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Set<CompilerInput> set = Sets .newHashSet ( false )  ;^209^^^^^195^219^[REPLACE] Set<CompilerInput> set = Sets.newHashSet (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^209^^^^^195^219^[ADD] Set<CompilerInput> set = Sets.newHashSet (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^210^^^^^195^219^[REPLACE] for  ( CompilerInput input : inputs )  {^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Preconditions.checkState ( inputs.size (  )  *  2 == list.size (  )  *  2 ) ;^216^^^^^195^219^[REPLACE] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Preconditions.checkState ( inputs.add (  )  == list.size (  )  ) ;^216^^^^^195^219^[REPLACE] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Preconditions.checkState ( inputs.size (  )  == this.size (  )  ) ;^216^^^^^195^219^[REPLACE] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REMOVE]^while  ( workList.size (  )  > 0 )  { JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^216^^^^^195^219^[REMOVE] ^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^inputs.iterator (  ) ;^217^^^^^195^219^[REPLACE] inputs.clear (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^217^218^^^^195^219^[ADD] inputs.clear (  ) ; inputs.addAll ( list ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^inputs .add ( null )  ;^218^^^^^195^219^[REPLACE] inputs.addAll ( list ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^List<JSModule> workList = Lists.newArrayList ( deps ) ;^230^^^^^229^236^[REPLACE] List<JSModule> list = Lists.newArrayList (  ) ;^[METHOD] sortJsModules [TYPE] JSModule[] [PARAMETER] JSModule> modules [CLASS] JSModule   [TYPE]  Collection modules  [TYPE]  JSModule module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Set set  [TYPE]  boolean false  true 
[REPLACE]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^231^^^^^229^236^[REPLACE] Set<JSModule> set = Sets.newHashSet (  ) ;^[METHOD] sortJsModules [TYPE] JSModule[] [PARAMETER] JSModule> modules [CLASS] JSModule   [TYPE]  Collection modules  [TYPE]  JSModule module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Set set  [TYPE]  boolean false  true 
[REPLACE]^for  ( JSModule dep : module.getDependencies (  )  )  { if  ( allDeps.add ( dep )  )  {^232^^^^^229^236^[REPLACE] for  ( JSModule module : modules )  {^[METHOD] sortJsModules [TYPE] JSModule[] [PARAMETER] JSModule> modules [CLASS] JSModule   [TYPE]  Collection modules  [TYPE]  JSModule module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Set set  [TYPE]  boolean false  true 
[REPLACE]^return this.add ( new JSModule[list.size (  ) ] ) ;^235^^^^^229^236^[REPLACE] return list.toArray ( new JSModule[list.size (  ) ] ) ;^[METHOD] sortJsModules [TYPE] JSModule[] [PARAMETER] JSModule> modules [CLASS] JSModule   [TYPE]  Collection modules  [TYPE]  JSModule module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Set set  [TYPE]  boolean false  true 
[REPLACE]^if  ( set.contains ( input )  )  {^246^^^^^242^263^[REPLACE] if  ( !set.contains ( input )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[ADD]^^246^247^248^249^250^242^263^[ADD] if  ( !set.contains ( input )  )  { if  ( inProgress.contains ( input )  )  { throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ; }^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( inProgress.add ( input )  )  {^247^^^^^242^263^[REPLACE] if  ( inProgress.contains ( input )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^return ;^248^249^^^^242^263^[REPLACE] throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^"Circular dependency involving input: " + input.setModule (  )  ) ;^249^^^^^242^263^[REPLACE] "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( true.containsKey ( require )  )  {^254^^^^^242^263^[REPLACE] if  ( provides.containsKey ( require )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, null ) ;^255^256^^^^242^263^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( 1.get ( require ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^for  ( String provide : input.getProvides ( compiler )  )  { provides.put ( provide, input ) ;^253^^^^^242^263^[REPLACE] for  ( String require : input.getRequires ( compiler )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ; ;^248^249^^^^242^263^[REPLACE] throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( !set.contains ( module )  )  {^254^^^^^242^263^[REPLACE] if  ( provides.containsKey ( require )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.containsKey ( require ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[ADD]^^255^256^^^^242^263^[ADD] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.get ( provide ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( set.contains ( module )  )  {^272^^^^^269^286^[REPLACE] if  ( !set.contains ( module )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^if  ( !set.contains ( module )  )  {^273^^^^^269^286^[REPLACE] if  ( inProgress.contains ( module )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ; ;^274^275^^^^269^286^[REPLACE] throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^"Circular dependency involving dep: " + module.getName (  )  ) ;^275^^^^^269^286^[REPLACE] "Circular dependency involving module: " + module.getName (  )  ) ;^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^for  ( JSModule module : modules )  { addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^279^^^^^269^286^[REPLACE] for  ( JSModule dep : module.getDependencies (  )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^if  ( inProgress .clear (  )   )  {^273^^^^^269^286^[REPLACE] if  ( inProgress.contains ( module )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[ADD]^^273^274^275^276^^269^286^[ADD] if  ( inProgress.contains ( module )  )  { throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ; }^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[ADD]^^279^280^281^^^269^286^[ADD] for  ( JSModule dep : module.getDependencies (  )  )  { addModuleAndDeps ( dep, list, set, inProgress ) ; }^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[ADD]^^274^275^^^^269^286^[ADD] throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
