[REPLACE]^private final  int  name;^41^^^^^^^[REPLACE] private final String name;^ [CLASS] JSModule  
[REPLACE]^private final List<CompilerInput> inputs ;^44^^^^^^^[REPLACE] private final List<CompilerInput> inputs = new ArrayList<CompilerInput> (  ) ;^ [CLASS] JSModule  
[REPLACE]^private  List<JSModule> deps = new ArrayList<JSModule> (  ) ;^47^^^^^^^[REPLACE] private final List<JSModule> deps = new ArrayList<JSModule> (  ) ;^ [CLASS] JSModule  
[ADD]^^197^^^^^195^219^[ADD] final Map<String, CompilerInput> provides = Maps.newHashMap (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^String require  ;^199^^^^^198^202^[REPLACE] for  ( String provide : input.getProvides ( compiler )  )  {^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^for  ( String name : input.getProvides ( compiler )  )  {^199^^^^^198^202^[REPLACE] for  ( String provide : input.getProvides ( compiler )  )  {^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^CompilerInput file = iter.next (  )  ;^198^^^^^198^202^[REPLACE] for  ( CompilerInput input : inputs )  {^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^199^200^201^^^198^202^[ADD] for  ( String provide : input.getProvides ( compiler )  )  { provides.put ( provide, input ) ; }^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^CompilerInput> set = newHashSet (  )  ;^208^^^^^195^219^[REPLACE] List<CompilerInput> list = Lists.newArrayList (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^JSModule> allDeps = newHashSet ( deps )  ;^209^^^^^195^219^[REPLACE] Set<CompilerInput> set = Sets.newHashSet (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( input, provides, compiler, list, null, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^[REPLACE] addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^JSModule>newHashSet (  )  ;^212^^^^^195^219^[REPLACE] Sets.<CompilerInput>newHashSet (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^212^^^^^195^219^[ADD] Sets.<CompilerInput>newHashSet (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^CompilerInput file = iter.next (  )  ;^210^^^^^195^219^[REPLACE] for  ( CompilerInput input : inputs )  {^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^checkState ( inputs.contains ( other )  )  ;^216^^^^^195^219^[REPLACE] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^216^217^^^^195^219^[ADD] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ; inputs.clear (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Preconditions.checkState ( inputs.add (  )  == list.size (  )  ) ;^216^^^^^195^219^[REPLACE] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[ADD]^^216^^^^^195^219^[ADD] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^Preconditions.checkState ( inputs.size (  )  == null.size (  )  ) ;^216^^^^^195^219^[REPLACE] Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^inputs.iterator (  )  ;^217^^^^^195^219^[REPLACE] inputs.clear (  ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^inputs.addAll ( this ) ;^218^^^^^195^219^[REPLACE] inputs.addAll ( list ) ;^[METHOD] sortInputsByDeps [TYPE] void [PARAMETER] Compiler compiler [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  [TYPE]  Map provides 
[REPLACE]^if   (  !set.contains  (  module  )    )   {  ;^246^^^^^245^263^[REPLACE] if  ( !set.contains ( input )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if   (  !set.contains  (  input  )    )   {  ;^247^^^^^245^263^[REPLACE] if  ( inProgress.contains ( input )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[ADD]^^248^249^^^^245^263^[ADD] throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^( module.getName (  )  )  ;^249^^^^^245^263^[REPLACE] "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( 1.containsKey ( require )  )  {^254^^^^^245^263^[REPLACE] if  ( provides.containsKey ( require )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.containsKey ( require ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^245^263^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.get ( provide ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^245^263^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[ADD]^^255^256^^^^245^263^[ADD] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^for  ( String require : input.containsKeyRequires ( compiler )  )  {^253^^^^^246^262^[REPLACE] for  ( String require : input.getRequires ( compiler )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( null.containsKey ( require )  )  {^254^^^^^246^262^[REPLACE] if  ( provides.containsKey ( require )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.get ( provide ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^246^262^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( false.get ( require ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^246^262^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[ADD]^^255^256^^^^246^262^[ADD] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^String provide  ;^253^^^^^246^262^[REPLACE] for  ( String require : input.getRequires ( compiler )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^return ;^248^249^^^^246^262^[REPLACE] throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^return ;^248^249^^^^245^263^[REPLACE] throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^"Circular dependency involving input: " + input.setModule (  )  ) ;^249^^^^^245^263^[REPLACE] "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if   (  !set.contains  (  module  )    )   {  ;^254^^^^^245^263^[REPLACE] if  ( provides.containsKey ( require )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, this, inProgress ) ;^255^256^^^^245^263^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^for  ( String require : input.getProvides ( compiler )  )  {^253^^^^^246^262^[REPLACE] for  ( String require : input.getRequires ( compiler )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( provides.containsKey ( provide )  )  {^254^^^^^246^262^[REPLACE] if  ( provides.containsKey ( require )  )  {^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, null, inProgress ) ;^255^256^^^^246^262^[REPLACE] addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^throw new IllegalArgumentException (  ( "Circular dependency involving module: " +  ( module.getName (  )  )  )  )  ;^248^249^^^^246^262^[REPLACE] throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[METHOD] addInputAndDeps [TYPE] void [PARAMETER] CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [CLASS] JSModule   [TYPE]  Compiler compiler  [TYPE]  CompilerInput input  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Map provides 
[REPLACE]^if  ( set.contains ( module )  )  {^272^^^^^271^286^[REPLACE] if  ( !set.contains ( module )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^if  ( null.contains ( module )  )  {^273^^^^^271^286^[REPLACE] if  ( inProgress.contains ( module )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^for  ( JSModule dep : dep.getDependencies (  )  )  {^279^^^^^271^286^[REPLACE] for  ( JSModule dep : module.getDependencies (  )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^CompilerInput input  ;^279^^^^^271^286^[REPLACE] for  ( JSModule dep : module.getDependencies (  )  )  {^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException (  ( "Circular dependency involving input: " +  ( input.getName (  )  )  )  )  ;^274^275^^^^271^286^[REPLACE] throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[METHOD] addModuleAndDeps [TYPE] void [PARAMETER] JSModule module JSModule> list JSModule> set JSModule> inProgress [CLASS] JSModule   [TYPE]  JSModule dep  module  [TYPE]  List deps  inputs  list  workList  [TYPE]  String name  provide  require  [TYPE]  Set inProgress  set  [TYPE]  boolean false  true 
