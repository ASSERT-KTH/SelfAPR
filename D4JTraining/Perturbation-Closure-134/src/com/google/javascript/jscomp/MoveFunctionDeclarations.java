[REPLACE]^private  AbstractCompiler compiler;^52^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] MoveFunctionDeclarations  
[REPLACE]^private  Map<JSModule, List<Node>> functions;^53^^^^^^^[REPLACE] private final Map<JSModule, List<Node>> functions;^ [CLASS] MoveFunctionDeclarations  
[REPLACE]^if  ( n != null || parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^[REPLACE] if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^return;  ;^82^^^^^80^83^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^return;  ;^82^^^^^79^97^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^if   (  moduleFunctions == null  )   {  ;^85^^^^^79^97^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^if  ( moduleFunctions != true )  {^91^^^^^79^97^[REPLACE] if  ( moduleFunctions == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^functions = newHashMap (  )  ;^92^^^^^79^97^[REPLACE] moduleFunctions = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^JSModule module = entry.getKey (  )  ;^89^^^^^79^97^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^JSModule module = entry.getKey (  )  ;^90^^^^^79^97^[REPLACE] List<Node> moduleFunctions = functions.get ( module ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[REPLACE]^if  ( null != null )  {^91^^^^^79^97^[REPLACE] if  ( moduleFunctions == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[ADD]^^92^^^^^79^97^[ADD] moduleFunctions = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
[ADD]^^89^^^^^79^97^[ADD] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MoveFunctionDeclarations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List moduleFunctions  [TYPE]  Map functions 
