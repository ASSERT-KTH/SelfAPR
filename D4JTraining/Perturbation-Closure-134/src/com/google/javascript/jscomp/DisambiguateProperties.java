[REPLACE]^private  final Logger logger = Logger.getLogger ( DisambiguateProperties.class.getName (  )  ) ;^78^79^^^^78^79^[REPLACE] private static final Logger logger = Logger.getLogger ( DisambiguateProperties.class.getName (  )  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^static final DiagnosticType INVALIDATION  = null ;^83^84^85^86^^83^86^[REPLACE] static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private final boolean showInvalidationWarnings ;^87^^^^^^^[REPLACE] private final boolean showInvalidationWarnings = false;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private  AbstractCompiler compiler;^89^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private  TypeSystem<T> typeSystem;^90^^^^^^^[REPLACE] private final TypeSystem<T> typeSystem;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^Set<T> typesToSkip  = null ;^103^^^^^^^[REPLACE] Set<T> typesToSkip = Sets.newHashSet (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^Set<Node> renameNodes  = null ;^112^^^^^^^[REPLACE] Set<Node> renameNodes = Sets.newHashSet (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^final Map<Node, T> rootTypes ;^119^^^^^^^[REPLACE] final Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private Map<String, Property> properties ;^254^^^^^^^[REPLACE] private Map<String, Property> properties = Maps.newHashMap (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^protected final Stack<StaticScope<T>> scopes ;^325^326^^^^325^326^[REPLACE] protected final Stack<StaticScope<T>> scopes = new Stack<StaticScope<T>> (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private  TightenTypes tt;^808^^^^^^^[REPLACE] private final TightenTypes tt;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private final Set<JSType> invalidatingTypes ;^811^^^^^^^[REPLACE] private final Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private static final JSTypeNative [] nativeTypes ;^815^^^^^815^819^[REPLACE] private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^typeSystem.getInstanceFromPrototype ( type )  ;^139^^^^^138^156^[REPLACE] checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if   (  typeSystem.isInvalidatingType  (  type  )    )   {  ;^140^^^^^138^156^[REPLACE] if  ( typeSystem.isInvalidatingType ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^144^^^^^140^155^[REPLACE] if  ( typeSystem.isTypeToSkip ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if   (  lastType != null  )   {  ;^148^^^^^140^155^[REPLACE] if  ( relatedType == null )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^148^149^150^151^152^140^155^[ADD] if  ( relatedType == null )  { getTypes (  ) .add ( top ) ; } else { getTypes (  ) .union ( top, relatedType ) ; }^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return false;^154^^^^^140^155^[REPLACE] return true;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return false;  ;^142^^^^^138^156^[REPLACE] return false;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^144^^^^^138^156^[REPLACE] if  ( typeSystem.isTypeToSkip ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^addTypeToSkip ( type ) ;^145^^^^^138^156^[REPLACE] addTypeToSkip ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^145^^^^^138^156^[ADD] addTypeToSkip ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if   (  lastType != null  )   {  ;^148^^^^^138^156^[REPLACE] if  ( relatedType == null )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^getTypes (  ) .add ( top ) ;getTypes (  ) .union ( top, relatedType ) ;^148^149^150^151^152^138^156^[ADD] if  ( relatedType == null )  { getTypes (  ) .add ( top ) ; } else { getTypes (  ) .union ( top, relatedType ) ; }^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^getTypes (  ) .union ( type, relatedType ) ;^151^^^^^148^152^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^151^^^^^148^152^[ADD] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^prop.getTypes (  )  ;^151^^^^^148^152^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^prop.getTypes (  ) .add ( type )  ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^prop.getTypes (  )  ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return true;^142^^^^^138^156^[REPLACE] return false;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return false;^154^^^^^138^156^[REPLACE] return true;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if   (  prop.shouldRename  (    )    )   {  ;^170^^^^^167^204^[REPLACE] if  ( shouldRename (  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  (  typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^newTypesToSkip.addAll ( subType ) ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^190^^^^^188^191^[ADD] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( types.elements (  ) .size (  )  %  0.5  == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( T newType : typesToSkip )  {^179^^^^^172^202^[REPLACE] for  ( T subType : typesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^rootTypesToSkip.addAll ( types.find ( subType )  ) ;^180^^^^^172^202^[REPLACE] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^rootTypesToSkip.add ( types .add ( newType )   ) ;^180^^^^^172^202^[REPLACE] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^172^202^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^188^189^190^191^^172^202^[ADD] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( T subType : newTypesToSkip )  {^194^^^^^172^202^[REPLACE] for  ( T newType : newTypesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^addTypeToSkip ( top )  ;^195^^^^^172^202^[REPLACE] addTypeToSkip ( newType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int count = 1;^171^^^^^172^202^[REPLACE] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^178^^^^^172^202^[ADD] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^T skipType  ;^179^^^^^172^202^[REPLACE] for  ( T subType : typesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> rootTypesToSkip = newHashSet (  )  ;^184^^^^^172^202^[REPLACE] Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> allTypes = types.allEquivalenceClasses (  ) ;^185^^^^^172^202^[REPLACE] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int originalTypesSize = allTypes .isEmpty (  )  ;^186^^^^^172^202^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^187^188^189^190^191^172^202^[ADD] for  ( T subType : allTypes )  { if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^T type  ;^194^^^^^172^202^[REPLACE] for  ( T newType : newTypesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  (  typesToSkip.contains ( types .add ( newType )   )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( types.elements (  ) .length (  )  == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^break;^199^200^201^^^167^204^[ADD] if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^179^180^181^^^172^202^[ADD] for  ( T subType : typesToSkip )  { rootTypesToSkip.add ( types.find ( subType )  ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^( typesToSkip.contains ( types.find ( subType )  )  )  ;^180^^^^^172^202^[REPLACE] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^rootTypesToSkip.add ( types.find ( newType )  ) ;^180^^^^^172^202^[REPLACE] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^180^^^^^172^202^[ADD] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typesToSkip.contains ( subType ) ) {^188^189^^^^172^202^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^typesToSkip.add ( skipType )  ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int count = 0 + 3;^171^^^^^172^202^[REPLACE] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> newTypesToSkip = newHashSet (  )  ;^178^^^^^172^202^[REPLACE] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int originalTypesSize = null .isEmpty (  )  ;^186^^^^^172^202^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^T skipType  ;^187^^^^^172^202^[REPLACE] for  ( T subType : allTypes )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^194^195^196^^^172^202^[ADD] for  ( T newType : newTypesToSkip )  { addTypeToSkip ( newType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( n.getType (  )   &&  Token.GETPROP )  {^356^^^^^355^374^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^356^357^358^359^^355^374^[ADD] if  ( n.getType (  )  == Token.GETPROP )  { String field = n.getLastChild (  ) .getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ; Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  typeSystem.isInvalidatingType  (  top  )    )   {  ;^360^^^^^355^374^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^prop.invalidate (  ) ;prop.addTypeToSkip ( type ) ;^360^361^362^363^^355^374^[ADD] if  ( typeSystem.isInvalidatingType ( type )  )  { prop.invalidate (  ) ; } else { prop.addTypeToSkip ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == null )  {^368^^^^^360^372^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^368^369^370^371^^360^372^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop .checkState ( showInvalidationWarnings , name , name )  ;^361^^^^^355^374^[REPLACE] prop.invalidate (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == this )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop.invalidate (  ) .add ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop.typesToSkip.addAll ( type ) ;^370^^^^^355^374^[REPLACE] prop.typesToSkip.add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type =  nullSystem.getInstanceFromProtonull ( null )  )  !^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^357^^^^^355^374^[ADD] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , n, name )  ;^358^^^^^355^374^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Property prop = getProperty ( name )  ;^359^^^^^355^374^[REPLACE] Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type =  nullSystem.getInstanceFromProtonull ( null )  )  !^368^^^^^360^372^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop.shouldRename (  ) ;^361^^^^^355^374^[REPLACE] prop.invalidate (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == this  )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^368^369^370^371^^355^374^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop .addType ( type , type , type )  .add ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^369^^^^^355^374^[ADD] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String name = child.getString (  )  ;^357^^^^^355^374^[REPLACE] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^358^^^^^355^374^[ADD] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^359^^^^^355^374^[ADD] Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Node child = n.getLastChild (  ) ;^413^^^^^412^433^[REPLACE] Node child = n.getFirstChild (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( child.getType (  )   &&  Token.STRING )  {^415^^^^^412^433^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^415^416^417^418^^412^433^[ADD] if  ( child.getType (  )  == Token.STRING )  {  String name = child.getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.shouldRename ( child, processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  type instanceof UnionType  )   {  ;^423^^^^^421^428^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  type instanceof UnionType  )   {  ;^423^^^^^412^433^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report   "this" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report   "null" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^424^425^426^^^412^433^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^t.getScopeRoot (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^[REPLACE] t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.Object (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.getString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^426^^^^^412^433^[ADD] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String name = child.toString (  ) ;^417^^^^^412^433^[REPLACE] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name )  ;^418^^^^^412^433^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Property prop = entry.getValue (  )  ;^420^^^^^412^433^[REPLACE] Property prop = getProperty ( name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^421^422^423^424^425^412^433^[ADD] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  { if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name,^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report type.getString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^t .getScopeRoot (  )  , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^[REPLACE] t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^n.toString (  )  ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^child =  null.getNext (  ) .getNext (  ) ;^431^^^^^412^433^[REPLACE] child = child.getNext (  ) .getNext (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^418^^^^^412^433^[ADD] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^type = type.restrictByNotNullOrUndefined (  )  ;^444^^^^^443^467^[REPLACE] type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.skipRenaming && typeSystem.isTypeToSkip ( type )  )  {^445^^^^^443^467^[REPLACE] if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return true;^446^^^^^443^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return false;^446^^^^^443^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Iterable<T> alternatives = topTypeSystem.getTypeAlternatives ( type ) ;^449^^^^^443^467^[REPLACE] Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( alternatives == null )  {^450^^^^^443^467^[REPLACE] if  ( alternatives != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^461^^^^^450^466^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return true;^462^^^^^450^466^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return null;  ;^462^^^^^450^466^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return type;^465^^^^^450^466^[REPLACE] return topType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T topType = typeSystem .getTypesToSkipForType ( subType )  ;^460^^^^^450^466^[REPLACE] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( type ==topType )  {^454^^^^^443^467^[REPLACE] if  ( lastType != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^firstType  = topType;^455^^^^^443^467^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^455^^^^^450^459^[ADD] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return foundType;  ;^458^^^^^450^459^[REPLACE] return firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T firstType = false;^451^^^^^450^459^[REPLACE] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^452^453^454^455^456^450^459^[ADD] for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ; if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T lastType = processProperty ( t, prop, subType, type ) ;^453^^^^^450^459^[REPLACE] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  objType != null  )   {  ;^454^^^^^443^467^[REPLACE] if  ( lastType != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^firstType = firstType == null ? lastType : firstType;^454^455^456^^^443^467^[ADD] if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( type )  )  {^461^^^^^443^467^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^return null;^461^462^463^^^443^467^[ADD] if  ( typeSystem.isInvalidatingType ( topType )  )  { return null; }^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return null;  ;^462^^^^^443^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return topType;^458^^^^^450^459^[REPLACE] return firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return true;^462^^^^^450^459^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return type;^465^^^^^450^459^[REPLACE] return topType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^451^^^^^450^459^[ADD] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T skipType  ;^452^^^^^450^459^[REPLACE] for  ( T subType : alternatives )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^453^^^^^450^459^[ADD] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Node child = n.getFirstChild (  )  ;^460^^^^^450^459^[REPLACE] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^int propsRenamed = 3, propsSkipped = 3, instancesRenamed = 3, instancesSkipped = 3, singleTypeProps = 3;^472^473^^^^471^507^[REPLACE] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^int propsRenamed = 4, propsSkipped = 4, instancesRenamed = 4, instancesSkipped = 4, singleTypeProps = 4;^472^473^^^^471^507^[REPLACE] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^472^473^^^^471^507^[ADD] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^instancesSkipped = 3, singleTypeProps = 3;^473^^^^^471^507^[REPLACE] instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^instancesSkipped = 4, singleTypeProps = 4;^473^^^^^471^507^[REPLACE] instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  prop.shouldRename  (  rootType  )    )   {  ;^476^^^^^471^507^[REPLACE] if  ( prop.shouldRename (  )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  !skipRenaming  )   {  ;^494^^^^^476^499^[REPLACE] if  ( prop.skipRenaming )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  prop.shouldRename  (    )    )   {  ;^484^^^^^471^507^[REPLACE] if  ( prop.shouldRename ( rootType )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^node.setString ( newName ) ;^485^486^^^^471^507^[ADD] String newName = propNames.get ( rootType ) ; node.setString ( newName ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^482^483^484^485^486^476^493^[ADD] for  ( Node node : prop.renameNodes )  { T rootType = prop.rootTypes.get ( node ) ; if  ( prop.shouldRename ( rootType )  )  { String newName = propNames.get ( rootType ) ; node.setString ( newName ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  prop.shouldRename  (    )    )   {  ;^484^^^^^476^493^[REPLACE] if  ( prop.shouldRename ( rootType )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = propNames.containsKey ( rootType ) ;^485^^^^^476^493^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Node child = n.getFirstChild (  )  ;^483^^^^^476^493^[REPLACE] T rootType = prop.rootTypes.get ( node ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = this.get ( rootType ) ;^485^^^^^476^493^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^477^^^^^476^493^[ADD] Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^UnionFind<T> types = prop.invalidate (  ) ;^481^^^^^476^493^[REPLACE] UnionFind<T> types = prop.getTypes (  ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^483^^^^^476^493^[ADD] T rootType = prop.rootTypes.get ( node ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^String newName = propNames.get ( rootType ) ;node.setString ( newName ) ;compiler.reportCodeChange (  ) ;++instancesRenamed;^484^485^486^487^488^471^507^[ADD] if  ( prop.shouldRename ( rootType )  )  { String newName = propNames.get ( rootType ) ; node.setString ( newName ) ; compiler.reportCodeChange (  ) ; ++instancesRenamed;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^485^^^^^471^507^[ADD] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if   (  !skipRenaming  )   {  ;^494^^^^^471^507^[REPLACE] if  ( prop.skipRenaming )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( Property prop : properties.entrySet (  )  )  {^475^^^^^471^507^[REPLACE] for  ( Property prop : properties.values (  )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^476^477^^479^480^471^507^[ADD] if  ( prop.shouldRename (  )  )  { Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ; ++propsRenamed; prop.expandTypesToSkip (  ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = propNames.containsKey ( rootType ) ;^485^^^^^471^507^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = null.get ( rootType ) ;^485^^^^^476^493^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = propNames .put ( node , rootType )  ;^485^^^^^476^493^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Map<T, String> propNames = buildPropNames ( prop.invalidate (  ) , prop.name ) ;^477^^^^^476^493^[REPLACE] Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T rootType = prop.rootTypes .put ( node , rootType )  ;^483^^^^^476^493^[REPLACE] T rootType = prop.rootTypes.get ( node ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = propNames .put ( node , rootType )  ;^485^^^^^471^507^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop .scheduleRenaming ( node , rootType )   )  {^484^^^^^476^493^[REPLACE] if  ( prop.shouldRename ( rootType )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = 0.get ( rootType ) ;^485^^^^^476^493^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Node child = n.getFirstChild (  )  ;^477^^^^^476^493^[REPLACE] Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^484^485^486^487^488^476^493^[ADD] if  ( prop.shouldRename ( rootType )  )  { String newName = propNames.get ( rootType ) ; node.setString ( newName ) ; compiler.reportCodeChange (  ) ; ++instancesRenamed;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^485^486^^^^476^493^[ADD] String newName = propNames.get ( rootType ) ; node.setString ( newName ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Property prop = getProperty ( name )  ;^475^^^^^476^493^[REPLACE] for  ( Property prop : properties.values (  )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Map<T, String> propNames = buildPropNames ( prop .addType ( rootType , rootType , rootType )  , prop.name ) ;^477^^^^^476^493^[REPLACE] Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^481^^^^^476^493^[ADD] UnionFind<T> types = prop.getTypes (  ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^logger.info ( "Renamed "  singleTypeProps  " instances of "  propsRenamed  " properties." ) ;^501^502^^^^471^507^[REPLACE] logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^501^502^^^^471^507^[ADD] logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^logger.info ( "Skipped renaming "  instancesSkipped  " invalidated "  "properties, "  propsSkipped  " instances of properties "  "that were skipped for specific types and "  singleTypeProps  newName ) ;^503^504^505^506^^471^507^[REPLACE] logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Node child = n.getFirstChild (  )  ;^514^^^^^513^537^[REPLACE] Map<T, String> names = Maps.newHashMap (  ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( typeName != true || type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^[REPLACE] if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^typeName =  null.toString (  ) ;^521^^^^^513^537^[REPLACE] typeName = type.toString (  ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if   (  type instanceof UnionType  )   {  ;^526^^^^^513^537^[REPLACE] if  ( "{...}".equals ( typeName )  )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^newName = typeName.replaceAll ( "[^\\w$]", "_" )   "$"  name;^529^^^^^526^530^[REPLACE] newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^newName =  typeName;^527^^^^^513^537^[REPLACE] newName = name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( Set<T> set : null.allEquivalenceClasses (  )  )  {^515^^^^^513^537^[REPLACE] for  ( Set<T> set : types.allEquivalenceClasses (  )  )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( typeName != null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^[REPLACE] if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( typeName != null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^515^535^[REPLACE] if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^typeName =  null.toString (  ) ;^521^^^^^515^535^[REPLACE] typeName = type.toString (  ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( T type : this )  {^532^^^^^515^535^[REPLACE] for  ( T type : set )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^names .get ( null )  ;^533^^^^^515^535^[REPLACE] names.put ( type, newName ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^this.name = name  ;^527^^^^^515^535^[REPLACE] newName = name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^newName = typeName.replaceAll ( "[^\\w$]", "_" )   "$"  name;^529^^^^^515^535^[REPLACE] newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^String newName  ;^518^^^^^515^535^[REPLACE] String typeName = null;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^T newType  ;^519^^^^^515^535^[REPLACE] for  ( T type : set )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^String typeName = null  ;^525^^^^^515^535^[REPLACE] String newName;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^T newType  ;^532^^^^^515^535^[REPLACE] for  ( T type : set )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^typeName = type.toString (  ) ;^520^521^522^^^515^535^[ADD] if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  { typeName = type.toString (  ) ; }^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^521^^^^^515^535^[ADD] typeName = type.toString (  ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^532^533^534^^^515^535^[ADD] for  ( T type : set )  { names.put ( type, newName ) ; }^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^typeSystem.getInstanceFromPrototype ( type )  ;^533^^^^^515^535^[REPLACE] names.put ( type, newName ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^newName =  typeName;^527^^^^^515^535^[REPLACE] newName = name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Node child = n.getFirstChild (  )  ;^515^^^^^515^535^[REPLACE] for  ( Set<T> set : types.allEquivalenceClasses (  )  )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^519^520^521^522^^515^535^[ADD] for  ( T type : set )  { if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  { typeName = type.toString (  ) ; }^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^536^^^^^513^537^[REPLACE] return names;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if   (  type.isUnion  (    )    )   {  ;^717^^^^^716^734^[REPLACE] if  ( type.isUnionType (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( objType == null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^717^733^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^731^^^^^721^732^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^729^^^^^721^732^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType> types = newHashSet ( type )  ;^724^^^^^721^732^[REPLACE] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return null;^729^^^^^723^730^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return this;^731^^^^^723^730^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objType = type .isNamedType (  )  ;^720^^^^^723^730^[REPLACE] ObjectType objType = type.toObjectType (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^724^^^^^723^730^[ADD] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  (  ( UnionType )  type ) .getAlternatives (  ) ;^718^^^^^716^734^[REPLACE] return  (  ( UnionType )  type ) .getAlternates (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (  objType.getConstructor (  )  != true && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return true;^731^^^^^721^732^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^725^726^727^728^^721^732^[ADD] for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  { list.add ( impl.getInstanceType (  )  ) ; }^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return null;^729^^^^^721^732^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( FunctionType impl : registry .getNativeType (  )   )  {^725^726^^^^723^730^[REPLACE] for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  (  ( UnionType )  type ) .getAlternatives (  ) ;^718^^^^^723^730^[REPLACE] return  (  ( UnionType )  type ) .getAlternates (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return list;  ;^729^^^^^723^730^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objSkipType = skipType.toObjectType (  )  ;^720^^^^^723^730^[REPLACE] ObjectType objType = type.toObjectType (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType> types = newHashSet ( type )  ;^724^^^^^723^730^[REPLACE] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ! ! ( type instanceof ObjectType )  )  {^737^^^^^736^757^[REPLACE] if  ( ! ( type instanceof ObjectType )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.autoboxesTo (  )  == false )  {^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return null;  ;^741^^^^^738^742^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^type =  null.autoboxesTo (  ) ;^739^^^^^736^757^[REPLACE] type = type.autoboxesTo (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return true;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if   (  jsType.autoboxesTo  (    )   != null  )   {  ;^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^739^^^^^736^757^[ADD] type = type.autoboxesTo (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return null;  ;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^748^749^^^^736^757^[ADD] ObjectType foundType = null; ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^749^^^^^736^757^[ADD] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( objType.cast ( field )  )  {^751^^^^^736^757^[REPLACE] if  ( objType.hasOwnProperty ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^foundType = objType;^751^752^753^^^736^757^[ADD] if  ( objType.hasOwnProperty ( field )  )  { foundType = objType; }^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^foundType =  null;^752^^^^^736^757^[REPLACE] foundType = objType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^skipType = objSkipType.getImplicitPrototype (  )  ;^754^^^^^736^757^[REPLACE] objType = objType.getImplicitPrototype (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return foundType;  ;^756^^^^^736^757^[REPLACE] return foundType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^FunctionPrototypeType prototype =  (  ( FunctionPrototypeType )   ( type )  )  ;^774^^^^^773^803^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( objType == this  )  {^775^^^^^773^803^[REPLACE] if  ( objType != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( ! itype instanceof FunctionType )  {^777^^^^^773^803^[REPLACE] if  ( objType instanceof FunctionType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^}  if  ( ! itype instanceof FunctionPrototypeType )  {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^}   constructor = objType.getConstructor (  ) ;^779^780^781^782^783^773^803^[ADD] else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^782^^^^^779^783^[ADD] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  (  ( FunctionType )   ( objType )  )  ;^780^^^^^773^803^[REPLACE] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^782^^^^^773^803^[ADD] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^778^^^^^773^803^[ADD] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^}  if  ( ! objType instanceof FunctionPrototypeType )  {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^779^783^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if   (  objType != null  )   {  ;^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^recordInterfaces ( objType, relatedType, p ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^p.addType ( itype, type, relatedType ) ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if   (  p.skipRenaming  )   return; }  ;^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^return;  ;^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( constructor.isInterface (  )  && constructor.isConstructor (  )  )  {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = this;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^797^^^^^773^803^[ADD] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^for  ( ObjectType objType : constructor.getImplementedInterfaces (  )  )  {^785^^^^^784^801^[REPLACE] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( type == null )  {^787^^^^^784^801^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^prop.addType ( type, topType, relatedType )  ;^788^^^^^784^801^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^788^^^^^784^801^[ADD] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if   (  p.skipRenaming  )   return; }  ;^794^^^^^784^801^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^return;  ;^794^^^^^784^801^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^786^^^^^784^801^[ADD] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  )  ;^778^^^^^784^801^[REPLACE] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^780^^^^^784^801^[ADD] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^784^801^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^797^^^^^784^801^[ADD] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = true;^799^^^^^784^801^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^776^^^^^784^801^[ADD] FunctionType constructor;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^785^786^787^788^^784^801^[ADD] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  { JSType top = getTypeWithProperty ( p.name, itype ) ; if  ( top != null )  { p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^JSType jsType = node.getJSType (  )  ;^786^^^^^784^801^[REPLACE] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( ! objType instanceof FunctionType )  {^777^^^^^773^803^[REPLACE] if  ( objType instanceof FunctionType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^780^^^^^773^803^[ADD] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^773^803^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  )  ;^778^^^^^773^803^[REPLACE] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^}  else {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  null.getConstructor (  ) ;^782^^^^^779^783^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^p.addType ( itype, top, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^787^788^789^790^791^773^803^[ADD] if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^recordInterfaces ( itype, type, p ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^prop.addType ( type, topType, relatedType )  ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^794^795^^^^773^803^[ADD] if  ( p.skipRenaming )  return; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = true;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^773^803^[REPLACE] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^for  ( ObjectType itype : constructor .isInterface (  )   )  {^785^^^^^784^801^[REPLACE] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^p.addType ( itype, type, relatedType ) ;^788^^^^^784^801^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^778^^^^^784^801^[ADD] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  (  ( FunctionType )   ( objType )  )  ;^780^^^^^784^801^[REPLACE] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^784^801^[REPLACE] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = false;^799^^^^^784^801^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^JSType alt  ;^776^^^^^784^801^[REPLACE] FunctionType constructor;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^JSType alt  ;^785^^^^^784^801^[REPLACE] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^860^^^^^859^875^[ADD] JSType jsType = node.getJSType (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( jsType != null )  {^861^^^^^859^875^[REPLACE] if  ( jsType == null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^return cType;^861^862^863^864^865^859^875^[ADD] if  ( jsType == null )  { return cType; } else if  ( jsType.isUnknownType (  )  )  { for  ( JSTypeNative nativeType : nativeTypes )  { ConcreteType concrete = tt.getConcreteInstance (^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^} else if   (  type.isUnion  (    )    )   {  ;^863^^^^^859^875^[REPLACE] } else if  ( jsType.isUnknownType (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^}^863^864^865^866^^859^875^[ADD] else if  ( jsType.isUnknownType (  )  )  { for  ( JSTypeNative nativeType : nativeTypes )  { ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (  !concrete.unionWith ( typeName ) .isNone (  )  )  {^867^^^^^859^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^cType =  null.unionWith ( concrete ) ;^868^^^^^859^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^863^872^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return concrete;^871^^^^^863^872^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType alt  ;^864^^^^^863^872^[REPLACE] for  ( JSTypeNative nativeType : nativeTypes )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType concrete = tt.getConcreteFunction ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^863^872^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (  !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^859^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^859^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^868^^^^^863^872^[ADD] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^864^865^866^867^868^863^872^[ADD] for  ( JSTypeNative nativeType : nativeTypes )  { ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ; if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^865^866^^^^863^872^[ADD] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return concrete;^862^^^^^859^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( jsType.isUnknownType (  )  )  {^863^^^^^859^875^[REPLACE] } else if  ( jsType.isUnknownType (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( concrete == false && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^859^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^867^868^869^^^859^875^[ADD] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ; }^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance ( tt .getTypeValidator (  )  .getNativeObjectType ( nativeType )  ) ;^865^866^^^^863^872^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( concrete == null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^859^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return concrete;^862^^^^^863^872^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return topType;  ;^871^^^^^863^872^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return maybeAddAutoboxes ( cType, jsType, typeName ) ;^874^^^^^859^875^[REPLACE] return maybeAddAutoboxes ( cType, jsType, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^type = type.restrictByNotNullOrUndefined (  )  ;^879^^^^^878^894^[REPLACE] jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^880^^^^^878^894^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSType jsType :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^881^^^^^880^884^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return maybeAddAutoboxes ( cType, alt, typeName ) ;^882^^^^^880^884^[REPLACE] return maybeAddAutoboxes ( cType, alt, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType skipType = type  ;^881^^^^^880^884^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSType jsType :  (  ( UnionType )  jsType ) .getAlternatives (  )  )  {^881^^^^^880^884^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( jsType.autoboxesTo (  )  == null )  {^886^^^^^878^894^[REPLACE] if  ( jsType.autoboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if   (  jsType.autoboxesTo  (    )   != null  )   {  ;^889^^^^^878^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return names;  ;^890^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType.getPropertyType ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^888^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType autoboxed = jsType .unboxesTo (  )  ;^887^^^^^878^894^[REPLACE] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  else {^889^^^^^878^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType.getPropertyType ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^890^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType.unionWith ( tt .getConcreteInstance (  )   ) ;^888^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType .isUnion (  )   ) ;^890^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType autoboxed = autoboxed.autoboxesTo (  ) ;^887^^^^^878^894^[REPLACE] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return topType;  ;^893^^^^^878^894^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if   (  type.isUnionType  (    )    )   {  ;^933^^^^^932^956^[REPLACE] if  ( type.isInstance (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( type.isUnion (  )  )  {^936^^^^^932^956^[REPLACE] } else if  ( type.isFunction (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( type.isNone (  )  )  {^941^^^^^932^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  else {^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( t == null )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return ret;  ;^951^^^^^932^956^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return ret;  ;^951^^^^^946^954^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Node child = n.getFirstChild (  )  ;^948^^^^^946^954^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType ret = getTypeWithProperty ( typeName, t ) ;^949^^^^^946^954^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return t;^951^^^^^932^956^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^948^949^950^951^952^946^954^[ADD] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ; if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType top = getTypeWithProperty ( p.name, itype )  ;^949^^^^^946^954^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return names;  ;^945^^^^^932^956^[REPLACE] return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if   (  type.isUnion  (    )    )   {  ;^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if   (  objType != null  )   {  ;^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType ret = getTypeWithProperty ( field, type ) ;^949^^^^^946^954^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ret == null )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type )  .getAlternates (  )   )  {^948^^^^^946^954^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return names;  ;^945^^^^^946^954^[REPLACE] return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return t;^951^^^^^946^954^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( "prototype".equals ( field ) ) {^937^938^^^^932^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^937^938^939^940^^932^956^[ADD] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return t;^939^^^^^937^940^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return topType;  ;^939^^^^^932^956^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( "prototype".equals ( field ) && codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^932^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( t.isNone (  )  )  {^941^^^^^932^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^}   return new ConcreteUniqueType ( ++nextUniqueId ) ;^941^942^^^945^932^956^[ADD] else if  ( type.isNone (  )  )  {  return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^} else if  ( type.isFunction (  )  )  {^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( t == false )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^return ret;^950^951^952^^^932^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^950^951^952^^^932^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (t == true )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternates (  )  )  {^948^^^^^946^954^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return t;^939^^^^^946^954^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return instanceType .getConstructorType (  )  ;^935^^^^^932^956^[REPLACE] return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType c = tt.inferConcreteType (  (  ( ConcreteScope )   ( scope )  ) , node )  ;^934^^^^^932^956^[REPLACE] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  else {^936^^^^^932^956^[REPLACE] } else if  ( type.isFunction (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^}^946^947^948^949^^932^956^[ADD] else if  ( type.isUnion (  )  )  {  for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^949^^^^^946^954^[ADD] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return t;^939^^^^^932^956^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( "prototype".equals ( typeName ) ) {^937^938^^^^932^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^} else if   (  jsType.isUnknownType  (    )    )   {  ;^941^^^^^932^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( type.isUnion (  )  )  {^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (t == null )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( retype.isUnion (  )  )  {^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return instanceType.getInstanceTypeWithProperty  (  field  )  ;  ;^935^^^^^946^954^[REPLACE] return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return topType;  ;^939^^^^^946^954^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType c = tt.inferConcreteType (  (  ( ConcreteScope )   ( scope )  ) , node )  ;^934^^^^^946^954^[REPLACE] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^955^^^^^932^956^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^String name;^94^^^^^^^[REPLACE] final String name;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^Set<T> typesToSkip ;^103^^^^^^^[REPLACE] Set<T> typesToSkip = Sets.newHashSet (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^Set<Node> renameNodes ;^112^^^^^^^[REPLACE] Set<Node> renameNodes = Sets.newHashSet (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^final Map<Node, T> rootTypes ;^119^^^^^^^[REPLACE] final Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^shouldRename (  )  ;^139^^^^^138^156^[REPLACE] checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if   (  typeSystem.isInvalidatingType  (  type  )    )   {  ;^140^^^^^138^156^[REPLACE] if  ( typeSystem.isInvalidatingType ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if  ( typeSystem .getTypesToSkipForType ( relatedType )   )  {^144^^^^^140^155^[REPLACE] if  ( typeSystem.isTypeToSkip ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if  (type != null )  {^148^^^^^140^155^[REPLACE] if  ( relatedType == null )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^return true;  ;^154^^^^^140^155^[REPLACE] return true;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^return true;^142^^^^^138^156^[REPLACE] return false;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^144^^^^^138^156^[REPLACE] if  ( typeSystem.isTypeToSkip ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^addTypeToSkip ( type ) ;^145^^^^^138^156^[REPLACE] addTypeToSkip ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if  ( relatedType != false )  {^148^^^^^138^156^[REPLACE] if  ( relatedType == null )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^getTypes (  ) .union ( type, relatedType ) ;^151^^^^^148^152^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[ADD]^^151^^^^^148^152^[ADD] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^shouldRename (  )  ;^151^^^^^148^152^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^getTypes (  ) .add ( type ) ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[ADD]^^149^^^^^138^156^[ADD] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^shouldRename (  )  ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^return false;^154^^^^^138^156^[REPLACE] return true;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if   (  relatedType == null  )   {  ;^170^^^^^167^204^[REPLACE] if  ( shouldRename (  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^170^171^172^^174^167^204^[ADD] if  ( shouldRename (  )  )  { int count = 0; while  ( true )  { checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  (  typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^typesToSkip.add ( skipType )  ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( types.elements (  ) .size (  )  *  0.5  == count )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^199^200^201^^^167^204^[ADD] if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^rootTypesToSkip.add ( types.find ( newType )  ) ;^180^^^^^172^202^[REPLACE] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^for  ( T newType : allTypes )  {^187^^^^^172^202^[REPLACE] for  ( T subType : allTypes )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  (  typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^172^202^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^188^189^190^191^^172^202^[ADD] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^newTypesToSkip.addAll ( newType ) ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^for  ( T newType : 0 )  {^194^^^^^172^202^[REPLACE] for  ( T newType : newTypesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^addTypeToSkip ( subType ) ;^195^^^^^172^202^[REPLACE] addTypeToSkip ( newType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int count = 2;^171^^^^^172^202^[REPLACE] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^178^^^^^172^202^[ADD] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^T newType  ;^179^^^^^172^202^[REPLACE] for  ( T subType : typesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^184^185^^^^172^202^[ADD] Set<T> newTypesToSkip = Sets.newHashSet (  ) ; Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^185^^^^^172^202^[ADD] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int originalTypesSize = this.size (  ) ;^186^^^^^172^202^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^187^188^189^190^191^172^202^[ADD] for  ( T subType : allTypes )  { if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^T subType  ;^194^^^^^172^202^[REPLACE] for  ( T newType : newTypesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( typesToSkip.contains ( subType ) ) {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( types.elements (  ) .size (  )  - 1 == count )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^179^180^181^^^172^202^[ADD] for  ( T subType : typesToSkip )  { rootTypesToSkip.add ( types.find ( subType )  ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^( typesToSkip.contains ( types.find ( subType )  )  )  ;^180^^^^^172^202^[REPLACE] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^rootTypesToSkip.add ( types .add ( newType )   ) ;^180^^^^^172^202^[REPLACE] rootTypesToSkip.add ( types.find ( subType )  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( typesToSkip.contains ( subType ) ) {^188^189^^^^172^202^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^for  ( T newType : null )  {^194^^^^^172^202^[REPLACE] for  ( T newType : newTypesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^195^^^^^172^202^[ADD] addTypeToSkip ( newType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^171^^^^^172^202^[ADD] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^Set<T> newTypesToSkip = newHashSet (  )  ;^178^^^^^172^202^[REPLACE] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^Set<T> rootTypesToSkip = newHashSet (  )  ;^184^^^^^172^202^[REPLACE] Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^Set<T> allTypes = types.allEquivalenceClasses (  ) ;^185^^^^^172^202^[REPLACE] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^186^^^^^172^202^[ADD] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^T newType  ;^187^^^^^172^202^[REPLACE] for  ( T subType : allTypes )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^protected final Stack<StaticScope<T>> scopes ;^325^326^^^^325^326^[REPLACE] protected final Stack<StaticScope<T>> scopes = new Stack<StaticScope<T>> (  ) ;^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] AbstractScopingCallback   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^if  ( parent.getType (  )   !=  Token.GETPROP )  {^356^^^^^355^374^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^356^357^358^359^^355^374^[ADD] if  ( n.getType (  )  == Token.GETPROP )  { String field = n.getLastChild (  ) .getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ; Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if   (    (  type = typeSystem.getInstanceFromPrototype  (  type  )    )   != null  )   {  ;^360^^^^^355^374^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == null )  {^368^^^^^360^372^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REMOVE]^if  ( typeSystem.isInvalidatingType ( type )  )  {     prop.invalidate (  ) ; }else {     prop.addTypeToSkip ( type ) ;     if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {         prop.getTypes (  ) .add ( type ) ;         add ( type ) ;     } }^368^^^^^360^372^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^prop.getTypes (  ) .add ( type ) ;prop.typesToSkip.add ( type ) ;^368^369^370^371^^360^372^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop.getTypes (  ) ;^361^^^^^355^374^[REPLACE] prop.invalidate (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == null )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^368^369^370^371^^355^374^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^add ( type )  ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop.invalidate (  ) .add ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^prop.typesToSkip.add ( type ) ;^369^370^^^^355^374^[ADD] prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop.addTypeToSkip ( type )  ;^370^^^^^355^374^[REPLACE] prop.typesToSkip.add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^prop.getTypes (  ) .add ( type ) ;prop.typesToSkip.add ( type ) ;^368^369^370^371^^355^374^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^String field = n.getFirstChild (  ) .getString (  ) ;^357^^^^^355^374^[REPLACE] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^358^359^^^^355^374^[ADD] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ; Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^String field = n.getLastChild (  ) .getString (  )  ;^359^^^^^355^374^[REPLACE] Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^368^369^370^371^^360^372^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^361^^^^^355^374^[ADD] prop.invalidate (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == false )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REMOVE]^prop.invalidate (  )  ;^369^^^^^355^374^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^358^^^^^355^374^[ADD] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^Node child = n .getLastChild (  )  ;^413^^^^^412^433^[REPLACE] Node child = n.getFirstChild (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( child.getType (  )   !=  Token.STRING )  {^415^^^^^412^433^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if   (  prop.skipRenaming || typeSystem.isInvalidatingType  (  type  )    )   {  ;^423^^^^^421^428^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if   (  prop.skipRenaming || typeSystem.isInvalidatingType  (  type  )    )   {  ;^423^^^^^412^433^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report   "null" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^424^425^426^^^412^433^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^n.toString (  )  ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REMOVE]^child.getString (  )  ;^426^^^^^412^433^[REMOVE] ^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^type.toString (  )  ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^String name = child.toString (  ) ;^417^^^^^412^433^[REPLACE] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^418^^^^^412^433^[ADD] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^Node child = n.getFirstChild (  )  ;^420^^^^^412^433^[REPLACE] Property prop = getProperty ( name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, true )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^421^422^423^424^425^412^433^[ADD] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  { if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name,^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^426^^^^^412^433^[ADD] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^child =  null.getNext (  ) .getNext (  ) ;^431^^^^^412^433^[REPLACE] child = child.getNext (  ) .getNext (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^String name = n.getLastChild (  ) .getString (  )  ;^417^^^^^412^433^[REPLACE] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getTypeAlternatives ( getScope (  ) , n, name ) ;^418^^^^^412^433^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^420^^^^^412^433^[ADD] Property prop = getProperty ( name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^type =  topTypeSystem.restrictByNotNullOrUndefined ( topType ) ;^444^^^^^443^467^[REPLACE] type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( prop.skipRenaming && typeSystem.getTypeAlternatives ( type )  )  {^445^^^^^443^467^[REPLACE] if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^return null;^445^446^447^^^443^467^[ADD] if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  { return null; }^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return true;^446^^^^^443^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return null;  ;^446^^^^^443^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^Iterable<T> alternatives = topTypeSystem.getTypeAlternatives ( type ) ;^449^^^^^443^467^[REPLACE] Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( alternatives == null )  {^450^^^^^443^467^[REPLACE] if  ( alternatives != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^450^451^452^453^^443^467^[ADD] if  ( alternatives != null )  { T firstType = null; for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.getTypeAlternatives ( topType )  )  {^461^^^^^450^466^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return null;  ;^462^^^^^450^466^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return true;^462^^^^^450^466^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return type;^465^^^^^450^466^[REPLACE] return topType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^460^^^^^450^466^[ADD] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( lastType == null )  {^454^^^^^443^467^[REPLACE] if  ( lastType != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^firstType = firstType == null ? lastType : firstType;^454^455^456^^^443^467^[ADD] if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^firstType  =  firstType;^455^^^^^443^467^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^for  ( T subType : null )  {^452^^^^^450^459^[REPLACE] for  ( T subType : alternatives )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^firstType  =  lastType ;^455^^^^^450^459^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return type;^458^^^^^450^459^[REPLACE] return firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^T firstType = true;^451^^^^^450^459^[REPLACE] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^Node child = n.getFirstChild (  )  ;^452^^^^^450^459^[REPLACE] for  ( T subType : alternatives )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^T lastType = processProperty ( t, prop, type, firstType ) ;^453^^^^^450^459^[REPLACE] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( type )  )  {^461^^^^^443^467^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return null;  ;^462^^^^^443^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^for  ( T subType : false )  {^452^^^^^450^459^[REPLACE] for  ( T subType : alternatives )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^455^^^^^450^459^[ADD] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return topType;^458^^^^^450^459^[REPLACE] return firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return true;^462^^^^^450^459^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return topType;  ;^465^^^^^450^459^[REPLACE] return topType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^452^453^454^455^456^450^459^[ADD] for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ; if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^453^^^^^450^459^[ADD] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^460^^^^^450^459^[ADD] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( type .isUnknownType (  )   )  {^717^^^^^716^734^[REPLACE] if  ( type.isUnionType (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^if  ( objType == true ) {^721^722^723^^^717^733^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[ADD]^^721^722^723^724^725^717^733^[ADD] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  { List<JSType> list = Lists.newArrayList (  ) ; for  ( FunctionType impl^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return this;^731^^^^^721^732^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return list;  ;^729^^^^^721^732^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[ADD]^^724^^^^^721^732^[ADD] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return false;^729^^^^^723^730^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return this;^731^^^^^723^730^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^ObjectType objType = type.isNamedType (  ) ;^720^^^^^723^730^[REPLACE] ObjectType objType = type.toObjectType (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^JSType> types = newHashSet ( type )  ;^724^^^^^723^730^[REPLACE] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return  (  ( UnionType )  type ) .getOwnerFunction (  ) ;^718^^^^^716^734^[REPLACE] return  (  ( UnionType )  type ) .getAlternates (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^if  ( objType == this && objType.getConstructor (  )  != this && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[ADD]^^721^722^723^724^725^716^734^[ADD] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  { List<JSType> list = Lists.newArrayList (  ) ; for  ( FunctionType impl^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return this;^729^^^^^721^732^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^JSType> types = newHashSet ( type )  ;^724^^^^^721^732^[REPLACE] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[ADD]^^725^726^727^728^^721^732^[ADD] for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  { list.add ( impl.getInstanceType (  )  ) ; }^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return  (  ( UnionType )  type ) .getOwnerFunction (  ) ;^718^^^^^723^730^[REPLACE] return  (  ( UnionType )  type ) .getAlternates (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^ObjectType objType = type .isNamedType (  )  ;^720^^^^^723^730^[REPLACE] ObjectType objType = type.toObjectType (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^if  ( ! ! ( type instanceof ObjectType )  )  {^737^^^^^736^757^[REPLACE] if  ( ! ( type instanceof ObjectType )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( type .isFunctionPrototypeType (  )   == true )  {^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return this;^741^^^^^738^742^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[ADD]^^739^^^^^736^757^[ADD] type = type.autoboxesTo (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^type =  null.autoboxesTo (  ) ;^739^^^^^736^757^[REPLACE] type = type.autoboxesTo (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return false;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( type.autoboxesTo (  )  == false )  {^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[ADD]^type = type.autoboxesTo (  ) ;return null;^738^739^740^741^742^736^757^[ADD] if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return null;  ;^741^^^^^738^742^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return this;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^FunctionType impl  ;^748^^^^^736^757^[REPLACE] ObjectType foundType = null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^749^^^^^736^757^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( objType.cast ( field )  )  {^751^^^^^736^757^[REPLACE] if  ( objType.hasOwnProperty ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^foundType =  null;^752^^^^^736^757^[REPLACE] foundType = objType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^skipType = objSkipType.getImplicitPrototype (  )  ;^754^^^^^736^757^[REPLACE] objType = objType.getImplicitPrototype (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return objType;^756^^^^^736^757^[REPLACE] return foundType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^ObjectType objType = ObjectType .getConstructor (  )  ;^774^^^^^773^803^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if   (  top != null  )   {  ;^775^^^^^773^803^[REPLACE] if  ( objType != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( ! objType instanceof FunctionType )  {^777^^^^^773^803^[REPLACE] if  ( objType instanceof FunctionType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^}  if  ( ! objType instanceof FunctionPrototypeType )  {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^782^^^^^779^783^[ADD] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  (  ( FunctionType )   ( objType )  )  ;^780^^^^^773^803^[REPLACE] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^780^^^^^773^803^[ADD] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^773^803^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  )  ;^778^^^^^773^803^[REPLACE] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^}  else {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^}   constructor = objType.getConstructor (  ) ;^779^780^781^782^783^773^803^[ADD] else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^779^783^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  (type == null )  {^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^recordInterfaces ( objType, relatedType, p ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REMOVE]^p.addType ( itype, top, relatedType )  ;^790^^^^^787^791^[REMOVE] ^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^p.addType ( objType, top, relatedType ) ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^788^^^^^773^803^[ADD] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if   (  p.skipRenaming  )   return; }  ;^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^return types;  ;^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( constructor.isInterface (  )  && constructor.isConstructor (  )  )  {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^constructor = constructor.getSuperClassConstructor (  ) ;constructor = null;^796^797^798^799^800^773^803^[ADD] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor = false;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^797^^^^^773^803^[ADD] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if   (  objType != null  )   {  ;^787^^^^^784^801^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^( owner.isConstructor (  )  )  ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^p.addType ( itype, top, type ) ;^788^^^^^784^801^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if   (  p.skipRenaming  )   return; }  ;^794^^^^^784^801^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^794^795^^^^784^801^[ADD] if  ( p.skipRenaming )  return; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^return types;  ;^794^^^^^784^801^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^786^^^^^784^801^[ADD] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^778^^^^^784^801^[ADD] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  (  ( FunctionType )   ( objType )  )  ;^780^^^^^784^801^[REPLACE] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^784^801^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^784^801^[REPLACE] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor = this;^799^^^^^784^801^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^FunctionType impl  ;^776^^^^^784^801^[REPLACE] FunctionType constructor;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^FunctionType impl  ;^785^^^^^784^801^[REPLACE] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^FunctionType impl  ;^786^^^^^784^801^[REPLACE] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^782^^^^^773^803^[ADD] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^778^^^^^773^803^[ADD] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^} else if  ( ! objType instanceof FunctionPrototypeType )  {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if   (  objType != null  )   {  ;^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^773^803^[REPLACE] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( top == null )  {^787^^^^^784^801^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^p.addType ( itype, top, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^787^788^789^790^791^784^801^[ADD] if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^recordInterfaces ( itype, type, p ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^p.addType ( objType, top, relatedType ) ;^788^^^^^784^801^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^799^^^^^784^801^[ADD] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^785^786^787^788^^784^801^[ADD] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  { JSType top = getTypeWithProperty ( p.name, itype ) ; if  ( top != null )  { p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^private  Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^811^^^^^^^[REPLACE] private final Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] ConcreteTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^private static final JSTypeNative [] nativeTypes ;^815^^^^^815^819^[REPLACE] private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] ConcreteTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^JSTypeNative nativeType  ;^860^^^^^859^875^[REPLACE] JSType jsType = node.getJSType (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( jsType != null )  {^861^^^^^859^875^[REPLACE] if  ( jsType == null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( jsType.isUnknownType (  )  )  {^863^^^^^859^875^[REPLACE] } else if  ( jsType.isUnknownType (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^}^863^864^865^866^^859^875^[ADD] else if  ( jsType.isUnknownType (  )  )  { for  ( JSTypeNative nativeType : nativeTypes )  { ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (  !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^859^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^cType =  null.unionWith ( concrete ) ;^868^^^^^859^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^864^865^866^867^868^863^872^[ADD] for  ( JSTypeNative nativeType : nativeTypes )  { ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ; if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^863^872^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return concrete;^871^^^^^863^872^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType concrete = tt .getConcreteFunction ( node )   ) ;^865^866^^^^863^872^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( concrete == null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^859^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^868^^^^^859^875^[ADD] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^cType =  null.unionWith ( concrete ) ;^868^^^^^863^872^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^871^^^^^863^872^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^JSType alt  ;^864^^^^^863^872^[REPLACE] for  ( JSTypeNative nativeType : nativeTypes )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^862^^^^^859^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  else {^863^^^^^859^875^[REPLACE] } else if  ( jsType.isUnknownType (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^859^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  )  .getInstanceType (  )   ) ;^865^866^^^^863^872^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( concrete == null && !concrete.unionWith ( prop ) .isNone (  )  )  {^867^^^^^859^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^862^^^^^863^872^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTopScope (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^863^872^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return maybeAddAutoboxes  (  cType, jsType, prop  )  ;  ;^874^^^^^859^875^[REPLACE] return maybeAddAutoboxes ( cType, jsType, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^879^^^^^878^894^[ADD] jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^880^^^^^878^894^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^880^881^882^883^^878^894^[ADD] if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  jsType )  .getAlternatives (  )   )  {^881^^^^^880^884^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return maybeAddAutoboxes ( cType, jsType, prop ) ;^882^^^^^880^884^[REPLACE] return maybeAddAutoboxes ( cType, alt, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^JSTypeNative nativeType  ;^881^^^^^880^884^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternatives (  )  )  {^881^^^^^880^884^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return maybeAddAutoboxes  (  cType, jsType, prop  )  ;  ;^882^^^^^880^884^[REPLACE] return maybeAddAutoboxes ( cType, alt, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^} else if   (  jsType.unboxesTo  (    )   != null  )   {  ;^886^^^^^878^894^[REPLACE] if  ( jsType.autoboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( jsType.unboxesTo (  )  == true )  {^889^^^^^878^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType .isUnion (  )   ) ;^890^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^888^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^JSType autoboxed = autoboxed.unboxesTo (  ) ;^887^^^^^878^894^[REPLACE] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  else {^889^^^^^878^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType.getPropertyType ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^890^^^^^878^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^887^^^^^878^894^[ADD] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^893^^^^^878^894^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if   (  type.isUnion  (    )    )   {  ;^933^^^^^932^956^[REPLACE] if  ( type.isInstance (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^} else if   (  type.isNone  (    )    )   {  ;^936^^^^^932^956^[REPLACE] } else if  ( type.isFunction (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^} else if   (  jsType.isUnknownType  (    )    )   {  ;^941^^^^^932^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^}   return new ConcreteUniqueType ( ++nextUniqueId ) ;^941^942^^^945^932^956^[ADD] else if  ( type.isNone (  )  )  {  return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  else {^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^}^946^947^948^949^^932^956^[ADD] else if  ( type.isUnion (  )  )  {  for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if   (  jsType == null  )   {  ;^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^950^951^952^^^932^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return t;^951^^^^^932^956^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^948^949^950^951^952^946^954^[ADD] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ; if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return ret;  ;^951^^^^^946^954^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteInstanceType instanceType =  (  ( ConcreteInstanceType )   ( type )  )  ;^948^^^^^946^954^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType ret = getTypeWithProperty ( field, type ) ;^949^^^^^946^954^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return ret;  ;^951^^^^^932^956^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return t;^951^^^^^946^954^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^949^^^^^946^954^[ADD] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^945^^^^^932^956^[REPLACE] return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( type.isUnion (  )  )  {^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (t == true )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( t == this )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternates (  )  )  {^948^^^^^946^954^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^945^^^^^946^954^[REPLACE] return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( "prototype".equals ( field ) && codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^932^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^939^^^^^937^940^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return t;^939^^^^^932^956^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (  codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^932^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^937^938^939^940^^932^956^[ADD] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( type.isNone (  )  )  {^941^^^^^932^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( t == true )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == false )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == null )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;  ;^939^^^^^946^954^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return instanceType.getInstanceTypeWithProperty  (  field  )  ;  ;^935^^^^^932^956^[REPLACE] return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType c = tt.inferConcreteType (  (  ( ConcreteScope )   ( scope )  ) , node )  ;^934^^^^^932^956^[REPLACE] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( type.isFunction (  )  )  {^936^^^^^932^956^[REPLACE] } else if  ( type.isFunction (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^} else if   (  jsType.isUnknownType  (    )    )   {  ;^946^^^^^932^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (t == null )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteInstanceType instanceType =  (  ( ConcreteInstanceType )   ( type )  )  ;^949^^^^^946^954^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == true )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( ConcreteType type :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^948^^^^^946^954^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return t;^939^^^^^937^940^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret ==t )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^return ret;^950^951^952^^^932^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (t == this )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == this )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == this  )  {^950^^^^^932^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return instanceType.getInstanceTypeWithProperty  (  field  )  ;  ;^935^^^^^946^954^[REPLACE] return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return t;^939^^^^^946^954^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^934^^^^^946^954^[ADD] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return true;^955^^^^^932^956^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
