[REPLACE]^private static final Logger logger  = null ;^78^79^^^^78^79^[REPLACE] private static final Logger logger = Logger.getLogger ( DisambiguateProperties.class.getName (  )  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^static final DiagnosticType INVALIDATION ;^83^84^85^86^^83^86^[REPLACE] static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private final boolean showInvalidationWarnings  = null ;^87^^^^^^^[REPLACE] private final boolean showInvalidationWarnings = false;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private  TypeSystem<T> typeSystem;^90^^^^^^^[REPLACE] private final TypeSystem<T> typeSystem;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^final  boolean  name;^94^^^^^^^[REPLACE] final String name;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^Set<T> typesToSkip ;^103^^^^^^^[REPLACE] Set<T> typesToSkip = Sets.newHashSet (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^Set<Node> renameNodes  = null ;^112^^^^^^^[REPLACE] Set<Node> renameNodes = Sets.newHashSet (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^119^^^^^^^[REPLACE] final Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private Map<String, Property> properties ;^254^^^^^^^[REPLACE] private Map<String, Property> properties = Maps.newHashMap (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private final Stack<StaticScope<T>> scopes = new Stack<StaticScope<T>> (  ) ;^325^326^^^^325^326^[REPLACE] protected final Stack<StaticScope<T>> scopes = new Stack<StaticScope<T>> (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private  TightenTypes tt;^808^^^^^^^[REPLACE] private final TightenTypes tt;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private final Set<JSType> invalidatingTypes  = null ;^811^^^^^^^[REPLACE] private final Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^private static final JSTypeNative [] nativeTypes  = null ;^815^^^^^815^819^[REPLACE] private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {^ [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  
[REPLACE]^newName = name; ;^122^^^^^121^123^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^this.compiler =  null;^274^^^^^272^276^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] DisambiguateProperties$TypeSystem) [PARAMETER] AbstractCompiler compiler TypeSystem<T> typeSystem [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^274^^^^^272^276^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] DisambiguateProperties$TypeSystem) [PARAMETER] AbstractCompiler compiler TypeSystem<T> typeSystem [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^this.typeSystem =  this;^275^^^^^272^276^[REPLACE] this.typeSystem = typeSystem;^[METHOD] <init> [TYPE] DisambiguateProperties$TypeSystem) [PARAMETER] AbstractCompiler compiler TypeSystem<T> typeSystem [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^275^^^^^272^276^[ADD] this.typeSystem = typeSystem;^[METHOD] <init> [TYPE] DisambiguateProperties$TypeSystem) [PARAMETER] AbstractCompiler compiler TypeSystem<T> typeSystem [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^registry =  null.getTypeRegistry (  ) ;^639^^^^^638^649^[REPLACE] registry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^invalidatingTypes ;^640^641^642^643^^638^649^[REPLACE] invalidatingTypes = Sets.newHashSet ( registry.getNativeType ( JSTypeNative.ALL_TYPE ) , registry.getNativeType ( JSTypeNative.NO_OBJECT_TYPE ) , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^this.tt =  null;^822^^^^^821^824^[REPLACE] this.tt = tt;^[METHOD] <init> [TYPE] CodingConvention) [PARAMETER] TightenTypes tt CodingConvention convention [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^this.codingConvention =  codingConvention;^823^^^^^821^824^[REPLACE] this.codingConvention = convention;^[METHOD] <init> [TYPE] CodingConvention) [PARAMETER] TightenTypes tt CodingConvention convention [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( types != null )  {^127^^^^^126^131^[REPLACE] if  ( types == null )  {^[METHOD] getTypes [TYPE] UnionFind [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^types  = null ;^128^^^^^126^131^[REPLACE] types = new StandardUnionFind<T> (  ) ;^[METHOD] getTypes [TYPE] UnionFind [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^types ;^128^^^^^126^131^[REPLACE] types = new StandardUnionFind<T> (  ) ;^[METHOD] getTypes [TYPE] UnionFind [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return type;^130^^^^^126^131^[REPLACE] return types;^[METHOD] getTypes [TYPE] UnionFind [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return !skipRenaming && !typesToSkip.contains ( type ) ;^139^^^^^138^156^[REPLACE] checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( type )  )  {^140^^^^^138^156^[REPLACE] if  ( typeSystem.isInvalidatingType ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^144^^^^^138^156^[REPLACE] if  ( typeSystem.isTypeToSkip ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^144^145^146^^^138^156^[ADD] if  ( typeSystem.isTypeToSkip ( top )  )  { addTypeToSkip ( top ) ; }^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^addTypeToSkip ( type ) ;^145^^^^^138^156^[REPLACE] addTypeToSkip ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  (type != true )  {^148^^^^^138^156^[REPLACE] if  ( relatedType == null )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^getTypes (  ) .union ( top, type ) ;^151^^^^^138^156^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REMOVE]^return scopes.peek (  ) ;^151^^^^^138^156^[REMOVE] ^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^151^^^^^138^156^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^getTypes (  ) .add ( type ) ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return scopes.peek (  ) ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^149^^^^^138^156^[ADD] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return false;^154^^^^^138^156^[REPLACE] return true;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return true;^142^^^^^138^156^[REPLACE] return false;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  (type != null )  {^148^^^^^138^156^[REPLACE] if  ( relatedType == null )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^getTypes (  ) .find ( top, relatedType ) ;^151^^^^^138^156^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^151^^^^^138^156^[ADD] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^getTypes (  ) .find ( type ) ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REMOVE]^return scopes.peek (  ) ;^149^^^^^138^156^[REMOVE] ^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T relatedType  top  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^160^^^^^159^164^[REPLACE] for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[METHOD] addTypeToSkip [TYPE] void [PARAMETER] T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set invalidatingTypes  renameNodes  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T skipType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typesToSkip.contains ( newType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^188^189^190^191^^167^204^[ADD] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^newTypesToSkip.addAll ( newType ) ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( types.elements (  ) .size (  )  + 4 == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^167^204^[REPLACE] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^178^^^^^167^204^[ADD] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^179^^^^^167^204^[REPLACE] for  ( T subType : typesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> newTypesToSkip = Sets .newHashSet (  )  ;^184^^^^^167^204^[REPLACE] Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> allTypes = types.allEquivalenceClasses (  ) ;^185^^^^^167^204^[REPLACE] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int originalTypesSize = allTypes .isEmpty (  )  ;^186^^^^^167^204^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^187^^^^^167^204^[REPLACE] for  ( T subType : allTypes )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^194^^^^^167^204^[REPLACE] for  ( T newType : newTypesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^194^195^196^^^167^204^[ADD] for  ( T newType : newTypesToSkip )  { addTypeToSkip ( newType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( prop.shouldRename (  )  )  {^170^^^^^167^204^[REPLACE] if  ( shouldRename (  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^while  ( false )  {^172^^^^^167^204^[REPLACE] while  ( true )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  (  typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^newTypesToSkip .find ( subType )  ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( types.elements (  ) .length (  )  == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^179^180^181^^^167^204^[ADD] for  ( T subType : typesToSkip )  { rootTypesToSkip.add ( types.find ( subType )  ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^Set<T> allTypes = types.elements (  ) ;^184^185^^^^167^204^[ADD] Set<T> newTypesToSkip = Sets.newHashSet (  ) ; Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int originalTypesSize = this.size (  ) ;^186^^^^^167^204^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typesToSkip.contains ( subType ) && typesToSkip.contains ( types.add ( subType )  )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^newTypesToSkip .find ( newType )  ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( types.elements (  ) .size (  )  *  2 == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int count = 4;^171^^^^^167^204^[REPLACE] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> rootTypesToSkip = Sets .newHashSet (  )  ;^178^^^^^167^204^[REPLACE] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^167^204^[REPLACE] Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^int originalTypesSize = 1.isEmpty (  ) ;^186^^^^^167^204^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^186^^^^^167^204^[ADD] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^187^188^189^190^191^167^204^[ADD] for  ( T subType : allTypes )  { if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^newTypesToSkip.addAll ( subType ) ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( types.elements (  ) .size (  )  + 2 == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^break;^199^200^201^^^167^204^[ADD] if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^171^^^^^167^204^[ADD] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^185^^^^^167^204^[ADD] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return !skipRenaming && types != null && types.elements (  ) .size (  )  /  2 > 1;^208^209^^^^207^210^[REPLACE] return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[METHOD] shouldRename [TYPE] boolean [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return !skipRenaming && !typesToSkip .add ( type )  ;^218^^^^^217^219^[REPLACE] return !skipRenaming && !typesToSkip.contains ( type ) ;^[METHOD] shouldRename [TYPE] boolean [PARAMETER] T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^String typeName = null;^226^^^^^225^230^[REPLACE] boolean changed = !skipRenaming;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^skipRenaming = false;^227^^^^^225^230^[REPLACE] skipRenaming = true;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^types = this;^228^^^^^225^230^[REPLACE] types = null;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return names;^229^^^^^225^230^[REPLACE] return changed;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( prop.skipRenaming )  {^242^^^^^241^251^[REPLACE] if  ( !skipRenaming )  {^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^242^243^244^245^246^241^251^[ADD] if  ( !skipRenaming )  { if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( top )  )  {^243^^^^^241^251^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^invalidate (  ) ;return false;^243^244^245^246^^241^251^[ADD] if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return true;^245^^^^^241^251^[REPLACE] return false;^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^243^^^^^241^251^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return false;^250^^^^^241^251^[REPLACE] return true;^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return  new ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  )   ) ;^258^259^^^^256^260^[REPLACE] return new DisambiguateProperties<JSType> ( compiler, new JSTypeSystem ( compiler )  ) ;^[METHOD] forJSTypeSystem [TYPE] DisambiguateProperties [PARAMETER] AbstractCompiler compiler [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return  new JSType> ( compiler, new JSTypeSystem ( compiler )  )    )  ) ;^264^265^^^^262^266^[REPLACE] return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[METHOD] forConcreteTypeSystem [TYPE] DisambiguateProperties [PARAMETER] AbstractCompiler compiler TightenTypes tt [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^279^^^^^278^288^[REPLACE] for  ( TypeMismatch mis : compiler.getTypeValidator (  ) .getMismatches (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node externs  root  [TYPE]  StaticScope scope  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  TypeMismatch mis 
[REPLACE]^T rootType = prop.rootTypes.get ( node ) ;^284^^^^^278^288^[REPLACE] StaticScope<T> scope = typeSystem.getRootScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node externs  root  [TYPE]  StaticScope scope  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  TypeMismatch mis 
[REPLACE]^NodeTraversal .getScopeRoot (  )  ;^285^^^^^278^288^[REPLACE] NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node externs  root  [TYPE]  StaticScope scope  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  TypeMismatch mis 
[REPLACE]^if  ( !properties.containsKey ( name )  )  { properties.put ( name, new Property ( name )  ) ;^286^^^^^278^288^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node externs  root  [TYPE]  StaticScope scope  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  TypeMismatch mis 
[REPLACE]^return scopes.peek (  ) ;^287^^^^^278^288^[REPLACE] renameProperties (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node externs  root  [TYPE]  StaticScope scope  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  TypeMismatch mis 
[ADD]^^287^^^^^278^288^[ADD] renameProperties (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node externs  root  [TYPE]  StaticScope scope  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  TypeMismatch mis 
[REPLACE]^type = typeSystem.restrictByNotNullOrUndefined ( type ) ; ;^294^^^^^293^307^[REPLACE] type = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( ! type instanceof UnionType )  {^295^^^^^293^307^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return names;^299^^^^^293^307^[REPLACE] return;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^296^^^^^293^307^[REPLACE] for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  {^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^296^297^298^^^293^307^[ADD] for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { addInvalidatingType ( alt ) ; }^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^typeSystem .DisambiguateProperties ( compiler , null )  ;^302^^^^^293^307^[REPLACE] typeSystem.addInvalidatingType ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^303^^^^^293^307^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^303^^^^^293^307^[ADD] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( objType == true && objType.getImplicitPrototype (  )  != true )  {^304^^^^^293^307^[REPLACE] if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^typeSystem.addInvalidatingType ( objType.getConstructor (  )  ) ;^305^^^^^293^307^[REPLACE] typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^typeSystem.addInvalidatingType ( objType .getConstructor (  )   ) ;^305^^^^^293^307^[REPLACE] typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( !properties.get ( name )  )  {^312^^^^^311^316^[REPLACE] if  ( !properties.containsKey ( name )  )  {^[METHOD] getProperty [TYPE] DisambiguateProperties$Property [PARAMETER] String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^312^313^314^^^311^316^[ADD] if  ( !properties.containsKey ( name )  )  { properties.put ( name, new Property ( name )  ) ; }^[METHOD] getProperty [TYPE] DisambiguateProperties$Property [PARAMETER] String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return typeSystem.getTypeWithProperty ( field, type ) ;^313^^^^^311^316^[REPLACE] properties.put ( name, new Property ( name )  ) ;^[METHOD] getProperty [TYPE] DisambiguateProperties$Property [PARAMETER] String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^313^^^^^311^316^[ADD] properties.put ( name, new Property ( name )  ) ;^[METHOD] getProperty [TYPE] DisambiguateProperties$Property [PARAMETER] String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return properties.containsKey ( name ) ;^315^^^^^311^316^[REPLACE] return properties.get ( name ) ;^[METHOD] getProperty [TYPE] DisambiguateProperties$Property [PARAMETER] String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^320^^^^^319^321^[REPLACE] return typeSystem.getTypeWithProperty ( field, type ) ;^[METHOD] getTypeWithProperty [TYPE] T [PARAMETER] String field T type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return false;^329^^^^^328^330^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( type instanceof UnionType )  {^333^^^^^332^338^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^scopes.push ( typeSystem.addInvalidatingType ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^[REPLACE] scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^scopes.push ( typeSystem.getFunctionScope ( t.getSourceName (  )  )  ) ;^336^^^^^332^338^[REPLACE] scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^334^^^^^332^338^[REPLACE] scopes.push ( typeSystem.getRootScope (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^scopes.push ( typeSystem .getFunctionScope ( this )   ) ;^334^^^^^332^338^[REPLACE] scopes.push ( typeSystem.getRootScope (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^scopes.push (  ) ;^341^^^^^340^342^[REPLACE] scopes.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[ADD]^^341^^^^^340^342^[ADD] scopes.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^return scopes .push ( true )  ;^346^^^^^345^347^[REPLACE] return scopes.peek (  ) ;^[METHOD] getScope [TYPE] StaticScope [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^if  ( n.getType (  )   !=  Token.GETPROP )  {^356^^^^^355^374^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( top )  )  {^360^^^^^355^374^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == null )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop.invalidate (  ) .add ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop .addType ( type , type , type )  .add ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop.typesToSkip.addAll ( type ) ;^370^^^^^355^374^[REPLACE] prop.typesToSkip.add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type =  nullSystem.getInstanceFromProtonull ( null )  )  !^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^prop.getTypes (  ) .add ( type ) ;prop.typesToSkip.add ( type ) ;^368^369^370^371^^355^374^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop.shouldRename (  ) ;^361^^^^^355^374^[REPLACE] prop.invalidate (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^361^^^^^355^374^[ADD] prop.invalidate (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == true )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^369^370^^^^355^374^[ADD] prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String field = parent.getLastChild (  ) .getString (  ) ;^357^^^^^355^374^[REPLACE] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^357^^^^^355^374^[ADD] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^358^^^^^355^374^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Property prop = getProperty ( name ) ;^359^^^^^355^374^[REPLACE] Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getTypesToSkipForType ( type )  )  == null )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^prop.getTypes (  ) .find ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^368^369^370^371^^355^374^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REMOVE]^return scopes.peek (  ) ;^361^^^^^355^374^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == false )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^369^^^^^355^374^[ADD] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String field = parent.getLastChild (  ) .getNativeObjectType (  ) ;^357^^^^^355^374^[REPLACE] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , parent.getFirstChild (  ) , field ) ;^358^^^^^355^374^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^359^^^^^355^374^[ADD] Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( n.getType (  )   ||  Token.GETPROP )  {^384^^^^^383^389^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^}  else {^386^^^^^383^389^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^handleObjectLit ( t, parent ) ;^387^^^^^383^389^[REPLACE] handleObjectLit ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^handleGetProp ( t, parent ) ;^385^^^^^383^389^[REPLACE] handleGetProp ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REMOVE]^list.add ( impl.getInstanceType (  )  ) ;^385^^^^^383^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.OBJECTLIT )  {^386^^^^^383^389^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes 
[REPLACE]^String name = n.getLastChild (  ) .getNativeObjectType (  ) ;^395^^^^^394^407^[REPLACE] String name = n.getLastChild (  ) .getString (  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^395^396^^^^394^407^[ADD] String name = n.getLastChild (  ) .getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , n.getLastChild (  ) , name ) ;^396^^^^^394^407^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Property prop = getProperty ( field ) ;^398^^^^^394^407^[REPLACE] Property prop = getProperty ( name ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^399^400^^^^394^407^[REPLACE] if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^399^400^401^402^403^394^407^[ADD] if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  { if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name,^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( type instanceof UnionType )  {^401^^^^^394^407^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^401^402^403^404^405^394^407^[ADD] if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report   "null" ;^402^403^404^^^394^407^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^t.getScopeRoot (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^[REPLACE] t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type .Object (  )   ) , n^404^^^^^394^407^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.getString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^402^403^404^^^394^407^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report   "true" ;^402^403^404^^^394^407^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^t .getScopeRoot (  )  , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^[REPLACE] t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.Object (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Node child = n.getLastChild (  ) ;^413^^^^^412^433^[REPLACE] Node child = n.getFirstChild (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^413^^^^^412^433^[ADD] Node child = n.getFirstChild (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^while  ( child == null )  {^414^^^^^412^433^[REPLACE] while  ( child != null )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^414^415^416^^^412^433^[ADD] while  ( child != null )  { if  ( child.getType (  )  == Token.STRING )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( child.getType (  )   ||  Token.STRING )  {^415^^^^^412^433^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( type instanceof UnionType )  {^423^^^^^412^433^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^424^425^426^^^412^433^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report   "null" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^t .getScopeRoot (  )  , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^[REPLACE] t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.Object (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.getString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^426^^^^^412^433^[ADD] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^423^424^425^426^427^412^433^[ADD] if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^t.getScopeRoot (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^[REPLACE] t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String name = child.toString (  ) ;^417^^^^^412^433^[REPLACE] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getFunctionScope ( getScope (  ) , n, name ) ;^418^^^^^412^433^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Property prop = getProperty ( field ) ;^420^^^^^412^433^[REPLACE] Property prop = getProperty ( name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^420^^^^^412^433^[ADD] Property prop = getProperty ( name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, false )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^421^422^423^424^425^412^433^[ADD] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  { if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name,^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report   "this" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type .Object (  )   ) , n^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^child =  null.getNext (  ) .getNext (  ) ;^431^^^^^412^433^[REPLACE] child = child.getNext (  ) .getNext (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String name = child .getAlternatives (  )  ;^417^^^^^412^433^[REPLACE] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^415^416^417^418^^412^433^[ADD] if  ( child.getType (  )  == Token.STRING )  {  String name = child.getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, this )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report   "true" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^417^^^^^412^433^[ADD] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^418^^^^^412^433^[ADD] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != true ? "true" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^jsType = jsType.restrictByNotNullOrUndefined (  ) ; ;^444^^^^^442^467^[REPLACE] type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^444^^^^^442^467^[ADD] type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (true ) {^445^^^^^442^467^[REPLACE] if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return true;^446^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Iterable<T> alternatives = topTypeSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^[REPLACE] Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( alternatives == this  )  {^450^^^^^442^467^[REPLACE] if  ( alternatives != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( type )  )  {^461^^^^^442^467^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return true;^462^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return this;^462^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return type;^465^^^^^442^467^[REPLACE] return topType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T topType = topTypeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^[REPLACE] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( lastType == null )  {^454^^^^^442^467^[REPLACE] if  ( lastType != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^firstType  =  lastType ;^455^^^^^442^467^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return type;^458^^^^^442^467^[REPLACE] return firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T firstType = true;^451^^^^^442^467^[REPLACE] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^452^^^^^442^467^[REPLACE] for  ( T subType : alternatives )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ;^453^^^^^442^467^[REPLACE] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( lastType ==type )  {^454^^^^^442^467^[REPLACE] if  ( lastType != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^455^^^^^442^467^[ADD] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( subType )  )  {^461^^^^^442^467^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REMOVE]^if  ( typeSystem.isTypeToSkip ( top )  )  {     addTypeToSkip ( top ) ; }^461^^^^^442^467^[REMOVE] ^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^firstType  =  firstType;^455^^^^^442^467^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T firstType = this;^451^^^^^442^467^[REPLACE] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^451^^^^^442^467^[ADD] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T lastType = processProperty ( t, prop, type, firstType ) ;^453^^^^^442^467^[REPLACE] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ;^460^^^^^442^467^[REPLACE] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[ADD]^^460^^^^^442^467^[ADD] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  UnionFind types  [TYPE]  String field  name  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  nextUniqueId  originalTypesSize  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^int propsRenamed = 0 - 4, propsSkipped = 0 - 4, instancesRenamed = 0 - 4, instancesSkipped = 0 - 4, singleTypeProps = 0 - 4;^472^473^^^^471^507^[REPLACE] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^int propsRenamed = 0 / 4, propsSkipped = 0 / 4, instancesRenamed = 0 / 4, instancesSkipped = 0 / 4, singleTypeProps = 0 / 4;^472^473^^^^471^507^[REPLACE] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^int propsRenamed = 3, propsSkipped = 3, instancesRenamed = 3, instancesSkipped = 3, singleTypeProps = 3;^472^473^^^^471^507^[REPLACE] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^instancesSkipped = 0 / 3, singleTypeProps = 0 / 3;^473^^^^^471^507^[REPLACE] instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^instancesSkipped = 0 * 2, singleTypeProps = 0 * 2;^473^^^^^471^507^[REPLACE] instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^473^^^^^471^507^[ADD] instancesSkipped = 0, singleTypeProps = 0;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.shouldRename ( rootType )  )  {^476^^^^^471^507^[REPLACE] if  ( prop.shouldRename (  )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( !skipRenaming )  {^494^^^^^476^499^[REPLACE] if  ( prop.skipRenaming )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^++propsSkipped;++singleTypeProps;^494^495^496^497^498^476^499^[ADD] if  ( prop.skipRenaming )  { ++propsSkipped; } else { ++singleTypeProps; }^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.shouldRename (  )  )  {^484^^^^^471^507^[REPLACE] if  ( prop.shouldRename ( rootType )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^484^485^486^487^488^471^507^[ADD] if  ( prop.shouldRename ( rootType )  )  { String newName = propNames.get ( rootType ) ; node.setString ( newName ) ; compiler.reportCodeChange (  ) ; ++instancesRenamed;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = null.get ( rootType ) ;^485^^^^^471^507^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Map<T, String> names = Maps.newHashMap (  ) ;^477^^^^^471^507^[REPLACE] Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^UnionFind<T> types = prop.invalidate (  ) ;^481^^^^^471^507^[REPLACE] UnionFind<T> types = prop.getTypes (  ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^482^^^^^471^507^[REPLACE] for  ( Node node : prop.renameNodes )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^T rootType = prop.rootTypes .put ( node , rootType )  ;^483^^^^^471^507^[REPLACE] T rootType = prop.rootTypes.get ( node ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = propNames.containsKey ( rootType ) ;^485^^^^^471^507^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^String newName = propNames.get ( rootType ) ;node.setString ( newName ) ;compiler.reportCodeChange (  ) ;++instancesRenamed;^484^485^486^487^488^471^507^[ADD] if  ( prop.shouldRename ( rootType )  )  { String newName = propNames.get ( rootType ) ; node.setString ( newName ) ; compiler.reportCodeChange (  ) ; ++instancesRenamed;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( !skipRenaming )  {^494^^^^^471^507^[REPLACE] if  ( prop.skipRenaming )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( Node node : prop.renameNodes )  { T rootType = prop.rootTypes.get ( node ) ;^475^^^^^471^507^[REPLACE] for  ( Property prop : properties.values (  )  )  {^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Map<T, String> propNames = buildPropNames ( prop.invalidate (  ) , prop.name ) ;^477^^^^^471^507^[REPLACE] Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^String newName = propNames .put ( node , rootType )  ;^485^^^^^471^507^[REPLACE] String newName = propNames.get ( rootType ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^logger.info ( "Renamed " + instancesRenamed + " instances of " + singleTypeProps + " properties." ) ;^501^502^^^^471^507^[REPLACE] logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsRenamed + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^471^507^[REPLACE] logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^503^504^505^^^471^507^[ADD] logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps^[METHOD] renameProperties [TYPE] void [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T rootType  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Set<JSType> types = Sets.newHashSet (  ) ;^514^^^^^513^537^[REPLACE] Map<T, String> names = Maps.newHashMap (  ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^514^^^^^513^537^[ADD] Map<T, String> names = Maps.newHashMap (  ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( typeName != false || type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^[REPLACE] if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^typeName =  null.toString (  ) ;^521^^^^^513^537^[REPLACE] typeName = type.toString (  ) ;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type instanceof UnionType )  {^526^^^^^513^537^[REPLACE] if  ( "{...}".equals ( typeName )  )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^newName = typeName.replaceAll ( "[^\\w$]", "_" )   ||  "$"  ||  name;^529^^^^^513^537^[REPLACE] newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^529^^^^^513^537^[ADD] newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^this.name = name; ;^527^^^^^513^537^[REPLACE] newName = name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^527^^^^^513^537^[ADD] newName = name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^newName = typeName.replaceAll ( "[^\\w$]", "_" )   &  "$"  &  name;^529^^^^^513^537^[REPLACE] newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Set<JSType> types = Sets.newHashSet (  ) ;^515^^^^^513^537^[REPLACE] for  ( Set<T> set : types.allEquivalenceClasses (  )  )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^String typeName = true;^518^^^^^513^537^[REPLACE] String typeName = null;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^519^^^^^513^537^[REPLACE] for  ( T type : set )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^519^520^521^522^^513^537^[ADD] for  ( T type : set )  { if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  { typeName = type.toString (  ) ; }^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^String typeName = null;^525^^^^^513^537^[REPLACE] String newName;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^532^^^^^513^537^[REPLACE] for  ( T type : set )  {^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return 0;^536^^^^^513^537^[REPLACE] return names;^[METHOD] buildPropNames [TYPE] Map [PARAMETER] UnionFind<T> types String name [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  T type  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Map<T, String> names = Maps.newHashMap (  ) ;^541^^^^^540^553^[REPLACE] Multimap<String, Collection<T>> ret = HashMultimap.create (  ) ;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( prop.skipRenaming )  {^544^^^^^540^553^[REPLACE] if  ( !prop.skipRenaming )  {^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^544^545^546^547^548^540^553^[ADD] if  ( !prop.skipRenaming )  { for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  { if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  { ret.put ( entry.getKey (  ) , c ) ; }^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  (  !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^546^^^^^540^553^[REPLACE] if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^ret.put ( entry .getValue (  )  , c ) ;^547^^^^^540^553^[REPLACE] ret.put ( entry.getKey (  ) , c ) ;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^ret.put ( null.getKey (  ) , c ) ;^547^^^^^540^553^[REPLACE] ret.put ( entry.getKey (  ) , c ) ;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^545^^^^^540^553^[REPLACE] for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  {^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^545^546^547^548^^540^553^[ADD] for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  { if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  { ret.put ( entry.getKey (  ) , c ) ; }^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^if  ( 0.isEmpty (  )  ) {^546^^^^^540^553^[REPLACE] if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^ret.put ( true.getKey (  ) , c ) ;^547^^^^^540^553^[REPLACE] ret.put ( entry.getKey (  ) , c ) ;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^547^^^^^540^553^[ADD] ret.put ( entry.getKey (  ) , c ) ;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^542^^^^^540^553^[REPLACE] for  ( Map.Entry<String, Property> entry: properties.entrySet (  )  )  {^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^Property prop = this.getValue (  ) ;^543^^^^^540^553^[REPLACE] Property prop = entry.getValue (  ) ;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[ADD]^^543^^^^^540^553^[ADD] Property prop = entry.getValue (  ) ;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^return null;^552^^^^^540^553^[REPLACE] return ret;^[METHOD] getRenamedTypesForTesting [TYPE] Multimap [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  Multimap ret  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  Entry entry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Collection c  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property prop 
[REPLACE]^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^652^^^^^651^654^[REPLACE] checkState ( !type.isUnionType (  )  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^checkState ( !type .isUnknownType (  )   ) ;^652^^^^^651^654^[REPLACE] checkState ( !type.isUnionType (  )  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^invalidatingTypes.contains ( type ) ;^653^^^^^651^654^[REPLACE] invalidatingTypes.add ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^@Override public StaticScope<JSType> getRootScope (  )  { return false; }^656^^^^^^^[REPLACE] @Override public StaticScope<JSType> getRootScope (  )  { return null; }^[METHOD] getRootScope [TYPE] StaticScope [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return this;^659^^^^^658^660^[REPLACE] return null;^[METHOD] getFunctionScope [TYPE] StaticScope [PARAMETER] Node node [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( node.getJSType (  )  != null )  {^664^^^^^662^668^[REPLACE] if  ( node.getJSType (  )  == null )  {^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^664^665^666^^^662^668^[ADD] if  ( node.getJSType (  )  == null )  { return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return registry.getDirectImplementors ( JSTypeNative.UNKNOWN_TYPE ) ;^665^^^^^662^668^[REPLACE] return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return node .getType (  )  ;^667^^^^^662^668^[REPLACE] return node.getJSType (  ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type != true ) {^671^672^^^^670^678^[REPLACE] if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^673^^^^^670^678^[REPLACE] return true;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^676^^^^^670^678^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return objType != true && !objType.hasOwnProperty (  ) ;^677^^^^^670^678^[REPLACE] return objType != null && !objType.hasReferenceName (  ) ;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^type = typeSystem.restrictByNotNullOrUndefined ( type ) ; ;^681^^^^^680^690^[REPLACE] type = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ! type instanceof UnionType )  {^682^^^^^680^690^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^Set<JSType> types = Sets.newHashSet ( type ) ;^682^683^684^685^686^680^690^[ADD] if  ( type instanceof UnionType )  { Set<JSType> types = Sets.newHashSet ( type ) ; for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ; }^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return ImmutableSet.of ( types ) ;^687^^^^^680^690^[REPLACE] return ImmutableSet.copyOf ( types ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Set<JSType> types =   type   ;^683^^^^^680^690^[REPLACE] Set<JSType> types = Sets.newHashSet ( type ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^684^^^^^680^690^[REPLACE] for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  {^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return typeSystem.getTypeWithProperty ( field, type ) ;^689^^^^^680^690^[REPLACE] return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Set<JSType> types = Sets.newHashSet ( type ) ;^693^^^^^692^706^[REPLACE] Set<JSType> types = Sets.newHashSet (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType skipType = skipType;^694^^^^^692^706^[REPLACE] JSType skipType = type;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^694^^^^^692^706^[ADD] JSType skipType = type;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^while  ( skipType == null )  {^695^^^^^692^706^[REPLACE] while  ( skipType != null )  {^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^695^696^^^^692^706^[ADD] while  ( skipType != null )  { types.add ( skipType ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( objSkipType == null )  {^699^^^^^692^706^[REPLACE] if  ( objSkipType != null )  {^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^objType = objType.getImplicitPrototype (  ) ; ;^700^^^^^692^706^[REPLACE] skipType = objSkipType.getImplicitPrototype (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^700^^^^^692^706^[ADD] skipType = objSkipType.getImplicitPrototype (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objSkipType = type .isNamedType (  )  ;^698^^^^^692^706^[REPLACE] ObjectType objSkipType = skipType.toObjectType (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objSkipType = type.isNamedType (  ) ;^698^^^^^692^706^[REPLACE] ObjectType objSkipType = skipType.toObjectType (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^705^^^^^692^706^[REPLACE] return types;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType skipType  type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objSkipType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return type.isEnumType (  )  ||  ( type .unboxesTo (  )   != null ) ;^709^^^^^708^710^[REPLACE] return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[METHOD] isTypeToSkip [TYPE] boolean [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return type.isFunctionPrototypeType (  ) ;^713^^^^^712^714^[REPLACE] return type.restrictByNotNullOrUndefined (  ) ;^[METHOD] restrictByNotNullOrUndefined [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.isUnion (  )  )  {^717^^^^^716^734^[REPLACE] if  ( type.isUnionType (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^return  (  ( UnionType )  type ) .getAlternates (  ) ;ObjectType objType = type.toObjectType (  ) ;^717^718^719^720^721^716^734^[ADD] if  ( type.isUnionType (  )  )  { return  (  ( UnionType )  type ) .getAlternates (  ) ; } else { ObjectType objType = type.toObjectType (  ) ; if  ( objType != null &&^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( objType == null ) {^721^722^723^^^716^734^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^731^^^^^716^734^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return 1;^729^^^^^716^734^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Map<T, String> names = Maps.newHashMap (  ) ;^724^^^^^716^734^[REPLACE] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^724^^^^^716^734^[ADD] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^725^726^727^728^^716^734^[ADD] for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  { list.add ( impl.getInstanceType (  )  ) ; }^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return null;^729^^^^^716^734^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return this;^731^^^^^716^734^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objType = type.isNamedType (  ) ;^720^^^^^716^734^[REPLACE] ObjectType objType = type.toObjectType (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^718^^^^^716^734^[REPLACE] return  (  ( UnionType )  type ) .getAlternates (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( objType == null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REMOVE]^if  ( type.isUnionType (  )  )  {     return  (  ( UnionType )   ( type )  ) .getAlternates (  ) ; }else {     ObjectType objType = type.toObjectType (  ) ;     if  (  (  ( objType != null )  &&  (  ( objType.getConstructor (  )  )  != null )  )  &&  ( objType.getConstructor (  ) .isInterface (  )  )  )  {         JSType> list = newArrayList (  ) ;         for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  {             list.add ( impl.getInstanceType (  )  ) ;         }         return list;     }else {         return null;     } }^721^^^^^716^734^[REMOVE] ^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return this;^729^^^^^716^734^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionType impl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  List list  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ! ! ( type instanceof ObjectType )  )  {^737^^^^^736^757^[REPLACE] if  ( ! ( type instanceof ObjectType )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^737^738^739^740^741^736^757^[ADD] if  ( ! ( type instanceof ObjectType )  )  { if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.autoboxesTo (  )  == null )  {^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^type = type.autoboxesTo (  ) ;return null;^738^739^740^741^742^736^757^[ADD] if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return true;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^type =  null.autoboxesTo (  ) ;^739^^^^^736^757^[REPLACE] type = type.autoboxesTo (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return this;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.unboxesTo (  )  == null )  {^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType foundType = true;^748^^^^^736^757^[REPLACE] ObjectType foundType = null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^748^749^^^^736^757^[ADD] ObjectType foundType = null; ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objType = ObjectType .getConstructor (  )  ;^749^^^^^736^757^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^while  ( objType != null ;^750^^^^^736^757^[REPLACE] while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( foundType.hasOwnProperty ( field )  )  {^751^^^^^736^757^[REPLACE] if  ( objType.hasOwnProperty ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^foundType =  null;^752^^^^^736^757^[REPLACE] foundType = objType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^752^^^^^736^757^[ADD] foundType = objType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^skipType = objSkipType.getImplicitPrototype (  ) ; ;^754^^^^^736^757^[REPLACE] objType = objType.getImplicitPrototype (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return objType;^756^^^^^736^757^[REPLACE] return foundType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType foundType  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( instanceType.isFunctionPrototype (  )  )  {^760^^^^^759^769^[REPLACE] if  ( type.isFunctionPrototypeType (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REMOVE]^if  ( type.isUnionType (  )  )  {     return  (  ( UnionType )   ( type )  ) .getAlternates (  ) ; }else {     ObjectType objType = type.toObjectType (  ) ;     if  (  (  ( objType != null )  &&  (  ( objType.getConstructor (  )  )  != null )  )  &&  ( objType.getConstructor (  ) .isInterface (  )  )  )  {         JSType> list = newArrayList (  ) ;         for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  {             list.add ( impl.getInstanceType (  )  ) ;         }         return list;     }else {         return null;     } }^760^^^^^759^769^[REMOVE] ^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( owner.isConstructor (  )  ) {^763^^^^^759^769^[REPLACE] if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .isInstanceType (  ) ;^764^765^^^^759^769^[REPLACE] return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objType = ObjectType.cast ( type ) ;^761^^^^^759^769^[REPLACE] FunctionPrototypeType prototype =  ( FunctionPrototypeType )  type;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^Node child = n.getFirstChild (  ) ;^762^^^^^759^769^[REPLACE] FunctionType owner = prototype.getOwnerFunction (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( owner.isConstructor (  )  && owner.isInterface (  )  )  {^763^^^^^759^769^[REPLACE] if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  (  ( FunctionPrototypeType )  type ) .getAlternates (  ) .getInstanceType (  ) ;^764^765^^^^759^769^[REPLACE] return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return typeSystem.getTypeWithProperty ( field, type ) ;^764^765^^^^759^769^[REPLACE] return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return this;^768^^^^^759^769^[REPLACE] return null;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ObjectType objType = ObjectType.cast ( top ) ;^774^^^^^773^803^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^while  ( constructor == null )  {^784^^^^^773^803^[REPLACE] while  ( constructor != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( top == this )  {^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^recordInterfaces ( itype, type, p ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^p .addTypeToSkip ( null )  ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( p.skipRenaming )  return; }^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^return !skipRenaming && !typesToSkip.contains ( type ) ;^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( constructor.isInterface (  )  ) {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^796^797^798^799^800^773^803^[ADD] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = false;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^773^803^[REPLACE] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^797^^^^^773^803^[ADD] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = true;^799^^^^^773^803^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^785^^^^^773^803^[REPLACE] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ;^786^^^^^773^803^[REPLACE] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  (itype == false )  {^775^^^^^773^803^[REPLACE] if  ( objType != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^while  ( constructor == this )  {^784^^^^^773^803^[REPLACE] while  ( constructor != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( top == false )  {^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^p.addType ( itype, type, relatedType ) ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  (  constructor.isConstructor (  )  )  {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^constructor = constructor.getSuperClassConstructor (  ) ;constructor = null;^796^797^798^799^800^773^803^[ADD] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = false;^799^^^^^773^803^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^799^^^^^773^803^[ADD] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^JSType top = getTypeWithProperty ( p.name, objType ) ;^786^^^^^773^803^[REPLACE] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( ! objType instanceof FunctionType )  {^777^^^^^773^803^[REPLACE] if  ( objType instanceof FunctionType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^777^778^779^780^^773^803^[ADD] if  ( objType instanceof FunctionType )  { constructor =  ( FunctionType )  objType; } else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^} else if  ( ! itype instanceof FunctionPrototypeType )  {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^779^783^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =   (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^780^^^^^773^803^[REPLACE] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^773^803^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor =   ( FunctionType )  objType;^778^^^^^773^803^[REPLACE] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^}  else {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  (type == null )  {^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^787^788^789^790^791^773^803^[ADD] if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^p.addType ( itype, top, type ) ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( constructor.isInterface (  )  && constructor.isConstructor (  )  )  {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^constructor = this;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^776^^^^^773^803^[REPLACE] FunctionType constructor;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^}   constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;constructor = objType.getConstructor (  ) ;^779^780^781^782^783^773^803^[ADD] else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[ADD]^^780^^^^^773^803^[ADD] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^if  ( top == null )  {^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^p.addType ( objType, top, relatedType ) ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType relatedType  top  type  [TYPE]  FunctionType constructor  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ObjectType itype  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^checkState ( !type .isUnknownType (  )   ) ;^827^^^^^826^829^[REPLACE] checkState ( !type.isUnionType (  )  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^827^828^^^^826^829^[ADD] checkState ( !type.isUnionType (  )  ) ; invalidatingTypes.add ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^invalidatingTypes.contains ( type ) ;^828^^^^^826^829^[REPLACE] invalidatingTypes.add ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REMOVE]^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^828^^^^^826^829^[REMOVE] ^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType type  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return tt.getTypeRegistry (  ) ;^832^^^^^831^833^[REPLACE] return tt.getTopScope (  ) ;^[METHOD] getRootScope [TYPE] StaticScope [PARAMETER] [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteFunctionType func = tt.getConcreteInstance ( decl ) ;^836^^^^^835^839^[REPLACE] ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[METHOD] getFunctionScope [TYPE] StaticScope [PARAMETER] Node decl [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  Node decl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteFunctionType func  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  ( func  =   ( StaticScope;^837^838^^^^835^839^[REPLACE] return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[METHOD] getFunctionScope [TYPE] StaticScope [PARAMETER] Node decl [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  Node decl  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteFunctionType func  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( scope == null )  {^844^^^^^842^851^[REPLACE] if  ( scope != null )  {^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^849^^^^^842^851^[REPLACE] return null;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return maybeAddAutoboxes ( cType, jsType, prop ) ;^847^^^^^842^851^[REPLACE] return maybeAddAutoboxes ( c, node, prop ) ;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType c = tt.getConcreteInstance ( ( TightenTypes.ConcreteScope )  scope, node ) ;^845^846^^^^842^851^[REPLACE] ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return true;^849^^^^^842^851^[REPLACE] return null;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType jsType = node .getType (  )  ;^860^^^^^858^875^[REPLACE] JSType jsType = node.getJSType (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^860^^^^^858^875^[ADD] JSType jsType = node.getJSType (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( jsType != null )  {^861^^^^^858^875^[REPLACE] if  ( jsType == null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^} else if  ( type.isUnion (  )  )  {^863^^^^^858^875^[REPLACE] } else if  ( jsType.isUnknownType (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( cType == null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^858^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return type;^871^^^^^858^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( T newType : newTypesToSkip )  { addTypeToSkip ( newType ) ;^864^^^^^858^875^[REPLACE] for  ( JSTypeNative nativeType : nativeTypes )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^864^865^866^867^868^858^875^[ADD] for  ( JSTypeNative nativeType : nativeTypes )  { ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ; if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTopScope (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (  !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^cType =  null.unionWith ( concrete ) ;^868^^^^^858^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return concrete;^871^^^^^858^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  )  .getInstanceType (  )   ) ;^865^866^^^^858^875^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return concrete;^862^^^^^858^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (  !concrete .toInstance (  )  .isNone (  )  )  {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^cType = cType.unionWith ( concrete ) ;^867^868^869^^^858^875^[ADD] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ; }^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( concrete == this ) {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^868^^^^^858^875^[ADD] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance ( tt .getTypeValidator (  )  .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return maybeAddAutoboxes ( cType, jsType, typeName ) ;^874^^^^^858^875^[REPLACE] return maybeAddAutoboxes ( cType, jsType, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType jsType  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  JSTypeNative nativeType  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^type = typeSystem.restrictByNotNullOrUndefined ( type ) ; ;^879^^^^^877^894^[REPLACE] jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^880^^^^^877^894^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^880^881^882^883^^877^894^[ADD] if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return maybeAddAutoboxes ( c, node, prop ) ;^882^^^^^877^894^[REPLACE] return maybeAddAutoboxes ( cType, alt, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^881^^^^^877^894^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return maybeAddAutoboxes ( cType, alt, typeName ) ;^882^^^^^877^894^[REPLACE] return maybeAddAutoboxes ( cType, alt, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( jsType.autoboxesTo (  )  == null )  {^886^^^^^877^894^[REPLACE] if  ( jsType.autoboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  else {^889^^^^^877^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^}^889^890^891^^^877^894^[ADD] else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^890^^^^^877^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType.getPropertyType ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^888^^^^^877^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType autoboxed = autoboxed .unboxesTo (  )  ;^887^^^^^877^894^[REPLACE] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^} else if  ( jsType.unboxesTo (  )  == true )  {^889^^^^^877^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^888^^^^^877^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return cType .isUnion (  )   ) ;^890^^^^^877^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^JSType autoboxed = jsType .unboxesTo (  )  ;^887^^^^^877^894^[REPLACE] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return type;^893^^^^^877^894^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.getPropertyType (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^[REPLACE] return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return ImmutableSet .copyOf ( null )  ;^906^^^^^905^907^[REPLACE] return ImmutableSet.of ( type ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return    ( type .isInstance (  )  .isFunctionPrototype (  ) || type^911^912^913^^^909^914^[REPLACE] return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[METHOD] isTypeToSkip [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return types;^919^^^^^917^920^[REPLACE] return type;^[METHOD] restrictByNotNullOrUndefined [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.isUnionType (  )  )  {^924^^^^^923^929^[REPLACE] if  ( type.isUnion (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return true;^927^^^^^923^929^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  (  ( UnionType )  type ) .getAlternates (  ) ;^925^^^^^923^929^[REPLACE] return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return  (  ( ConcreteUnionType )  type ) .getAlternates (  ) ;^925^^^^^923^929^[REPLACE] return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^927^^^^^923^929^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.isUnionType (  )  )  {^933^^^^^931^956^[REPLACE] if  ( type.isInstance (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  else {^936^^^^^931^956^[REPLACE] } else if  ( type.isFunction (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  else {^941^^^^^931^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  else {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ret == null )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return t;^951^^^^^931^956^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^948^^^^^931^956^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^T lastType = processProperty ( t, prop, subType, firstType ) ;^949^^^^^931^956^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^949^^^^^931^956^[ADD] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (t == null )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^948^949^950^951^952^931^956^[ADD] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ; if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType ret = getTypeWithProperty ( field, type ) ;^949^^^^^931^956^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return typeSystem.getTypeWithProperty ( field, type ) ;^945^^^^^931^956^[REPLACE] return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( t.isUnion (  )  )  {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^return ret;^950^951^952^^^931^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^ConcreteType ret = getTypeWithProperty ( typeName, t ) ;^949^^^^^931^956^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( ret ==t )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^950^951^952^^^931^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  (  codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^937^938^939^940^^931^956^[ADD] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return types;^939^^^^^931^956^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return t;^939^^^^^931^956^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( "prototype".equals ( field ) ) {^937^938^^^^931^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^}   return new ConcreteUniqueType ( ++nextUniqueId ) ;^941^942^^^945^931^956^[ADD] else if  ( type.isNone (  )  )  {  return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( t == this )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.isUnion (  )  )  {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return instanceType .getConstructorType (  )  ;^935^^^^^931^956^[REPLACE] return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^934^^^^^931^956^[REPLACE] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^^934^935^^^^931^956^[ADD] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type; return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^}  if  ( type.isUnion (  )  )  {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( t == null )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^} else if  ( t.isUnion (  )  )  {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( "prototype".equals ( typeName ) ) {^937^938^^^^931^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^} else if  ( jsType.isUnknownType (  )  )  {^941^^^^^931^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[ADD]^}^946^947^948^949^^931^956^[ADD] else if  ( type.isUnion (  )  )  {  for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return true;^955^^^^^931^956^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.isUnionType (  )  )  {^959^^^^^958^966^[REPLACE] if  ( type.isInstance (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^if  ( type.isFunctionPrototypeType (  )  )  {^961^^^^^958^966^[REPLACE] if  ( instanceType.isFunctionPrototype (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return instanceType.getConstructorType (  ) .getNativeObjectType (  ) ;^962^^^^^958^966^[REPLACE] return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^960^^^^^958^966^[REPLACE] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return instanceType .getInstanceTypeWithProperty ( name )  .getInstanceType (  ) ;^962^^^^^958^966^[REPLACE] return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return instanceType .getInstanceTypeWithProperty ( typeName )  .getInstanceType (  ) ;^962^^^^^958^966^[REPLACE] return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^return false;^965^^^^^958^966^[REPLACE] return null;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  ConcreteInstanceType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes 
[REPLACE]^final  double  name;^94^^^^^^^[REPLACE] final String name;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^Set<T> typesToSkip  = null ;^103^^^^^^^[REPLACE] Set<T> typesToSkip = Sets.newHashSet (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^Set<Node> renameNodes ;^112^^^^^^^[REPLACE] Set<Node> renameNodes = Sets.newHashSet (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^final Map<Node, T> rootTypes ;^119^^^^^^^[REPLACE] final Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] ConcreteType type ConcreteType relatedType Property p [CLASS] Property   [TYPE]  TypeSystem typeSystem  [TYPE]  Set allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  [TYPE]  UnionFind types  [TYPE]  String field  name  newName  prop  typeName  [TYPE]  Logger logger  [TYPE]  ConcreteType relatedType  type  [TYPE]  TightenTypes tt  [TYPE]  int count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  [TYPE]  Stack scopes  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean changed  false  showInvalidationWarnings  skipRenaming  true  [TYPE]  DiagnosticType INVALIDATION  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Map names  propNames  properties  rootTypes  [TYPE]  Property p 
[REPLACE]^this.name =  null;^122^^^^^121^123^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[ADD]^^122^^^^^121^123^[ADD] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^if  ( null != null )  {^127^^^^^126^131^[REPLACE] if  ( types == null )  {^[METHOD] getTypes [TYPE] UnionFind [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^types ;^128^^^^^126^131^[REPLACE] types = new StandardUnionFind<T> (  ) ;^[METHOD] getTypes [TYPE] UnionFind [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^return false;^130^^^^^126^131^[REPLACE] return types;^[METHOD] getTypes [TYPE] UnionFind [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^return !skipRenaming && !typesToSkip.contains ( type ) ;^139^^^^^138^156^[REPLACE] checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[ADD]^^139^^^^^138^156^[ADD] checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if  ( relatedTypeSystem.isInvalidatingType ( top )  )  {^140^^^^^138^156^[REPLACE] if  ( typeSystem.isInvalidatingType ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^144^^^^^138^156^[REPLACE] if  ( typeSystem.isTypeToSkip ( top )  )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^addTypeToSkip ( type ) ;^145^^^^^138^156^[REPLACE] addTypeToSkip ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^if  ( relatedType != null )  {^148^^^^^138^156^[REPLACE] if  ( relatedType == null )  {^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^getTypes (  ) .union ( top, type ) ;^151^^^^^138^156^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^typesToSkip.add ( skipType ) ;^151^^^^^138^156^[REPLACE] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^getTypes (  ) .add ( type ) ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^typesToSkip.add ( skipType ) ;^149^^^^^138^156^[REPLACE] getTypes (  ) .add ( top ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^return false;^154^^^^^138^156^[REPLACE] return true;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^return true;^142^^^^^138^156^[REPLACE] return false;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[ADD]^^148^149^150^151^152^138^156^[ADD] if  ( relatedType == null )  { getTypes (  ) .add ( top ) ; } else { getTypes (  ) .union ( top, relatedType ) ; }^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[ADD]^^151^^^^^138^156^[ADD] getTypes (  ) .union ( top, relatedType ) ;^[METHOD] addType [TYPE] boolean [PARAMETER] T type T top T relatedType [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T relatedType  top  type  [TYPE]  Map rootTypes 
[REPLACE]^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  { typesToSkip.add ( skipType ) ;^160^^^^^159^164^[REPLACE] for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[METHOD] addTypeToSkip [TYPE] void [PARAMETER] T type [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T skipType  type  [TYPE]  Map rootTypes 
[ADD]^^160^161^162^163^^159^164^[ADD] for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  { typesToSkip.add ( skipType ) ; getTypes (  ) .union ( skipType, type ) ; }^[METHOD] addTypeToSkip [TYPE] void [PARAMETER] T type [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set renameNodes  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T skipType  type  [TYPE]  Map rootTypes 
[REPLACE]^if  ( typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^newTypesToSkip.addAll ( subType ) ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^190^^^^^188^191^[ADD] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( types.elements (  ) .size (  )  /  2 == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^break;^199^200^201^^^167^204^[ADD] if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^167^204^[REPLACE] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^178^^^^^167^204^[ADD] Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^for  ( T newType : newTypesToSkip )  { addTypeToSkip ( newType ) ;^179^^^^^167^204^[REPLACE] for  ( T subType : typesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^167^204^[REPLACE] Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^Set<T> allTypes = types.allEquivalenceClasses (  ) ;^185^^^^^167^204^[REPLACE] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int originalTypesSize = null.size (  ) ;^186^^^^^167^204^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int originalTypesSize = allTypes.size (  ) ;^187^^^^^167^204^[REPLACE] for  ( T subType : allTypes )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int originalTypesSize = allTypes.size (  ) ;^194^^^^^167^204^[REPLACE] for  ( T newType : newTypesToSkip )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( relatedType == null )  {^170^^^^^167^204^[REPLACE] if  ( shouldRename (  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^while  ( false )  {^172^^^^^167^204^[REPLACE] while  ( true )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^172^173^174^^^167^204^[ADD] while  ( true )  {  checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( typesToSkip.contains ( newType ) ) {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( types.elements (  ) .length (  )  == originalTypesSize )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^199^200^201^^^167^204^[ADD] if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^Set<T> allTypes = types.elements (  ) ;^184^185^^^^167^204^[ADD] Set<T> newTypesToSkip = Sets.newHashSet (  ) ; Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^185^^^^^167^204^[ADD] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int originalTypesSize = this.size (  ) ;^186^^^^^167^204^[REPLACE] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^194^195^196^^^167^204^[ADD] for  ( T newType : newTypesToSkip )  { addTypeToSkip ( newType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( typesToSkip.addAll ( subType ) ) {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^188^189^190^191^^167^204^[ADD] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^newTypesToSkip.add ( newType ) ;^190^^^^^188^191^[REPLACE] newTypesToSkip.add ( subType ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int count = 3;^171^^^^^167^204^[REPLACE] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[ADD]^^186^^^^^167^204^[ADD] int originalTypesSize = allTypes.size (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( typesToSkip.contains ( subType ) ) {^188^189^^^^167^204^[REPLACE] if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^if  ( types.allEquivalenceClasses (  ) .length (  )  == count )  {^199^^^^^167^204^[REPLACE] if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^int count = 2;^171^^^^^167^204^[REPLACE] int count = 0;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^Set<T> allTypes = types .allEquivalenceClasses (  )  ;^185^^^^^167^204^[REPLACE] Set<T> allTypes = types.elements (  ) ;^[METHOD] expandTypesToSkip [TYPE] void [PARAMETER] [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  T newType  subType  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes  [TYPE]  int count  originalTypesSize 
[REPLACE]^return !skipRenaming && types != null && types.allEquivalenceClasses (  )  .contains ( this )   > 1;^208^209^^^^207^210^[REPLACE] return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[METHOD] shouldRename [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^return !skipRenaming && !typesToSkip.addAll ( type ) ;^218^^^^^217^219^[REPLACE] return !skipRenaming && !typesToSkip.contains ( type ) ;^[METHOD] shouldRename [TYPE] boolean [PARAMETER] T type [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean false  skipRenaming  true  [TYPE]  String name  [TYPE]  T type  [TYPE]  Map rootTypes 
[REPLACE]^int originalTypesSize = allTypes.size (  ) ;^226^^^^^225^230^[REPLACE] boolean changed = !skipRenaming;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^skipRenaming = false;^227^^^^^225^230^[REPLACE] skipRenaming = true;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^types = true;^228^^^^^225^230^[REPLACE] types = null;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^return true;^229^^^^^225^230^[REPLACE] return changed;^[METHOD] invalidate [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  UnionFind types  [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^if  ( skipRenaming )  {^242^^^^^241^251^[REPLACE] if  ( !skipRenaming )  {^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[ADD]^^242^243^244^245^246^241^251^[ADD] if  ( !skipRenaming )  { if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( top )  )  {^243^^^^^241^251^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[ADD]^^243^244^245^246^^241^251^[ADD] if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^return true;^245^^^^^241^251^[REPLACE] return false;^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^if  ( typeSystem.isTypeToSkip ( type )  )  {^243^^^^^241^251^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^return false;^250^^^^^241^251^[REPLACE] return true;^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] Property   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^protected final Stack<StaticScope<T>> scopes ;^325^326^^^^325^326^[REPLACE] protected final Stack<StaticScope<T>> scopes = new Stack<StaticScope<T>> (  ) ;^[METHOD] scheduleRenaming [TYPE] boolean [PARAMETER] Node node T type [CLASS] AbstractScopingCallback   [TYPE]  Set allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  [TYPE]  boolean changed  false  skipRenaming  true  [TYPE]  T type  [TYPE]  Node node  [TYPE]  UnionFind types  [TYPE]  String name  [TYPE]  Map rootTypes 
[REPLACE]^return false;^329^^^^^328^330^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AbstractScopingCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  Node n  parent 
[REPLACE]^if  ( t .getScopeRoot (  )   )  {^333^^^^^332^338^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[REPLACE]^scopes.push ( typeSystem.getFunctionScope ( t .inGlobalScope (  )   )  ) ;^336^^^^^332^338^[REPLACE] scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[REPLACE]^scopes.push ( typeSystem.getFunctionScope ( t.inGlobalScope (  )  )  ) ;^336^^^^^332^338^[REPLACE] scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[REMOVE]^scopes.push ( typeSystem.getRootScope (  )  ) ;^336^^^^^332^338^[REMOVE] ^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[ADD]^^336^^^^^332^338^[ADD] scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[REPLACE]^if  ( t.inGlobalScope (  )  )  { scopes.push ( typeSystem.getRootScope (  )  ) ;^334^^^^^332^338^[REPLACE] scopes.push ( typeSystem.getRootScope (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[ADD]^^334^^^^^332^338^[ADD] scopes.push ( typeSystem.getRootScope (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[REPLACE]^scopes.push (  ) ;^341^^^^^340^342^[REPLACE] scopes.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] AbstractScopingCallback   [TYPE]  NodeTraversal t  [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[REPLACE]^return scopes .push ( null )  ;^346^^^^^345^347^[REPLACE] return scopes.peek (  ) ;^[METHOD] getScope [TYPE] StaticScope [PARAMETER] [CLASS] AbstractScopingCallback   [TYPE]  Stack scopes  [TYPE]  boolean false  true 
[REPLACE]^if  ( parent.getType (  )   &&  Token.GETPROP )  {^356^^^^^355^374^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^360^^^^^355^374^[REPLACE] if  ( typeSystem.isInvalidatingType ( type )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^360^361^362^363^^355^374^[ADD] if  ( typeSystem.isInvalidatingType ( type )  )  { prop.invalidate (  ) ; } else { prop.addTypeToSkip ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  ==type )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^368^369^370^371^^355^374^[ADD] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop.invalidate (  ) .add ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop.invalidate (  ) ;^370^^^^^355^374^[REPLACE] prop.typesToSkip.add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type =  nullSystem.getInstanceFromProtonull ( null )  )  !^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop.getTypes (  ) ;^361^^^^^355^374^[REPLACE] prop.invalidate (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REMOVE]^if  ( typeSystem.isInvalidatingType ( type )  )  { prop.invalidate (  ) ;^361^^^^^355^374^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem .getType (  )   )  == true )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop .addTypeToSkip ( type )  .add ( type ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REMOVE]^prop.invalidate (  ) ;^370^^^^^355^374^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^String field = parent.getLastChild (  ) .getString (  ) ;^357^^^^^355^374^[REPLACE] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , n.getLastChild (  ) , field ) ;^358^^^^^355^374^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^String field = n.getLastChild (  ) .getString (  ) ;^359^^^^^355^374^[REPLACE] Property prop = getProperty ( field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == null )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^prop.invalidate (  ) ;^369^^^^^355^374^[REPLACE] prop.getTypes (  ) .add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[ADD]^^370^^^^^355^374^[ADD] prop.typesToSkip.add ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == true )  {^368^^^^^355^374^[REPLACE] if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^String field = parent.getFirstChild (  ) .getString (  ) ;^357^^^^^355^374^[REPLACE] String field = n.getLastChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , parent.getFirstChild (  ) , field ) ;^358^^^^^355^374^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExternProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String field  [TYPE]  Property prop 
[REPLACE]^if  ( n.getType (  )   ||  Token.GETPROP )  {^384^^^^^383^389^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^handleGetProp ( t, n ) ;handleObjectLit ( t, n ) ;^384^385^386^387^388^383^389^[ADD] if  ( n.getType (  )  == Token.GETPROP )  { handleGetProp ( t, n ) ; } else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.OBJECTLIT )  {^386^^^^^383^389^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^handleObjectLit ( t, parent ) ;^387^^^^^383^389^[REPLACE] handleObjectLit ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )  == Token.GETPROP )  { handleGetProp ( t, n ) ;^385^^^^^383^389^[REPLACE] handleGetProp ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.OBJECTLIT )  {^386^^^^^383^389^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^}   handleObjectLit ( t, n ) ;^386^387^388^^^383^389^[ADD] else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^handleGetProp ( t, n ) ;^387^^^^^383^389^[REPLACE] handleObjectLit ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^String name = n.getFirstChild (  ) .getString (  ) ;^395^^^^^394^407^[REPLACE] String name = n.getLastChild (  ) .getString (  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getType ( getScope (  ) , n.getLastChild (  ) , name ) ;^396^^^^^394^407^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^398^^^^^394^407^[REPLACE] Property prop = getProperty ( name ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^398^^^^^394^407^[ADD] Property prop = getProperty ( name ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^399^400^^^^394^407^[REPLACE] if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^401^^^^^394^407^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report   "null" ;^402^403^404^^^394^407^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^402^403^404^^^394^407^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^403^404^^^^394^407^[ADD] t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( child.getType (  )  == Token.STRING )  {^404^^^^^394^407^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.getString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^404^^^^^394^407^[ADD] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REMOVE]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^404^^^^^394^407^[REMOVE] ^[METHOD] handleGetProp [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^Node child = n .getLastChild (  )  ;^413^^^^^412^433^[REPLACE] Node child = n.getFirstChild (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^while  ( child == false )  {^414^^^^^412^433^[REPLACE] while  ( child != null )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( child.getType (  )   &&  Token.STRING )  {^415^^^^^412^433^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^423^^^^^412^433^[REPLACE] if  ( showInvalidationWarnings )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report (   t.getSourceName (  )   ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( child.getType (  )  == Token.STRING )  {^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^( type == null ? "null" : type.getString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^[REPLACE] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^424^425^426^^^412^433^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report   "this" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^String name = child.toString (  ) ;^417^^^^^412^433^[REPLACE] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem .getType ( 1 , child , name )  ;^418^^^^^412^433^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^420^^^^^412^433^[REPLACE] Property prop = getProperty ( name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, false )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != this ? "this" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report   "null" ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^426^^^^^412^433^[ADD] ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != false ? "false" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^child =  null.getNext (  ) .getNext (  ) ;^431^^^^^412^433^[REPLACE] child = child.getNext (  ) .getNext (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^T type = typeSystem.getTypeAlternatives ( getScope (  ) , n, name ) ;^418^^^^^412^433^[REPLACE] T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( child.getType (  )   !=  Token.STRING )  {^415^^^^^412^433^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^415^416^417^418^^412^433^[ADD] if  ( child.getType (  )  == Token.STRING )  {  String name = child.getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^String name = child .getNext (  )  ;^417^^^^^412^433^[REPLACE] String name = child.getString (  ) ;^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, true )  )  )  {^421^422^^^^412^433^[REPLACE] if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[METHOD] handleObjectLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T type  [TYPE]  NodeTraversal t  [TYPE]  Node child  n  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^type =  topTypeSystem.restrictByNotNullOrUndefined ( topType ) ;^444^^^^^442^467^[REPLACE] type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( prop.skipRenaming && topTypeSystem .getType (  )   )  {^445^^^^^442^467^[REPLACE] if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return this;^446^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return true;^446^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^Iterable<T> alternatives = typeSystem.isInvalidatingType ( type ) ;^449^^^^^442^467^[REPLACE] Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( alternatives == this )  {^450^^^^^442^467^[REPLACE] if  ( alternatives != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^450^451^452^453^^442^467^[ADD] if  ( alternatives != null )  { T firstType = null; for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem .getType (  )   )  {^461^^^^^442^467^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return false;^462^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return true;^462^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return type;^465^^^^^442^467^[REPLACE] return topType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ;^460^^^^^442^467^[REPLACE] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( type == null )  {^454^^^^^442^467^[REPLACE] if  ( lastType != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^firstType = firstType == null ? lastType : firstType;^454^455^456^^^442^467^[ADD] if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^type  =  firstType;^455^^^^^442^467^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^firstType  =  lastType ;^455^^^^^442^467^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return topType;^458^^^^^442^467^[REPLACE] return firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^T firstType = this;^451^^^^^442^467^[REPLACE] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^for  ( T subType : alternatives )  { T lastType = processProperty ( t, prop, subType, firstType ) ;^452^^^^^442^467^[REPLACE] for  ( T subType : alternatives )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^T lastType = processProperty ( t, prop, subType, type ) ;^453^^^^^442^467^[REPLACE] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[ADD]^^453^^^^^442^467^[ADD] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  (type == false )  {^454^^^^^442^467^[REPLACE] if  ( lastType != null )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^firstType  =  firstType;^455^^^^^442^467^[REPLACE] firstType = firstType == null ? lastType : firstType;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^if  ( typeSystem.isInvalidatingType ( type )  )  {^461^^^^^442^467^[REPLACE] if  ( typeSystem.isInvalidatingType ( topType )  )  {^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^return this;^462^^^^^442^467^[REPLACE] return null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^T firstType = true;^451^^^^^442^467^[REPLACE] T firstType = null;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^453^^^^^442^467^[REPLACE] T lastType = processProperty ( t, prop, subType, firstType ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^T topType = topTypeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^[REPLACE] T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[METHOD] processProperty [TYPE] T [PARAMETER] NodeTraversal t Property prop T type T relatedType [CLASS] FindRenameableProperties   [TYPE]  boolean false  true  [TYPE]  T firstType  lastType  relatedType  subType  topType  type  [TYPE]  Iterable alternatives  [TYPE]  NodeTraversal t  [TYPE]  Property prop 
[REPLACE]^registry =  null.getTypeRegistry (  ) ;^639^^^^^638^649^[REPLACE] registry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  AbstractCompiler compiler  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true 
[ADD]^^639^^^^^638^649^[ADD] registry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  AbstractCompiler compiler  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true 
[REPLACE]^invalidatingTypes ;^640^641^642^643^^638^649^[REPLACE] invalidatingTypes = Sets.newHashSet ( registry.getNativeType ( JSTypeNative.ALL_TYPE ) , registry.getNativeType ( JSTypeNative.NO_OBJECT_TYPE ) , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  AbstractCompiler compiler  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true 
[REPLACE]^ObjectType objType = ObjectType.cast ( type ) ;^652^^^^^651^654^[REPLACE] checkState ( !type.isUnionType (  )  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^invalidatingTypes.contains ( type ) ;^653^^^^^651^654^[REPLACE] invalidatingTypes.add ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^@Override public StaticScope<JSType> getRootScope (  )  { return this; }^656^^^^^^^[REPLACE] @Override public StaticScope<JSType> getRootScope (  )  { return null; }^[METHOD] getRootScope [TYPE] StaticScope [PARAMETER] [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true 
[REPLACE]^return false;^659^^^^^658^660^[REPLACE] return null;^[METHOD] getFunctionScope [TYPE] StaticScope [PARAMETER] Node node [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^if  ( node.getJSType (  )  != null )  {^664^^^^^662^668^[REPLACE] if  ( node.getJSType (  )  == null )  {^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  String prop  [TYPE]  boolean false  true  [TYPE]  StaticScope scope  [TYPE]  Node node 
[REPLACE]^return registry.getDirectImplementors ( JSTypeNative.UNKNOWN_TYPE ) ;^665^^^^^662^668^[REPLACE] return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  String prop  [TYPE]  boolean false  true  [TYPE]  StaticScope scope  [TYPE]  Node node 
[REPLACE]^return registry .getDirectImplementors ( false )  ;^665^^^^^662^668^[REPLACE] return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  String prop  [TYPE]  boolean false  true  [TYPE]  StaticScope scope  [TYPE]  Node node 
[REPLACE]^return types;^667^^^^^662^668^[REPLACE] return node.getJSType (  ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] JSType> scope Node node String prop [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  String prop  [TYPE]  boolean false  true  [TYPE]  StaticScope scope  [TYPE]  Node node 
[REPLACE]^if  ( type != null || invalidatingTypes.contains ( type )  || ( type .isEnumType (  )   && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^[REPLACE] if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return false;^673^^^^^670^678^[REPLACE] return true;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^676^^^^^670^678^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return objType != this && !objType.hasOwnProperty (  ) ;^677^^^^^670^678^[REPLACE] return objType != null && !objType.hasReferenceName (  ) ;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^type =  null.restrictByNotNullOrUndefined (  ) ;^681^^^^^680^690^[REPLACE] type = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType alt  type  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! type instanceof UnionType )  {^682^^^^^680^690^[REPLACE] if  ( type instanceof UnionType )  {^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType alt  type  [TYPE]  boolean false  true 
[REPLACE]^return   true   ;^687^^^^^680^690^[REPLACE] return ImmutableSet.copyOf ( types ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType alt  type  [TYPE]  boolean false  true 
[REPLACE]^Set<JSType> types =   type   ;^683^^^^^680^690^[REPLACE] Set<JSType> types = Sets.newHashSet ( type ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType alt  type  [TYPE]  boolean false  true 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^684^^^^^680^690^[REPLACE] for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  {^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType alt  type  [TYPE]  boolean false  true 
[REPLACE]^return   1   ;^687^^^^^680^690^[REPLACE] return ImmutableSet.copyOf ( types ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType alt  type  [TYPE]  boolean false  true 
[REPLACE]^return node.getJSType (  ) ;^689^^^^^680^690^[REPLACE] return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType alt  type  [TYPE]  boolean false  true 
[REPLACE]^Set<JSType> types = Sets .newHashSet (  )  ;^693^^^^^692^706^[REPLACE] Set<JSType> types = Sets.newHashSet (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[ADD]^^693^^^^^692^706^[ADD] Set<JSType> types = Sets.newHashSet (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[REPLACE]^JSType skipType = skipType;^694^^^^^692^706^[REPLACE] JSType skipType = type;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[ADD]^^694^^^^^692^706^[ADD] JSType skipType = type;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[REPLACE]^while  ( skipType == null )  {^695^^^^^692^706^[REPLACE] while  ( skipType != null )  {^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[REPLACE]^if  ( objSkipType == null )  {^699^^^^^692^706^[REPLACE] if  ( objSkipType != null )  {^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[ADD]^^699^700^701^702^703^692^706^[ADD] if  ( objSkipType != null )  { skipType = objSkipType.getImplicitPrototype (  ) ; } else { break; }^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[REPLACE]^objType = objType.getImplicitPrototype (  ) ; ;^700^^^^^692^706^[REPLACE] skipType = objSkipType.getImplicitPrototype (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[REPLACE]^ObjectType objSkipType = type.toObjectType (  ) ;^698^^^^^692^706^[REPLACE] ObjectType objSkipType = skipType.toObjectType (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[ADD]^^698^^^^^692^706^[ADD] ObjectType objSkipType = skipType.toObjectType (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[ADD]^skipType = objSkipType.getImplicitPrototype (  ) ;break;^699^700^701^702^703^692^706^[ADD] if  ( objSkipType != null )  { skipType = objSkipType.getImplicitPrototype (  ) ; } else { break; }^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[ADD]^^700^^^^^692^706^[ADD] skipType = objSkipType.getImplicitPrototype (  ) ;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[REPLACE]^return null;^705^^^^^692^706^[REPLACE] return types;^[METHOD] getTypesToSkipForTypeNonUnion [TYPE] Set [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objSkipType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType skipType  type  [TYPE]  boolean false  true 
[REPLACE]^return type.isEnumType (  )  ;^709^^^^^708^710^[REPLACE] return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[METHOD] isTypeToSkip [TYPE] boolean [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return type .restrictByNotNullOrUndefined (  )  ;^713^^^^^712^714^[REPLACE] return type.restrictByNotNullOrUndefined (  ) ;^[METHOD] restrictByNotNullOrUndefined [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( top != null )  {^717^^^^^716^734^[REPLACE] if  ( type.isUnionType (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[ADD]^return  (  ( UnionType )  type ) .getAlternates (  ) ;ObjectType objType = type.toObjectType (  ) ;^717^718^719^720^721^716^734^[ADD] if  ( type.isUnionType (  )  )  { return  (  ( UnionType )  type ) .getAlternates (  ) ; } else { ObjectType objType = type.toObjectType (  ) ; if  ( objType != null &&^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^if  ( objType == null ) {^721^722^723^^^716^734^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REMOVE]^if  ( type instanceof UnionType )  {     JSType> types = newHashSet ( type ) ;     for  ( JSType alt :  (  ( UnionType )   ( type )  ) .getAlternates (  )  )  {         types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;     }     return copyOf ( types ) ; }^721^^^^^716^734^[REMOVE] ^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return true;^731^^^^^716^734^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return this;^729^^^^^716^734^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^FunctionType owner = prototype.getOwnerFunction (  ) ;^724^^^^^716^734^[REPLACE] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return false;^729^^^^^716^734^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return false;^731^^^^^716^734^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^ObjectType objType = type .isNamedType (  )  ;^720^^^^^716^734^[REPLACE] ObjectType objType = type.toObjectType (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[ADD]^^724^^^^^716^734^[ADD] List<JSType> list = Lists.newArrayList (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return  (  ( UnionType )  type ) .getOwnerFunction (  ) ;^718^^^^^716^734^[REPLACE] return  (  ( UnionType )  type ) .getAlternates (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^if  ( objType == null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^[REPLACE] if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return true;^729^^^^^716^734^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[ADD]^^725^726^727^728^^716^734^[ADD] for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  { list.add ( impl.getInstanceType (  )  ) ; }^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return 1;^729^^^^^716^734^[REPLACE] return list;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^return this;^731^^^^^716^734^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^ObjectType objType = type.isNamedType (  ) ;^720^^^^^716^734^[REPLACE] ObjectType objType = type.toObjectType (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType impl  [TYPE]  List list 
[REPLACE]^if  ( ! ! ( type instanceof ObjectType )  )  {^737^^^^^736^757^[REPLACE] if  ( ! ( type instanceof ObjectType )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( type.autoboxesTo (  )  == null )  {^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return true;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^type =  null.autoboxesTo (  ) ;^739^^^^^736^757^[REPLACE] type = type.autoboxesTo (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[ADD]^^739^^^^^736^757^[ADD] type = type.autoboxesTo (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return this;^741^^^^^736^757^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( type.toObjectType (  )  == null )  {^738^^^^^736^757^[REPLACE] if  ( type.autoboxesTo (  )  != null )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[ADD]^^738^739^740^741^742^736^757^[ADD] if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^ObjectType foundType = true;^748^^^^^736^757^[REPLACE] ObjectType foundType = null;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^ObjectType objType = ObjectType .getConstructor (  )  ;^749^^^^^736^757^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^while  ( objType != this ;^750^^^^^736^757^[REPLACE] while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( objType.cast ( field )  )  {^751^^^^^736^757^[REPLACE] if  ( objType.hasOwnProperty ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[ADD]^foundType = objType;^751^752^753^^^736^757^[ADD] if  ( objType.hasOwnProperty ( field )  )  { foundType = objType; }^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^foundType =  null;^752^^^^^736^757^[REPLACE] foundType = objType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^skipType = objSkipType.getImplicitPrototype (  ) ; ;^754^^^^^736^757^[REPLACE] objType = objType.getImplicitPrototype (  ) ;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( foundType.cast ( field )  )  {^751^^^^^736^757^[REPLACE] if  ( objType.hasOwnProperty ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^return objType;^756^^^^^736^757^[REPLACE] return foundType;^[METHOD] getTypeWithProperty [TYPE] JSType [PARAMETER] String field JSType type [CLASS] JSTypeSystem   [TYPE]  ObjectType foundType  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  String field  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( top != null )  {^760^^^^^759^769^[REPLACE] if  ( type.isFunctionPrototypeType (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^if  (  owner.isInterface (  )  )  {^763^^^^^759^769^[REPLACE] if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^return  (  ( FunctionPrototypeType )  type ) .getAlternates (  ) .getInstanceType (  ) ;^764^765^^^^759^769^[REPLACE] return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^764^765^^^^759^769^[REPLACE] return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^ObjectType objType = ObjectType.cast ( type ) ;^761^^^^^759^769^[REPLACE] FunctionPrototypeType prototype =  ( FunctionPrototypeType )  type;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^FunctionPrototypeType prototype =  ( FunctionPrototypeType )  type;^762^^^^^759^769^[REPLACE] FunctionType owner = prototype.getOwnerFunction (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^if  ( owner.isConstructor (  )  && owner.isInterface (  )  )  {^763^^^^^759^769^[REPLACE] if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getOwnerFunction (  ) ;^764^765^^^^759^769^[REPLACE] return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^return true;^768^^^^^759^769^[REPLACE] return null;^[METHOD] getInstanceFromPrototype [TYPE] JSType [PARAMETER] JSType type [CLASS] JSTypeSystem   [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionPrototypeType prototype  [TYPE]  FunctionType owner 
[REPLACE]^ObjectType objType = ObjectType.cast ( top ) ;^774^^^^^773^803^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^while  ( constructor == true )  {^784^^^^^773^803^[REPLACE] while  ( constructor != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  (type == null )  {^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^p.addType ( itype, top, relatedType ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^p.addType ( itype, type, relatedType ) ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^788^^^^^773^803^[ADD] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( p.skipRenaming )  return; }^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  (  constructor.isConstructor (  )  )  {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor = true;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^773^803^[REPLACE] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor = this;^799^^^^^773^803^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^return types;^794^^^^^773^803^[REPLACE] if  ( p.skipRenaming )  return;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^ObjectType objType = ObjectType.cast ( type ) ;^785^^^^^773^803^[REPLACE] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^785^786^787^788^^773^803^[ADD] for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  { JSType top = getTypeWithProperty ( p.name, itype ) ; if  ( top != null )  { p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^JSType top = getTypeWithProperty ( p.name, objType ) ;^786^^^^^773^803^[REPLACE] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^786^^^^^773^803^[ADD] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( objType == null )  {^775^^^^^773^803^[REPLACE] if  ( objType != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( top == null )  {^787^^^^^773^803^[REPLACE] if  ( top != null )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^p.addType ( itype, top, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^787^788^789^790^791^773^803^[ADD] if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^recordInterfaces ( itype, type, p ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^794^795^^^^773^803^[ADD] if  ( p.skipRenaming )  return; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( constructor.isInterface (  )  ) {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor = this;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^799^^^^^796^800^[ADD] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( ! objType instanceof FunctionType )  {^777^^^^^773^803^[REPLACE] if  ( objType instanceof FunctionType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^}  if  ( ! objType instanceof FunctionPrototypeType )  {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^}   constructor = objType.getConstructor (  ) ;^779^780^781^782^783^773^803^[ADD] else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^779^783^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =   (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^780^^^^^773^803^[REPLACE] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^780^^^^^773^803^[ADD] constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  null.getConstructor (  ) ;^782^^^^^773^803^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =   ( FunctionType )  objType;^778^^^^^773^803^[REPLACE] constructor =  ( FunctionType )  objType;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^}  else {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  null.getConstructor (  ) ;^782^^^^^779^783^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor = false;^799^^^^^796^800^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor =  itype.getConstructor (  ) ;^782^^^^^773^803^[REPLACE] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^782^^^^^773^803^[ADD] constructor = objType.getConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^constructor = false;^799^^^^^773^803^[REPLACE] constructor = null;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^FunctionType owner = prototype.getOwnerFunction (  ) ;^776^^^^^773^803^[REPLACE] FunctionType constructor;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^} else if  ( ! itype instanceof FunctionPrototypeType )  {^779^^^^^773^803^[REPLACE] } else if  ( objType instanceof FunctionPrototypeType )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^recordInterfaces ( objType, relatedType, p ) ;^790^^^^^787^791^[REPLACE] recordInterfaces ( itype, relatedType, p ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^ObjectType objType = ObjectType.cast ( type ) ;^788^^^^^773^803^[REPLACE] p.addType ( itype, top, relatedType ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^if  ( constructor.isInterface (  )  && constructor.isConstructor (  )  )  {^796^^^^^773^803^[REPLACE] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^796^797^798^799^800^773^803^[ADD] if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^797^^^^^773^803^[ADD] constructor = constructor.getSuperClassConstructor (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[ADD]^^776^^^^^773^803^[ADD] FunctionType constructor;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^ObjectType objType = ObjectType.cast ( type ) ;^786^^^^^773^803^[REPLACE] JSType top = getTypeWithProperty ( p.name, itype ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] JSTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^private  TightenTypes tt;^808^^^^^^^[REPLACE] private final TightenTypes tt;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] ConcreteTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^private  short  nextUniqueId;^809^^^^^^^[REPLACE] private int nextUniqueId;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] ConcreteTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^private final Set<JSType> invalidatingTypes ;^811^^^^^^^[REPLACE] private final Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] ConcreteTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^private static  JSTypeNative [] nativeTypes = new JSTypeNative[] {^815^^^^^815^819^[REPLACE] private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {^[METHOD] recordInterfaces [TYPE] void [PARAMETER] JSType type JSType relatedType Property p [CLASS] ConcreteTypeSystem   [TYPE]  ObjectType itype  objType  [TYPE]  JSTypeRegistry registry  [TYPE]  Set invalidatingTypes  types  [TYPE]  JSType relatedType  top  type  [TYPE]  boolean false  true  [TYPE]  FunctionType constructor  [TYPE]  Property p 
[REPLACE]^this.tt =  null;^822^^^^^821^824^[REPLACE] this.tt = tt;^[METHOD] <init> [TYPE] CodingConvention) [PARAMETER] TightenTypes tt CodingConvention convention [CLASS] ConcreteTypeSystem   [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  CodingConvention codingConvention  convention 
[ADD]^this.codingConvention = convention;^822^823^^^^821^824^[ADD] this.tt = tt; this.codingConvention = convention;^[METHOD] <init> [TYPE] CodingConvention) [PARAMETER] TightenTypes tt CodingConvention convention [CLASS] ConcreteTypeSystem   [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  CodingConvention codingConvention  convention 
[REPLACE]^this.codingConvention =  null;^823^^^^^821^824^[REPLACE] this.codingConvention = convention;^[METHOD] <init> [TYPE] CodingConvention) [PARAMETER] TightenTypes tt CodingConvention convention [CLASS] ConcreteTypeSystem   [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  CodingConvention codingConvention  convention 
[REPLACE]^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^827^^^^^826^829^[REPLACE] checkState ( !type.isUnionType (  )  ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REMOVE]^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^827^^^^^826^829^[REMOVE] ^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^828^^^^^826^829^[REPLACE] invalidatingTypes.add ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^828^^^^^826^829^[ADD] invalidatingTypes.add ( type ) ;^[METHOD] addInvalidatingType [TYPE] void [PARAMETER] JSType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return tt .getTypeRegistry (  )  ;^832^^^^^831^833^[REPLACE] return tt.getTopScope (  ) ;^[METHOD] getRootScope [TYPE] StaticScope [PARAMETER] [CLASS] ConcreteTypeSystem   [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId  [TYPE]  CodingConvention codingConvention  convention 
[REPLACE]^ConcreteFunctionType func = tt .getConcreteInstance (  )  ;^836^^^^^835^839^[REPLACE] ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[METHOD] getFunctionScope [TYPE] StaticScope [PARAMETER] Node decl [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteFunctionType func  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node decl  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return  ( func  =  func.getScope (  )  ;^837^838^^^^835^839^[REPLACE] return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[METHOD] getFunctionScope [TYPE] StaticScope [PARAMETER] Node decl [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteFunctionType func  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node decl  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( scope == null )  {^844^^^^^842^851^[REPLACE] if  ( scope != null )  {^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return true;^849^^^^^842^851^[REPLACE] return null;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return maybeAddAutoboxes ( cType, jsType, prop ) ;^847^^^^^842^851^[REPLACE] return maybeAddAutoboxes ( c, node, prop ) ;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType c = tt.getConcreteInstance ( ( TightenTypes.ConcreteScope )  scope, node ) ;^845^846^^^^842^851^[REPLACE] ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType c = tt .getConcreteInstance (  )  ;^845^846^^^^842^851^[REPLACE] ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[METHOD] getType [TYPE] ConcreteType [PARAMETER] ConcreteType> scope Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  StaticScope scope  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType c  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^860^^^^^858^875^[REPLACE] JSType jsType = node.getJSType (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( jsType != null )  {^861^^^^^858^875^[REPLACE] if  ( jsType == null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( jsType.isUnknownType (  )  )  {^863^^^^^858^875^[REPLACE] } else if  ( jsType.isUnknownType (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (  !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^cType =  null.unionWith ( concrete ) ;^868^^^^^858^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^858^875^[REPLACE] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^868^^^^^858^875^[ADD] cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return concrete;^871^^^^^858^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^864^^^^^858^875^[REPLACE] for  ( JSTypeNative nativeType : nativeTypes )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^864^865^866^867^868^858^875^[ADD] for  ( JSTypeNative nativeType : nativeTypes )  { ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ; if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTopScope (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( concrete == false ) {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return type;^871^^^^^858^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return concrete;^862^^^^^858^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( concrete == null ) {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType concrete = tt.getConcreteFunction ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^[REPLACE] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^865^866^^^^858^875^[ADD] ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( concrete == null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^[REPLACE] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^867^868^869^^^858^875^[ADD] if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ; }^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return type;^862^^^^^858^875^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return maybeAddAutoboxes ( cType, alt, prop ) ;^874^^^^^858^875^[REPLACE] return maybeAddAutoboxes ( cType, jsType, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType Node node String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node node  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  JSTypeNative nativeType  [TYPE]  ConcreteType cType  concrete  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^jsType =  autoboxed.restrictByNotNullOrUndefined (  ) ;^879^^^^^877^894^[REPLACE] jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^879^^^^^877^894^[ADD] jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^880^^^^^877^894^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return maybeAddAutoboxes ( cType, jsType, prop ) ;^882^^^^^877^894^[REPLACE] return maybeAddAutoboxes ( cType, alt, prop ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^881^^^^^877^894^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( jsType.autoboxesTo (  )  == null )  {^886^^^^^877^894^[REPLACE] if  ( jsType.autoboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( jsType.unboxesTo (  )  == this  )  {^889^^^^^877^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^890^^^^^877^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^888^^^^^877^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^JSType autoboxed = autoboxed.unboxesTo (  ) ;^887^^^^^877^894^[REPLACE] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  else {^889^^^^^877^894^[REPLACE] } else if  ( jsType.unboxesTo (  )  != null )  {^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType.getPropertyType ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^890^^^^^877^894^[REPLACE] return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^JSType autoboxed = jsType.unboxesTo (  ) ;^887^^^^^877^894^[REPLACE] JSType autoboxed = jsType.autoboxesTo (  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^887^888^^^^877^894^[ADD] JSType autoboxed = jsType.autoboxesTo (  ) ; return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return type;^893^^^^^877^894^[REPLACE] return cType;^[METHOD] maybeAddAutoboxes [TYPE] ConcreteType [PARAMETER] ConcreteType cType JSType jsType String prop [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  JSType alt  autoboxed  jsType  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String prop  [TYPE]  ConcreteType cType  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return false ;^899^900^901^^^896^902^[REPLACE] return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[METHOD] isInvalidatingType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return   type   ;^906^^^^^905^907^[REPLACE] return ImmutableSet.of ( type ) ;^[METHOD] getTypesToSkipForType [TYPE] ImmutableSet [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.getNativeObjectType (  )  ) ;^911^912^913^^^909^914^[REPLACE] return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[METHOD] isTypeToSkip [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;^919^^^^^917^920^[REPLACE] return type;^[METHOD] restrictByNotNullOrUndefined [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( type .isFunction (  )   )  {^924^^^^^923^929^[REPLACE] if  ( type.isUnion (  )  )  {^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return this;^927^^^^^923^929^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return  (  ( ConcreteUnionType )  type )  .getAlternates (  )  ;^925^^^^^923^929^[REPLACE] return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return  (  ( ConcreteUnionType )  type ) .getAlternates (  ) ;^925^^^^^923^929^[REPLACE] return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return true;^927^^^^^923^929^[REPLACE] return null;^[METHOD] getTypeAlternatives [TYPE] Iterable [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( type.isUnion (  )  )  {^933^^^^^931^956^[REPLACE] if  ( type.isInstance (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  else {^936^^^^^931^956^[REPLACE] } else if  ( type.isFunction (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  else {^941^^^^^931^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( type.isUnion (  )  )  {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == null )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return t;^951^^^^^931^956^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^948^^^^^931^956^[REPLACE] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType ret = getTypeWithProperty ( field, type ) ;^949^^^^^931^956^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == true )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^949^^^^^931^956^[ADD] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^945^^^^^931^956^[REPLACE] return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^} else if  ( t.isUnion (  )  )  {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( t == null )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (t == null )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^return ret;^950^951^952^^^931^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (  codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return t;^939^^^^^931^956^[REPLACE] return type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( type.isNone (  )  )  {^941^^^^^931^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^}   return new ConcreteUniqueType ( ++nextUniqueId ) ;^941^942^^^945^931^956^[ADD] else if  ( type.isNone (  )  )  {  return new ConcreteUniqueType ( ++nextUniqueId ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  else {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^}^946^947^948^949^^931^956^[ADD] else if  ( type.isUnion (  )  )  {  for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return cType;^951^^^^^931^956^[REPLACE] return ret;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^ConcreteType concrete = tt.getConcreteInstance (^949^^^^^931^956^[REPLACE] ConcreteType ret = getTypeWithProperty ( field, t ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^}  if  ( type.isFunction (  )  )  {^946^^^^^931^956^[REPLACE] } else if  ( type.isUnion (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^950^951^952^^^931^956^[ADD] if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret == this )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^935^^^^^931^956^[REPLACE] return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^934^^^^^931^956^[REPLACE] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^} else if  ( type.isNone (  )  )  {^936^^^^^931^956^[REPLACE] } else if  ( type.isFunction (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (t == this )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^948^949^950^951^952^931^956^[ADD] for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ; if  ( ret != null )  { return ret; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  (t == false )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( "prototype".equals ( field ) && codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( "prototype".equals ( field ) ) {^937^938^^^^931^956^[REPLACE] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^937^938^939^940^^931^956^[ADD] if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^} else if  ( t.isNone (  )  )  {^941^^^^^931^956^[REPLACE] } else if  ( type.isNone (  )  )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( ret ==t )  {^950^^^^^931^956^[REPLACE] if  ( ret != null )  {^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return instanceType .getConstructorType (  )  ;^935^^^^^931^956^[REPLACE] return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^return instanceType.getInstanceTypeWithProperty ( field ) ;^934^935^^^^931^956^[ADD] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type; return instanceType.getInstanceTypeWithProperty ( field ) ;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return false;^955^^^^^931^956^[REPLACE] return null;^[METHOD] getTypeWithProperty [TYPE] ConcreteType [PARAMETER] String field ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  String field  [TYPE]  ConcreteType ret  t  type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( type.toInstance (  )  )  {^959^^^^^958^966^[REPLACE] if  ( type.isInstance (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( instanceType.getConstructorType (  )  )  {^961^^^^^958^966^[REPLACE] if  ( instanceType.isFunctionPrototype (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^961^962^963^^^958^966^[ADD] if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return instanceType.getConstructorType (  )  .isInstanceType (  )  ;^962^^^^^958^966^[REPLACE] return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return instanceType.isFunctionPrototype (  ) .getInstanceType (  ) ;^962^^^^^958^966^[REPLACE] return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^for  ( JSTypeNative nativeType : nativeTypes )  {^960^^^^^958^966^[REPLACE] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[ADD]^^960^^^^^958^966^[ADD] ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^if  ( instanceType .isInstanceType (  )   )  {^961^^^^^958^966^[REPLACE] if  ( instanceType.isFunctionPrototype (  )  )  {^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
[REPLACE]^return false;^965^^^^^958^966^[REPLACE] return null;^[METHOD] getInstanceFromPrototype [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] ConcreteTypeSystem   [TYPE]  ConcreteInstanceType instanceType  [TYPE]  Set invalidatingTypes  [TYPE]  boolean false  true  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  JSTypeNative[] nativeTypes  [TYPE]  ConcreteType type  [TYPE]  TightenTypes tt  [TYPE]  int nextUniqueId 
