[REPLACE]^private  AbstractCompiler compiler;^66^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^Node firstVarNode;^74^^^^^^^[REPLACE] final Node firstVarNode;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^Node parent;^77^^^^^^^[REPLACE] final Node parent;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^private final List<Collapse> collapses  = null ;^88^^^^^^^[REPLACE] private final List<Collapse> collapses = Lists.newArrayList (  ) ;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^private  Set<Node> nodesToCollapse = Sets.newHashSet (  ) ;^95^^^^^^^[REPLACE] private final Set<Node> nodesToCollapse = Sets.newHashSet (  ) ;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^return   rightValue.getFirstChild (  ) .getType (  )  ;^164^^^^^157^176^[REPLACE] return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  isLValue  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value 
[REPLACE]^return true;  ;^172^^^^^157^176^[REPLACE] return true;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  isLValue  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value 
[REPLACE]^return true;^175^^^^^157^176^[REPLACE] return false;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  isLValue  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value 
[REPLACE]^Node parent = node.getParent (  )  ;^195^^^^^194^296^[REPLACE] Node assign = expr.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^Node parent = node.getParent (  )  ;^196^^^^^194^296^[REPLACE] Node parent = exprParent;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^Node next = next .getParent (  )  ;^197^^^^^194^296^[REPLACE] Node next = expr.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( next.getString (  ) .hasChildren (  )  )  {^212^^^^^194^296^[REPLACE] if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^next = parent.getFirstChild (  )  ;^213^^^^^194^296^[REPLACE] parent = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^214^^^^^194^296^[ADD] next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( next.getQualifiedName (  )  )  {^221^^^^^194^296^[REPLACE] if  ( next.isQualifiedName (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^223^224^^^^194^296^[ADD] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( !isSafeReplacement ( next, leftSide )  )  {^230^^^^^223^238^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;  ;^231^^^^^223^238^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;^237^^^^^223^238^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( !isSafeReplacement ( root, assign )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^231^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;  ;^231^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;^237^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^String rootName = next.getQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^230^231^232^^^223^238^[ADD] if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^231^^^^^223^238^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( !isSafeReplacement ( next, leftSide )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^230^231^232^^^194^296^[ADD] if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( value.getType (  )   !=  next.getType (  )  )  {^247^^^^^194^296^[REPLACE] if  ( value.getType (  )  == next.getType (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^247^248^249^250^251^194^296^[ADD] if  ( value.getType (  )  == next.getType (  )  )  { if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  next.getType (  )  == Token.NUMBER )  && next.removeChild ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^251^^^^^248^252^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;  ;^251^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;^260^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  ( parent.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && next.isEquivalentTo ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^248^249^250^251^252^194^296^[ADD] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;  ;^251^^^^^248^252^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( leftSide.getType (  )  == Token.NAME && leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^194^296^[REPLACE] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^286^^^^^278^287^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  root;^282^^^^^278^287^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^next =  null.getNext (  ) ;^283^^^^^278^287^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  null;^207^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^208^^^^^194^296^[ADD] next = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^213^^^^^194^296^[ADD] parent = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent = next.getFirstChild (  )  ;^214^^^^^194^296^[REPLACE] next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^282^283^^^^194^296^[ADD] parent = next; next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^break;^283^284^^^^194^296^[ADD] next = leftSide.getNext (  ) ; break;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;  ;^217^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^240^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^251^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^262^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^286^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^291^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^String rightValueName = next.getQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^Node leftSide = root.getString (  ) ;^277^^^^^194^296^[REPLACE] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^295^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if   (  next.isQualifiedName  (    )    )   {  ;^325^^^^^323^340^[REPLACE] if  ( isNameAssignedTo ( name, c )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return false;^326^^^^^323^340^[REPLACE] return true;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^n = n.getNext (  )  ;^324^^^^^323^340^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^for  ( Node c = rightValue.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( node.getType (  )   !=  Token.NAME )  {^330^^^^^323^340^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == node )  {^332^^^^^323^340^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if   (  next.isQualifiedName  (    )    )   {  ;^333^^^^^323^340^[REPLACE] if  ( name.equals ( node.getString (  )  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return false;^334^^^^^323^340^[REPLACE] return true;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( name.equals ( value.getString (  )  )  )  {^333^^^^^323^340^[REPLACE] if  ( name.equals ( node.getString (  )  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^Node parent = replacement.getParent (  ) ;^331^^^^^323^340^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  (  parent .removeChild ( leftValue )   == node )  {^332^^^^^323^340^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( name.equals ( rightValue.getString (  )  )  )  {^333^^^^^323^340^[REPLACE] if  ( name.equals ( node.getString (  )  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return true;  ;^334^^^^^323^340^[REPLACE] return true;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[ADD]^^333^334^335^^^323^340^[ADD] if  ( name.equals ( node.getString (  )  )  )  { return true; }^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^Node leftSide = next.getFirstChild (  )  ;^331^^^^^323^340^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return true;^339^^^^^323^340^[REPLACE] return false;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( n.getType (  )   ==  Token.VAR )  return;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^351^352^^354^^349^378^[ADD] if  ( n.getType (  )  != Token.VAR )  return;  if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^return;  ;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if   (  nodesToCollapse.contains  (  n  )    )   return;  ;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^return;  ;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if   (  parent.getType  (    )   == Token.IF  )   return;  ;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^358^359^360^^^349^378^[ADD] if  ( parent.getType (  )  == Token.IF )  return;  Node varNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^return;  ;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^Node varNode = varNode;^360^^^^^349^378^[REPLACE] Node varNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^c = c.getNext (  )  ;^363^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^boolean hasNodesToCollapse = true;^365^^^^^349^378^[REPLACE] boolean hasNodesToCollapse = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^hasNodesToCollapse = false;^368^^^^^349^378^[REPLACE] hasNodesToCollapse = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^c = c.getNext (  )  ;^370^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if  ( true )  {^373^^^^^349^378^[REPLACE] if  ( hasNodesToCollapse )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^nodesToCollapse.add ( value ) ;^374^^^^^349^378^[REPLACE] nodesToCollapse.add ( varNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^collapses.add ( new Collapse ( varNode, value )  ) ;^375^^^^^349^378^[REPLACE] collapses.add ( new Collapse ( varNode, parent )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^Node firstVarNode;^74^^^^^^^[REPLACE] final Node firstVarNode;^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] Collapse   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^Node parent;^77^^^^^^^[REPLACE] final Node parent;^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] Collapse   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^return false ;^164^^^^^157^176^[REPLACE] return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] ExploitAssigns   [TYPE]  boolean false  isLValue  true  [TYPE]  Node value 
[REPLACE]^return false;^172^^^^^157^176^[REPLACE] return true;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] ExploitAssigns   [TYPE]  boolean false  isLValue  true  [TYPE]  Node value 
[REPLACE]^return true;^175^^^^^157^176^[REPLACE] return false;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] ExploitAssigns   [TYPE]  boolean false  isLValue  true  [TYPE]  Node value 
[REPLACE]^Node assign = next.getFirstChild (  ) ;^195^^^^^194^296^[REPLACE] Node assign = expr.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^Node next = expr.getNext (  )  ;^196^^^^^194^296^[REPLACE] Node parent = exprParent;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^Node next = next.getType (  ) ;^197^^^^^194^296^[REPLACE] Node next = expr.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( next .removeChild ( expr )  .hasChildren (  )  )  {^212^^^^^194^296^[REPLACE] if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^213^^^^^194^296^[ADD] parent = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent = next.getFirstChild (  )  ;^214^^^^^194^296^[REPLACE] next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^} else if   (  isCollapsibleValue  (  rightValue, false  )   && collapseAssignEqualTo  (  expr, exprParent, rightValue  )    )   {  ;^221^^^^^194^296^[REPLACE] if  ( next.isQualifiedName (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^String nextName = next.getQualifiedName (  ) ;^221^222^223^224^^194^296^[ADD] if  ( next.isQualifiedName (  )  )  { String nextName = next.getQualifiedName (  ) ; if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^223^224^^^^194^296^[ADD] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^223^238^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;  ;^231^^^^^223^238^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;  ;^237^^^^^223^238^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^231^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;  ;^231^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;^237^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^String parentName = next.getQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.isQualifiedName (  )  )  )  {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^231^^^^^223^238^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;^237^^^^^223^238^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( !isSafeReplacement ( next, leftSide )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.getType (  )   &&  next.getType (  )  )  {^247^^^^^194^296^[REPLACE] if  ( value.getType (  )  == next.getType (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REMOVE]^if  (  (  ( leftSide.getType (  )  )  ==  ( NAME )  )  ||  (  (  ( leftSide.getType (  )  )  ==  ( GETPROP )  )  &&  (  ( leftSide.getFirstChild (  ) .getType (  )  )  ==  ( THIS )  )  )  )  {     parent = next;     next = leftSide.getNext (  ) ;     break; }else {     return false; }^247^^^^^194^296^[REMOVE] ^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && next.isEquivalentTo ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^251^^^^^248^252^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^251^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;^260^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( leftSide.getType (  )  == Token.NAME && leftSide.getType (  )  == Token.GETPROP && leftSide .removeChild ( assign )  .getType (  )  == Token.THIS )  {^278^279^280^^^194^296^[REPLACE] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^278^279^280^^282^194^296^[ADD] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  { parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^286^^^^^278^287^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent =  leftSide;^282^^^^^278^287^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^283^^^^^278^287^[ADD] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent =  leftSide;^207^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^208^209^^^^194^296^[ADD] next = next.getFirstChild (  ) ; break;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^next = parent.getFirstChild (  )  ;^213^^^^^194^296^[REPLACE] parent = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^214^^^^^194^296^[ADD] next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent =  null;^282^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^next =  value.getNext (  ) ;^283^^^^^194^296^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^217^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^240^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^262^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^286^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^291^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^Node leftSide = parent.getFirstChild (  ) ;^277^^^^^194^296^[REPLACE] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^295^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( n.getType (  )   ==  Token.VAR )  return;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if   (  parent.getType  (    )   == Token.IF  )   return;  ;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( varNodeodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if   (  parent.getType  (    )   == Token.IF  )   return;  ;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( parent.getType (  )   !=  Token.IF )  return;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[ADD]^^358^359^360^^^349^378^[ADD] if  ( parent.getType (  )  == Token.IF )  return;  Node varNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if   (  parent.getType  (    )   == Token.IF  )   return;  ;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^Node varNode = varNode;^360^^^^^349^378^[REPLACE] Node varNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^n =  varNode.getNext (  ) ;^363^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^boolean hasNodesToCollapse = true;^365^^^^^349^378^[REPLACE] boolean hasNodesToCollapse = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^hasNodesToCollapse = false;^368^^^^^349^378^[REPLACE] hasNodesToCollapse = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^n =  varNode.getNext (  ) ;^370^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if   (  parent.getType  (    )   == Token.IF  )   return;  ;^373^^^^^349^378^[REPLACE] if  ( hasNodesToCollapse )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^nodesToCollapse.add ( parent ) ;^374^^^^^349^378^[REPLACE] nodesToCollapse.add ( varNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^collapses.add ( new Collapse ( n, parent )  ) ;^375^^^^^349^378^[REPLACE] collapses.add ( new Collapse ( varNode, parent )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
