[REPLACE]^private  Comparator<DiGraphNode<Node, Branch>> priorityComparator = new Comparator<DiGraphNode<Node, Branch>> (  )  {^71^72^^^^71^78^[REPLACE] private final Comparator<DiGraphNode<Node, Branch>> priorityComparator = new Comparator<DiGraphNode<Node, Branch>> (  )  {^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private  short  astPositionCounter;^80^^^^^^^[REPLACE] private int astPositionCounter;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private  boolean shouldTraverseFunctions;^83^^^^^^^[REPLACE] private final boolean shouldTraverseFunctions;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private final Deque<Node> exceptionHandler ;^95^^^^^^^[REPLACE] private final Deque<Node> exceptionHandler = new ArrayDeque<Node> (  ) ;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private final Multimap<Node, Node> finallyMap ;^126^^^^^^^[REPLACE] private final Multimap<Node, Node> finallyMap = HashMultimap.create (  ) ;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private  Map<DiGraphNode<Node, Branch>, Integer> priorities;^944^^^^^^^[REPLACE] private final Map<DiGraphNode<Node, Branch>, Integer> priorities;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^this.compiler =  null;^137^^^^^135^139^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean shouldTraverseFunctions [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node root  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^this.shouldTraverseFunctions =  true;^138^^^^^135^139^[REPLACE] this.shouldTraverseFunctions = shouldTraverseFunctions;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean shouldTraverseFunctions [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node root  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^handleDo ( n ) ;^954^^^^^952^956^[REPLACE] super ( entry ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] Node entry Integer> priorities [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  root  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^this.priorities =  false;^955^^^^^952^956^[REPLACE] this.priorities = priorities;^[METHOD] <init> [TYPE] Map) [PARAMETER] Node entry Integer> priorities [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  root  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^955^^^^^952^956^[ADD] this.priorities = priorities;^[METHOD] <init> [TYPE] Map) [PARAMETER] Node entry Integer> priorities [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  root  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return astPosition.put ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^[REPLACE] return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> a Branch> b [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  root  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;^142^^^^^141^143^[REPLACE] return cfg;^[METHOD] getCfg [TYPE] ControlFlowGraph [PARAMETER] [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  root  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^this.root =  null;^147^^^^^146^186^[REPLACE] this.root = root;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPositionCounter = 2;^148^^^^^146^186^[REPLACE] astPositionCounter = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^148^^^^^146^186^[ADD] astPositionCounter = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities = Maps.newHashMap (  ) ; ;^149^^^^^146^186^[REPLACE] astPosition = Maps.newHashMap (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPosition = Maps.newHashMap (  ) ; ;^150^^^^^146^186^[REPLACE] nodePriorities = Maps.newHashMap (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cfg =  new AstControlFlowGraph ( computeFallThrough ( null ) , nodePriorities ) ;^151^^^^^146^186^[REPLACE] cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  ) ;^152^^^^^146^186^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^152^153^^^^146^186^[ADD] NodeTraversal.traverse ( compiler, root, this ) ; astPosition.put ( null, ++astPositionCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPosition.put ( false, ++astPositionCounter ) ;^153^^^^^146^186^[REPLACE] astPosition.put ( null, ++astPositionCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^priorityCounter = 1;^157^^^^^146^186^[REPLACE] priorityCounter = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^DiGraphNode<Node, Branch> entry = cfg .createNode ( externs )  ;^158^^^^^146^186^[REPLACE] DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^prioritizeFromEntryNode ( null ) ;^159^^^^^146^186^[REPLACE] prioritizeFromEntryNode ( entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( !nodePriorities.containsKey ( candidate )  )  {^161^^^^^146^186^[REPLACE] if  ( shouldTraverseFunctions )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value != null ) {^166^^^^^146^186^[REPLACE] if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( nodePriorities.containsKey ( candidate )  ;^167^168^^^^146^186^[REPLACE] Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^!nodePriorities.get ( this )  || candidate == entry ) ;^168^^^^^146^186^[REPLACE] !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^prioritizeFromEntryNode ( null ) ;^169^^^^^146^186^[REPLACE] prioritizeFromEntryNode ( candidate ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^169^^^^^146^186^[ADD] prioritizeFromEntryNode ( candidate ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^164^^^^^146^186^[REPLACE] for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node value = 1.getValue (  ) ;^165^^^^^146^186^[REPLACE] Node value = candidate.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )   &  candidate == entry ) ;^167^168^^^^146^186^[REPLACE] Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^!nodePriorities .get (  )   || candidate == entry ) ;^168^^^^^146^186^[REPLACE] !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^168^169^^^^146^186^[ADD] !nodePriorities.containsKey ( candidate )  || candidate == entry ) ; prioritizeFromEntryNode ( candidate ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^prioritizeFromEntryNode ( this ) ;^169^^^^^146^186^[REPLACE] prioritizeFromEntryNode ( candidate ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node value = null.getValue (  ) ;^165^^^^^146^186^[REPLACE] Node value = candidate.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( !nodePriorities .get (  )   )  {^179^^^^^146^186^[REPLACE] if  ( !nodePriorities.containsKey ( candidate )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities .put ( astPositionCounter )  ;^180^^^^^146^186^[REPLACE] nodePriorities.put ( candidate, ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^178^^^^^146^186^[REPLACE] for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^178^179^180^181^^146^186^[ADD] for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  { if  ( !nodePriorities.containsKey ( candidate )  )  { nodePriorities.put ( candidate, ++priorityCounter ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities.put ( cfg.getEntry (  ) , ++priorityCounter ) ;^185^^^^^146^186^[REPLACE] nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^185^^^^^146^186^[ADD] nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities.put ( cfg .getEntry (  )  , ++priorityCounter ) ;^185^^^^^146^186^[REPLACE] nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^PriorityQueue<DiGraphNode<Node, Branch>> worklist = new PriorityQueue<DiGraphNode<Node, Branch>> ( 7, priorityComparator ) ;^193^194^^^^192^211^[REPLACE] PriorityQueue<DiGraphNode<Node, Branch>> worklist = new PriorityQueue<DiGraphNode<Node, Branch>> ( 10, priorityComparator ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^handleWith ( n ) ;^195^^^^^192^211^[REPLACE] worklist.add ( entry ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^while  ( !worklist.add (  )  )  {^197^^^^^192^211^[REPLACE] while  ( !worklist.isEmpty (  )  )  {^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^197^198^^^^192^211^[ADD] while  ( !worklist.isEmpty (  )  )  { DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( nodePriorities.get ( this )  )  {^199^^^^^192^211^[REPLACE] if  ( nodePriorities.containsKey ( current )  )  {^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^DiGraphNode<Node, Branch> current = null.remove (  ) ;^198^^^^^192^211^[REPLACE] DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^List<DiGraphNode<Node, Branch>> successors = cfg.createNode ( this ) ;^205^206^^^^192^211^[REPLACE] List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^207^^^^^192^211^[REPLACE] for  ( DiGraphNode<Node, Branch> candidate : successors )  {^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( nodePriorities.get ( current )  )  {^199^^^^^192^211^[REPLACE] if  ( nodePriorities.containsKey ( current )  )  {^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^199^200^201^^^192^211^[ADD] if  ( nodePriorities.containsKey ( current )  )  { continue; }^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^List<DiGraphNode<Node, Branch>> successors = cfg .getDirectedGraphNodes (  )  ;^205^206^^^^192^211^[REPLACE] List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPosition .put ( astPositionCounter )  ;^216^^^^^215^288^[REPLACE] astPosition.put ( n, astPositionCounter++ ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( true && n == cfg.getEntry (  ) .equals (  )  )  {^220^^^^^215^288^[REPLACE] if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^222^^^^^215^288^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^224^^^^^215^288^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^227^^^^^215^288^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent == null )  {^246^^^^^215^288^[REPLACE] if  ( parent != null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^246^247^248^^250^215^288^[ADD] if  ( parent != null )  { switch  ( parent.getType (  )  )  { case Token.FOR: return n == parent.getLastChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (parent  !=  parent.getFirstChild (  ) .getNext (  )  )  {^281^^^^^215^288^[REPLACE] if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;exceptionHandler.pop (  ) ;^281^282^283^284^^215^288^[ADD] if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ; exceptionHandler.pop (  ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions .checkState (  )  ;^282^^^^^215^288^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( exceptionHandler.push (  )  == parent ) ;^282^^^^^215^288^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^282^^^^^215^288^[ADD] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^exceptionHandler.peek (  ) ;^283^^^^^215^288^[REPLACE] exceptionHandler.pop (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^returnparent  &&  parent .getFirstChild (  )  ;^250^^^^^215^288^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n != parent .getLastChild (  )  ;^256^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n != parent.getFirstChild (  ) .equals (  ) ;^258^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return externs  ;^264^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n == parent.getFirstChild (  ) .equals (  ) .getNext (  ) ;^266^^^^^215^288^[REPLACE] return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^273^^^^^215^288^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (parent  &&  parent.getFirstChild (  ) .getNext (  )  )  {^281^^^^^215^288^[REPLACE] if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( exceptionHandler.peek (  )   &&  parent ) ;^282^^^^^215^288^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n  &&  parent.getLastChild (  ) ;^250^^^^^215^288^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^returnvalue  ;^256^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n != value.getFirstChild (  ) .equals (  ) ;^258^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^returparent n  ;^264^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^returnparent  &&  parent.getLastChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^215^288^[REPLACE] return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^287^^^^^215^288^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^295^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^298^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^301^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^304^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^307^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^310^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^313^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^317^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^320^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^323^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^326^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^329^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^332^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^335^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^338^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^341^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^344^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^346^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^349^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node thenBlock = node.getLastChild (  ) .getNext (  ) ;^354^^^^^353^366^[REPLACE] Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^354^^^^^353^366^[ADD] Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node elseBlock = value.getParent (  ) ;^355^^^^^353^366^[REPLACE] Node elseBlock = thenBlock.getNext (  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( root, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^[REPLACE] createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( value )  ) ;^356^^^^^353^366^[REPLACE] createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value != null )  {^358^^^^^353^366^[REPLACE] if  ( elseBlock == null )  {^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^362^^^^^353^366^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( parent, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFollowNode ( parent )  ) ;^360^^^^^353^366^[REPLACE] computeFollowNode ( node )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( parent, NodeUtil .getCatchBlock ( n )   ) ;^364^365^^^^353^366^[REPLACE] connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node, NodeUtil.getConditionExpression ( value )  ) ;^365^^^^^353^366^[REPLACE] node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^365^^^^^353^366^[ADD] node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleIf [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^[REPLACE] createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( root.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^[REPLACE] computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( value.getFirstChild (  ) .equals (  )  )  ) ;^371^^^^^368^378^[REPLACE] computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( value.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^[REPLACE] computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^371^^^^^368^378^[ADD] computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFollowNode ( root )  ) ;^375^^^^^368^378^[REPLACE] computeFollowNode ( node )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( node, NodeUtil .getCatchBlock ( thenBlock )   ) ;^376^377^^^^368^378^[REPLACE] connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^376^377^^^^368^378^[ADD] connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node, NodeUtil.getConditionExpression ( value )  ) ;^377^^^^^368^378^[REPLACE] node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleWhile [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( root, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^[REPLACE] createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^[REPLACE] createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^383^^^^^380^389^[ADD] createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( parent, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^[REPLACE] createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFollowNode ( value )  ) ;^386^^^^^380^389^[REPLACE] computeFollowNode ( node )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^386^^^^^380^389^[REMOVE] ^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^[REPLACE] connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node, NodeUtil.getConditionExpression ( parent )  ) ;^388^^^^^380^389^[REPLACE] node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^388^^^^^380^389^[ADD] node, NodeUtil.getConditionExpression ( node )  ) ;^[METHOD] handleDo [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node elseBlock  entry  externs  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( forNode.getChildCount (  )   ||  3 )  {^392^^^^^391^426^[REPLACE] if  ( forNode.getChildCount (  )  == 4 )  {^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node item = value.getLastChild (  ) ;^416^^^^^392^425^[REPLACE] Node item = forNode.getFirstChild (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node collection = thenBlock.getParent (  ) ;^417^^^^^392^425^[REPLACE] Node collection = item.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = value.getNext (  ) ;^418^^^^^392^425^[REPLACE] Node body = collection.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^418^^^^^392^425^[ADD] Node body = collection.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node init = root.getLastChild (  ) ;^394^^^^^391^426^[REPLACE] Node init = forNode.getFirstChild (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node cond = thenBlock .getType (  )  ;^395^^^^^391^426^[REPLACE] Node cond = init.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^395^^^^^391^426^[ADD] Node cond = init.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = thenBlock.getParent (  ) ;^396^^^^^391^426^[REPLACE] Node iter = cond.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = thenBlock.getParent (  ) ;^397^^^^^391^426^[REPLACE] Node body = iter.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node init = thenBlock.getFirstChild (  ) ;^394^^^^^391^426^[REPLACE] Node init = forNode.getFirstChild (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node cond = thenBlock.getNext (  ) ;^395^^^^^391^426^[REPLACE] Node cond = init.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = thenBlock.getNext (  ) ;^396^^^^^391^426^[REPLACE] Node iter = cond.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = thenBlock.getNext (  ) ;^397^^^^^391^426^[REPLACE] Node body = iter.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node item = value.getFirstChild (  ) ;^416^^^^^391^426^[REPLACE] Node item = forNode.getFirstChild (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node collection = thenBlock.getParent (  ) ;^417^^^^^391^426^[REPLACE] Node collection = item.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = iter.getNext (  ) ;^418^^^^^391^426^[REPLACE] Node body = collection.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = getNextSiblingOfType ( value.getLastChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^[REPLACE] Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( next == this  )  {^433^^^^^428^443^[REPLACE] if  ( next != null )  {^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent.getFirstChild (  ) .getNext (  )  == null )  {^436^^^^^428^443^[REPLACE] if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^436^437^438^439^440^428^443^[ADD] if  ( node.getFirstChild (  ) .getNext (  )  != null )  { createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ; } else { createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( parent, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( next, Branch.UNCOND, node.getFirstChild (  ) .equals (  )  ) ;^437^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^437^^^^^428^443^[ADD] createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, node.getLastChild (  ) .getNext (  )  ) ;^437^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, thenBlock ) ;^434^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, next ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^434^^^^^428^443^[ADD] createEdge ( node, Branch.UNCOND, next ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( node.getFirstChild (  ) .getNext (  )  == null )  {^436^^^^^428^443^[REPLACE] if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^436^437^438^439^440^428^443^[ADD] if  ( node.getFirstChild (  ) .getNext (  )  != null )  { createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ; } else { createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^439^^^^^428^443^[ADD] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, node.getFirstChild (  )  .getType (  )   ) ;^437^^^^^428^443^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node.getFirstChild (  )  ) ;^442^^^^^428^443^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( node, node.getLastChild (  )  ) ;^442^^^^^428^443^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleSwitch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^447^448^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node.getFirstChild (  ) .equals (  )  ) ;^448^^^^^445^465^[REPLACE] node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node.getLastChild (  ) .getNext (  )  ) ;^448^^^^^445^465^[REPLACE] node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = getNextSiblingOfType ( parent.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^[REPLACE] Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( next == null )  {^451^^^^^445^465^[REPLACE] if  ( next != null )  {^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( deflt == null )  {^458^^^^^445^465^[REPLACE] if  ( deflt != null )  {^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( parent, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^461^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, deflt ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = value.getNext (  ) ;^455^^^^^445^465^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^455^^^^^445^465^[ADD] Node parent = node.getParent (  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node deflt = getNextSiblingOfType ( iter.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^[REPLACE] Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( next.getType (  )   ||  Token.CASE ) ;^452^^^^^445^465^[REPLACE] Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( next .getParent (  )   == Token.CASE ) ;^452^^^^^445^465^[REPLACE] Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.ON_FALSE, next ) ;^453^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, next ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^453^^^^^445^465^[ADD] createEdge ( node, Branch.ON_FALSE, next ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^458^459^460^461^462^445^465^[ADD] if  ( deflt != null )  { createEdge ( node, Branch.ON_FALSE, deflt ) ; } else { createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^461^^^^^445^465^[REMOVE] ^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.ON_FALSE, next ) ;^459^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, deflt ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^459^^^^^445^465^[ADD] createEdge ( node, Branch.ON_FALSE, deflt ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = value.getParent (  ) ;^455^^^^^445^465^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node deflt = getNextSiblingOfType ( value.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^[REPLACE] Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node.getLastChild (  )  ) ;^464^^^^^445^465^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( thenBlock, node.getLastChild (  )  ) ;^464^^^^^445^465^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^464^^^^^445^465^[ADD] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, node .getLastChild (  )   ) ;^469^^^^^467^470^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[METHOD] handleDefault [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( root, Branch.UNCOND, node.getLastChild (  )  ) ;^469^^^^^467^470^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[METHOD] handleDefault [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^[REPLACE] createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[METHOD] handleWith [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( root, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^[REPLACE] createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[METHOD] handleWith [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node.getFirstChild (  )  ) ;^475^^^^^472^476^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleWith [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^475^^^^^472^476^[ADD] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleWith [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^475^^^^^472^476^[REMOVE] ^[METHOD] handleWith [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = value.getParent (  ) ;^479^^^^^478^520^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( node.getType (  )  != Token.BLOCK ) {^481^482^483^484^^478^520^[REPLACE] if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^485^^^^^481^486^[REPLACE] return;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^485^^^^^478^520^[REPLACE] return;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node child = value .getLastChild (  )  ;^489^^^^^478^520^[REPLACE] Node child = node.getFirstChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^while  ( child != null ;^493^^^^^478^520^[REPLACE] while  ( child != null && child.getType (  )  == Token.FUNCTION )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^child =  thenBlock.getNext (  ) ;^494^^^^^478^520^[REPLACE] child = child.getNext (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (thenBlock == false )  {^497^^^^^478^520^[REPLACE] if  ( child != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^497^498^499^500^501^478^520^[ADD] if  ( child != null )  { createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; } else { createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( root, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^478^520^[REPLACE] createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, computeFallThrough ( thenBlock )  ) ;^498^^^^^478^520^[REPLACE] createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent == null )  {^504^^^^^478^520^[REPLACE] if  ( parent != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^504^505^506^507^508^478^520^[ADD] if  ( parent != null )  { switch  ( parent.getType (  )  )  { case Token.DEFAULT: case Token.CASE: case Token.TRY:^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( node.getType (  )  == Token.BLOCK ) {^511^^^^^478^520^[REPLACE] if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( next == null )  {^513^^^^^478^520^[REPLACE] if  ( next != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^478^520^[REPLACE] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( thenBlock )  ) ;^514^^^^^478^520^[REPLACE] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = value.getFirstChild (  ) ;^512^^^^^478^520^[REPLACE] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^512^^^^^478^520^[ADD] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( next == false )  {^513^^^^^478^520^[REPLACE] if  ( next != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( root )  ) ;^514^^^^^478^520^[REPLACE] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^514^^^^^478^520^[ADD] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = root .getFirstChild (  )  ;^512^^^^^478^520^[REPLACE] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( node.getType (  )  == Token.BLOCK || node.isSyntheticBlock (  )  )  {^511^^^^^478^520^[REPLACE] if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = value.getLastChild (  ) ;^512^^^^^478^520^[REPLACE] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( thenBlock == null )  {^513^^^^^478^520^[REPLACE] if  ( next != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^513^514^515^^^478^520^[ADD] if  ( next != null )  { createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( node.getChildCount (  )   ==  1 ) ;^524^^^^^522^529^[REPLACE] Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( parent.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^[REPLACE] Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.UNCOND, computeFallThrough ( node .getLastChild (  )  .getNext (  ) .getNext (  )  )  ) ;^525^526^^^^522^529^[REPLACE] createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( value.getFirstChild (  )  .getType (  )^526^^^^^522^529^[REPLACE] computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( value.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^526^^^^^522^529^[REPLACE] computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( exceptionHandler.peek (  )   ||  node ) ;^527^^^^^522^529^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( exceptionHandler.push (  )  == node ) ;^527^^^^^522^529^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^node.getFirstChild (  ) .getNext (  )  ) ;^527^^^^^522^529^[REMOVE] ^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^exceptionHandler .push ( thenBlock )  ;^528^^^^^522^529^[REPLACE] exceptionHandler.pop (  ) ;^[METHOD] handleFunction [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleExpr [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( parent, node ) ;^533^^^^^531^534^[REPLACE] connectToPossibleExceptionHandler ( node, node ) ;^[METHOD] handleExpr [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node ) ;^537^^^^^536^538^[REPLACE] connectToPossibleExceptionHandler ( node, node ) ;^[METHOD] handleThrow [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^537^^^^^536^538^[ADD] connectToPossibleExceptionHandler ( node, node ) ;^[METHOD] handleThrow [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, node .getLastChild (  )   ) ;^541^^^^^540^542^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[METHOD] handleTry [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^541^^^^^540^542^[REPLACE] createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[METHOD] handleTry [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^541^^^^^540^542^[ADD] createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[METHOD] handleTry [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^[REPLACE] createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[METHOD] handleCatch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, node .getFirstChild (  )   ) ;^545^^^^^544^546^[REPLACE] createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[METHOD] handleCatch [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^String label = false;^549^^^^^548^585^[REPLACE] String label = null;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value.hasChildren (  )  )  {^551^^^^^548^585^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^551^552^553^^^548^585^[ADD] if  ( node.hasChildren (  )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^label =  value.getFirstChild (  ) .getString (  ) ;^552^^^^^548^585^[REPLACE] label = node.getFirstChild (  ) .getString (  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^552^^^^^548^585^[ADD] label = node.getFirstChild (  ) .getString (  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^label =  thenBlock.getFirstChild (  ) .getString (  ) ;^552^^^^^548^585^[REPLACE] label = node.getFirstChild (  ) .getString (  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cur;^554^^^^^548^585^[REPLACE] Node cur;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cur;^555^^^^^548^585^[REPLACE] Node lastJump;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = root.getParent (  ) ;^556^^^^^548^585^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( cur.getType (  )  == Token.TRY ) {^569^^^^^548^585^[REPLACE] if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  !=  node )  {^570^^^^^548^585^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^574^^^^^570^575^[REMOVE] ^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value .getFirstChild (  )   )  ) ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( value.getLastChild (  )  )  ) ;^571^572^^^^548^585^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^571^572^^^^548^585^[ADD] createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur.getFirstChild (  )  )  ) ;^572^^^^^548^585^[REPLACE] cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump =  value;^576^^^^^548^585^[REPLACE] lastJump = cur;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ||  node )  {^570^^^^^548^585^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( cur.getFirstChild (  )  )  ) ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getFirstChild (  )  )  ) ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^574^^^^^570^575^[ADD] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( cur = node, lastJump = node; !isBreakTarget ( cur, parent, label ) ;^566^^^^^548^585^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^566^567^568^569^^548^585^[ADD] for  ( cur = node, lastJump = node; !isBreakTarget ( cur, parent, label ) ; cur = parent, parent = parent.getParent (  )  )  { if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( cur.getType (  )  == Token.TRY ) {^569^^^^^566^579^[REPLACE] if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  !=  value )  {^570^^^^^566^579^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^566^579^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getFirstChild (  )  )  ) ;^574^^^^^566^579^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^574^^^^^566^579^[REMOVE] ^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value .getFirstChild (  )   )  ) ;^574^^^^^566^579^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( value.getLastChild (  )  )  ) ;^571^572^^^^566^579^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur.getFirstChild (  )  )  ) ;^572^^^^^566^579^[REPLACE] cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump =  value;^576^^^^^566^579^[REPLACE] lastJump = cur;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value  &&  value )  {^570^^^^^566^579^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^574^^^^^566^579^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^574^^^^^566^579^[ADD] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( cur.getFirstChild (  )  )  ) ;^574^^^^^566^579^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( value.getFirstChild (  )  )  ) ;^571^572^^^^566^579^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( cur =  value, lastJump^566^^^^^548^585^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( cur =  null, lastJump^566^^^^^548^585^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur =  null, null^568^^^^^548^585^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur =  iter, iter^568^^^^^548^585^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^568^569^570^^^548^585^[ADD] cur = parent, parent = parent.getParent (  )  )  { if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  { if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (root  ||  node )  {^580^^^^^548^585^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFollowNode ( value )  ) ;^583^^^^^580^584^[REPLACE] finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^583^^^^^580^584^[ADD] finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( value )  ) ;^581^^^^^548^585^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^String label = false;^588^^^^^587^619^[REPLACE] String label = null;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^588^^^^^587^619^[ADD] String label = null;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value.hasChildren (  )  )  {^589^^^^^587^619^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^label =  root.getFirstChild (  ) .getString (  ) ;^590^^^^^587^619^[REPLACE] label = node.getFirstChild (  ) .getString (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cur;^592^^^^^587^619^[REPLACE] Node cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cur;^593^^^^^587^619^[REPLACE] Node lastJump;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = value .getNext (  )  ;^595^^^^^587^619^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( cur.getType (  )  == Token.TRY ) {^599^^^^^587^619^[REPLACE] if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^599^600^601^602^603^587^619^[ADD] if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  { if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  ||  node )  {^600^^^^^587^619^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^600^601^602^603^604^587^619^[ADD] if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^603^^^^^600^604^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getFirstChild (  )  )  ) ;^603^^^^^600^604^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, cur.getFirstChild (  )  ) ;^601^^^^^587^619^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump =  value;^605^^^^^587^619^[REPLACE] lastJump = cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  !=  value )  {^600^^^^^587^619^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^587^619^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, value.getLastChild (  )  ) ;^601^^^^^587^619^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( cur = value, lastJump = node;^596^^^^^587^619^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^596^597^598^599^^587^619^[ADD] for  ( cur = node, lastJump = node; !isContinueTarget ( cur, parent, label ) ; cur = parent, parent = parent.getParent (  )  )  { if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( cur.getType (  )  == Token.TRY || NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^[REPLACE] if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value  !=  value )  {^600^^^^^596^608^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^600^601^602^603^604^596^608^[ADD] if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^596^608^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^603^^^^^596^608^[REMOVE] ^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value .getFirstChild (  )   )  ) ;^603^^^^^596^608^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^603^^^^^596^608^[ADD] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getFirstChild (  )  )  ) ;^603^^^^^596^608^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, value.getLastChild (  )  ) ;^601^^^^^596^608^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, cur.getFirstChild (  )  ) ;^601^^^^^596^608^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump =  null;^605^^^^^596^608^[REPLACE] lastJump = cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  ||  node )  {^600^^^^^596^608^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^603^^^^^596^608^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( cur.getFirstChild (  )  )  ) ;^603^^^^^596^608^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump =  value;^605^^^^^596^608^[REPLACE] lastJump = cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( cur =  value, lastJump^596^^^^^587^619^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( cur =  null, lastJump^596^^^^^587^619^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur =  node, node^598^^^^^587^619^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur =  root, root^598^^^^^587^619^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^605^^^^^587^619^[ADD] lastJump = cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = value;^609^^^^^587^619^[REPLACE] Node iter = cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( cur.getChildCount (  )   &&  4 )  {^610^^^^^587^619^[REPLACE] if  ( cur.getChildCount (  )  == 4 )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^iter =  null.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^587^619^[REPLACE] iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^611^^^^^587^619^[ADD] iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^iter =  value.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^587^619^[REPLACE] iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  ||  node )  {^614^^^^^587^619^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, thenBlock ) ;^617^^^^^614^618^[REPLACE] finallyMap.put ( lastJump, iter ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^617^^^^^614^618^[REMOVE] ^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, thenBlock ) ;^615^^^^^587^619^[REPLACE] createEdge ( node, Branch.UNCOND, iter ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^615^^^^^587^619^[REMOVE] ^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node lastJump = false;^622^^^^^621^648^[REPLACE] Node lastJump = null;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil .isForIn ( entry )   )  {^625^^^^^621^648^[REPLACE] if  ( NodeUtil.isFunction ( curHandler )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isFunction ( handler )  )  {^628^^^^^621^648^[REPLACE] if  ( NodeUtil.hasFinally ( curHandler )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^628^^^^^621^648^[REMOVE] ^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump != null )  {^629^^^^^621^648^[REPLACE] if  ( lastJump == null )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^629^630^631^632^633^621^648^[ADD] if  ( lastJump == null )  { createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^632^633^^^^629^634^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( value.getFirstChild (  )  )  ) ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( node.getLastChild (  )  )  ) ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, value.getLastChild (  )  ) ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^630^^^^^621^648^[ADD] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = handler; ;^635^^^^^621^648^[REPLACE] lastJump = curHandler;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump !=value )  {^629^^^^^621^648^[REPLACE] if  ( lastJump == null )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( iter.getLastChild (  )  )  ) ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( next.getLastChild (  )  )  ) ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, curHandler.getFirstChild (  )  ) ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^623^^^^^621^648^[REPLACE] for  ( Iterator<Node> iter = exceptionHandler.iterator (  ) ; iter.hasNext (  ) ; )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( curHandler )  )  {^625^^^^^621^648^[REPLACE] if  ( NodeUtil.isFunction ( curHandler )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil .hasCatchHandler ( child )   )  {^628^^^^^621^648^[REPLACE] if  ( NodeUtil.hasFinally ( curHandler )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( parent.getLastChild (  )  )  ) ;^632^633^^^^629^634^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^633^^^^^629^634^[ADD] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( n.getLastChild (  )  )  ) ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^return computeFallThrough ( parent.getLastChild (  )  ) ;^630^^^^^621^648^[REMOVE] ^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, iter.getLastChild (  )  ) ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^635^^^^^621^648^[ADD] lastJump = curHandler;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump != this  )  {^629^^^^^621^648^[REPLACE] if  ( lastJump == null )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( value.getLastChild (  )  )  ) ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node curHandler = iter.hasNext (  ) ;^624^^^^^621^648^[REPLACE] Node curHandler = iter.next (  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Iterator<Node> iter = exceptionHandler.isEmpty (  ) ; iter.hasNext (  ) ; )  {^623^^^^^621^648^[REPLACE] for  ( Iterator<Node> iter = exceptionHandler.iterator (  ) ; iter.hasNext (  ) ; )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value.hasChildren (  )  )  {^639^^^^^621^648^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node.getFirstChild (  )  ) ;^640^^^^^621^648^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node .getLastChild (  )   ) ;^640^^^^^621^648^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump != null )  {^643^^^^^621^648^[REPLACE] if  ( lastJump == null )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap .put ( astPositionCounter )  ;^646^^^^^643^647^[REPLACE] finallyMap.put ( lastJump, null ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^646^^^^^643^647^[ADD] finallyMap.put ( lastJump, null ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, false ) ;^644^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, null ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleStmt [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^652^^^^^650^654^[ADD] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleStmt [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^652^^^^^650^654^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleStmt [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node ) ;^653^^^^^650^654^[REPLACE] connectToPossibleExceptionHandler ( node, node ) ;^[METHOD] handleStmt [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, node ) ;^657^^^^^656^658^[REPLACE] return computeFollowNode ( node, node ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = nextSibling.getParent (  ) ;^689^^^^^670^763^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent != null ) {^690^^^^^670^763^[REPLACE] if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return this;^691^^^^^670^763^[REPLACE] return null;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^691^^^^^670^763^[REPLACE] return null;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent.getNext (  )  == true )  {^703^^^^^670^763^[REPLACE] if  ( parent.getNext (  )  != null )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^703^704^705^706^707^670^763^[ADD] if  ( parent.getNext (  )  != null )  { if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  { return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ; } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( node, node ) ;^712^^^^^703^713^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent.getNext (  ) .equals (  )   &&  Token.CASE )  {^704^^^^^670^763^[REPLACE] if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;return parent.getNext (  ) .getFirstChild (  ) ;^704^705^706^707^^670^763^[ADD] if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  { return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ; } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if  ( parent.getNext (  ) .getType (  )   ||  Token.DEFAULT )  {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^}   Preconditions.checkState ( false, "Not reachable" ) ;^706^707^708^709^710^670^763^[ADD] else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ; } else { Preconditions.checkState ( false, "Not reachable" ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( true, "Not reachable" ) ;^709^^^^^706^710^[REPLACE] Preconditions.checkState ( false, "Not reachable" ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return node .getType (  )  .getFirstChild (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getNext (  ) .equals (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getNext (  ) .equals (  ) .getNext (  ) ;^705^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  else {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^}   return parent.getNext (  ) .getFirstChild (  ) ;Preconditions.checkState ( false, "Not reachable" ) ;^706^707^708^709^710^670^763^[ADD] else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ; } else { Preconditions.checkState ( false, "Not reachable" ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getParent (  ) .getFirstChild (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return value.getParent (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent.getNext (  ) .getType (  )   !=  Token.CASE )  {^704^^^^^670^763^[REPLACE] if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  ( parent.getNext (  ) .getType (  )   ||  Token.DEFAULT )  {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return nextSibling.getNext (  ) .equals (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getNext (  )  .getLastChild (  )  ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getParent (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if  ( parent.getNext (  ) .getType (  )   !=  Token.DEFAULT )  {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( value )  )  {^716^^^^^670^763^[REPLACE] if  ( NodeUtil.isForIn ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return value.getFirstChild (  ) .equals (  ) .getNext (  ) ;^719^^^^^716^720^[REPLACE] return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return nextSibling;^717^^^^^670^763^[REPLACE] return parent;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent.getFirstChild (  )   &&  node )  {^726^^^^^670^763^[REPLACE] if  ( parent.getFirstChild (  )  == node )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^726^727^728^729^730^670^763^[ADD] if  ( parent.getFirstChild (  )  == node )  { if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( parent.getLastChild (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if  ( NodeUtil.getCatchBlock ( parent )   !=  node ) {^733^^^^^670^763^[REPLACE] } else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^}   return computeFallThrough ( node.getNext (  )  ) ;return computeFollowNode ( fromNode, parent ) ;^733^734^735^736^737^670^763^[ADD] else if  ( NodeUtil.getCatchBlock ( parent )  == node ) { if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( node.getNext (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  ( parent.getLastChild (  )   !=  node ) {^740^^^^^670^763^[REPLACE] } else if  ( parent.getLastChild (  )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, parent ) ;^744^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = collection.getNext (  ) ;^741^^^^^670^763^[REPLACE] for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( node, node ) ;^744^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( parent )  )  {^734^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^734^735^736^737^738^670^763^[ADD] if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( node.getNext (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( node, node ) ;^737^^^^^734^738^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( thenBlock .getType (  )   ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( root.getNext (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, value ) ;^737^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.hasFinally ( item )  )  {^734^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, parent ) ;^737^^^^^734^738^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( value.getNext (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  ( parent.putLastChild (  )   &&  node ) {^740^^^^^670^763^[REPLACE] } else if  ( parent.getLastChild (  )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( thenBlock, parent ) ;^744^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, lastJump ) ;^737^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, node ) ;^744^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( parent )  )  {^727^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, node ) ;^730^^^^^727^731^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( n.getFirstChild (  )  ) ;^728^^^^^670^763^[REPLACE] return computeFallThrough ( parent.getLastChild (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( parent .getFirstChild (  )   ) ;^728^^^^^670^763^[REPLACE] return computeFallThrough ( parent.getLastChild (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, parent ) ;^730^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^return computeFallThrough ( parent.getLastChild (  )  ) ;return computeFollowNode ( fromNode, parent ) ;^727^728^729^730^731^670^763^[ADD] if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( parent.getLastChild (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, next ) ;^730^^^^^727^731^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  ( NodeUtil.hasCatchHandler ( parent )   ||  node ) {^733^^^^^670^763^[REPLACE] } else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  ( parent.getLastChild (  )   ||  node ) {^740^^^^^670^763^[REPLACE] } else if  ( parent.getLastChild (  )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^}^740^741^742^743^^670^763^[ADD] else if  ( parent.getLastChild (  )  == node ) { for  ( Node finallyNode : finallyMap.get ( parent )  )  { createEdge ( fromNode, Branch.UNCOND, finallyNode ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.hasFinally ( lastJump )  )  {^734^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^return computeFallThrough ( node.getNext (  )  ) ;return computeFollowNode ( fromNode, parent ) ;^734^735^736^737^738^670^763^[ADD] if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( node.getNext (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( node .getType (  )   ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( node.getParent (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  else {^740^^^^^670^763^[REPLACE] } else if  ( parent.getLastChild (  )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, nextSibling ) ;^698^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.equals (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( node, node ) ;^712^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return node;^717^^^^^670^763^[REPLACE] return parent;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^670^763^[REPLACE] return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n;^723^^^^^670^763^[REPLACE] return parent;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( nextSibling.getNext (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, root ) ;^737^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node nextSibling = nextSibling.getNext (  ) ;^750^^^^^670^763^[REPLACE] Node nextSibling = node.getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^while  ( nextSibling != false ;^753^^^^^670^763^[REPLACE] while  ( nextSibling != null && nextSibling.getType (  )  == Token.FUNCTION )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nextSibling =  lastJump.getNext (  ) ;^754^^^^^670^763^[REPLACE] nextSibling = nextSibling.getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nextSibling =  value.getNext (  ) ;^754^^^^^670^763^[REPLACE] nextSibling = nextSibling.getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (next == true )  {^757^^^^^670^763^[REPLACE] if  ( nextSibling != null )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, iter ) ;^761^^^^^757^762^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( parent ) ;^758^^^^^670^763^[REPLACE] return computeFallThrough ( nextSibling ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( value ) ;^758^^^^^670^763^[REPLACE] return computeFallThrough ( nextSibling ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( root, parent ) ;^761^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isFunction ( n )  )  {^775^^^^^770^784^[REPLACE] if  ( NodeUtil.isForIn ( n )  )  {^[METHOD] computeFallThrough [TYPE] Node [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^775^776^777^^^770^784^[ADD] if  ( NodeUtil.isForIn ( n )  )  { return n; }^[METHOD] computeFallThrough [TYPE] Node [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;^776^^^^^770^784^[REPLACE] return n;^[METHOD] computeFallThrough [TYPE] Node [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( n .getLastChild (  )   ) ;^773^^^^^770^784^[REPLACE] return computeFallThrough ( n.getFirstChild (  )  ) ;^[METHOD] computeFallThrough [TYPE] Node [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( parent.getLastChild (  )  ) ;^778^^^^^770^784^[REPLACE] return computeFallThrough ( n.getFirstChild (  )  ) ;^[METHOD] computeFallThrough [TYPE] Node [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( thenBlock.getLastChild (  )  ) ;^780^^^^^770^784^[REPLACE] return computeFallThrough ( n.getLastChild (  )  ) ;^[METHOD] computeFallThrough [TYPE] Node [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return thenBlock;^782^^^^^770^784^[REPLACE] return n;^[METHOD] computeFallThrough [TYPE] Node [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cfg.createNode ( thenBlock ) ;^794^^^^^792^797^[REPLACE] cfg.createNode ( fromNode ) ;^[METHOD] createEdge [TYPE] void [PARAMETER] Node fromNode Branch branch Node toNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  Branch branch  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cfg .getEntry (  )  ;^795^^^^^792^797^[REPLACE] cfg.createNode ( toNode ) ;^[METHOD] createEdge [TYPE] void [PARAMETER] Node fromNode Branch branch Node toNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  Branch branch  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^795^^^^^792^797^[ADD] cfg.createNode ( toNode ) ;^[METHOD] createEdge [TYPE] void [PARAMETER] Node fromNode Branch branch Node toNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  Branch branch  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cfg.connectIfNotFound ( value, branch, toNode ) ;^796^^^^^792^797^[REPLACE] cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[METHOD] createEdge [TYPE] void [PARAMETER] Node fromNode Branch branch Node toNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  Branch branch  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (  exceptionHandler.isEmpty (  )  )  {^805^^^^^804^831^[REPLACE] if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( item )  )  {^808^^^^^804^831^[REPLACE] if  ( NodeUtil.isFunction ( handler )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^809^^^^^804^831^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.hasCatchHandler ( catchBlock )  )  {^814^^^^^804^831^[REPLACE] if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^814^815^816^817^818^804^831^[ADD] if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  { if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ||  cfgNode )  {^821^^^^^814^827^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, catchBlock ) ;^825^^^^^814^827^[REPLACE] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^825^^^^^814^827^[ADD] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^823^^^^^814^827^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  &&  value )  {^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, parent.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^818^^^^^815^819^[ADD] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, value.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, value.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, lastJump.getFirstChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ||  value )  {^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, handler.getFirstChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, item.getFirstChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, next.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  &&  cfgNode )  {^821^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, value ) ;^825^^^^^821^826^[REPLACE] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^823^^^^^804^831^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = curHandler; ;^828^^^^^804^831^[REPLACE] lastJump = handler;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node lastJump = node;^806^^^^^804^831^[REPLACE] Node lastJump = cfgNode;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node curHandler = iter.next (  ) ;^807^^^^^804^831^[REPLACE] for  ( Node handler : exceptionHandler )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^807^808^809^810^^804^831^[ADD] for  ( Node handler : exceptionHandler )  { if  ( NodeUtil.isFunction ( handler )  )  { return; }^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node catchBlock = NodeUtil.getCatchBlock ( item ) ;^812^^^^^804^831^[REPLACE] Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^812^^^^^804^831^[ADD] Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isFunction ( thenBlock )  )  {^808^^^^^804^831^[REPLACE] if  ( NodeUtil.isFunction ( handler )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  &&  cfgNode )  {^821^^^^^814^827^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;return;finallyMap.put ( lastJump, catchBlock ) ;^821^822^823^824^825^814^827^[ADD] if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return; } else { finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, node ) ;^825^^^^^814^827^[REPLACE] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  &&  cfgNode )  {^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^815^816^817^818^819^804^831^[ADD] if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, handler.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, nextSibling.getFirstChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, nextSibling.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, lastJump.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^816^^^^^804^831^[ADD] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  !=  root )  {^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( root, Branch.ON_EX, handler.getFirstChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, node.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  !=  cfgNode )  {^821^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, catchBlock ) ;^825^^^^^821^826^[REPLACE] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^825^^^^^821^826^[ADD] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node lastJump = value;^806^^^^^804^831^[REPLACE] Node lastJump = cfgNode;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node catchBlock = NodeUtil.getCatchBlock ( value ) ;^812^^^^^804^831^[REPLACE] Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( c.getType (  )   &&  priorityCounter )  {^839^^^^^836^845^[REPLACE] if  ( c.getType (  )  == type )  {^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return cfg;^840^^^^^836^845^[REPLACE] return c;^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node c = first; c == false; c = c.getNext (  )  )  {^837^^^^^836^845^[REPLACE] for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[ADD]^^837^838^839^840^841^836^845^[ADD] for  ( Node c = first; c != null; c = c.getNext (  )  )  { for  ( int type : types )  { if  ( c.getType (  )  == type )  { return c; }^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( thenBlock.getType (  )   &&  type )  {^839^^^^^836^845^[REPLACE] if  ( c.getType (  )  == type )  {^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return thenBlock;^840^^^^^836^845^[REPLACE] return c;^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^838^^^^^836^845^[REPLACE] for  ( int type : types )  {^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node c =  first; thenBlock !^837^^^^^836^845^[REPLACE] for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node c = target; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^[REPLACE] for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^844^^^^^836^845^[REPLACE] return null;^[METHOD] getNextSiblingOfType [TYPE] Node [PARAMETER] Node first  types [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  int[] types  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return   matchLabel ( parent, label ) ;^853^^^^^851^854^[REPLACE] return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[METHOD] isBreakTarget [TYPE] boolean [PARAMETER] Node target Node parent String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return isContinueStructure ( target )  || matchLabel ( parent, label ) ;^862^^^^^860^863^[REPLACE] return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[METHOD] isContinueTarget [TYPE] boolean [PARAMETER] Node target Node parent String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( label != this  )  {^869^^^^^868^879^[REPLACE] if  ( label == null )  {^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[ADD]^return true;^869^870^871^^^868^879^[ADD] if  ( label == null )  { return true; }^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^870^^^^^868^879^[REPLACE] return true;^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^while  ( target.getType (  )   !=  Token.LABEL )  {^872^^^^^868^879^[REPLACE] while  ( target.getType (  )  == Token.LABEL )  {^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^873^^^^^868^879^[REPLACE] if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[ADD]^return true;^873^874^875^^^868^879^[ADD] if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { return true; }^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^874^^^^^868^879^[REPLACE] return true;^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^target =  value.getParent (  ) ;^876^^^^^868^879^[REPLACE] target = target.getParent (  ) ;^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[ADD]^^876^^^^^868^879^[ADD] target = target.getParent (  ) ;^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( node.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^873^^^^^868^879^[REPLACE] if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^target =  node.getParent (  ) ;^876^^^^^868^879^[REPLACE] target = target.getParent (  ) ;^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^878^^^^^868^879^[REPLACE] return false;^[METHOD] matchLabel [TYPE] boolean [PARAMETER] Node target String label [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^894^^^^^884^904^[REPLACE] return true;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^896^^^^^884^904^[REPLACE] return false;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( mayThrowException ( thenBlock )  )  {^899^^^^^884^904^[REPLACE] if  ( mayThrowException ( c )  )  {^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[ADD]^return true;^899^900^901^^^884^904^[ADD] if  ( mayThrowException ( c )  )  { return true; }^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^900^^^^^884^904^[REPLACE] return true;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node thenBlock = n.getFirstChild (  ) ; c == this; c = c.getNext (  )  )  {^898^^^^^884^904^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[ADD]^^898^899^900^901^^884^904^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( mayThrowException ( c )  )  { return true; }^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[ADD]^^899^900^901^^^884^904^[ADD] if  ( mayThrowException ( c )  )  { return true; }^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; thenBlock !^898^^^^^884^904^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node c = toNode.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^903^^^^^884^904^[REPLACE] return false;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^915^^^^^909^923^[REPLACE] return true;^[METHOD] isBreakStructure [TYPE] boolean [PARAMETER] Node n boolean labeled [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^919^^^^^909^923^[REPLACE] return labeled;^[METHOD] isBreakStructure [TYPE] boolean [PARAMETER] Node n boolean labeled [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^921^^^^^909^923^[REPLACE] return false;^[METHOD] isBreakStructure [TYPE] boolean [PARAMETER] Node n boolean labeled [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^933^^^^^928^937^[REPLACE] return true;^[METHOD] isContinueStructure [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^935^^^^^928^937^[REPLACE] return false;^[METHOD] isContinueStructure [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if  ( parent.getLastChild (  )  == node ) {^966^^^^^964^983^[REPLACE] if  ( isForward )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return new Comparator;^975^^^^^964^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^964^983^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return new Comparator;^967^^^^^964^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n1 )   ^  getPosition ( null ) ;^971^^^^^964^983^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^964^983^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n2 )   ;^979^^^^^964^983^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^969^972^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> n1 Branch> n2 [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^977^980^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> n1 Branch> n2 [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^Integer priority = priorities.containsKey ( n ) ;^990^^^^^989^993^[REPLACE] Integer priority = priorities.get ( n ) ;^[METHOD] getPosition [TYPE] int [PARAMETER] Branch> n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Integer priority  [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( priority ) ;^991^^^^^989^993^[REPLACE] Preconditions.checkNotNull ( priority ) ;^[METHOD] getPosition [TYPE] int [PARAMETER] Branch> n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Integer priority  [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return labeled;^992^^^^^989^993^[REPLACE] return priority;^[METHOD] getPosition [TYPE] int [PARAMETER] Branch> n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Integer priority  [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return astPosition.get ( a.getValue (  )  )   |  astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^[REPLACE] return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> a Branch> b [CLASS] 1   [TYPE]  DiGraphNode a  b  [TYPE]  boolean false  true 
[REPLACE]^return getPosition ( n1 )  - getPosition ( n2 ) ;^954^^^^^952^956^[REPLACE] super ( entry ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] Node entry Integer> priorities [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  Node entry  [TYPE]  boolean false  true 
[REPLACE]^this.priorities =  null;^955^^^^^952^956^[REPLACE] this.priorities = priorities;^[METHOD] <init> [TYPE] Map) [PARAMETER] Node entry Integer> priorities [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  Node entry  [TYPE]  boolean false  true 
[REPLACE]^return new Comparator;^975^^^^^964^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^964^983^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return new Comparator;^967^^^^^964^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return false ;^971^^^^^964^983^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return false ;^967^^^^^964^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return getPosition ( n1 )   &&  getPosition ( n2 ) ;^971^^^^^964^983^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return getPosition ( n2 )   ;^979^^^^^964^983^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return getPosition ( n1 )   ;^971^^^^^969^972^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> n1 Branch> n2 [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  true 
[REPLACE]^return false ;^979^^^^^977^980^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> n1 Branch> n2 [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  true 
[REPLACE]^Integer priority = priorities.get ( null ) ;^990^^^^^989^993^[REPLACE] Integer priority = priorities.get ( n ) ;^[METHOD] getPosition [TYPE] int [PARAMETER] Branch> n [CLASS] AstControlFlowGraph 1 2   [TYPE]  Integer priority  [TYPE]  DiGraphNode n  [TYPE]  boolean false  true  [TYPE]  Map priorities 
[REPLACE]^priority   ;^991^^^^^989^993^[REPLACE] Preconditions.checkNotNull ( priority ) ;^[METHOD] getPosition [TYPE] int [PARAMETER] Branch> n [CLASS] AstControlFlowGraph 1 2   [TYPE]  Integer priority  [TYPE]  DiGraphNode n  [TYPE]  boolean false  true  [TYPE]  Map priorities 
[REPLACE]^return getPosition ( n1 )   ||  getPosition ( n2 ) ;^971^^^^^969^972^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> n1 Branch> n2 [CLASS] 1   [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  true 
[REPLACE]^return true ;^979^^^^^977^980^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Branch> n1 Branch> n2 [CLASS] 2   [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  true 
