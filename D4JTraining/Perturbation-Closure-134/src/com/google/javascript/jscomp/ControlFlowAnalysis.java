[REPLACE]^private final Comparator<DiGraphNode<Node, Branch>> priorityComparator  = null ;^71^72^^^^71^78^[REPLACE] private final Comparator<DiGraphNode<Node, Branch>> priorityComparator = new Comparator<DiGraphNode<Node, Branch>> (  )  {^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private  long  astPositionCounter;^80^^^^^^^[REPLACE] private int astPositionCounter;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private final Deque<Node> exceptionHandler ;^95^^^^^^^[REPLACE] private final Deque<Node> exceptionHandler = new ArrayDeque<Node> (  ) ;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^private final Multimap<Node, Node> finallyMap  = null ;^126^^^^^^^[REPLACE] private final Multimap<Node, Node> finallyMap = HashMultimap.create (  ) ;^ [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  
[REPLACE]^this.root =  null;^147^^^^^146^186^[REPLACE] this.root = root;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPositionCounter = 0 - 1;^148^^^^^146^186^[REPLACE] astPositionCounter = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities = newHashMap (  )  ;^149^^^^^146^186^[REPLACE] astPosition = Maps.newHashMap (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPosition = newHashMap (  )  ;^150^^^^^146^186^[REPLACE] nodePriorities = Maps.newHashMap (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cfg =  new AstControlFlowGraph ( computeFallThrough ( null ) , nodePriorities ) ;^151^^^^^146^186^[REPLACE] cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^thenBlock.getNext (  )  ;^152^^^^^146^186^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPosition.put ( false, ++astPositionCounter ) ;^153^^^^^146^186^[REPLACE] astPosition.put ( null, ++astPositionCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^153^^^^^146^186^[ADD] astPosition.put ( null, ++astPositionCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^priorityCounter = 0L;^157^^^^^146^186^[REPLACE] priorityCounter = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^DiGraphNode<Node, Branch> entry = cfg .createNode ( root )  ;^158^^^^^146^186^[REPLACE] DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^prioritizeFromEntryNode ( candidate )  ;^159^^^^^146^186^[REPLACE] prioritizeFromEntryNode ( entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if   (  parent.getLastChild  (    )   == node  )  {  ;^161^^^^^146^186^[REPLACE] if  ( shouldTraverseFunctions )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^161^162^^164^165^146^186^[ADD] if  ( shouldTraverseFunctions )  {  for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  { Node value = candidate.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value != null && value.getType (  )  != Token.FUNCTION )  {^166^^^^^146^186^[REPLACE] if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^166^167^168^169^170^146^186^[ADD] if  ( value != null && value.getType (  )  == Token.FUNCTION )  { Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ; prioritizeFromEntryNode ( candidate ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( !nodePriorities.get ( candidate )  ;^167^168^^^^146^186^[REPLACE] Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^!nodePriorities .get (  )   || candidate == entry ) ;^168^^^^^146^186^[REPLACE] !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^prioritizeFromEntryNode ( null ) ;^169^^^^^146^186^[REPLACE] prioritizeFromEntryNode ( candidate ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^164^165^166^167^168^161^172^[ADD] for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  { Node value = candidate.getValue (  ) ; if  ( value != null && value.getType (  )  == Token.FUNCTION )  { Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node, Branch> current = worklist.remove (  )  ;^164^^^^^161^172^[REPLACE] for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node value = this.getValue (  ) ;^165^^^^^161^172^[REPLACE] Node value = candidate.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value != null ) {^166^^^^^146^186^[REPLACE] if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )   &&  candidate == this ) ;^167^168^^^^146^186^[REPLACE] Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^165^^^^^161^172^[REPLACE] Node value = candidate.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( !nodePriorities.containsKey ( false )  )  {^179^^^^^146^186^[REPLACE] if  ( !nodePriorities.containsKey ( candidate )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities.put ( current,  ( ++ ( priorityCounter )  )  )  ;^180^^^^^146^186^[REPLACE] nodePriorities.put ( candidate, ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^178^179^180^181^^146^186^[ADD] for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  { if  ( !nodePriorities.containsKey ( candidate )  )  { nodePriorities.put ( candidate, ++priorityCounter ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( !nodePriorities.containsKey ( null )  )  {^179^^^^^146^186^[REPLACE] if  ( !nodePriorities.containsKey ( candidate )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities.put ( this, ++priorityCounter ) ;^180^^^^^146^186^[REPLACE] nodePriorities.put ( candidate, ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^180^^^^^146^186^[ADD] nodePriorities.put ( candidate, ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node, Branch> current = worklist.remove (  )  ;^178^^^^^146^186^[REPLACE] for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities.put ( cfg .getEntry (  )  , ++priorityCounter ) ;^185^^^^^146^186^[REPLACE] nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nodePriorities.put ( cfg.getEntry (  ) , ++priorityCounter ) ;^185^^^^^146^186^[REPLACE] nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^PriorityQueue<DiGraphNode<Node, Branch>> worklist = new PriorityQueue<DiGraphNode<Node, Branch>> ( 4, priorityComparator ) ;^193^194^^^^192^211^[REPLACE] PriorityQueue<DiGraphNode<Node, Branch>> worklist = new PriorityQueue<DiGraphNode<Node, Branch>> ( 10, priorityComparator ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^worklist.add ( candidate )  ;^195^^^^^192^211^[REPLACE] worklist.add ( entry ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( nodePriorities.containsKey ( null )  )  {^199^^^^^192^211^[REPLACE] if  ( nodePriorities.containsKey ( current )  )  {^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^199^200^201^^^192^211^[ADD] if  ( nodePriorities.containsKey ( current )  )  { continue; }^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( DiGraphNode<Node, Branch> null : successors )  {^207^^^^^197^210^[REPLACE] for  ( DiGraphNode<Node, Branch> candidate : successors )  {^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^DiGraphNode<Node, Branch> current = worklist.isEmpty (  ) ;^198^^^^^197^210^[REPLACE] DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^List<DiGraphNode<Node, Branch>> successors = cfg.createNode ( null ) ;^205^206^^^^197^210^[REPLACE] List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node, Branch> current = worklist.remove (  )  ;^207^^^^^197^210^[REPLACE] for  ( DiGraphNode<Node, Branch> candidate : successors )  {^[METHOD] prioritizeFromEntryNode [TYPE] void [PARAMETER] Branch> entry [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode candidate  current  entry  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  root  value  [TYPE]  List successors  [TYPE]  PriorityQueue worklist  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^astPosition.put ( null,  ( ++ ( astPositionCounter )  )  )  ;^216^^^^^215^288^[REPLACE] astPosition.put ( n, astPositionCounter++ ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( shouldTraverseFunctions ) {^220^^^^^215^288^[REPLACE] if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^222^^^^^215^288^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;  ;^222^^^^^215^288^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^224^^^^^215^288^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^227^^^^^215^288^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent == this )  {^246^^^^^215^288^[REPLACE] if  ( parent != null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent  ) {^281^^^^^215^288^[REPLACE] if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( exceptionHandler.peek (  )   !=  root ) ;^282^^^^^215^288^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^exceptionHandler.push ( n )  ;^282^^^^^215^288^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^282^^^^^215^288^[ADD] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^exceptionHandler.peek (  ) ;^283^^^^^215^288^[REPLACE] exceptionHandler.pop (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n  !=  value.getLastChild (  ) ;;^250^^^^^215^288^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n  ;^256^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n != parent.getFirstChild  (    )  .getNext  (    )  ;  ;^258^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false ;^264^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n  ||  parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^215^288^[REPLACE] return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;  ;^273^^^^^215^288^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (parent  &&  value.getFirstChild (  ) .getNext (  )  )  {^281^^^^^215^288^[REPLACE] if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^checkState (  (  ( exceptionHandler.peek (  )  )  == node )  )  ;^282^^^^^215^288^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^exceptionHandler.pop (  ) ;^282^283^^^^215^288^[ADD] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ; exceptionHandler.pop (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( exceptionHandler.push (  )  == parent ) ;^282^^^^^215^288^[REPLACE] Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^( exceptionHandler.peek (  )  )  ;^283^^^^^215^288^[REPLACE] exceptionHandler.pop (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^returnparent  !=  parent .getFirstChild (  )  ;;^250^^^^^215^288^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^returparent n  ;^258^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n  ;^264^^^^^215^288^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true ;^266^^^^^215^288^[REPLACE] return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^273^^^^^215^288^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^287^^^^^215^288^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^295^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^298^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^301^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^304^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^307^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^310^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^313^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^317^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^320^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^323^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^326^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^329^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^332^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^335^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^338^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^341^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^344^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^346^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^349^^^^^291^351^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node entry  externs  n  parent  root  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( forNode.getChildCount (  )   !=  2 )  {^392^^^^^391^426^[REPLACE] if  ( forNode.getChildCount (  )  == 4 )  {^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^416^^^^^392^425^[REPLACE] Node item = forNode.getFirstChild (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node collection = thenBlock.getNext (  ) ;^417^^^^^392^425^[REPLACE] Node collection = item.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = parent.getParent (  ) ;^418^^^^^392^425^[REPLACE] Node body = collection.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node init = value .getLastChild (  )  ;^394^^^^^391^426^[REPLACE] Node init = forNode.getFirstChild (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node cond = thenBlock.getParent (  ) ;^395^^^^^391^426^[REPLACE] Node cond = init.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node thenBlock = node.getFirstChild (  ) .getNext (  )  ;^396^^^^^391^426^[REPLACE] Node iter = cond.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = thenBlock.getParent (  ) ;^397^^^^^391^426^[REPLACE] Node body = iter.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^394^^^^^391^426^[REPLACE] Node init = forNode.getFirstChild (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = root.getNext (  ) ;^396^^^^^391^426^[REPLACE] Node iter = cond.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^397^^^^^391^426^[REPLACE] Node body = iter.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^416^417^418^^420^391^426^[ADD] Node item = forNode.getFirstChild (  ) ; Node collection = item.getNext (  ) ; Node body = collection.getNext (  ) ; createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node collection = thenBlock.getParent (  ) ;^417^^^^^391^426^[REPLACE] Node collection = item.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node body = root .getType (  )  ;^418^^^^^391^426^[REPLACE] Node body = collection.getNext (  ) ;^[METHOD] handleFor [TYPE] void [PARAMETER] Node forNode [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.ON_TRUE, node.getFirstChild (  ) .equals (  )  ) ;^447^448^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^target.getFirstChild (  ) .getString (  )  ;^448^^^^^445^465^[REPLACE] node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node .getLastChild (  )  .getNext (  )  ) ;^448^^^^^445^465^[REPLACE] node.getFirstChild (  ) .getNext (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = getNextSiblingOfType ( value.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^[REPLACE] Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( next == true )  {^451^^^^^445^465^[REPLACE] if  ( next != null )  {^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (thenBlock == null )  {^458^^^^^451^463^[REPLACE] if  ( deflt != null )  {^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = node.getNext (  ) ;^455^^^^^451^463^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node deflt = getNextSiblingOfType ( value.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^451^463^[REPLACE] Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   &&  Token.CASE ) ;^452^^^^^445^465^[REPLACE] Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( node, Branch.ON_FALSE, next ) ;^452^453^^^^445^465^[ADD] Preconditions.checkState ( next.getType (  )  == Token.CASE ) ; createEdge ( node, Branch.ON_FALSE, next ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^( child.getType (  )  )  ;^452^^^^^445^465^[REPLACE] Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, iter )  ;^453^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, next ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^453^^^^^445^465^[ADD] createEdge ( node, Branch.ON_FALSE, next ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  parent != null  )   {  ;^458^^^^^445^465^[REPLACE] if  ( deflt != null )  {^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( parent, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^458^462^[REPLACE] createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.ON_FALSE, thenBlock ) ;^459^^^^^445^465^[REPLACE] createEdge ( node, Branch.ON_FALSE, deflt ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^455^^^^^445^465^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node deflt = getNextSiblingOfType ( value.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^[REPLACE] Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node.getFirstChild (  )  ) ;^464^^^^^445^465^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( value, node.getLastChild (  )  ) ;^464^^^^^445^465^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleCase [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^479^^^^^478^520^[ADD] Node parent = node.getParent (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( node.getType (  )  != Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^478^520^[REPLACE] if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^485^^^^^481^486^[REPLACE] return;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^485^^^^^478^520^[REPLACE] return;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^489^^^^^478^520^[REPLACE] Node child = node.getFirstChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^child =  thenBlock.getNext (  ) ;^494^^^^^478^520^[REPLACE] child = child.getNext (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  parent != null  )   {  ;^497^^^^^478^520^[REPLACE] if  ( child != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( parent, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( thenBlock, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^[REPLACE] createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^478^520^[REPLACE] createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, computeFallThrough ( thenBlock )  ) ;^498^^^^^478^520^[REPLACE] createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent == null )  {^504^^^^^478^520^[REPLACE] if  ( parent != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( node.getType (  )  == Token.BLOCK || node.isSyntheticBlock (  )  )  {^511^^^^^478^520^[REPLACE] if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( next == null )  {^513^^^^^478^520^[REPLACE] if  ( next != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  )  ;^514^^^^^478^520^[REPLACE] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( node.getNext (  )  )  ;^514^^^^^478^520^[REPLACE] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  )  ;^514^^^^^478^520^[REMOVE] ^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = parent.getLastChild (  ) ;^512^^^^^478^520^[REPLACE] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  parent != null  )   {  ;^513^^^^^478^520^[REPLACE] if  ( next != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^513^514^515^^^478^520^[ADD] if  ( next != null )  { createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^512^^^^^478^520^[ADD] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (parent == null )  {^513^^^^^478^520^[REPLACE] if  ( next != null )  {^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = root.getFirstChild (  ) ;^512^^^^^478^520^[REPLACE] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^478^520^[REPLACE] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^514^^^^^478^520^[ADD] createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node next = thenBlock.getLastChild (  ) ;^512^^^^^478^520^[REPLACE] Node next = node.getLastChild (  ) ;^[METHOD] handleStmtList [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^String label = true;^549^^^^^548^585^[REPLACE] String label = null;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( root.hasChildren (  )  )  {^551^^^^^548^585^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^552^^^^^548^585^[ADD] label = node.getFirstChild (  ) .getString (  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^label =  null.getFirstChild (  ) .getString (  ) ;^552^^^^^548^585^[REPLACE] label = node.getFirstChild (  ) .getString (  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node finallyNode  ;^554^^^^^548^585^[REPLACE] Node cur;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node cur  ;^555^^^^^548^585^[REPLACE] Node lastJump;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = root.getParent (  ) ;^556^^^^^548^585^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( cur.getType (  )  == Token.TRY || NodeUtil.hasFinally ( cur )  )  {^569^^^^^548^585^[REPLACE] if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  !=  node )  {^570^^^^^548^585^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^570^^^^^548^585^[REMOVE] ^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( node.getNext (  )  )  ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( value.getLastChild (  )  )  ) ;^571^572^^^^548^585^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur.getFirstChild (  )  )  ) ;^572^^^^^548^585^[REPLACE] cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = node  ;^576^^^^^548^585^[REPLACE] lastJump = cur;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ||  node )  {^570^^^^^548^585^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getFirstChild (  )  )  ) ;^574^^^^^570^575^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^574^^^^^570^575^[ADD] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^548^585^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^572^^^^^548^585^[ADD] cur.getLastChild (  )  )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^566^567^568^569^^548^585^[ADD] for  ( cur = node, lastJump = node; !isBreakTarget ( cur, parent, label ) ; cur = parent, parent = parent.getParent (  )  )  { if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = cur  ;^566^^^^^548^585^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur =  lastJump, lastJump^568^^^^^548^585^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^target = target.getParent (  )  ;^568^^^^^548^585^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ) {^580^^^^^548^585^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, computeFollowNode ( cur )  ) ;^583^^^^^580^584^[REPLACE] finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFollowNode ( value )  ) ;^583^^^^^580^584^[REPLACE] finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^583^^^^^580^584^[ADD] finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( value )  ) ;^581^^^^^548^585^[REPLACE] createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^581^^^^^548^585^[ADD] createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[METHOD] handleBreak [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^588^^^^^587^619^[ADD] String label = null;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value.hasChildren (  )  )  {^589^^^^^587^619^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^label =  value.getFirstChild (  ) .getString (  ) ;^590^^^^^587^619^[REPLACE] label = node.getFirstChild (  ) .getString (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^592^593^^^^587^619^[ADD] Node cur; Node lastJump;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node cur  ;^593^^^^^587^619^[REPLACE] Node lastJump;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node parent = root.getParent (  ) ;^595^^^^^587^619^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value.getType (  )  == Token.TRY || NodeUtil.hasFinally ( cur )  )  {^599^^^^^587^619^[REPLACE] if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^599^^^^^587^619^[REMOVE] ^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (   node )  {^600^^^^^587^619^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( node.getNext (  )  )  ;^603^^^^^600^604^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^603^^^^^600^604^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  )  ;^601^^^^^587^619^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^601^^^^^587^619^[ADD] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^handler.getLastChild (  )  ;^601^^^^^587^619^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = node  ;^605^^^^^587^619^[REPLACE] lastJump = cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value  ||  node )  {^600^^^^^587^619^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^600^601^602^603^604^587^619^[ADD] if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^600^604^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^603^^^^^600^604^[ADD] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( value .getFirstChild (  )   )  ) ;^603^^^^^600^604^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( lastJump, Branch.UNCOND, value.getLastChild (  )  ) ;^601^^^^^587^619^[REPLACE] createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( cur =  value, lastJump^596^^^^^587^619^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = cur  ;^596^^^^^587^619^[REPLACE] for  ( cur = node, lastJump = node;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^cur =  lastJump, lastJump^598^^^^^587^619^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^target = target.getParent (  )  ;^598^^^^^587^619^[REPLACE] cur = parent, parent = parent.getParent (  )  )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = value;^609^^^^^587^619^[REPLACE] Node iter = cur;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  forNode.getChildCount  (    )   == 4  )   {  ;^610^^^^^587^619^[REPLACE] if  ( cur.getChildCount (  )  == 4 )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^iter =  null.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^587^619^[REPLACE] iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  &&  value )  {^614^^^^^587^619^[REPLACE] if  ( lastJump == node )  {^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, null )  ;^617^^^^^614^618^[REPLACE] finallyMap.put ( lastJump, iter ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  )  ;^615^^^^^587^619^[REPLACE] createEdge ( node, Branch.UNCOND, iter ) ;^[METHOD] handleContinue [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  String label  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node lastJump = this;^622^^^^^621^648^[REPLACE] Node lastJump = null;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( iter )  )  {^625^^^^^621^648^[REPLACE] if  ( NodeUtil.isFunction ( curHandler )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^625^626^627^^^621^648^[ADD] if  ( NodeUtil.isFunction ( curHandler )  )  { break; }^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  NodeUtil.isFunction  (  handler  )    )   {  ;^628^^^^^621^648^[REPLACE] if  ( NodeUtil.hasFinally ( curHandler )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump != false )  {^629^^^^^621^648^[REPLACE] if  ( lastJump == null )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^629^630^631^632^633^621^648^[ADD] if  ( lastJump == null )  { createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^632^633^^^^629^634^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( node.getNext (  )  )  ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^633^^^^^629^634^[ADD] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^handler.getLastChild (  )  ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  )  ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  )  ;^630^^^^^621^648^[REMOVE] ^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, value.getLastChild (  )  ) ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = handler  ;^635^^^^^621^648^[REPLACE] lastJump = curHandler;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump != this  )  {^629^^^^^621^648^[REPLACE] if  ( lastJump == null )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, computeFallThrough ( next.getLastChild (  )  )  ) ;^632^633^^^^629^634^[REPLACE] finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^computeFallThrough ( value.getLastChild (  )  )  ) ;^633^^^^^629^634^[REPLACE] computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, root.getFirstChild (  )  ) ;^630^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = cur  ;^635^^^^^621^648^[REPLACE] lastJump = curHandler;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^623^624^625^626^627^621^648^[ADD] for  ( Iterator<Node> iter = exceptionHandler.iterator (  ) ; iter.hasNext (  ) ; )  { Node curHandler = iter.next (  ) ; if  ( NodeUtil.isFunction ( curHandler )  )  { break; }^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^624^^^^^621^648^[ADD] Node curHandler = iter.next (  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( root.hasChildren (  )  )  {^639^^^^^621^648^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( forNode, collection )  ;^640^^^^^621^648^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^connectToPossibleExceptionHandler ( root, node.getFirstChild (  )  ) ;^640^^^^^621^648^[REPLACE] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^640^^^^^621^648^[ADD] connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value != null )  {^643^^^^^621^648^[REPLACE] if  ( lastJump == null )  {^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, this ) ;^646^^^^^643^647^[REPLACE] finallyMap.put ( lastJump, null ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, this ) ;^644^^^^^621^648^[REPLACE] createEdge ( node, Branch.UNCOND, null ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^644^^^^^621^648^[ADD] createEdge ( node, Branch.UNCOND, null ) ;^[METHOD] handleReturn [TYPE] void [PARAMETER] Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  [TYPE]  Iterator iter  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^689^^^^^670^763^[ADD] Node parent = node.getParent (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent != this || parent.getType (  )  == Token.FUNCTION || node == root )  {^690^^^^^670^763^[REPLACE] if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^690^691^692^^^670^763^[ADD] if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  { return null; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return this;^691^^^^^670^763^[REPLACE] return null;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return null;  ;^691^^^^^670^763^[REPLACE] return null;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value.getNext (  )  == null )  {^703^^^^^670^763^[REPLACE] if  ( parent.getNext (  )  != null )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, value ) ;^712^^^^^703^713^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent.getNext (  ) .getType (  )   !=  Token.CASE )  {^704^^^^^670^763^[REPLACE] if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if  ( parent.getNext (  ) .getType (  )   &&  Token.DEFAULT )  {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Preconditions.checkState ( true, "Not reachable" ) ;^709^^^^^706^710^[REPLACE] Preconditions.checkState ( false, "Not reachable" ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getParent (  ) .getFirstChild (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getNext  (    )  .getFirstChild  (    )  ;  ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return node.getParent (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  ( parent.getNext (  ) .getType (  )   ||  Token.DEFAULT )  {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^}   return parent.getNext (  ) .getFirstChild (  ) ;Preconditions.checkState ( false, "Not reachable" ) ;^706^707^708^709^710^670^763^[ADD] else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ; } else { Preconditions.checkState ( false, "Not reachable" ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^checkState (  ( parent != null ) , "Cannot find break target." )  ;^709^^^^^706^710^[REPLACE] Preconditions.checkState ( false, "Not reachable" ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^computeFallThrough ( node.getNext (  )  )  ;^709^^^^^706^710^[REMOVE] ^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return next.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return iter.getNext (  ) .getFirstChild (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  (   Token.DEFAULT )  {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^}   Preconditions.checkState ( false, "Not reachable" ) ;^706^707^708^709^710^670^763^[ADD] else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ; } else { Preconditions.checkState ( false, "Not reachable" ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return lastJump.getNext (  ) .getFirstChild (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return thenBlock.getNext (  ) .getFirstChild (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return value.getParent (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  if  ( parent.getNext (  ) .getType (  )   !=  Token.DEFAULT )  {^706^^^^^670^763^[REPLACE] } else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return value.getNext (  ) .getFirstChild (  ) ;^707^^^^^670^763^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( lastJump )  )  {^716^^^^^670^763^[REPLACE] if  ( NodeUtil.isForIn ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return value.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^716^720^[REPLACE] return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent;  ;^717^^^^^670^763^[REPLACE] return parent;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( parent.getFirstChild (  )   ) {^726^^^^^670^763^[REPLACE] if  ( parent.getFirstChild (  )  == node )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  else {^733^^^^^670^763^[REPLACE] } else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^}  else {^740^^^^^670^763^[REPLACE] } else if  ( parent.getLastChild (  )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^}^740^741^742^743^^670^763^[ADD] else if  ( parent.getLastChild (  )  == node ) { for  ( Node finallyNode : finallyMap.get ( parent )  )  { createEdge ( fromNode, Branch.UNCOND, finallyNode ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^741^742^743^^^740^745^[ADD] for  ( Node finallyNode : finallyMap.get ( parent )  )  { createEdge ( fromNode, Branch.UNCOND, finallyNode ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode  (  fromNode, parent  )  ;  ;^744^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^741^^^^^740^745^[REPLACE] for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node finallyNode : finallyMap.get ( next )  )  {^741^^^^^740^745^[REPLACE] for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( root, parent ) ;^744^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  NodeUtil.isForIn  (  parent  )    )   {  ;^734^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode  (  fromNode, parent  )  ;  ;^737^^^^^734^738^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( root.getNext (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( node.getParent (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, parent ) ;^737^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isFunction ( parent )  )  {^734^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, parent ) ;^737^^^^^734^738^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( value.getNext (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if  ( parent.getLastChild (  )   ||  node ) {^740^^^^^670^763^[REPLACE] } else if  ( parent.getLastChild (  )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node root : finallyMap.get ( parent )  )  {^741^^^^^740^745^[REPLACE] for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( node, parent ) ;^744^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node finallyNode : finallyMap.get ( nextSibling )  )  {^741^^^^^740^745^[REPLACE] for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( value.getNext (  )  ) ;^735^^^^^740^745^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, parent ) ;^737^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( value, parent ) ;^744^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.hasFinally ( nextSibling )  )  {^727^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^727^^^^^670^763^[REMOVE] ^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode  (  fromNode, parent  )  ;  ;^730^^^^^727^731^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( value.getLastChild (  )  ) ;^728^^^^^670^763^[REPLACE] return computeFallThrough ( parent.getLastChild (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( root.getFirstChild (  )  ) ;^728^^^^^670^763^[REPLACE] return computeFallThrough ( parent.getLastChild (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode  (  fromNode, parent  )  ;  ;^730^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil .hasCatchHandler ( node )   )  {^727^^^^^670^763^[REPLACE] if  ( NodeUtil.hasFinally ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^727^728^729^730^731^670^763^[ADD] if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( parent.getLastChild (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, value ) ;^730^^^^^727^731^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( n.getLastChild (  )  ) ;^728^^^^^670^763^[REPLACE] return computeFallThrough ( parent.getLastChild (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if  ( NodeUtil.getCatchBlock ( parent )   ) {^733^^^^^670^763^[REPLACE] } else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, n ) ;^737^^^^^734^738^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( value.getParent (  )  ) ;^735^^^^^670^763^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode  (  fromNode, parent  )  ;  ;^737^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  parent.getFirstChild  (    )   == node  )   {  ;^740^^^^^670^763^[REPLACE] } else if  ( parent.getLastChild (  )  == node ) {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, thenBlock ) ;^744^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node finallyNode : finallyMap.put ( parent )  )  {^741^^^^^740^745^[REPLACE] for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode  (  fromNode, parent  )  ;  ;^698^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return node.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^740^745^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n.getNext (  ) .getFirstChild (  ) ;^707^^^^^740^745^[REPLACE] return parent.getNext (  ) .getFirstChild (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, node ) ;^712^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return item;^717^^^^^740^745^[REPLACE] return parent;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent.getFirstChild (  ) .equals (  ) .getNext (  ) ;^719^^^^^740^745^[REPLACE] return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return parent;  ;^723^^^^^740^745^[REPLACE] return parent;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( value.getFirstChild (  )  ) ;^728^^^^^740^745^[REPLACE] return computeFallThrough ( parent.getLastChild (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, n ) ;^730^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( parent.getNext (  )  ) ;^735^^^^^740^745^[REPLACE] return computeFallThrough ( node.getNext (  )  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, root ) ;^744^^^^^740^745^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^750^^^^^670^763^[REPLACE] Node nextSibling = node.getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^nextSibling =  value.getNext (  ) ;^754^^^^^670^763^[REPLACE] nextSibling = nextSibling.getNext (  ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( nextSibling == null )  {^757^^^^^670^763^[REPLACE] if  ( nextSibling != null )  {^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^757^758^759^^761^670^763^[ADD] if  ( nextSibling != null )  { return computeFallThrough ( nextSibling ) ; } else { return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( fromNode, nextSibling ) ;^761^^^^^757^762^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return n == parent.getLastChild  (    )  ;  ;^758^^^^^670^763^[REPLACE] return computeFallThrough ( nextSibling ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFallThrough ( node ) ;^758^^^^^670^763^[REPLACE] return computeFallThrough ( nextSibling ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return computeFollowNode ( root, parent ) ;^761^^^^^670^763^[REPLACE] return computeFollowNode ( fromNode, parent ) ;^[METHOD] computeFollowNode [TYPE] Node [PARAMETER] Node fromNode Node node [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( mayThrowException ( target )  && exceptionHandler.isEmpty (  )  )  {^805^^^^^804^831^[REPLACE] if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( handler )  )  {^808^^^^^804^831^[REPLACE] if  ( NodeUtil.isFunction ( handler )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^809^^^^^804^831^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.hasCatchHandler ( catchBlock )  )  {^814^^^^^804^831^[REPLACE] if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  ||  cfgNode )  {^821^^^^^814^827^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^823^^^^^814^827^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( value  !=  cfgNode )  {^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, handler.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, value.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  )  ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, item.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^thenBlock.getNext (  )  ;^816^^^^^804^831^[REMOVE] ^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ) {^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap .put ( priorityCounter )  ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^818^^^^^815^819^[ADD] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node.getLastChild (  )  ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( value, Branch.ON_EX, handler.getFirstChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node.getLastChild (  )  ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  lastJump == null  )   {  ;^821^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, nextSibling ) ;^825^^^^^821^826^[REPLACE] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^823^^^^^804^831^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^807^808^809^810^^805^830^[ADD] for  ( Node handler : exceptionHandler )  { if  ( NodeUtil.isFunction ( handler )  )  { return; }^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isFunction ( value )  )  {^808^^^^^805^830^[REPLACE] if  ( NodeUtil.isFunction ( handler )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^809^^^^^805^830^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.hasCatchHandler ( catchBlock )  )  {^814^^^^^805^830^[REPLACE] if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  !=  cfgNode )  {^821^^^^^814^827^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;return;finallyMap.put ( lastJump, catchBlock ) ;^821^822^823^824^825^814^827^[ADD] if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return; } else { finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  !=  cfgNode )  {^815^^^^^805^830^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^815^816^817^818^819^805^830^[ADD] if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^thenBlock.getNext (  )  ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^( parent.getFirstChild (  )  )  ;^818^^^^^815^819^[REMOVE] ^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, iter.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, handler .getFirstChild (  )   ) ;^816^^^^^805^830^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^816^^^^^805^830^[ADD] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^node.getLastChild (  )  ;^816^^^^^805^830^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  lastJump == null  )   {  ;^815^^^^^805^830^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, n.getFirstChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, parent.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  )  ;^816^^^^^805^830^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, parent.getLastChild (  )  ) ;^816^^^^^805^830^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  lastJump == null  )   {  ;^821^^^^^805^830^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^821^822^823^824^825^805^830^[ADD] if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return; } else { finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( value, catchBlock ) ;^825^^^^^821^826^[REPLACE] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^825^^^^^821^826^[ADD] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return c;  ;^823^^^^^805^830^[REPLACE] return;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = cur  ;^828^^^^^805^830^[REPLACE] lastJump = handler;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node catchBlock = NodeUtil.hasCatchHandler ( lastJump ) ;^812^^^^^805^830^[REPLACE] Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node lastJump = next;^806^^^^^805^830^[REPLACE] Node lastJump = cfgNode;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^807^^^^^805^830^[REPLACE] for  ( Node handler : exceptionHandler )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^812^^^^^805^830^[ADD] Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( NodeUtil.isForIn ( item )  )  {^808^^^^^804^831^[REPLACE] if  ( NodeUtil.isFunction ( handler )  )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^808^809^810^^^804^831^[ADD] if  ( NodeUtil.isFunction ( handler )  )  { return; }^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if   (  lastJump == null  )   {  ;^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^815^816^817^818^819^804^831^[ADD] if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, target.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, nextSibling.getLastChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^816^^^^^804^831^[ADD] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  !=  cfgNode )  {^815^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, item.getLastChild (  )  ) ;^818^^^^^815^819^[REPLACE] finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REMOVE]^thenBlock.getNext (  )  ;^818^^^^^815^819^[REMOVE] ^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, handler.getFirstChild (  )  ) ;^816^^^^^804^831^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  (value  !=  cfgNode )  {^821^^^^^804^831^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^finallyMap.put ( lastJump, iter ) ;^825^^^^^821^826^[REPLACE] finallyMap.put ( lastJump, catchBlock ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^808^809^810^^^805^830^[ADD] if  ( NodeUtil.isFunction ( handler )  )  { return; }^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ||  cfgNode )  {^821^^^^^814^827^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ||  cfgNode )  {^815^^^^^805^830^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, value.getFirstChild (  )  ) ;^816^^^^^805^830^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  &&  value )  {^815^^^^^805^830^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^createEdge ( cfgNode, Branch.ON_EX, iter.getLastChild (  )  ) ;^816^^^^^805^830^[REPLACE] createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( lastJump  ) {^821^^^^^805^830^[REPLACE] if  ( lastJump == cfgNode )  {^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^lastJump = curHandler  ;^828^^^^^805^830^[REPLACE] lastJump = handler;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node catchBlock = NodeUtil.hasCatchHandler ( handler ) ;^812^^^^^805^830^[REPLACE] Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[ADD]^^806^^^^^805^830^[ADD] Node lastJump = cfgNode;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node catchBlock = NodeUtil.getCatchBlock ( next ) ;^812^^^^^805^830^[REPLACE] Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[METHOD] connectToPossibleExceptionHandler [TYPE] void [PARAMETER] Node cfgNode Node target [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^894^^^^^884^904^[REPLACE] return true;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^896^^^^^884^904^[REPLACE] return false;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( mayThrowException ( thenBlock )  )  {^899^^^^^884^904^[REPLACE] if  ( mayThrowException ( c )  )  {^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return false;^900^^^^^884^904^[REPLACE] return true;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; null !^898^^^^^884^904^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;  ;^900^^^^^884^904^[REPLACE] return true;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^Node iter = cond.getNext (  )  ;^898^^^^^884^904^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return true;^903^^^^^884^904^[REPLACE] return false;^[METHOD] mayThrowException [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^} else if   (  parent.getLastChild  (    )   == node  )  {  ;^966^^^^^965^983^[REPLACE] if  ( isForward )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return new Comparator;^975^^^^^966^982^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n2 )   getPosition ( null ) ;^979^^^^^966^982^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return new Comparator;^967^^^^^965^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition  (  n1  )   - getPosition  (  n2  )  ;  ;^971^^^^^965^983^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( n1 )   getPosition ( n2 ) ;^971^^^^^965^983^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return new Comparator;^975^^^^^965^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^return getPosition ( 0 )   getPosition ( n1 ) ;^979^^^^^965^983^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [TYPE]  Multimap finallyMap  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  labeled  shouldTraverseFunctions  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  [TYPE]  Map astPosition  nodePriorities  priorities  [TYPE]  Deque exceptionHandler  [TYPE]  int astPositionCounter  priorityCounter  type  [TYPE]  Comparator priorityComparator 
[REPLACE]^if  ( true )  {^966^^^^^965^983^[REPLACE] if  ( isForward )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return true ;^975^^^^^966^982^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return getPosition ( n2 )   getPosition ( n1 ) ;^979^^^^^966^982^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return new Comparator;^967^^^^^965^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return getPosition ( n1 )   getPosition ( n2 ) ;^971^^^^^965^983^[REPLACE] return getPosition ( n1 )  - getPosition ( n2 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return true ;^975^^^^^965^983^[REPLACE] return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
[REPLACE]^return getPosition ( this )   getPosition ( n1 ) ;^979^^^^^965^983^[REPLACE] return getPosition ( n2 )  - getPosition ( n1 ) ;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] AstControlFlowGraph 1 2   [TYPE]  Map priorities  [TYPE]  DiGraphNode n1  n2  [TYPE]  boolean false  isForward  true 
