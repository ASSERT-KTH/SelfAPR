[REPLACE]^private  CheckLevel checkLevel;^35^^^^^^^[REPLACE] private final CheckLevel checkLevel;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private  CodingConvention codingConvention;^36^^^^^^^[REPLACE] private final CodingConvention codingConvention;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^static final DiagnosticType MISSING_PROVIDE_WARNING  = null ;^38^39^40^^^38^40^[REPLACE] static final DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_PROVIDE", "missing goog.provide ( ''{0}'' ) " ) ;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private final Map<String, Node> provides ;^56^^^^^^^[REPLACE] private final Map<String, Node> provides = Maps.newHashMap (  ) ;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private final Map<String, Node> ctors  = null ;^57^^^^^^^[REPLACE] private final Map<String, Node> ctors = Maps.newHashMap (  ) ;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private  CodingConvention convention;^58^^^^^^^[REPLACE] private final CodingConvention convention;^ [CLASS] CheckProvides CheckProvidesCallback  
[ADD]^JSDocInfo info = parent.getJSDocInfo (  ) ;^83^84^^^^82^103^[ADD] Node name = null; JSDocInfo info = parent.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^JSDocInfo info = name.getJSDocInfo (  ) ;^84^^^^^82^103^[REPLACE] JSDocInfo info = parent.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == this && info.isConstructor (  )  )  {^85^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == this && info.isConstructor (  )  )  {^90^^^^^85^93^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^info =  parent.getJSDocIparentfo (  ) ;^89^^^^^85^93^[REPLACE] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^91^^^^^85^93^[ADD] name = n.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = n.getFirstChild (  )  ;^86^^^^^82^103^[REPLACE] name = parent.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == null ) {^90^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^90^91^92^^^82^103^[ADD] if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = parent.getFirstChild (  )  ;^91^^^^^82^103^[REPLACE] name = n.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^86^^^^^82^103^[ADD] name = parent.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^89^^^^^82^103^[ADD] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( name == null && name.isQualifiedName (  )  )  {^94^^^^^82^103^[REPLACE] if  ( name != null && name.isQualifiedName (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( this.convention.isPrivate ( qualifiedName )  )  {^96^^^^^82^103^[REPLACE] if  ( !this.convention.isPrivate ( qualifiedName )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^96^97^98^99^100^82^103^[ADD] if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^98^^^^^82^103^[REPLACE] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^ctors.put ( qualifiedName, name ) ;^98^99^100^^^82^103^[ADD] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors .get ( qualifiedName )  ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^Visibility visibility = info.isConstructor (  ) ;^97^^^^^82^103^[REPLACE] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^[REPLACE] String qualifiedName = name.getQualifiedName (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if   (  !visibility.equals  (  PRIVATE  )    )   {  ;^96^^^^^82^103^[REPLACE] if  ( !this.convention.isPrivate ( qualifiedName )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^Visibility visibility = info.getVisibility (  ) ;ctors.put ( qualifiedName, name ) ;^96^97^98^99^100^82^103^[ADD] if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^95^96^97^98^99^82^103^[ADD] String qualifiedName = name.getQualifiedName (  ) ; if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^97^^^^^82^103^[ADD] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^private final Map<String, Node> provides ;^56^^^^^^^[REPLACE] private final Map<String, Node> provides = Maps.newHashMap (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^private  Map<String, Node> ctors = Maps.newHashMap (  ) ;^57^^^^^^^[REPLACE] private final Map<String, Node> ctors = Maps.newHashMap (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^private  CodingConvention convention;^58^^^^^^^[REPLACE] private final CodingConvention convention;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[ADD]^^83^84^^^^82^103^[ADD] Node name = null; JSDocInfo info = parent.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^JSDocInfo info = name.getJSDocInfo (  ) ;^84^^^^^82^103^[REPLACE] JSDocInfo info = parent.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == null ) {^85^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^90^^^^^85^93^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^name = n.getFirstChild (  ) ;^90^91^92^^^85^93^[ADD] if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^info =  null.getJSDocInullfo (  ) ;^89^^^^^85^93^[REPLACE] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^91^^^^^85^93^[ADD] name = n.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = n.getFirstChild (  )  ;^86^^^^^82^103^[REPLACE] name = parent.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == this && info.isConstructor (  )  )  {^90^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^90^91^92^^^82^103^[ADD] if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = parent.getFirstChild (  )  ;^91^^^^^82^103^[REPLACE] name = n.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^info =  parent.getJSDocIparentfo (  ) ;^89^^^^^82^103^[REPLACE] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  (  name.isQualifiedName (  )  )  {^94^^^^^82^103^[REPLACE] if  ( name != null && name.isQualifiedName (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( this.convention.isPrivate ( qualifiedName )  )  {^96^^^^^82^103^[REPLACE] if  ( !this.convention.isPrivate ( qualifiedName )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^96^97^98^99^100^82^103^[ADD] if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^98^^^^^82^103^[REPLACE] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^Visibility visibility = info.isConstructor (  ) ;^97^^^^^82^103^[REPLACE] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if   (  isPrivate  (  qualifiedName  )    )   {  ;^98^^^^^82^103^[REPLACE] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^98^99^100^^^82^103^[ADD] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^[REPLACE] String qualifiedName = name.getQualifiedName (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^97^^^^^82^103^[ADD] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^Visibility visibility = info.getVisibility (  ) ;ctors.put ( qualifiedName, name ) ;^96^97^98^99^100^82^103^[ADD] if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors .get ( qualifiedName )  ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
