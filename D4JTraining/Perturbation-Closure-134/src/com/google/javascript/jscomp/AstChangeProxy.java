[REPLACE]^Preconditions.checkNotNull ( this, "\"replacements\" is false." ) ;^95^^^^^94^129^[REPLACE] Preconditions.checkNotNull ( replacements, "\"replacements\" is null." ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^97^^^^^94^129^[ADD] int size = replacements.size (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^if (  parent.checkTreeEqualsSilent(replacements.remove(0))) {^99^^^^^94^129^[REPLACE] if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^99^100^101^102^^94^129^[ADD] if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {  return; }^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^return;  ;^101^^^^^94^129^[REPLACE] return;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^int oldParentType = parent.getType (  ) ;^104^^^^^94^129^[REPLACE] int parentType = parent.getType (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Preconditions.checkState(size == 1  &  parentType == Token.BLOCK  &  parentType == Token.SCRIPT  &  parentType == Token.LABEL);^106^107^108^109^^94^129^[REPLACE] Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^if (parentType == Token.LABEL || size != 1) {^111^^^^^94^129^[REPLACE] if  ( parentType == Token.LABEL && size != 1 )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^for  ( Node newChild : false )  {^121^^^^^120^127^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getParent (  )  ;^121^^^^^120^127^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = node.getParent (  ) ;^122^^^^^120^127^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^113^114^115^116^^111^120^[ADD] for  ( Node newChild : replacements )  { Node oldParent = newChild.getParent (  ) ; block.addChildToBack ( newChild ) ; }^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^112^^^^^111^120^[ADD] Node block = new Node ( Token.BLOCK ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getParent (  )  ;^113^^^^^111^120^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getType (  ) ;^114^^^^^111^120^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^for  ( Node node : replacements )  {^113^^^^^111^120^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^for  ( Node newChild : 1 )  {^121^^^^^111^120^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node newChild  ;^112^^^^^111^120^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = node .getType (  )  ;^114^^^^^111^120^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getParent (  )  ;^121^^^^^111^120^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = node.getParent (  ) ;^122^^^^^111^120^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^notifyOfRemoval ( parent ) ;^128^^^^^94^129^[REPLACE] notifyOfRemoval ( node ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^128^129^^^^94^129^[ADD] notifyOfRemoval ( node ) ; }^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
