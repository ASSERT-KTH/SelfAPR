[REPLACE]^private  boolean generatePseudoNames;^53^^^^^^^[REPLACE] private final boolean generatePseudoNames;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private  VariableMap prevUsedPropertyMap;^56^^^^^^^[REPLACE] private final VariableMap prevUsedPropertyMap;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private final List<Node> stringNodesToRename ;^58^^^^^^^[REPLACE] private final List<Node> stringNodesToRename = new ArrayList<Node> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private  Map<Node, Node> callNodeToParentMap = new HashMap<Node, Node> (  ) ;^59^60^^^^59^60^[REPLACE] private final Map<Node, Node> callNodeToParentMap = new HashMap<Node, Node> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private  char[] reservedCharacters;^61^^^^^^^[REPLACE] private final char[] reservedCharacters;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private final Map<String, Property> propertyMap ;^64^65^^^^64^65^[REPLACE] private final Map<String, Property> propertyMap = new HashMap<String, Property> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private final Set<String> externedNames  = null ;^68^69^^^^68^69^[REPLACE] private final Set<String> externedNames = new HashSet<String> ( Arrays.asList ( "prototype" )  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private final Set<String> quotedNames ;^72^^^^^^^[REPLACE] private final Set<String> quotedNames = new HashSet<String> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private static final Comparator<Property> FREQUENCY_COMPARATOR ;^78^79^^^^78^86^[REPLACE] private static final Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^static final  char  RENAME_PROPERTY_FUNCTION_NAME = "JSCompiler_renameProperty";^96^97^^^^96^97^[REPLACE] static final String RENAME_PROPERTY_FUNCTION_NAME = "JSCompiler_renameProperty";^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^static  DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^99^100^101^102^^99^102^[REPLACE] static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^104^105^106^107^^104^107^[REPLACE] static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^final  double  oldName;^460^^^^^^^[REPLACE] final String oldName;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^CompilerInput input;^461^^^^^^^[REPLACE] final CompilerInput input;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^this ( compiler, generatePseudoNames, false, false ) ;^118^^^^^116^119^[REPLACE] this ( compiler, generatePseudoNames, null, null ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean generatePseudoNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[ADD]^^118^^^^^116^119^[ADD] this ( compiler, generatePseudoNames, null, null ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean generatePseudoNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^this ( compiler, generatePseudoNames, prevUsedPropertyMap, this ) ;^132^^^^^130^133^[REPLACE] this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[METHOD] <init> [TYPE] VariableMap) [PARAMETER] AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^this.compiler =  null;^150^^^^^146^154^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] VariableMap,char[]) [PARAMETER] AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^this.generatePseudoNames =  true;^151^^^^^146^154^[REPLACE] this.generatePseudoNames = generatePseudoNames;^[METHOD] <init> [TYPE] VariableMap,char[]) [PARAMETER] AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^this.prevUsedPropertyMap =  null;^152^^^^^146^154^[REPLACE] this.prevUsedPropertyMap = prevUsedPropertyMap;^[METHOD] <init> [TYPE] VariableMap,char[]) [PARAMETER] AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^this.reservedCharacters =  null;^153^^^^^146^154^[REPLACE] this.reservedCharacters = reservedCharacters;^[METHOD] <init> [TYPE] VariableMap,char[]) [PARAMETER] AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^this.oldName =  oldName;^466^^^^^465^468^[REPLACE] this.oldName = name;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[ADD]^^466^^^^^465^468^[ADD] this.oldName = name;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^this.input =  null;^467^^^^^465^468^[REPLACE] this.input = input;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[ADD]^^467^^^^^465^468^[ADD] this.input = input;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap 
[REPLACE]^if  ( p1.numOccurrences  ==  p2.numOccurrences )  {^81^^^^^80^85^[REPLACE] if  ( p1.numOccurrences != p2.numOccurrences )  {^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p1  p2 
[ADD]^return p2.numOccurrences - p1.numOccurrences;^81^82^83^^^80^85^[ADD] if  ( p1.numOccurrences != p2.numOccurrences )  { return p2.numOccurrences - p1.numOccurrences; }^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p1  p2 
[REPLACE]^return p2.numOccurrences  &  p1.numOccurrences;^82^^^^^80^85^[REPLACE] return p2.numOccurrences - p1.numOccurrences;^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p1  p2 
[REPLACE]^returnnumOccurrences - p1.numOccurrences;^82^^^^^80^85^[REPLACE] return p2.numOccurrences - p1.numOccurrences;^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p1  p2 
[REPLACE]^return p1.oldName.equals ( p2.oldName ) ;^84^^^^^80^85^[REPLACE] return p1.oldName.compareTo ( p2.oldName ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  quotedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p1  p2 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new ProcessExterns (  )  ) ;^160^^^^^159^219^[REPLACE] NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new ProcessProperties (  )  ) ;^161^^^^^159^219^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^161^^^^^159^219^[ADD] NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Set<String> reservedNames = new HashSet<String> ( externedNames .contains ( this )   %  2 + quotedNames^163^164^^^^159^219^[REPLACE] Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reservedNames.contains ( externedNames ) ;^165^^^^^159^219^[REPLACE] reservedNames.addAll ( externedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reservedNames.contains ( quotedNames ) ;^166^^^^^159^219^[REPLACE] reservedNames.addAll ( quotedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( prevUsedPropertyMap == null )  {^170^^^^^159^219^[REPLACE] if  ( prevUsedPropertyMap != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reusePropertyNames ( null, propertyMap.values (  )  ) ;^171^^^^^159^219^[REPLACE] reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reusePropertyNames ( reservedNames, propertyMap.keySet (  )  ) ;^171^^^^^159^219^[REPLACE] reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^171^^^^^159^219^[ADD] reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^174^^^^^159^219^[REPLACE] compiler.addToDebugLog ( "JS property assignments:" ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p = propertyMap.get ( oldName ) ;^177^^^^^159^219^[REPLACE] Set<Property> propsByFreq = new TreeSet<Property> ( FREQUENCY_COMPARATOR ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^propsByFreq.addAll ( propertyMap .get ( false )   ) ;^178^^^^^159^219^[REPLACE] propsByFreq.addAll ( propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^178^179^^^^159^219^[ADD] propsByFreq.addAll ( propertyMap.values (  )  ) ; generateNames ( propsByFreq, reservedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^propsByFreq.addAll ( propertyMap.keySet (  )  ) ;^178^^^^^159^219^[REPLACE] propsByFreq.addAll ( propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REMOVE]^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^178^^^^^159^219^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^generateNames ( true, reservedNames ) ;^179^^^^^159^219^[REPLACE] generateNames ( propsByFreq, reservedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^boolean changed = true;^182^^^^^159^219^[REPLACE] boolean changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  (  p.newName != null )  {^186^^^^^159^219^[REPLACE] if  ( p != null && p.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^changed = changed ;^189^^^^^159^219^[REPLACE] changed = changed || !p.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^189^^^^^159^219^[ADD] changed = changed || !p.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^for  ( Property prop : allProps )  {^183^^^^^159^219^[REPLACE] for  ( Node n : stringNodesToRename )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^String oldName = parent.getString (  ) ;^184^^^^^159^219^[REPLACE] String oldName = n.getString (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p = propertyMap.get ( replacement ) ;^185^^^^^159^219^[REPLACE] Property p = propertyMap.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^185^^^^^159^219^[ADD] Property p = propertyMap.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p == null && p.newName != null )  {^201^^^^^159^219^[REPLACE] if  ( p != null && p.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^201^202^203^204^205^159^219^[ADD] if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; replacement = p.newName; } else { replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^replacement = p.newName; ;^205^^^^^201^206^[REPLACE] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^205^^^^^201^206^[ADD] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^replacement = oldName; ;^203^^^^^159^219^[REPLACE] replacement = p.newName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( sb.length (  )  - 2 > 0 )  {^207^^^^^159^219^[REPLACE] if  ( sb.length (  )  > 0 )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^sb .StringBuilder (  )  ;^208^^^^^159^219^[REPLACE] sb.append ( '.' ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REMOVE]^maybeMarkCandidate ( key, t ) ;^208^^^^^159^219^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^203^^^^^159^219^[ADD] replacement = p.newName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^replacement = p.newName; ;^205^^^^^159^219^[REPLACE] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^205^^^^^159^219^[ADD] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^changed = false;^213^^^^^159^219^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^for  ( Node n : stringNodesToRename )  { String oldName = n.getString (  ) ;^194^^^^^159^219^[REPLACE] for  ( Node n : callNodeToParentMap.keySet (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node parent = callNodeToParentMap.get ( parent ) ;^195^^^^^159^219^[REPLACE] Node parent = callNodeToParentMap.get ( n ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node firstArg = parent.getFirstChild (  ) .getNext (  ) ;^196^^^^^159^219^[REPLACE] Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^String name = n.getString (  ) ;^197^^^^^159^219^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^198^^^^^159^219^[REPLACE] for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p = propertyMap .keySet (  )  ;^199^^^^^159^219^[REPLACE] Property p = propertyMap.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^199^200^^^^159^219^[ADD] Property p = propertyMap.get ( oldName ) ; String replacement;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p = propertyMap.get ( oldName ) ;^200^^^^^159^219^[REPLACE] String replacement;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( true )  {^216^^^^^159^219^[REPLACE] if  ( changed )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^217^^^^^159^219^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  (generatePseudoNames && prevName == null )  {^234^^^^^228^244^[REPLACE] if  ( !generatePseudoNames && prevName != null )  {^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^if  ( this .size (  )   )  {^236^^^^^228^244^[REPLACE] if  ( reservedNames.contains ( prevName )  )  {^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^prop.newName =  prevName;^240^^^^^228^244^[REPLACE] prop.newName = prevName;^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^if  ( reservedNames .size (  )   )  {^236^^^^^228^244^[REPLACE] if  ( reservedNames.contains ( prevName )  )  {^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^Property p = propertyMap.get ( oldName ) ;^230^^^^^228^244^[REPLACE] for  ( Property prop : allProps )  {^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^String prevName = prevUsedPropertyMap.VariableMap ( prop.oldName ) ;^233^^^^^228^244^[REPLACE] String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^NameGenerator nameGen = new NameGenerator ( null, "", reservedCharacters ) ;^254^255^^^^253^270^[REPLACE] NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^254^255^^^^253^270^[ADD] NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^257^^^^^253^270^[REPLACE] if  ( generatePseudoNames )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p.newName != null )  {^261^^^^^253^270^[REPLACE] if  ( p.newName == null )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^p.newName =  nameGen.generateNextName (  ) ;^262^^^^^253^270^[REPLACE] p.newName = nameGen.generateNextName (  ) ;^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^p.newName = "$"  ||  p.oldName  ||  "$";^258^^^^^253^270^[REPLACE] p.newName = "$" + p.oldName + "$";^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^262^^^^^253^270^[ADD] p.newName = nameGen.generateNextName (  ) ;^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^this.oldName = name; ;^258^^^^^253^270^[REPLACE] p.newName = "$" + p.oldName + "$";^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p = propertyMap.get ( oldName ) ;^256^^^^^253^270^[REPLACE] for  ( Property p : props )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^256^257^258^259^^253^270^[ADD] for  ( Property p : props )  { if  ( generatePseudoNames )  { p.newName = "$" + p.oldName + "$"; } else {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^String name = n.getString (  ) ;^278^^^^^277^285^[REPLACE] Map<String, String> map = new HashMap<String, String> (  ) ;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property p 
[REPLACE]^if  (replacement == null )  {^280^^^^^277^285^[REPLACE] if  ( p.newName != null )  {^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property p 
[REPLACE]^map .get ( false )  ;^281^^^^^277^285^[REPLACE] map.put ( p.oldName, p.newName ) ;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p = propertyMap.get ( oldName ) ;^279^^^^^277^285^[REPLACE] for  ( Property p : propertyMap.values (  )  )  {^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property p 
[REPLACE]^return new VariableMap ( this ) ;^284^^^^^277^285^[REPLACE] return new VariableMap ( map ) ;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( dest .getString (  )    !=  Token.STRING )  {^299^^^^^295^313^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^[REPLACE] externedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REMOVE]^if  ( !externedNames.contains ( name )  )  { stringNodesToRename.add ( n ) ;^300^^^^^295^313^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( child .getString (  )    &&  Token.STRING )  {^307^^^^^295^313^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^externedNames.add ( child.getParent (  )  ) ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^for  ( Node child = n.getFirstChild (  ) ; child != null;^304^^^^^295^313^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( child.getType (  )   !=  Token.STRING )  {^307^^^^^295^313^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^externedNames.addAll ( child.getString (  )  ) ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^key = key.getNext (  ) .getNext (  )  )  {  ;^306^^^^^295^313^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^298^^^^^295^313^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^for  ( Node child = n.getLastChild (  ) ;^304^^^^^295^313^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( propNode.setString (  )   &&  Token.STRING )  {^329^^^^^325^396^[REPLACE] if  ( propNode.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^330^^^^^325^396^[REPLACE] maybeMarkCandidate ( propNode, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^330^^^^^325^396^[ADD] maybeMarkCandidate ( propNode, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^340^^^^^325^396^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^340^341^342^343^^325^396^[ADD] if  ( key.getType (  )  == Token.STRING )  { if  ( !key.isQuotedString (  )  )  { maybeMarkCandidate ( key, t ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^341^^^^^325^396^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( parent .setString ( RENAME_PROPERTY_FUNCTION_NAME )   ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( key .setString ( oldName )   ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^346^^^^^341^347^[ADD] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^sb.append ( '.' ) ;^342^^^^^325^396^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !key.setString (  )  )  {^341^^^^^325^396^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( parent.getParent (  )  ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^342^^^^^325^396^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  (  child.getType (  )  != Token.STRING )  {^356^^^^^325^396^[REPLACE] if  ( child != null && child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^quotedNames.add ( child.getString (  )  ) ;^356^357^358^^^325^396^[ADD] if  ( child != null && child.getType (  )  == Token.STRING )  { quotedNames.add ( child.getString (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( child.getParent (  )  ) ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  (  RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^325^396^[REPLACE] if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^364^368^[REPLACE] callNodeToParentMap.put ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^366^367^^^^364^368^[ADD] callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^maybeMarkCandidate ( key, t ) ;^367^^^^^364^368^[REPLACE] countCallCandidates ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^373^^^^^325^396^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^}  else {^383^384^^^^325^396^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( propNode.getType (  )   &&  Token.VAR )  {^386^^^^^383^393^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^varNode .getParent (  )  ;^389^^^^^383^393^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^varNode.detachFromParent (  ) ;^388^389^390^^^383^393^[ADD] if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^varNode.getParent (  ) ;^389^^^^^383^393^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^389^^^^^383^393^[ADD] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node varNode = varNode.getParent (  ) ;^385^^^^^383^393^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.getType (  )   !=  Token.VAR )  {^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !varNode.setString (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^varNode.getParent (  ) ;^389^^^^^325^396^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^389^^^^^325^396^[ADD] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^varNode .getParent (  )  ;^389^^^^^325^396^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node varNode = parent.getString (  ) ;^385^^^^^325^396^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^385^^^^^325^396^[ADD] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( varNodeame )  )  {^375^^^^^325^396^[REPLACE] if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( varNode )  )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^parent.detachFromParent (  ) ;parent.removeChild ( n ) ;^376^377^378^379^380^325^396^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent .replaceChild ( parent )  ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent.getParent (  ) ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^377^^^^^325^396^[ADD] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent.replaceChild ( n ) ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^String varNodeame = n.getLastChild (  ) .getString (  ) ;^374^^^^^325^396^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent.replaceChild ( varNode ) ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent .replaceChild ( n )  ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.getType (  )   !=  Token.VAR )  {^386^^^^^383^393^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !varNode.setString (  )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^388^389^390^^^383^393^[ADD] if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node varNode = varNode.getString (  ) ;^385^^^^^383^393^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.getType (  )   ||  Token.VAR )  {^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^for  ( Node parent = n.getFirstChild (  ) ; key == this;^336^^^^^325^396^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^336^337^^^^325^396^[ADD] for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^340^^^^^336^349^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^340^341^342^343^^336^349^[ADD] if  ( key.getType (  )  == Token.STRING )  { if  ( !key.isQuotedString (  )  )  { maybeMarkCandidate ( key, t ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !key .setString ( RENAME_PROPERTY_FUNCTION_NAME )   )  {^341^^^^^336^349^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames .addAll ( false )  ;^346^^^^^336^349^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( key.getParent (  )  ) ;^346^^^^^336^349^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^342^^^^^336^349^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^341^^^^^336^349^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^maybeMarkCandidate ( key, t ) ;^341^342^343^^^336^349^[ADD] if  ( !key.isQuotedString (  )  )  { maybeMarkCandidate ( key, t ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^336^349^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( parent .setString ( replacement )   ) ;^346^^^^^336^349^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^sb.append ( '.' ) ;^342^^^^^336^349^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^key =  parent.getNext (  ) .getNext (  )  )  {^337^^^^^325^396^[REPLACE] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node propNode = varNode.getFirstChild (  ) .getNext (  ) ;^328^^^^^325^396^[REPLACE] Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^for  ( Node key = varNode.getFirstChild (  ) ; key != null;^336^^^^^325^396^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node child = n .getFirstChild (  )  ;^355^^^^^325^396^[REPLACE] Node child = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^355^^^^^325^396^[ADD] Node child = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node fnName = varNode.getLastChild (  ) ;^363^^^^^325^396^[REPLACE] Node fnName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^363^^^^^325^396^[ADD] Node fnName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^String varNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^325^396^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node varNode = varNode.getParent (  ) ;^385^^^^^325^396^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^String name = n .setString ( prevName )  ;^406^^^^^405^411^[REPLACE] String name = n.getString (  ) ;^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^406^^^^^405^411^[ADD] String name = n.getString (  ) ;^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !externedNames.addAll ( name )  )  {^407^^^^^405^411^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^stringNodesToRename .addAll ( this )  ;^408^^^^^405^411^[REPLACE] stringNodesToRename.add ( n ) ;^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^countPropertyOccurrence ( replacement, t ) ;^409^^^^^405^411^[REPLACE] countPropertyOccurrence ( name, t ) ;^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node firstArg = callNode.getLastChild (  ) .getNext (  ) ;^421^^^^^420^436^[REPLACE] Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^421^^^^^420^436^[ADD] Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( firstArg.getType (  )   ==  Token.STRING )  {^422^^^^^420^436^[REPLACE] if  ( firstArg.getType (  )  != Token.STRING )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^422^423^424^425^^420^436^[ADD] if  ( firstArg.getType (  )  != Token.STRING )  { t.report ( callNode, BAD_CALL ) ; return; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^return p1.oldName.compareTo ( p2.oldName ) ;^424^^^^^420^436^[REPLACE] return;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !TokenStream.isJSIdentifier ( replacement )  )  {^428^^^^^420^436^[REPLACE] if  ( !TokenStream.isJSIdentifier ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^428^429^430^431^^420^436^[ADD] if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^t.traverse ( callNode, BAD_ARG, name ) ;^429^^^^^420^436^[REPLACE] t.report ( callNode, BAD_ARG, name ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !externedNames .size (  )   )  {^432^^^^^420^436^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^432^433^434^^^420^436^[ADD] if  ( !externedNames.contains ( name )  )  { countPropertyOccurrence ( name, t ) ; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^countPropertyOccurrence ( replacement, t ) ;^433^^^^^420^436^[REPLACE] countPropertyOccurrence ( name, t ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^427^^^^^420^436^[REPLACE] for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Property prop = propertyMap.get ( prevName ) ;^445^^^^^444^451^[REPLACE] Property prop = propertyMap.get ( name ) ;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property prop 
[REPLACE]^if  ( prop != false )  {^446^^^^^444^451^[REPLACE] if  ( prop == null )  {^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property prop 
[ADD]^^446^447^448^449^^444^451^[ADD] if  ( prop == null )  { prop = new Property ( name, t.getInput (  )  ) ; propertyMap.put ( name, prop ) ; }^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property prop 
[REPLACE]^prop =  new Property ( null, t.getInput (  )  ) ;^447^^^^^444^451^[REPLACE] prop = new Property ( name, t.getInput (  )  ) ;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property prop 
[ADD]^^447^448^^^^444^451^[ADD] prop = new Property ( name, t.getInput (  )  ) ; propertyMap.put ( name, prop ) ;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property prop 
[REPLACE]^prop =  new Property ( replacement, t.getInput (  )  ) ;^447^^^^^444^451^[REPLACE] prop = new Property ( name, t.getInput (  )  ) ;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap  [TYPE]  Property prop 
[REPLACE]^if  ( p1.numOccurrences  ==  p2.numOccurrences )  {^81^^^^^80^85^[REPLACE] if  ( p1.numOccurrences != p2.numOccurrences )  {^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property p1  p2 
[REPLACE]^return p2.numOccurrences -null;^82^^^^^80^85^[REPLACE] return p2.numOccurrences - p1.numOccurrences;^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property p1  p2 
[REPLACE]^return p2.numOccurrences - p1.numOccurrences;^84^^^^^80^85^[REPLACE] return p1.oldName.compareTo ( p2.oldName ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property p1 Property p2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property p1  p2 
[REPLACE]^if  ( parent.getType (  )   !=  Token.STRING )  {^299^^^^^295^313^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( dest.getType (  )  ) ;^300^^^^^295^313^[REPLACE] externedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^[REPLACE] externedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^if  ( child.getType (  )   &&  Token.STRING )  {^307^^^^^295^313^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( dest.getString (  )  ) ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( child.getType (  )  ) ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^for  ( Node child = n .getString (  )  ;^304^^^^^295^313^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[ADD]^^304^305^306^307^308^295^313^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  ) .getNext (  )  )  { if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^if  ( child.getType (  )   ||  Token.STRING )  {^307^^^^^295^313^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[ADD]^^308^^^^^295^313^[ADD] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^child =  null.getNext (  ) .getNext (  )  )  {^306^^^^^295^313^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^298^^^^^295^313^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^for  ( Node child = parent.getFirstChild (  ) ;^304^^^^^295^313^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^if  ( propNode.getType (  )   ||  Token.STRING )  {^329^^^^^325^396^[REPLACE] if  ( propNode.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^329^330^331^^^325^396^[ADD] if  ( propNode.getType (  )  == Token.STRING )  { maybeMarkCandidate ( propNode, t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( varNode, t ) ;^330^^^^^325^396^[REPLACE] maybeMarkCandidate ( propNode, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REMOVE]^parent.detachFromParent (  ) ;^330^^^^^325^396^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^340^^^^^325^396^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^341^^^^^325^396^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( key.getParent (  )  ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^346^^^^^341^347^[ADD] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^342^^^^^325^396^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^342^^^^^325^396^[ADD] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( !key.removeChild (  )  )  {^341^^^^^325^396^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( child != this ) {^356^^^^^325^396^[REPLACE] if  ( child != null && child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames .contains ( null )  ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.removeChild (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^325^396^[REPLACE] if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^364^368^[REPLACE] callNodeToParentMap.put ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^countCallCandidates ( t, n ) ;^366^367^^^^364^368^[ADD] callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( key, t ) ;^367^^^^^364^368^[REPLACE] countCallCandidates ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( propNode )  )  {^373^^^^^325^396^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^} else if  ( parent.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^325^396^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.getType (  )   ||  Token.VAR )  {^386^^^^^383^393^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( !varNode.removeChild (  )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^varNode.getParent (  ) ;^389^^^^^383^393^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^varNode .getParent (  )  ;^389^^^^^383^393^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REMOVE]^parent.detachFromParent (  ) ;^389^^^^^383^393^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node varNode = varNode.getNext (  ) ;^385^^^^^383^393^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( propNode.getType (  )   !=  Token.VAR )  {^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( !varNode.removeChild (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^varNode.detachFromParent (  ) ;^388^389^390^^^325^396^[ADD] if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^varNode.getParent (  ) ;^389^^^^^325^396^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node varNode = varNode .getNext (  )  ;^385^^^^^325^396^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^385^^^^^325^396^[ADD] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( !externedNames.contains ( name )  )  {^375^^^^^325^396^[REPLACE] if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( varNode )  )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^parent.removeChild ( varNode ) ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^379^^^^^376^380^[ADD] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^parent .getParent (  )  ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REMOVE]^if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ;^377^^^^^325^396^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^parent.getParent (  ) ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^String varNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^325^396^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^374^^^^^325^396^[ADD] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( varNodeame )  )  {^375^^^^^325^396^[REPLACE] if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^parent .getLastChild (  )  ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^}  if  (  RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^325^396^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^}   Node varNode = parent.getParent (  ) ;varNode.removeChild ( parent ) ;^383^384^385^386^387^325^396^[ADD] else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  { Node varNode = parent.getParent (  ) ; if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^389^^^^^383^393^[ADD] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node varNode = parent .getNext (  )  ;^385^^^^^383^393^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.getType (  )   &&  Token.VAR )  {^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^386^387^388^389^390^325^396^[ADD] if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^for  ( Nodeparent = n.getFirstChild (  ) ; key == true;^336^^^^^325^396^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^336^337^^^^325^396^[ADD] for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^340^^^^^336^349^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^341^^^^^336^349^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.contains ( key.getString (  )  ) ;^346^^^^^336^349^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^336^349^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^342^^^^^336^349^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( propNode, t ) ;^342^^^^^336^349^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^key =  parent.getNext (  ) .getNext (  )  )  {^337^^^^^325^396^[REPLACE] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node propNode = varNode.getFirstChild (  ) .getNext (  ) ;^328^^^^^325^396^[REPLACE] Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^for  ( Node key = varNode.getFirstChild (  ) ; key != null;^336^^^^^325^396^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node child = n .getFirstChild (  )  ;^355^^^^^325^396^[REPLACE] Node child = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node fnName = varNode.getFirstChild (  ) ;^363^^^^^325^396^[REPLACE] Node fnName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^String name = n.getParent (  ) ;^406^^^^^405^411^[REPLACE] String name = n.getString (  ) ;^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^if  ( externedNames.contains ( name )  )  {^407^^^^^405^411^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name 
[ADD]^^407^408^409^410^^405^411^[ADD] if  ( !externedNames.contains ( name )  )  { stringNodesToRename.add ( n ) ; countPropertyOccurrence ( name, t ) ; }^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^stringNodesToRename .contains ( this )  ;^408^^^^^405^411^[REPLACE] stringNodesToRename.add ( n ) ;^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( key, t ) ;^409^^^^^405^411^[REPLACE] countPropertyOccurrence ( name, t ) ;^[METHOD] maybeMarkCandidate [TYPE] void [PARAMETER] Node n NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^Node firstArg = callNode.getFirstChild (  ) .split (  ) ;^421^^^^^420^436^[REPLACE] Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[ADD]^^421^^^^^420^436^[ADD] Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^if  ( firstArg.getType (  )   ==  Token.STRING )  {^422^^^^^420^436^[REPLACE] if  ( firstArg.getType (  )  != Token.STRING )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REMOVE]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     maybeMarkCandidate ( propNode, t ) ; }^422^^^^^420^436^[REMOVE] ^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^if  ( !  name    )  {^428^^^^^420^436^[REPLACE] if  ( !TokenStream.isJSIdentifier ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[ADD]^t.report ( callNode, BAD_ARG, name ) ;continue;^428^429^430^431^^420^436^[ADD] if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^t.report ( callNode, BAD_CALL ) ;^429^^^^^420^436^[REPLACE] t.report ( callNode, BAD_ARG, name ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^if  ( externedNames.contains ( name )  )  {^432^^^^^420^436^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( key, t ) ;^433^^^^^420^436^[REPLACE] countPropertyOccurrence ( name, t ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^String name = n.getString (  ) ;^427^^^^^420^436^[REPLACE] for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^Property prop = property  name   ;^445^^^^^444^451^[REPLACE] Property prop = propertyMap.get ( name ) ;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop != null )  {^446^^^^^444^451^[REPLACE] if  ( prop == null )  {^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^prop =  new Property ( null, t.getInput (  )  ) ;^447^^^^^444^451^[REPLACE] prop = new Property ( name, t.getInput (  )  ) ;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^CompilerInput input;^461^^^^^^^[REPLACE] final CompilerInput input;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] Property   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^this.oldName =  oldName;^466^^^^^465^468^[REPLACE] this.oldName = name;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int numOccurrences 
[REPLACE]^this.input =  null;^467^^^^^465^468^[REPLACE] this.input = input;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int numOccurrences 
