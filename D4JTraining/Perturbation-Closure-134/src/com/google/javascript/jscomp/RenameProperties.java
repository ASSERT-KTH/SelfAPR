[REPLACE]^private final List<Node> stringNodesToRename  = null ;^58^^^^^^^[REPLACE] private final List<Node> stringNodesToRename = new ArrayList<Node> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private final Map<Node, Node> callNodeToParentMap  = null ;^59^60^^^^59^60^[REPLACE] private final Map<Node, Node> callNodeToParentMap = new HashMap<Node, Node> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private final Map<String, Property> propertyMap  = null ;^64^65^^^^64^65^[REPLACE] private final Map<String, Property> propertyMap = new HashMap<String, Property> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private final Set<String> externedNames ;^68^69^^^^68^69^[REPLACE] private final Set<String> externedNames = new HashSet<String> ( Arrays.asList ( "prototype" )  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private  Set<String> quotedNames = new HashSet<String> (  ) ;^72^^^^^^^[REPLACE] private final Set<String> quotedNames = new HashSet<String> (  ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^private  final Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^78^79^^^^78^86^[REPLACE] private static final Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^static final String RENAME_PROPERTY_FUNCTION_NAME  = null ;^96^97^^^^96^97^[REPLACE] static final String RENAME_PROPERTY_FUNCTION_NAME = "JSCompiler_renameProperty";^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^static final DiagnosticType BAD_CALL ;^99^100^101^102^^99^102^[REPLACE] static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^static  DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^104^105^106^107^^104^107^[REPLACE] static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^final  char  oldName;^460^^^^^^^[REPLACE] final String oldName;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^short  numOccurrences;^463^^^^^^^[REPLACE] int numOccurrences;^ [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new ProcessExterns (  )  ) ;^160^^^^^159^219^[REPLACE] NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new ProcessProperties (  )  ) ;^161^^^^^159^219^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  - 2 + quotedNames.size (  )  - 2 ) ;^163^164^^^^159^219^[REPLACE] Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reservedNames.addAll ( quotedNames )  ;^165^^^^^159^219^[REPLACE] reservedNames.addAll ( externedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^165^^^^^159^219^[ADD] reservedNames.addAll ( externedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reservedNames.contains ( quotedNames ) ;^166^^^^^159^219^[REPLACE] reservedNames.addAll ( quotedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( prevUsedPropertyMap == null )  {^170^^^^^159^219^[REPLACE] if  ( prevUsedPropertyMap != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^170^171^172^^^159^219^[ADD] if  ( prevUsedPropertyMap != null )  { reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reusePropertyNames ( true, propertyMap.keySet (  )  ) ;^171^^^^^159^219^[REPLACE] reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^reusePropertyNames ( reservedNames, propertyMap.keySet (  )  ) ;^171^^^^^159^219^[REPLACE] reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^compiler .reportCodeChange (  )  ;^174^^^^^159^219^[REPLACE] compiler.addToDebugLog ( "JS property assignments:" ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^propsByFreq.addAll ( propertyMap.values (  )  ) ;^177^178^^^^159^219^[ADD] Set<Property> propsByFreq = new TreeSet<Property> ( FREQUENCY_COMPARATOR ) ; propsByFreq.addAll ( propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^( key.getType (  )  )  ;^178^^^^^159^219^[REPLACE] propsByFreq.addAll ( propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^propsByFreq.addAll ( propertyMap.keySet (  )  ) ;^178^^^^^159^219^[REPLACE] propsByFreq.addAll ( propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^178^^^^^159^219^[ADD] propsByFreq.addAll ( propertyMap.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^generateNames ( null, reservedNames ) ;^179^^^^^159^219^[REPLACE] generateNames ( propsByFreq, reservedNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^boolean changed = true;^182^^^^^159^219^[REPLACE] boolean changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p == true && p.newName != true )  {^186^^^^^159^219^[REPLACE] if  ( p != null && p.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;n.setString ( p.newName ) ;changed = changed || !p.newName.equals ( oldName ) ;^186^187^188^189^190^159^219^[ADD] if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; n.setString ( p.newName ) ; changed = changed || !p.newName.equals ( oldName ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^changed =true ;^189^^^^^159^219^[REPLACE] changed = changed || !p.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p == null && p.newName != null )  {^186^^^^^159^219^[REPLACE] if  ( p != null && p.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^189^^^^^159^219^[ADD] changed = changed || !p.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^true = changed ;^189^^^^^159^219^[REPLACE] changed = changed || !p.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^String oldName = parent.getString (  ) ;^184^^^^^159^219^[REPLACE] String oldName = n.getString (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p  ;^185^^^^^159^219^[REPLACE] Property p = propertyMap.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^changed = changed  >=  !p.newName.equals ( oldName ) ;^189^^^^^159^219^[REPLACE] changed = changed || !p.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node child = n.getFirstChild (  )  ;^183^^^^^159^219^[REPLACE] for  ( Node n : stringNodesToRename )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^String name = n.getString (  )  ;^184^^^^^159^219^[REPLACE] String oldName = n.getString (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p == null &&true )  {^201^^^^^159^219^[REPLACE] if  ( p != null && p.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^replacement = p.newName  ;^205^^^^^201^206^[REPLACE] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^replacement = oldName  ;^203^^^^^159^219^[REPLACE] replacement = p.newName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( sb.length (  )  /  2 > 0  )  {^207^^^^^159^219^[REPLACE] if  ( sb.length (  )  > 0 )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^( key.getType (  )  )  ;^208^^^^^159^219^[REPLACE] sb.append ( '.' ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p == null && p.newName != null )  {^201^^^^^159^219^[REPLACE] if  ( p != null && p.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( sb.size (  )  > 0 )  {^207^^^^^159^219^[REPLACE] if  ( sb.length (  )  > 0 )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^198^199^200^201^202^194^214^[ADD] for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  { Property p = propertyMap.get ( oldName ) ; String replacement; if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p == true && p.newName != true )  {^201^^^^^194^214^[REPLACE] if  ( p != null && p.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^replacement = oldName  ;^203^^^^^194^214^[REPLACE] replacement = p.newName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( sb.length (  )  /  2 > 0 )  {^207^^^^^194^214^[REPLACE] if  ( sb.length (  )  > 0 )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^sb .StringBuilder (  )  ;^208^^^^^194^214^[REPLACE] sb.append ( '.' ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^replacement = p.newName  ;^205^^^^^194^214^[REPLACE] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^199^200^^^^194^214^[ADD] Property p = propertyMap.get ( oldName ) ; String replacement;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^200^^^^^194^214^[ADD] String replacement;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^205^^^^^194^214^[ADD] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^213^^^^^194^214^[ADD] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node parent = callNodeToParentMap.get ( parent ) ;^195^^^^^194^214^[REPLACE] Node parent = callNodeToParentMap.get ( n ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node firstArg = parent.getLastChild (  ) .getNext (  ) ;^196^^^^^194^214^[REPLACE] Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node child = n.getFirstChild (  )  ;^197^^^^^194^214^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^String replacement  ;^198^^^^^194^214^[REPLACE] for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Property p = propertyMap.get ( replacement ) ;^199^^^^^194^214^[REPLACE] Property p = propertyMap.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^String oldName  ;^200^^^^^194^214^[REPLACE] String replacement;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^201^202^203^204^205^194^214^[ADD] if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; replacement = p.newName; } else { replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^205^^^^^201^206^[ADD] replacement = oldName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( sb.length (  )  + 1 > 0 )  {^207^^^^^194^214^[REPLACE] if  ( sb.length (  )  > 0 )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^203^^^^^194^214^[ADD] replacement = p.newName;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^changed = false;^213^^^^^194^214^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^Node child = n.getFirstChild (  )  ;^194^^^^^194^214^[REPLACE] for  ( Node n : callNodeToParentMap.keySet (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^196^^^^^194^214^[ADD] Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( true )  {^216^^^^^159^219^[REPLACE] if  ( changed )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^( key.getType (  )  )  ;^217^^^^^159^219^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  StringBuilder sb  [TYPE]  Node externs  firstArg  n  parent  root  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  (true && prevName == null )  {^234^^^^^229^244^[REPLACE] if  ( !generatePseudoNames && prevName != null )  {^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^if  ( null.addAll ( prevName )  )  {^236^^^^^229^244^[REPLACE] if  ( reservedNames.contains ( prevName )  )  {^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^prop.newName =  prevName;^240^^^^^229^244^[REPLACE] prop.newName = prevName;^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^Property p = propertyMap.get ( oldName )  ;^230^^^^^229^244^[REPLACE] for  ( Property prop : allProps )  {^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[REPLACE]^String prevName = prevUsedPropertyMap.VariableMap ( prop.oldName ) ;^233^^^^^229^244^[REPLACE] String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[METHOD] reusePropertyNames [TYPE] void [PARAMETER] String> reservedNames Property> allProps [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  propsByFreq  quotedNames  reservedNames  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  Collection allProps  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property prop 
[ADD]^^254^255^^^^253^270^[ADD] NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if   (  RENAME_PROPERTY_FUNCTION_NAME.equals  (  name  )    )   {  ;^257^^^^^253^270^[REPLACE] if  ( generatePseudoNames )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p.newName !=replacement )  {^261^^^^^257^264^[REPLACE] if  ( p.newName == null )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^p.newName =  nameGen.generateNextName (  ) ;^262^^^^^257^264^[REPLACE] p.newName = nameGen.generateNextName (  ) ;^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^p.newName = "$"  p.oldName  "$";^258^^^^^253^270^[REPLACE] p.newName = "$" + p.oldName + "$";^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p.newName != false )  {^261^^^^^253^270^[REPLACE] if  ( p.newName == null )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^p.newName = nameGen.generateNextName (  ) ;^261^262^263^^^253^270^[ADD] if  ( p.newName == null )  { p.newName = nameGen.generateNextName (  ) ; }^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^p.newName =  nameGen.generateNextName (  ) ;^262^^^^^253^270^[REPLACE] p.newName = nameGen.generateNextName (  ) ;^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^p.newName = "$" + p.oldName + "$";^257^258^259^^^253^270^[ADD] if  ( generatePseudoNames )  { p.newName = "$" + p.oldName + "$"; } else {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  (replacement != this )  {^261^^^^^257^264^[REPLACE] if  ( p.newName == null )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( p.newName != null )  {^261^^^^^253^270^[REPLACE] if  ( p.newName == null )  {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^258^^^^^253^270^[ADD] p.newName = "$" + p.oldName + "$";^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[ADD]^^256^257^258^259^^253^270^[ADD] for  ( Property p : props )  { if  ( generatePseudoNames )  { p.newName = "$" + p.oldName + "$"; } else {^[METHOD] generateNames [TYPE] void [PARAMETER] Property> props String> reservedNames [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NameGenerator nameGen  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  propertyMap  [TYPE]  Property p 
[REPLACE]^if  ( dest.getType (  )   !=  Token.STRING )  {^299^^^^^295^313^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^299^300^301^^^295^313^[ADD] if  ( dest.getType (  )  == Token.STRING )  { externedNames.add ( dest.getString (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^[REPLACE] externedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if   (  firstArg.getType  (    )   != Token.STRING  )   {  ;^307^^^^^295^313^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^externedNames.add ( child.getParent (  )  ) ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^308^^^^^295^313^[ADD] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^externedNames.add ( child .setString ( oldName )   ) ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^child =  null.getNext (  ) .getNext (  )  )  {^306^^^^^295^313^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^298^^^^^295^313^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node firstArg = n.getFirstChild (  ) .getNext (  )  ;^304^^^^^295^313^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( propNode.getType (  )   &&  Token.STRING )  {^329^^^^^325^396^[REPLACE] if  ( propNode.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^330^^^^^325^396^[REPLACE] maybeMarkCandidate ( propNode, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( key.getType (  )   ) {^340^^^^^325^396^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^341^^^^^325^396^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( parent .setString ( replacement )   ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REMOVE]^( key.getType (  )  )  ;^346^^^^^341^347^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^342^^^^^325^396^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( key .setString ( RENAME_PROPERTY_FUNCTION_NAME )   ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  (  child.getType (  )  != Token.STRING )  {^356^^^^^325^396^[REPLACE] if  ( child != null && child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( key.getString (  )  )  ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^357^^^^^325^396^[ADD] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( fnName.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^325^396^[REPLACE] if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^callNodeToParentMap.put ( n, varNode ) ;^366^^^^^364^368^[REPLACE] callNodeToParentMap.put ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^countCallCandidates ( t, varNode ) ;^367^^^^^364^368^[REPLACE] countCallCandidates ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^367^^^^^364^368^[ADD] countCallCandidates ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if   (  RENAME_PROPERTY_FUNCTION_NAME.equals  (  name  )    )   {  ;^373^^^^^325^396^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^} else if  ( parent.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^325^396^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( propNode.getType (  )   ||  Token.VAR )  {^386^^^^^383^393^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !varNode .getLastChild (  )   )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^385^^^^^383^393^[ADD] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.getType (  )   ||  Token.VAR )  {^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^varNode.getParent (  ) ;^389^^^^^325^396^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^389^^^^^325^396^[ADD] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent.detachFromParent (  )  ;^389^^^^^325^396^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node varNode = varNode.getParent (  ) ;^385^^^^^325^396^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.compareTo ( name )  )  {^375^^^^^325^396^[REPLACE] if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( NodeUtil .isFunctionDeclaration ( key )   )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^376^377^378^379^380^325^396^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent.removeChild ( varNode ) ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^varNode.detachFromParent (  )  ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if   (  RENAME_PROPERTY_FUNCTION_NAME.equals  (  name  )    )   {  ;^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent .replaceChild ( propNode )  ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent.getParent (  ) ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^String name = n.getString (  )  ;^374^^^^^325^396^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( varNodeame )  )  {^375^^^^^325^396^[REPLACE] if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent.replaceChild ( n ) ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REMOVE]^compiler.reportCodeChange (  )  ;^379^^^^^376^380^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^parent .getParent (  )  ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^377^^^^^325^396^[ADD] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if   (  fnName.getType  (    )   == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals  (  fnName.getString  (    )    )    )   {  ;^383^384^^^^325^396^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if   (  propNode.getType  (    )   == Token.STRING  )   {  ;^386^^^^^383^393^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( varNode.getType (  )   &&  Token.VAR )  {^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !varNode.setString (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^key =  parent.getNext (  ) .getNext (  )  )  {^337^^^^^325^396^[REPLACE] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node propNode = varNode.getFirstChild (  ) .getNext (  ) ;^328^^^^^325^396^[REPLACE] Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^336^337^^^^325^396^[ADD] for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node child = n.getFirstChild (  )  ;^355^^^^^325^396^[REPLACE] Node child = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node fnName = varNode.getFirstChild (  ) ;^363^^^^^325^396^[REPLACE] Node fnName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^Node child = n.getFirstChild (  )  ;^385^^^^^325^396^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^421^^^^^420^436^[ADD] Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( firstArg.getType (  )   ==  Token.STRING )  {^422^^^^^420^436^[REPLACE] if  ( firstArg.getType (  )  != Token.STRING )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^return;  ;^424^^^^^420^436^[REPLACE] return;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !TokenStream.isJSIdentifier ( replacement )  )  {^428^^^^^420^436^[REPLACE] if  ( !TokenStream.isJSIdentifier ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^t.traverse ( callNode, BAD_ARG, name ) ;^429^^^^^420^436^[REPLACE] t.report ( callNode, BAD_ARG, name ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !externedNames.addAll ( prevName )  )  {^432^^^^^420^436^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^countPropertyOccurrence ( name, t ) ;^432^433^434^^^420^436^[ADD] if  ( !externedNames.contains ( name )  )  { countPropertyOccurrence ( name, t ) ; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^( key.getType (  )  )  ;^433^^^^^420^436^[REPLACE] countPropertyOccurrence ( name, t ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^for  ( String name : firstArg.getString (  )  .getString (  )   )  {^427^^^^^420^436^[REPLACE] for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^t.report ( callNode, BAD_ARG, name ) ;continue;^428^429^430^431^^420^436^[ADD] if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^t .report ( callNode , BAD_ARG )  ;^429^^^^^420^436^[REPLACE] t.report ( callNode, BAD_ARG, name ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^429^^^^^420^436^[ADD] t.report ( callNode, BAD_ARG, name ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if  ( !externedNames.contains ( prevName )  )  {^432^^^^^420^436^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^countPropertyOccurrence ( prevName, t ) ;^433^^^^^420^436^[REPLACE] countPropertyOccurrence ( name, t ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[ADD]^^427^428^429^430^431^420^436^[ADD] for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  { if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [TYPE]  Set externedNames  props  propsByFreq  quotedNames  reservedNames  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  [TYPE]  int numOccurrences  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  true  [TYPE]  VariableMap prevUsedPropertyMap  [TYPE]  DiagnosticType BAD_ARG  BAD_CALL  [TYPE]  List stringNodesToRename  [TYPE]  Map callNodeToParentMap  map  propertyMap 
[REPLACE]^if   (  child.getType  (    )   == Token.STRING  )   {  ;^299^^^^^295^313^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( child.getString (  )  )  ;^300^^^^^295^313^[REPLACE] externedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^[REPLACE] externedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^if  ( child.getType (  )   &&  Token.STRING )  {^307^^^^^295^313^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[ADD]^externedNames.add ( child.getString (  )  ) ;^307^308^309^^^295^313^[ADD] if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( dest.getString (  )  )  ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^externedNames.add ( child .getFirstChild (  )   ) ;^308^^^^^295^313^[REPLACE] externedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^child =  null.getNext (  ) .getNext (  )  )  {^306^^^^^295^313^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^Node child = n.getFirstChild (  )  ;^298^^^^^295^313^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^for  ( Node child = parent.getString (  ) ;^304^^^^^295^313^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExterns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent 
[REPLACE]^if  ( propNode.getType (  )   !=  Token.STRING )  {^329^^^^^325^396^[REPLACE] if  ( propNode.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^329^330^331^^^325^396^[ADD] if  ( propNode.getType (  )  == Token.STRING )  { maybeMarkCandidate ( propNode, t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( key, t )  ;^330^^^^^325^396^[REPLACE] maybeMarkCandidate ( propNode, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( key.getType (  )   ) {^340^^^^^325^396^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^340^341^342^343^^325^396^[ADD] if  ( key.getType (  )  == Token.STRING )  { if  ( !key.isQuotedString (  )  )  { maybeMarkCandidate ( key, t ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^341^^^^^325^396^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.contains ( key.getString (  )  ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( parent.getParent (  )  ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( propNode, t )  ;^342^^^^^325^396^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^child.getString (  )  ;^346^^^^^341^347^[REPLACE] quotedNames.add ( key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^maybeMarkCandidate ( parent, t ) ;^342^^^^^325^396^[REPLACE] maybeMarkCandidate ( key, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( child != null && child.getType (  )  != Token.STRING )  {^356^^^^^325^396^[REPLACE] if  ( child != null && child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( key.getString (  )  )  ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^325^396^[REPLACE] quotedNames.add ( child.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^} else if   (  parent.getType  (    )   == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals  (  parent.getString  (    )    )    )   {  ;^364^365^^^^325^396^[REPLACE] if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^364^365^366^367^368^325^396^[ADD] if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  { callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^callNodeToParentMap.put ( n, varNode ) ;^366^^^^^364^368^[REPLACE] callNodeToParentMap.put ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^( key.getType (  )  )  ;^367^^^^^364^368^[REPLACE] countCallCandidates ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if   (  RENAME_PROPERTY_FUNCTION_NAME.equals  (  name  )    )   {  ;^373^^^^^325^396^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^String name = n.getFirstChild (  ) .getString (  ) ;parent.detachFromParent (  ) ;^373^374^375^376^377^325^396^[ADD] if  ( NodeUtil.isFunctionDeclaration ( n )  )  { String name = n.getFirstChild (  ) .getString (  ) ; if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^}  else {^383^384^^^^325^396^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^}   Node varNode = parent.getParent (  ) ;varNode.removeChild ( parent ) ;^383^384^385^386^387^325^396^[ADD] else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  { Node varNode = parent.getParent (  ) ; if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.removeChild (  )   !=  Token.VAR )  {^386^^^^^383^393^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( !varNode.removeChild (  )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^385^^^^^383^393^[ADD] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.getType (  )   &&  Token.VAR )  {^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^varNode.getParent (  ) ;^389^^^^^325^396^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( !varNode.removeChild (  )  )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^388^389^390^^^325^396^[ADD] if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^varNode .getParent (  )  ;^389^^^^^325^396^[REPLACE] varNode.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node varNode = varNode.getParent (  ) ;^385^^^^^325^396^[REPLACE] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( varNodeame )  )  {^375^^^^^325^396^[REPLACE] if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if   (  RENAME_PROPERTY_FUNCTION_NAME.equals  (  name  )    )   {  ;^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^parent.removeChild ( varNode ) ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^parent .getParent (  )  ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^( key.getType (  )  )  ;^379^^^^^376^380^[REPLACE] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^parent.getParent (  ) ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^String varNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^325^396^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if   (  !externedNames.contains  (  name  )    )   {  ;^375^^^^^325^396^[REPLACE] if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( varNode )  )  {^376^^^^^325^396^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^379^^^^^376^380^[ADD] parent.removeChild ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^varNode.detachFromParent (  )  ;^377^^^^^325^396^[REPLACE] parent.detachFromParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REMOVE]^varNode.removeChild ( parent )  ;^377^^^^^325^396^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^} else if  ( parent.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^325^396^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( propNode.getType (  )   !=  Token.VAR )  {^386^^^^^383^393^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^388^^^^^383^393^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if   (  propNode.getType  (    )   == Token.STRING  )   {  ;^386^^^^^325^396^[REPLACE] if  ( varNode.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^if  ( !varNode .getLastChild (  )   )  {^388^^^^^325^396^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^key =  parent.getNext (  ) .getNext (  )  )  {^337^^^^^325^396^[REPLACE] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node key = n.getFirstChild (  )  ;^328^^^^^325^396^[REPLACE] Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^for  ( Node key = varNode.getFirstChild (  ) ; key != null;^336^^^^^325^396^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node child = varNode.getLastChild (  ) ;^355^^^^^325^396^[REPLACE] Node child = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node key = n.getFirstChild (  )  ;^363^^^^^325^396^[REPLACE] Node fnName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[ADD]^^385^^^^^325^396^[ADD] Node varNode = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnName  key  n  parent  propNode  varNode  [TYPE]  String name 
[REPLACE]^Node firstArg = callNode.getFirstChild (  ) .split (  ) ;^421^^^^^420^436^[REPLACE] Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^if  ( firstArg.getType (  )   ==  Token.STRING )  {^422^^^^^420^436^[REPLACE] if  ( firstArg.getType (  )  != Token.STRING )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^return;  ;^424^^^^^420^436^[REPLACE] return;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^if  ( TokenStream.isJSIdentifier ( name )  )  {^428^^^^^420^436^[REPLACE] if  ( !TokenStream.isJSIdentifier ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[ADD]^t.report ( callNode, BAD_ARG, name ) ;continue;^428^429^430^431^^420^436^[ADD] if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^t.report ( callNode, BAD_CALL )  ;^429^^^^^420^436^[REPLACE] t.report ( callNode, BAD_ARG, name ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^if  ( !externedNames .add ( true )   )  {^432^^^^^420^436^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^( key.getType (  )  )  ;^433^^^^^420^436^[REPLACE] countPropertyOccurrence ( name, t ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^for  ( String name : firstArg .getParent (  )  .split ( "[.]" )  )  {^427^^^^^420^436^[REPLACE] for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^t .report ( firstArg , null )  ;^429^^^^^420^436^[REPLACE] t.report ( callNode, BAD_ARG, name ) ;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[ADD]^^429^430^^^^420^436^[ADD] t.report ( callNode, BAD_ARG, name ) ; continue;^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^if   (  RENAME_PROPERTY_FUNCTION_NAME.equals  (  name  )    )   {  ;^432^^^^^420^436^[REPLACE] if  ( !externedNames.contains ( name )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^Node key = n.getFirstChild (  )  ;^427^^^^^420^436^[REPLACE] for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[METHOD] countCallCandidates [TYPE] void [PARAMETER] NodeTraversal t Node callNode [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstArg  [TYPE]  String name 
[REPLACE]^final  long  oldName;^460^^^^^^^[REPLACE] final String oldName;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] Property   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^double  newName;^462^^^^^^^[REPLACE] String newName;^[METHOD] countPropertyOccurrence [TYPE] void [PARAMETER] String name NodeTraversal t [CLASS] Property   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  String name  [TYPE]  Property prop 
