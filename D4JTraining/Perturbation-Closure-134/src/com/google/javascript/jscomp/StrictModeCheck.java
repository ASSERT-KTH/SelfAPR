[REPLACE]^static  DiagnosticType UNKNOWN_VARIABLE = DiagnosticType.error ( "JSC_UNKNOWN_VARIABLE", "unknown variable {0}" ) ;^40^41^^^^40^41^[REPLACE] static final DiagnosticType UNKNOWN_VARIABLE = DiagnosticType.error ( "JSC_UNKNOWN_VARIABLE", "unknown variable {0}" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType WITH_DISALLOWED = DiagnosticType.error ( "JSC_WITH_DISALLOWED", "\"with\" cannot be used in ES5 strict mode" ) ;^43^44^^^^43^44^[REPLACE] static final DiagnosticType WITH_DISALLOWED = DiagnosticType.error ( "JSC_WITH_DISALLOWED", "\"with\" cannot be used in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static final DiagnosticType EVAL_USE  = null ;^46^47^^^^46^47^[REPLACE] static final DiagnosticType EVAL_USE = DiagnosticType.error ( "JSC_EVAL_USE", "\"eval\" cannot be used in Caja" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType EVAL_DECLARATION = DiagnosticType.error ( "JSC_EVAL_DECLARATION", "\"eval\" cannot be redeclared in ES5 strict mode" ) ;^49^50^51^^^49^51^[REPLACE] static final DiagnosticType EVAL_DECLARATION = DiagnosticType.error ( "JSC_EVAL_DECLARATION", "\"eval\" cannot be redeclared in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType EVAL_ASSIGNMENT = DiagnosticType.error ( "JSC_EVAL_ASSIGNMENT", "the \"eval\" object cannot be reassigned in ES5 strict mode" ) ;^53^54^55^^^53^55^[REPLACE] static final DiagnosticType EVAL_ASSIGNMENT = DiagnosticType.error ( "JSC_EVAL_ASSIGNMENT", "the \"eval\" object cannot be reassigned in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.error ( "JSC_ARGUMENTS_DECLARATION", "\"arguments\" cannot be redeclared in ES5 strict mode" ) ;^57^58^59^^^57^59^[REPLACE] static final DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.error ( "JSC_ARGUMENTS_DECLARATION", "\"arguments\" cannot be redeclared in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static final DiagnosticType ARGUMENTS_ASSIGNMENT  = null ;^61^62^63^^^61^63^[REPLACE] static final DiagnosticType ARGUMENTS_ASSIGNMENT = DiagnosticType.error ( "JSC_ARGUMENTS_ASSIGNMENT", "the \"arguments\" object cannot be reassigned in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType DELETE_VARIABLE = DiagnosticType.error ( "JSC_DELETE_VARIABLE", "variables, functions, and arguments cannot be deleted in " + "ES5 strict mode" ) ;^65^66^67^68^^65^68^[REPLACE] static final DiagnosticType DELETE_VARIABLE = DiagnosticType.error ( "JSC_DELETE_VARIABLE", "variables, functions, and arguments cannot be deleted in " + "ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType ILLEGAL_NAME = DiagnosticType.error ( "JSC_ILLEGAL_NAME", "identifiers ending in '__' cannot be used in Caja" ) ;^70^71^72^^^70^72^[REPLACE] static final DiagnosticType ILLEGAL_NAME = DiagnosticType.error ( "JSC_ILLEGAL_NAME", "identifiers ending in '__' cannot be used in Caja" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^private  AbstractCompiler compiler;^74^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^private  boolean noVarCheck;^75^^^^^^^[REPLACE] private final boolean noVarCheck;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^} else if   (  n.getType  (    )   == Token.NAME  )   {  ;^96^^^^^95^111^[REPLACE] if  ( n.getType (  )  == Token.WITH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if   (  n.getType  (    )   == Token.LABEL  )   {  ;^98^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  else {^102^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.DELPROP )  {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  (   Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkObjectLiteral ( t, n ) ;checkLabel ( t, n ) ;^106^107^108^109^110^95^111^[ADD] else if  ( n.getType (  )  == Token.OBJECTLIT )  { checkObjectLiteral ( t, n ) ; } else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if   (  n.getType  (    )   == Token.DELPROP  )   {  ;^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n )  ;^109^^^^^95^111^[REPLACE] checkLabel ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkObjectLiteral ( t, parent ) ;^107^^^^^95^111^[REPLACE] checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^107^^^^^95^111^[ADD] checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  else {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkLabel ( t, parent ) ;^109^^^^^95^111^[REPLACE] checkLabel ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n )  ;^105^^^^^95^111^[REPLACE] checkDelete ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   ||  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n )  ;^103^^^^^95^111^[REPLACE] checkAssignment ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^103^^^^^95^111^[ADD] checkAssignment ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  else {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkLabel ( t, n ) ;^108^109^110^^^95^111^[ADD] else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^109^^^^^95^111^[ADD] checkLabel ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  else {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkLabel ( t, n ) ;^106^107^108^109^110^95^111^[ADD] else if  ( n.getType (  )  == Token.OBJECTLIT )  { checkObjectLiteral ( t, n ) ; } else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( parent.getType (  )   ||  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}^108^109^110^^^95^111^[ADD] else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^99^^^^^95^111^[REPLACE] if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkLabel ( t, n )  ;^100^^^^^95^111^[REPLACE] checkNameUse ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^if  (  !isDeclaration ( n )  )  {^99^^^^^95^111^[REPLACE] if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, parent ) ;^100^^^^^95^111^[REPLACE] checkNameUse ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^100^^^^^95^111^[ADD] checkNameUse ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if   (  n.getType  (    )   == Token.LABEL  )   {  ;^102^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   ||  Token.DELPROP )  {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   ) {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^checkNameUse ( t, n )  ;^109^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkDelete ( t, parent ) ;^105^^^^^95^111^[REPLACE] checkDelete ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if   (  n.getType  (    )   == Token.LABEL  )   {  ;^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   ||  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ) {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   &&  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n )  ;^107^^^^^95^111^[REPLACE] checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^t.traverseRoots ( n, WITH_DISALLOWED ) ;^97^^^^^95^111^[REPLACE] t.report ( n, WITH_DISALLOWED ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^97^^^^^95^111^[ADD] t.report ( n, WITH_DISALLOWED ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.NAME )  {^98^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( parent.getType (  )   !=  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^checkNameUse ( t, n )  ;^103^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ) {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^checkNameUse ( t, n )  ;^107^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  (   Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.isLabelName ( parent )  ) {^99^^^^^95^111^[REPLACE] if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   ) {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   &&  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkAssignment ( t, parent ) ;^103^^^^^95^111^[REPLACE] checkAssignment ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.DELPROP )  {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( OBJECTLIT )  )  {     checkObjectLiteral ( t, n ) ; }else     if  (  ( n.getType (  )  )  ==  ( LABEL )  )  {         checkLabel ( t, n ) ;     }^108^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ) {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^Var v = t.getScope (  ) .getVar ( n.getFirstChild (  ) .getString (  )  )  ;^134^^^^^133^150^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( v != null )  {^135^^^^^133^150^[REPLACE] if  ( v == null )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( noVarCheck )  {^138^^^^^133^150^[REPLACE] if  ( !noVarCheck )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.traverse ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^139^^^^^133^150^[REPLACE] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^n.getParent (  )  ;^139^^^^^133^150^[REPLACE] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REMOVE]^if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {     if  ( noCajaChecks )  {         t.report ( n, EVAL_ASSIGNMENT ) ;     } }^138^^^^^133^150^[REMOVE] ^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.report ( n, EVAL_USE )  ;^139^^^^^133^150^[REPLACE] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^^139^^^^^133^150^[ADD] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.report ( n, UNKNOWN_VARIABLE, n.getParent (  )  ) ;^139^^^^^133^150^[REPLACE] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if   (  !noVarCheck  )   {  ;^143^^^^^133^150^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if   (  !NodeUtil.isLabelName  (  n  )   && !isDeclaration  (  n  )    )   {  ;^144^^^^^133^150^[REPLACE] if  ( "eval".equals ( n.getString (  )  )  )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REMOVE]^if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {     if  ( noCajaChecks )  {         t.report ( n, EVAL_ASSIGNMENT ) ;     } }^144^^^^^133^150^[REMOVE] ^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if   (  key.getString  (    )  .endsWith  (  "__"  )    )   {  ;^146^^^^^133^150^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, ILLEGAL_NAME ) ;^147^^^^^133^150^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REMOVE]^t.report ( n.getFirstChild (  ) , ILLEGAL_NAME )  ;^147^^^^^133^150^[REMOVE] ^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.report ( n.getFirstChild (  ) , ILLEGAL_NAME )  ;^145^^^^^133^150^[REPLACE] t.report ( n, EVAL_USE ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^t.report ( n, EVAL_USE ) ;t.report ( n, ILLEGAL_NAME ) ;^144^145^146^147^148^133^150^[ADD] if  ( "eval".equals ( n.getString (  )  )  )  { t.report ( n, EVAL_USE ) ; } else if  ( n.getString (  ) .endsWith ( "__" )  )  { t.report ( n, ILLEGAL_NAME ) ; }^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^}  else {^146^^^^^133^150^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
