[REPLACE]^private Deque<Renamer> nameStack  = null ;^42^^^^^^^[REPLACE] private Deque<Renamer> nameStack = new ArrayDeque<Renamer> (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private Map<Var, String> nameMap ;^234^^^^^^^[REPLACE] private Map<Var, String> nameMap = Maps.newHashMap (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private final Map<String, String> declarations ;^300^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private  boolean global;^301^^^^^^^[REPLACE] private final boolean global;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private final Map<String, String> declarations  = null ;^380^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private  boolean removeConstness;^383^^^^^^^[REPLACE] private final boolean removeConstness;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^Node declarationRoot = t .getScope (  )  ;^59^^^^^58^89^[REPLACE] Node declarationRoot = t.getScopeRoot (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer names  ;^60^^^^^58^89^[REPLACE] Renamer renamer;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if   (  name.isEmpty  (    )    )   {  ;^61^^^^^58^89^[REPLACE] if  ( nameStack.isEmpty (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer ;^70^^^^^61^71^[REPLACE] renamer = nameStack.peek (  ) .forChildScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer  =  renamer ;^68^^^^^58^89^[REPLACE] renamer = rootRenamer;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer  =  renamer ;^70^^^^^58^89^[REPLACE] renamer = nameStack.peek (  ) .forChildScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( declarationRoot.getType (  )   &&  Token.FUNCTION )  {^73^^^^^58^89^[REPLACE] if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^findDeclaredNames ( functionBody, false, renamer ) ;^86^^^^^73^87^[REPLACE] findDeclaredNames ( declarationRoot, null, renamer ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c =  fnParams.getFirstChild (  ) ; functionBody !^76^^^^^58^89^[REPLACE] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node functionBody = declarationRoot.getLastChild (  )  ;^75^^^^^58^89^[REPLACE] Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = fnParams.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^58^89^[REPLACE] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String name = functionBody .setString ( namePrefix )  ;^77^^^^^58^89^[REPLACE] String name = c.getString (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node functionBody = functionBody.getLastChild (  ) ;^82^^^^^58^89^[REPLACE] Node functionBody = declarationRoot.getLastChild (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^76^77^78^79^^58^89^[ADD] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { String name = c.getString (  ) ; renamer.addDeclaredName ( name ) ; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^75^^^^^58^89^[ADD] Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String name = functionBody.getString (  ) ;^77^^^^^58^89^[REPLACE] String name = c.getString (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^82^^^^^58^89^[ADD] Node functionBody = declarationRoot.getLastChild (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^nameStack.push ( rootRenamer ) ;^88^^^^^58^89^[REPLACE] nameStack.push ( renamer ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( name == null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^99^132^[REPLACE] if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer.addDeclaredName ( n.getString (  )  )  ;^112^^^^^110^113^[REPLACE] renamer.addDeclaredName ( name ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^112^^^^^110^113^[ADD] renamer.addDeclaredName ( name ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^106^107^^109^110^99^132^[ADD] Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;  String name = n.getFirstChild (  ) .getString (  ) ; if  ( name != null && !name.isEmpty (  )  && parent != null^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String parentame = n.getLastChild (  ) .getString (  ) ;^109^^^^^99^132^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer renamer = nameStack.peek (  )  ;^121^^^^^99^132^[REPLACE] Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String parentame = n.getLastChild (  ) .getString (  ) ;^123^^^^^99^132^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return false;^131^^^^^99^132^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (namePrefix == null )  {^139^^^^^135^160^[REPLACE] if  ( newName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^139^140^141^^143^135^160^[ADD] if  ( newName != null )  { Renamer renamer = nameStack.peek (  ) ; if  ( renamer.stripConstIfReplaced (  )  )  { n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( renamer .addDeclaredName ( name )   )  {^141^^^^^135^160^[REPLACE] if  ( renamer.stripConstIfReplaced (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^n .getType (  )  ;^143^^^^^135^160^[REPLACE] n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^140^^^^^135^160^[ADD] Renamer renamer = nameStack.peek (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if   (  id != 0  )   {  ;^141^^^^^135^160^[REPLACE] if  ( renamer.stripConstIfReplaced (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^141^142^143^144^^135^160^[ADD] if  ( renamer.stripConstIfReplaced (  )  )  {  n.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^n.setString ( Node.IS_CONSTANT_NAME ) ;^143^^^^^135^160^[REPLACE] n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String parentewName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^[REPLACE] String newName = getReplacementName ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parent != this || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^[REPLACE] if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^186^^^^^183^196^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^188^^^^^183^196^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; null !^193^^^^^183^196^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^189^^^^^183^196^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = parent.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^183^196^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^186^^^^^180^197^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^188^^^^^180^197^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node nameNode = n.getLastChild (  ) ;^189^^^^^180^197^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^189^^^^^180^197^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer.addDeclaredName ( parent.getString (  )  ) ;^187^^^^^180^197^[REPLACE] renamer.addDeclaredName ( n.getString (  )  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer.addDeclaredName ( parent.setString (  )  ) ;^187^^^^^180^197^[REPLACE] renamer.addDeclaredName ( n.getString (  )  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; null !^193^^^^^180^197^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node declarationRoot = t.getScopeRoot (  )  ;^189^^^^^180^197^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^193^194^195^^^180^197^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { findDeclaredNames ( c, n, renamer ) ; }^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( node.getType (  )   &&  Token.NAME )  {^246^^^^^245^284^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( oldName.indexOf ( "$$" )   ==  -1 )  {^248^^^^^245^284^[REPLACE] if  ( oldName.indexOf ( "$$" )  != -1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (  var.isGlobal (  )  )  {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return;  ;^252^^^^^245^284^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if   (  id != 0  )   {  ;^255^^^^^245^284^[REPLACE] if  ( nameMap.containsKey ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (  TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parent.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^263^278^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  null;^265^^^^^263^278^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^271^272^273^274^^255^281^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^265^^^^^255^281^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName .lastIndexOf ( namePrefix )  ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^255^281^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^node.setString ( nameMap.containsKey ( var )  ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REMOVE]^incrementNameCount ( name )  ;^256^^^^^245^284^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^263^264^265^266^267^245^284^[ADD] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  { newName = oldName; } else { var.scope.declare ( newName, var.nameNode, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^263^278^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  namePrefix;^265^^^^^263^278^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^273^^^^^271^274^[ADD] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^265^^^^^245^284^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( oldName )  ;^249^^^^^245^284^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Scope scope = t.getScope (  )  ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 2, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var != null ) {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^return;^251^252^253^^^245^284^[ADD] if  ( var == null || var.isGlobal (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^255^256^257^258^^245^284^[ADD] if  ( nameMap.containsKey ( var )  )  { node.setString ( nameMap.get ( var )  ) ; } else { String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^263^264^265^266^267^255^281^[ADD] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  { newName = oldName; } else { var.scope.declare ( newName, var.nameNode, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^271^272^273^274^^263^278^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  namePrefix;^265^^^^^255^281^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 3, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^compiler.reportCodeChange (  )  ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^node.setString ( nameMap .put ( var , name )   ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (  TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^270^^^^^263^278^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REMOVE]^incrementNameCount ( name )  ;^273^^^^^271^274^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getParentNode (  )  ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  namePrefix;^265^^^^^245^284^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String oldName = parentNode.getString (  ) ;^247^^^^^245^284^[REPLACE] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Scope scope = t.getScopeRoot (  ) ;^249^^^^^245^284^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 0L, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var != false || var.isGlobal (  )  )  {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^258^^^^^255^281^[ADD] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^270^^^^^255^281^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^node .getString (  )  ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^265^^^^^263^278^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  )  .getString (  )  ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node declarationRoot = t.getScopeRoot (  )  ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^node.setString ( nameMap.get ( var )  ) ;String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^255^256^257^258^^245^284^[ADD] if  ( nameMap.containsKey ( var )  )  { node.setString ( nameMap.get ( var )  ) ; } else { String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^node.setString ( nameMap .put ( var , oldName )   ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, true )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^271^272^273^274^^245^284^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String name = c.getString (  )  ;^247^^^^^245^284^[REPLACE] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^249^^^^^245^284^[ADD] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^258^^^^^245^284^[ADD] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^private  AbstractCompiler compiler;^231^^^^^^^[REPLACE] private final AbstractCompiler compiler;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] ContextualRenameInverter   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^private Map<Var, String> nameMap  = null ;^234^^^^^^^[REPLACE] private Map<Var, String> nameMap = Maps.newHashMap (  ) ;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] ContextualRenameInverter   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( node.getType (  )   !=  Token.NAME )  {^246^^^^^245^284^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^String oldName = node.getString (  ) ;Scope scope = t.getScope (  ) ;Var var = t.getScope (  ) .getVar ( oldName ) ;^246^247^248^249^250^245^284^[ADD] if  ( node.getType (  )  == Token.NAME )  { String oldName = node.getString (  ) ; if  ( oldName.indexOf ( "$$" )  != -1 )  { Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( oldName.indexOf ( "$$" )   ==  -1 )  {^248^^^^^245^284^[REPLACE] if  ( oldName.indexOf ( "$$" )  != -1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var != null || var.isGlobal (  )  )  {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^return;  ;^252^^^^^245^284^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if   (  isDeclared  (  newName, false  )   || !TokenStream.isJSIdentifier  (  newName  )    )   {  ;^255^^^^^245^284^[REPLACE] if  ( nameMap.containsKey ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^node.setString ( nameMap.get ( var )  ) ;String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^255^256^257^258^^245^284^[ADD] if  ( nameMap.containsKey ( var )  )  { node.setString ( nameMap.get ( var )  ) ; } else { String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^263^264^265^266^267^255^281^[ADD] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  { newName = oldName; } else { var.scope.declare ( newName, var.nameNode, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^263^278^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^newName =  null;^265^^^^^263^278^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getNameNode (  ) .getVar ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getParentNode (  )  ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^newName =  null;^265^^^^^255^281^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^258^^^^^255^281^[ADD] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^270^^^^^255^281^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^node.setString ( nameMap.containsKey ( var )  ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^node.setString ( nameMap .put ( var , oldName )   ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^256^^^^^245^284^[ADD] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getNameNode (  )  .getString (  )  ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^newName =  null;^265^^^^^245^284^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^249^250^^^^245^284^[ADD] Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^250^^^^^245^284^[ADD] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = oldName.substring ( 4, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^270^^^^^245^284^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^271^272^273^274^^263^278^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^271^272^273^274^^255^281^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^273^^^^^271^274^[ADD] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = oldName.substring ( 0 * 3, oldName.indexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^255^281^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parent.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^270^^^^^263^278^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^265^^^^^263^278^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^247^^^^^245^284^[ADD] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^249^^^^^245^284^[ADD] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = oldName.substring ( 0 / 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var != this ) {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^251^252^253^^^245^284^[ADD] if  ( var == null || var.isGlobal (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REMOVE]^if  (  ( isDeclared ( newName, false )  )  ||  ( ! ( isJSIdentifier ( newName )  )  )  )  {     newName = oldName; }else {     declare ( newName, var.nameNode, null, null ) ;     Node parentNode = var.getParentNode (  ) ;     if  (  (  ( parentNode.getType (  )  )  ==  ( FUNCTION )  )  &&  ( parentNode ==  ( getRootNode (  )  )  )  )  {         var.getNameNode (  ) .setString ( newName ) ;     }     node.setString ( newName ) ;     compiler.reportCodeChange (  ) ; }^255^^^^^245^284^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, true )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( NAME )  )  {     String oldName = node.getString (  ) ;     if  (  ( oldName.indexOf ( "$$" )  )  !=  ( -1 )  )  {         Scope scope = t.getScope (  ) ;         Var var = t.getScope (  ) .getVar ( oldName ) ;         if  (  ( var == null )  ||  ( var.isGlobal (  )  )  )  {             return ;         }         if  ( nameMap.containsKey ( var )  )  {             node.setString ( nameMap.get ( var )  ) ;         }else {             String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;             if  (  ( isDeclared ( newName, false )  )  ||  ( ! ( isJSIdentifier ( newName )  )  )  )  {                 newName = oldName;             }else {                 declare ( newName, var.nameNode, null, null ) ;                 Node parentNode = var.getParentNode (  ) ;                 if  (  (  ( parentNode.getType (  )  )  ==  ( FUNCTION )  )  &&  ( parentNode ==  ( getRootNode (  )  )  )  )  {                     var.getNameNode (  ) .setString ( newName ) ;                 }                 node.setString ( newName ) ;                 compiler.reportCodeChange (  ) ;             }             nameMap.put ( var, newName ) ;         }     } }^263^^^^^255^281^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^263^278^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^t.getScope (  ) .getVar ( oldName )  ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^node.setString ( nameMap .put ( var , newName )   ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.setString (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^265^^^^^245^284^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( oldName )  ;^249^^^^^245^284^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Var var = t.getScope (  ) .setString ( oldName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = newName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^265^^^^^255^281^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = newName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, true )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String oldName = node.setString (  ) ;^247^^^^^245^284^[REPLACE] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = oldName.substring ( 0 + 0, oldName.indexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^private  Multiset<String> nameUsage;^299^^^^^^^[REPLACE] private final Multiset<String> nameUsage;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^private final Map<String, String> declarations ;^300^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^private  boolean global;^301^^^^^^^[REPLACE] private final boolean global;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^private final Map<String, String> declarations ;^380^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^private  Supplier<String> uniqueIdSupplier;^381^^^^^^^[REPLACE] private final Supplier<String> uniqueIdSupplier;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^private final  double  namePrefix;^382^^^^^^^[REPLACE] private final String namePrefix;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
