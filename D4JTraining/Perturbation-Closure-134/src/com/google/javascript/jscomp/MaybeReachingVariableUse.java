[REPLACE]^private  Scope jsScope;^47^^^^^^^[REPLACE] private final Scope jsScope;^ [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^172^^^^^153^237^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil.isVar ( rhs )  )  {^179^^^^^172^186^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REMOVE]^if  (  ( isName ( lhs )  )  &&  ( !conditional )  )  {     removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^179^^^^^172^186^[REMOVE] ^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil .isVar ( rhs )   && conditional )  {^182^^^^^172^186^[REPLACE] if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^180^^^^^172^186^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node lhs = varName.getFirstChild (  ) ;^177^^^^^172^186^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^178^^^^^172^186^[ADD] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, true ) ;^173^174^^^^153^237^[REPLACE] computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^NodeUtil.getConditionExpression ( varName ) , cfgNode, output, conditional ) ;^174^^^^^153^237^[REPLACE] NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^174^^^^^153^237^[ADD] NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if   (  !NodeUtil.isForIn  (  n  )    )   {  ;^179^^^^^153^237^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^180^^^^^153^237^[ADD] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  && conditional )  {^182^^^^^153^237^[REPLACE] if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^183^^^^^153^237^[REPLACE] removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getType (  ) , output ) ;^183^^^^^153^237^[REPLACE] removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if   (  !NodeUtil.isForIn  (  n  )    )   {  ;^205^^^^^153^237^[REPLACE] if  ( varName.hasChildren (  )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( conditional )  {^207^^^^^153^237^[REPLACE] if  ( !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^207^208^209^^^153^237^[ADD] if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( varName.getType (  ) , output ) ;^208^^^^^153^237^[REPLACE] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs .getLastChild (  )  , output ) ;^208^^^^^153^237^[REPLACE] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^208^^^^^153^237^[REPLACE] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^208^^^^^153^237^[ADD] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REMOVE]^lhs.getNext (  )  ;^208^^^^^153^237^[REMOVE] ^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( n )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^153^237^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^for  ( Node c =  varName.getLastChild (  ) ; c !^232^^^^^214^235^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node name = n.getFirstChild (  )  ;^232^^^^^214^235^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( !true )  {^216^^^^^153^237^[REPLACE] if  ( !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( lhs.getString (  ) , output )  ;^217^^^^^153^237^[REPLACE] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^lhs.getString (  )  ;^217^^^^^153^237^[REPLACE] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( !NodeUtil.isForIn ( n )  )  {^221^^^^^153^237^[REPLACE] if  ( !NodeUtil.isAssign ( n )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^addToUseIfLocal ( n.getString (  ) , cfgNode, output )  ;^222^^^^^153^237^[REPLACE] addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^222^^^^^153^237^[ADD] addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^lhs.getString (  )  ;^222^^^^^153^237^[REPLACE] addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node name = n.getLastChild (  ) ;^215^^^^^153^237^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if   (  !NodeUtil.isForIn  (  n  )    )   {  ;^216^^^^^153^237^[REPLACE] if  ( !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( name.getType (  ) , output ) ;^217^^^^^153^237^[REPLACE] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^217^^^^^153^237^[ADD] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( varName.getType (  ) , output ) ;^217^^^^^153^237^[REPLACE] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( !NodeUtil.isAssign ( varName )  )  {^221^^^^^153^237^[REPLACE] if  ( !NodeUtil.isAssign ( n )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REMOVE]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^221^^^^^153^237^[REMOVE] ^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^addToUseIfLocal ( name.getType (  ) , cfgNode, output ) ;^222^^^^^153^237^[REPLACE] addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^180^^^^^153^237^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^232^233^234^^^153^237^[ADD] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  { computeMayUse ( c, cfgNode, output, conditional ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return;  ;^158^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return;  ;^162^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return;  ;^169^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return;  ;^187^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return;  ;^193^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return;  ;^199^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return;  ;^211^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^177^178^^^^153^237^[ADD] Node lhs = n.getFirstChild (  ) ; Node rhs = lhs.getNext (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node rhs = rhs.getNext (  ) ;^178^^^^^153^237^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node varName = varName .getLastChild (  )  ;^202^^^^^153^237^[REPLACE] Node varName = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node varName = n.getFirstChild (  )  ;^215^^^^^153^237^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Multimap<Var, Node> mayUseMap;^85^^^^^^^[REPLACE] final Multimap<Var, Node> mayUseMap;^[METHOD] getUses [TYPE] Collection [PARAMETER] String name Node defNode [CLASS] ReachingUses   [TYPE]  Multimap mayUseMap  [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node defNode  [TYPE]  GraphNode n  [TYPE]  String name 
