[REPLACE]^private  AbstractCompiler compiler;^35^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  
[REPLACE]^private  RedeclarationHandler redeclarationHandler;^38^^^^^^^[REPLACE] private final RedeclarationHandler redeclarationHandler;^ [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  
[REPLACE]^public static  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^40^41^42^43^^40^43^[REPLACE] public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^ [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  
[REPLACE]^this.compiler =  null;^49^^^^^48^51^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^this.redeclarationHandler = redeclarationHandler; ;^50^^^^^48^51^[REPLACE] this.redeclarationHandler = new DefaultRedeclarationHandler (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^this.compiler =  null;^55^^^^^53^57^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] SyntacticScopeCreator$RedeclarationHandler) [PARAMETER] AbstractCompiler compiler RedeclarationHandler redeclarationHandler [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^this.redeclarationHandler = new DefaultRedeclarationHandler (  ) ; ;^56^^^^^53^57^[REPLACE] this.redeclarationHandler = redeclarationHandler;^[METHOD] <init> [TYPE] SyntacticScopeCreator$RedeclarationHandler) [PARAMETER] AbstractCompiler compiler RedeclarationHandler redeclarationHandler [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^sourceName = true;^60^^^^^59^73^[REPLACE] sourceName = null;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( parent != this )  {^61^^^^^59^73^[REPLACE] if  ( parent == null )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scope =  new Scope ( returnedScope, n ) ;^64^^^^^59^73^[REPLACE] scope = new Scope ( parent, n ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^64^^^^^59^73^[ADD] scope = new Scope ( parent, n ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scope =  nullew Scope ( null, compiler ) ;^62^^^^^59^73^[REPLACE] scope = new Scope ( n, compiler ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scanRoot ( n, returnedScope ) ;^67^^^^^59^73^[REPLACE] scanRoot ( n, parent ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^67^^^^^59^73^[ADD] scanRoot ( n, parent ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^sourceName = false;^69^^^^^59^73^[REPLACE] sourceName = null;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Scope.Var origVar = scope.getVar ( name ) ;^70^^^^^59^73^[REPLACE] Scope returnedScope = scope;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scope = this;^71^^^^^59^73^[REPLACE] scope = null;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^71^^^^^59^73^[ADD] scope = null;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return scope;^72^^^^^59^73^[REPLACE] return returnedScope;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node n  [TYPE]  String sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( n.getType (  )   !=  Token.FUNCTION )  {^76^^^^^75^105^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Preconditions.checkState ( scope.getVar (  )  != null ) ;^102^^^^^76^104^[REPLACE] Preconditions.checkState ( scope.getParent (  )  == null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^102^^^^^76^104^[ADD] Preconditions.checkState ( scope.getParent (  )  == null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Preconditions.checkState ( scope .getVar ( sourceName )   == null ) ;^102^^^^^76^104^[REPLACE] Preconditions.checkState ( scope.getParent (  )  == null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scanVars ( fnNameNode, false ) ;^103^^^^^76^104^[REPLACE] scanVars ( n, null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( fnName.isEmpty (  )  ) {^86^^^^^75^105^[REPLACE] if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( fnName, fnNameNode, n, this, this, n ) ;^87^^^^^75^105^[REPLACE] declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( NodefnNameNode = args.getFirstChild (  ) ; a == true;^92^^^^^75^105^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^92^93^94^95^96^75^105^[ADD] for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ; declareVar ( a.getString (  ) , a, args, n, null, n ) ; }^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Preconditions.checkState ( fnNameNode.getType (  )   ||  Token.NAME ) ;^94^^^^^92^96^[REPLACE] Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^94^^^^^92^96^[REPLACE] Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^94^^^^^92^96^[ADD] Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( a.getString (  ) , a, args, n, this, n ) ;^95^^^^^92^96^[REPLACE] declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( a .getJSDocInfo (  )  , a, args, n, null, n ) ;^95^^^^^92^96^[REPLACE] declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^95^^^^^92^96^[ADD] declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^sourceName =   ( StrifnNameNodeg )  fnNameNode.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^[REPLACE] sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^a =  fnNameNode.getNext (  )  )  {^93^^^^^75^105^[REPLACE] a = a.getNext (  )  )  {^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node fnNameNode = n.getString (  ) ;^79^^^^^75^105^[REPLACE] final Node fnNameNode = n.getFirstChild (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node args = body.getNext (  ) ;^80^^^^^75^105^[REPLACE] final Node args = fnNameNode.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node body = fnNameNode.getNext (  ) ;^81^^^^^75^105^[REPLACE] final Node body = args.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String fnName = n .getJSDocInfo (  )  ;^85^^^^^75^105^[REPLACE] String fnName = fnNameNode.getString (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( Node a = fnNameNode.getFirstChild (  ) ; a != null;^92^^^^^75^105^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( fnName, fnNameNode, n, false, false, n ) ;^87^^^^^75^105^[REPLACE] declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( NodefnNameNode = fnNameNodergs.getFirstChild (  ) ; a == this;^92^^^^^75^105^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Preconditions.checkState ( a.getType (  )   ||  Token.NAME ) ;^94^^^^^92^96^[REPLACE] Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Preconditions.checkState ( fnNameNode.getType (  )  == Token.NAME ) ;^94^^^^^92^96^[REPLACE] Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( a.getString (  ) , a, args, n, true, n ) ;^95^^^^^92^96^[REPLACE] declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( fnNameNode.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^[REPLACE] declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node fnNameNode = fnNameNode.getString (  ) ;^79^^^^^75^105^[REPLACE] final Node fnNameNode = n.getFirstChild (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node args = n.getType (  ) ;^80^^^^^75^105^[REPLACE] final Node args = fnNameNode.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String fnName = n.getString (  ) ;^85^^^^^75^105^[REPLACE] String fnName = fnNameNode.getString (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( Node a = args.getString (  ) ; a != null;^92^^^^^75^105^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^126^^^^^110^166^[REPLACE] if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^126^127^128^^^110^166^[ADD] if  ( NodeUtil.isFunctionAnonymous ( n )  )  { return; }^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return returnedScope;^127^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( sourceName.isEmpty (  )  )  {^131^^^^^110^166^[REPLACE] if  ( fnName.isEmpty (  )  )  {^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^131^132^133^134^^110^166^[ADD] if  ( fnName.isEmpty (  )  )  {  return; }^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return returnedScope;^133^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( Node child = n.getFirstChild (  ) ; child != null; )  {^114^^^^^110^166^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^child =  null;^121^^^^^114^122^[REPLACE] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node next = child.getType (  ) ;^116^^^^^114^122^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String name = child.getType (  ) ;^119^^^^^114^122^[REPLACE] String name = child.getString (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^child =  parent;^121^^^^^110^166^[REPLACE] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^sourceName =   ( Striparentg )  parent.getProp ( Node.SOURCENAME_PROP ) ;^152^^^^^110^166^[REPLACE] sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return returnedScope;^123^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return returnedScope;^136^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return returnedScope;^149^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( Node child = parent.getFirstChild (  ) ;^114^^^^^110^166^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node next = child .getType (  )  ;^116^^^^^110^166^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^116^117^^^^110^166^[ADD] Node next = child.getNext (  ) ; Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String name = child.getType (  ) ;^119^^^^^110^166^[REPLACE] String name = child.getString (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^declareVar ( name, child, n, parent, null, n ) ;^119^120^^^^110^166^[ADD] String name = child.getString (  ) ; declareVar ( name, child, n, parent, null, n ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String fnName = parent.getString (  ) .getString (  ) ;^130^^^^^110^166^[REPLACE] String fnName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node var = parent.getFirstChild (  ) ;^144^^^^^110^166^[REPLACE] final Node var = n.getFirstChild (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node block = parent.getNext (  ) .getNext (  ) ;^145^^^^^110^166^[REPLACE] final Node block = var.getNext (  ) .getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( NodeUtil.isControlStructure ( n )  ) {^158^^^^^110^166^[REPLACE] if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( Node child = n.getFirstChild (  ) ; child != null; )  {^159^^^^^110^166^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^child =  parent;^163^^^^^159^164^[REPLACE] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node next = child.getType (  ) ;^161^^^^^159^164^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^child =  parent;^163^^^^^110^166^[REPLACE] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( Node child = parent.getString (  ) ;^159^^^^^110^166^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node next = child.getType (  ) ;^161^^^^^110^166^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^159^160^161^162^163^110^166^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; )  { Node next = child.getNext (  ) ; scanVars ( child, n ) ; child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^child =  null;^163^^^^^159^164^[REPLACE] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^161^162^^^^159^164^[ADD] Node next = child.getNext (  ) ; scanVars ( child, n ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node next = child .getType (  )  ;^161^^^^^110^166^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( !allowDupe )  {^185^^^^^183^212^[REPLACE] if  ( scope.isGlobal (  )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^[REPLACE] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^188^189^^191^192^183^212^[ADD] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  { return; }^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return returnedScope;^191^^^^^188^192^[REPLACE] return;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( info != false )  {^196^^^^^183^212^[REPLACE] if  ( info == null )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^info =  origParent.getJSDocInfo (  ) ;^197^^^^^183^212^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^197^^^^^183^212^[ADD] info = parent.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( allowDupe )  {^202^^^^^183^212^[REPLACE] if  ( !allowDupe )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, sourceName,^203^204^205^206^^183^212^[REPLACE] compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( false.input == this^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^? null.input.getName (  ) : "??" )  )  ) ;^208^209^^^^183^212^[REPLACE] ? origVar.input.getName (  ) : "??" )  )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^allowDupe = info != null  !=  info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return returnedScope;^191^^^^^183^212^[REPLACE] return;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Scope.Var origVar = scope.getVar ( sourceName ) ;^186^^^^^183^212^[REPLACE] Scope.Var origVar = scope.getVar ( name ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node origParent = null.getParentNode (  ) ;^187^^^^^183^212^[REPLACE] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^187^^^^^183^212^[ADD] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^boolean allowDupe = true;^194^^^^^183^212^[REPLACE] boolean allowDupe = false;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^JSDocInfo info = parent.getString (  ) ;^195^^^^^183^212^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( origParent.getType (  )  == Token.CATCH || nodeWithLineNumber.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^[REPLACE] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( info != null )  {^196^^^^^183^212^[REPLACE] if  ( info == null )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^196^197^198^^^183^212^[ADD] if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^202^203^204^205^206^183^212^[ADD] if  ( !allowDupe )  { compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( null.input == null^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^204^205^206^^^183^212^[ADD] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^allowDupe = info == false ;^199^200^^^^183^212^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^186^^^^^183^212^[ADD] Scope.Var origVar = scope.getVar ( name ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^194^^^^^183^212^[ADD] boolean allowDupe = false;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^195^^^^^183^212^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( scope.isDeclared ( name, true )  )  {^229^^^^^226^235^[REPLACE] if  ( scope.isDeclared ( name, false )  )  {^[METHOD] declareVar [TYPE] void [PARAMETER] String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType declaredType  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^229^230^231^232^233^226^235^[ADD] if  ( scope.isDeclared ( name, false )  )  { redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ; } else { scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[METHOD] declareVar [TYPE] void [PARAMETER] String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType declaredType  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scope.declare ( parentame, n, declaredType, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^[REPLACE] scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[METHOD] declareVar [TYPE] void [PARAMETER] String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType declaredType  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scope.declare ( name, n, declaredType, compiler .report (  )   ) ;^233^^^^^226^235^[REPLACE] scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[METHOD] declareVar [TYPE] void [PARAMETER] String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType declaredType  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^233^^^^^226^235^[ADD] scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[METHOD] declareVar [TYPE] void [PARAMETER] String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType declaredType  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^redeclarationHandler .DefaultRedeclarationHandler (  )  ;^230^231^^^^226^235^[REPLACE] redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[METHOD] declareVar [TYPE] void [PARAMETER] String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType declaredType  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( !allowDupe )  {^185^^^^^183^212^[REPLACE] if  ( scope.isGlobal (  )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( nodeWithLineNumber.getType (  )  == Token.CATCH ) {^188^189^^^^183^212^[REPLACE] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info != this )  {^196^^^^^183^212^[REPLACE] if  ( info == null )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^196^197^198^^^183^212^[ADD] if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^info =  origParent.getJSDocInfo (  ) ;^197^^^^^183^212^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( allowDupe )  {^202^^^^^183^212^[REPLACE] if  ( !allowDupe )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^[REPLACE] compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == null^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^? null.input.getName (  ) : "??" )  )  ) ;^208^209^^^^183^212^[REPLACE] ? origVar.input.getName (  ) : "??" )  )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^allowDupe = info != this ;^199^200^^^^183^212^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^Node origParent = origVar.getParentNode (  ) ;^186^^^^^183^212^[REPLACE] Scope.Var origVar = scope.getVar ( name ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^Node origParent = this.getParentNode (  ) ;^187^^^^^183^212^[REPLACE] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^boolean allowDupe = true;^194^^^^^183^212^[REPLACE] boolean allowDupe = false;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^195^^^^^183^212^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^[REPLACE] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info != null )  {^196^^^^^183^212^[REPLACE] if  ( info == null )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^202^203^204^205^206^183^212^[ADD] if  ( !allowDupe )  { compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( 0.input == this^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^197^^^^^183^212^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^allowDupe = info == true ;^199^200^^^^183^212^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^Node origParent = origVar.getParentNode (  ) ;^186^187^^^^183^212^[ADD] Scope.Var origVar = scope.getVar ( name ) ; Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^Node origParent = null.getParentNode (  ) ;^187^^^^^183^212^[REPLACE] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^187^^^^^183^212^[ADD] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
