[REPLACE]^private  AbstractCompiler compiler;^35^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  
[REPLACE]^private  int  sourceName;^37^^^^^^^[REPLACE] private String sourceName;^ [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  
[REPLACE]^private  RedeclarationHandler redeclarationHandler;^38^^^^^^^[REPLACE] private final RedeclarationHandler redeclarationHandler;^ [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  
[REPLACE]^public  final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^40^41^42^43^^40^43^[REPLACE] public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^ [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  
[REPLACE]^if  ( n.getType (  )   &&  Token.FUNCTION )  {^76^^^^^75^105^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^checkState (  (  ( n.getChildCount (  )  )  == 3 )  )  ;^102^^^^^76^104^[REPLACE] Preconditions.checkState ( scope.getParent (  )  == null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Preconditions.checkState ( scope.getVar (  )  == null ) ;^102^^^^^76^104^[REPLACE] Preconditions.checkState ( scope.getParent (  )  == null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^scanVars ( n, false ) ;^103^^^^^76^104^[REPLACE] scanVars ( n, null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^103^^^^^76^104^[ADD] scanVars ( n, null ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  (  NodeUtil.isFunctionAnonymous ( n )  )  {^86^^^^^75^105^[REPLACE] if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( fnName, fnNameNode, n, false, false, n ) ;^87^^^^^75^105^[REPLACE] declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^sourceName =   ( StrifnNameNodeg )  fnNameNode.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^[REPLACE] sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^93^94^^^^75^105^[ADD] a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^79^80^^^^75^105^[ADD] final Node fnNameNode = n.getFirstChild (  ) ; final Node args = fnNameNode.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node args = n.getNext (  ) ;^80^^^^^75^105^[REPLACE] final Node args = fnNameNode.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node block = var.getNext (  ) .getNext (  )  ;^81^^^^^75^105^[REPLACE] final Node body = args.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String fnName = body.getType (  ) ;^85^^^^^75^105^[REPLACE] String fnName = fnNameNode.getString (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node child = n.getFirstChild (  )  ;^92^^^^^75^105^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^86^^^^^75^105^[REPLACE] if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^declareVar ( fnName, body, n, false, false, n ) ;^87^^^^^75^105^[REPLACE] declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^a =  fnNameNode.getNext (  )  )  {^93^^^^^75^105^[REPLACE] a = a.getNext (  )  )  {^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node child = n.getFirstChild (  )  ;^79^^^^^75^105^[REPLACE] final Node fnNameNode = n.getFirstChild (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node args = fnNameNode .getType (  )  ;^80^^^^^75^105^[REPLACE] final Node args = fnNameNode.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node body = fnNameNode.getNext (  ) ;^81^^^^^75^105^[REPLACE] final Node body = args.getNext (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String name = child.getString (  )  ;^85^^^^^75^105^[REPLACE] String fnName = fnNameNode.getString (  ) ;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^for  ( Node a = fnNameNode.getFirstChild (  ) ; a != null;^92^^^^^75^105^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null;^[METHOD] scanRoot [TYPE] void [PARAMETER] Node n Scope parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node a  args  body  fnNameNode  n  [TYPE]  String fnName  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^126^^^^^110^166^[REPLACE] if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return;  ;^127^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( sourceName.isEmpty (  )  )  {^131^^^^^110^166^[REPLACE] if  ( fnName.isEmpty (  )  )  {^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^131^132^133^134^^110^166^[ADD] if  ( fnName.isEmpty (  )  )  {  return; }^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return;  ;^133^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^child =  parent;^121^^^^^110^166^[REPLACE] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^sourceName =   ( Striparentg )  parent.getProp ( Node.SOURCENAME_PROP ) ;^152^^^^^110^166^[REPLACE] sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return;  ;^123^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return;  ;^136^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return;  ;^149^^^^^110^166^[REPLACE] return;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^114^115^116^117^^110^166^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; )  { Node next = child.getNext (  ) ; Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node next = child.getType (  ) ;^116^^^^^110^166^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^119^^^^^110^166^[ADD] String name = child.getString (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^String fnName = parent.getFirstChild (  ) .getString (  ) ;^130^^^^^110^166^[REPLACE] String fnName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node var = parent.getFirstChild (  ) ;^144^^^^^110^166^[REPLACE] final Node var = n.getFirstChild (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^final Node block = parent.getNext (  ) .getNext (  ) ;^145^^^^^110^166^[REPLACE] final Node block = var.getNext (  ) .getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( NodeUtil.isControlStructure ( n )  && NodeUtil .isFunctionAnonymous ( child )   )  {^158^^^^^110^166^[REPLACE] if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^163^^^^^110^166^[ADD] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^159^160^161^162^163^110^166^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; )  { Node next = child.getNext (  ) ; scanVars ( child, n ) ; child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node next = child .getType (  )  ;^161^^^^^110^166^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^child =  parent;^163^^^^^110^166^[REPLACE] child = next;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node a = args.getFirstChild (  )  ;^159^^^^^110^166^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node child = n.getFirstChild (  )  ;^161^^^^^110^166^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] scanVars [TYPE] void [PARAMETER] Node n Node parent [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope parent  returnedScope  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Node block  child  n  next  parent  var  [TYPE]  String fnName  name  sourceName  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if   (  !allowDupe  )   {  ;^185^^^^^183^212^[REPLACE] if  ( scope.isGlobal (  )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^[REPLACE] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return;  ;^191^^^^^188^192^[REPLACE] return;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( info != null )  {^196^^^^^183^212^[REPLACE] if  ( info == null )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^info =  origParent.getJSDocInfo (  ) ;^197^^^^^183^212^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if  ( allowDupe )  {^202^^^^^183^212^[REPLACE] if  ( !allowDupe )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^202^203^204^205^206^183^212^[ADD] if  ( !allowDupe )  { compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^203^204^205^^^183^212^[ADD] compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == false^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^? null.input.getName (  ) : "??" )  )  ) ;^208^209^^^^183^212^[REPLACE] ? origVar.input.getName (  ) : "??" )  )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^208^209^^^^183^212^[ADD] ? origVar.input.getName (  ) : "??" )  )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^allowDupe = info != null  >=  info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^return;  ;^191^^^^^183^212^[REPLACE] return;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Scope.Var origVar = scope.getVar ( sourceName ) ;^186^^^^^183^212^[REPLACE] Scope.Var origVar = scope.getVar ( name ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^187^^^^^183^212^[ADD] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^boolean allowDupe = true;^194^^^^^183^212^[REPLACE] boolean allowDupe = false;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^Node child = n.getFirstChild (  )  ;^195^^^^^183^212^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^188^189^^191^192^183^212^[ADD] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  { return; }^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if   (  parent == null  )   {  ;^196^^^^^183^212^[REPLACE] if  ( info == null )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^info = parent.getJSDocInfo (  ) ;^196^197^198^^^183^212^[ADD] if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == null^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^? this.input.getName (  ) : "??" )  )  ) ;^208^209^^^^183^212^[REPLACE] ? origVar.input.getName (  ) : "??" )  )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^allowDupe = info != null ;^199^200^^^^183^212^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^194^^^^^183^212^[ADD] boolean allowDupe = false;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[ADD]^^195^^^^^183^212^[ADD] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope parent  returnedScope  s  scope  [TYPE]  DiagnosticType VAR_MULTIPLY_DECLARED_ERROR  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String fnName  name  sourceName  [TYPE]  JSDocInfo info  [TYPE]  RedeclarationHandler redeclarationHandler 
[REPLACE]^if   (  !allowDupe  )   {  ;^185^^^^^183^212^[REPLACE] if  ( scope.isGlobal (  )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^185^186^187^188^^183^212^[ADD] if  ( scope.isGlobal (  )  )  { Scope.Var origVar = scope.getVar ( name ) ; Node origParent = origVar.getParentNode (  ) ; if  ( origParent.getType (  )  == Token.CATCH &&^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^[REPLACE] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^188^189^^191^192^183^212^[ADD] if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  { return; }^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^191^^^^^188^192^[REPLACE] return;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info != null )  {^196^^^^^183^212^[REPLACE] if  ( info == null )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^196^197^198^^^183^212^[ADD] if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^info =  origParent.getJSDocInfo (  ) ;^197^^^^^183^212^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( allowDupe )  {^202^^^^^183^212^[REPLACE] if  ( !allowDupe )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == this^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^? false.input.getName (  ) : "??" )  )  ) ;^208^209^^^^183^212^[REPLACE] ? origVar.input.getName (  ) : "??" )  )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^allowDupe = info == this || info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^191^^^^^183^212^[REPLACE] return;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^Scope.Var origVar = scope .isGlobal (  )  ;^186^^^^^183^212^[REPLACE] Scope.Var origVar = scope.getVar ( name ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^Node origParent = this.getParentNode (  ) ;^187^^^^^183^212^[REPLACE] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^boolean allowDupe = true;^194^^^^^183^212^[REPLACE] boolean allowDupe = false;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^195^^^^^183^212^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^197^^^^^183^212^[ADD] info = parent.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == false^204^205^206^207^^183^212^[REPLACE] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^204^205^206^^^183^212^[ADD] JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^? this.input.getName (  ) : "??" )  )  ) ;^208^209^^^^183^212^[REPLACE] ? origVar.input.getName (  ) : "??" )  )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^199^200^^^^183^212^[ADD] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^Node origParent = origVar.getParentNode (  )  ;^186^^^^^183^212^[REPLACE] Scope.Var origVar = scope.getVar ( name ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^Node origParent = null.getParentNode (  ) ;^187^^^^^183^212^[REPLACE] Node origParent = origVar.getParentNode (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = parent.getType (  ) ;^195^^^^^183^212^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DefaultRedeclarationHandler   [TYPE]  boolean allowDupe  false  true  [TYPE]  Scope s  [TYPE]  Var origVar  [TYPE]  Node gramps  n  nodeWithLineNumber  origParent  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
