[REPLACE]^private  AbstractCompiler compiler;^38^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^private  CheckLevel level;^41^^^^^^^[REPLACE] private final CheckLevel level;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^static final DiagnosticType WRONG_ARGUMENT_COUNT_ERROR ;^51^52^53^54^^51^55^[REPLACE] static final DiagnosticType WRONG_ARGUMENT_COUNT_ERROR = DiagnosticType.error ( "JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument ( s ) . " + "All definitions of this function require at least {2} argument ( s ) " +^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^static  DiagnosticType OPTIONAL_ARGS_ERROR = DiagnosticType.error ( "JSC_OPTIONAL_ARGS_ERROR", "Required argument must precede optional argument ( s ) " ) ;^57^58^59^^^57^59^[REPLACE] static final DiagnosticType OPTIONAL_ARGS_ERROR = DiagnosticType.error ( "JSC_OPTIONAL_ARGS_ERROR", "Required argument must precede optional argument ( s ) " ) ;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^static final DiagnosticType VAR_ARGS_ERROR ;^61^62^63^^^61^63^[REPLACE] static final DiagnosticType VAR_ARGS_ERROR = DiagnosticType.error ( "JSC_VAR_ARGS_ERROR", "Argument must precede var_args argument" ) ;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^final  short  args;^81^^^^^^^[REPLACE] final int args;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^final  long  optionalArgs;^82^^^^^^^[REPLACE] final int optionalArgs;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^if  ( fn.getType (  )   &&  Token.NAME )  {^129^^^^^123^154^[REPLACE] if  ( fn.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^if  ( v != false )  {^137^^^^^123^154^[REPLACE] if  ( v == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return;  ;^138^^^^^123^154^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^if  ( fnDef != this || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^123^154^[REPLACE] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^142^143^^145^146^123^154^[ADD] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return;  ;^145^^^^^142^146^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return;  ;^145^^^^^123^154^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^131^^^^^123^154^[ADD] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^Scope.Var v = t .getCompiler (  )  .getVar ( fnName ) ;^134^^^^^123^154^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^Node fnDef = 1.getInitialValue (  ) ;^141^^^^^123^154^[REPLACE] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^FunctionInfo f = getFunctionInfo ( fnDef, this.getInputName (  )  ) ;^148^^^^^123^154^[REPLACE] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^if  ( v != null )  {^137^^^^^123^154^[REPLACE] if  ( v == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^if  ( fnDef != null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^123^154^[REPLACE] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^Node fn = parent.getString (  ) ;^128^^^^^123^154^[REPLACE] Node fn = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^String parentName = fn.getType (  ) ;^131^^^^^123^154^[REPLACE] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^141^^^^^123^154^[ADD] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^148^^^^^123^154^[ADD] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^int count = n.getChildCount (  )   1;^162^^^^^161^189^[REPLACE] int count = n.getChildCount (  )  - 1;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^163^^^^^161^189^[ADD] boolean matched = false;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^165^166^^^^161^189^[ADD] int minArgs = Integer.MAX_VALUE; int maxArgs = Integer.MIN_VALUE;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^int minArgs = MAX_VALUE  ;^166^^^^^161^189^[REPLACE] int maxArgs = Integer.MIN_VALUE;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  (true ) {^170^^^^^161^189^[REPLACE] if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^170^171^172^173^^161^189^[ADD] if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  { matched = true; break; }^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^matched = false;^171^^^^^161^189^[REPLACE] matched = true;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^168^169^170^171^172^161^189^[ADD] for  ( FunctionInfo f : infos )  { int requiredCount = f.args - f.optionalArgs; if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  { matched = true; break;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  ( count >= requiredCount ||  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^[REPLACE] if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^175^176^^^^161^189^[ADD] minArgs = Math.min ( minArgs, requiredCount ) ; maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^maxArgs =  Math.max ( requiredCount, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^[REPLACE] maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^int requiredCount = requiredCount  result;^169^^^^^161^189^[REPLACE] int requiredCount = f.args - f.optionalArgs;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^175^^^^^161^189^[ADD] minArgs = Math.min ( minArgs, requiredCount ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^176^^^^^161^189^[ADD] maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^FunctionInfo fi = functionInfos.get ( fn )  ;^168^^^^^161^189^[REPLACE] for  ( FunctionInfo f : infos )  {^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^169^^^^^161^189^[ADD] int requiredCount = f.args - f.optionalArgs;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  ( matched )  {^179^^^^^161^189^[REPLACE] if  ( !matched )  {^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^179^180^181^182^183^161^189^[ADD] if  ( !matched )  { t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^t.getScope (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^[REPLACE] t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^String.valueOf ( result ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^[REPLACE] String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^184^185^186^^^161^189^[ADD] String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) "^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^String.valueOf ( count ) , String.valueOf ( requiredCount ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^[REPLACE] String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^Preconditions.checkState ( fn.getType (  )   !=  Token.FUNCTION ) ;^220^^^^^219^253^[REPLACE] Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^n.getType (  )  ;^220^^^^^219^253^[REPLACE] Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^int numArgs = 0 + 0, optArgs = 0 + 0;^224^^^^^219^253^[REPLACE] int numArgs = 0, optArgs = 0;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^int numArgs = 0  ;^224^^^^^219^253^[REPLACE] int numArgs = 0, optArgs = 0;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^225^226^^^^219^253^[ADD] boolean hasVarArgs = false; Node args = fn.getFirstChild (  ) .getNext (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^Node args = fn.getFirstChild (  ) .getVar (  ) ;^226^^^^^219^253^[REPLACE] Node args = fn.getFirstChild (  ) .getNext (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^227^^^^^219^253^[ADD] Node varArg = null;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^if   (  fn.getType  (    )   == Token.NAME  )   {  ;^232^^^^^219^253^[REPLACE] if  ( hasVarArgs )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REMOVE]^if  ( optArgs > 0 )  {     compiler.report ( make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^232^^^^^219^253^[REMOVE] ^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( fnSourceName, varArg, VAR_ARGS_ERROR )  ) ;^234^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( make ( fnSourceName, a, VAR_ARGS_ERROR )  )  ;^234^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REMOVE]^checkCall ( n, fnName, singletonList ( f ) , t, level )  ;^234^^^^^219^253^[REMOVE] ^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  ( varArg.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^237^^^^^219^253^[REPLACE] if  ( a.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  else {^242^^^^^219^253^[REPLACE] } else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  else {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^}   compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^244^245^246^247^^219^253^[ADD] else if  ( optArgs > 0 )  {  compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( make ( fnSourceName, a, VAR_ARGS_ERROR )  )  ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  if  ( optArgs  <  1 )  {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler .getNext (  )  ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( fnSourceName, varArg, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REMOVE]^checkCall ( n, fnName, singletonList ( f ) , t, level )  ;^246^^^^^219^253^[REMOVE] ^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^varArg =  args;^238^^^^^219^253^[REPLACE] varArg = a;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^hasVarArgs = false;^239^^^^^219^253^[REPLACE] hasVarArgs = true;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  if  ( optArgs  <=  0 )  {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( argName, a, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^for  ( Node a =  varArgrgs.getFirstChild (  ) ; varArg !^228^^^^^219^253^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^for  ( Node a = varArg.getString (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^219^253^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^String fnName = fn.getString (  )  ;^231^^^^^219^253^[REPLACE] String argName = a.getString (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^return new FunctionInfo ( requiredCount, optArgs, hasVarArgs ) ;^252^^^^^219^253^[REPLACE] return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^long  args;^81^^^^^^^[REPLACE] final int args;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^final  long  optionalArgs;^82^^^^^^^[REPLACE] final int optionalArgs;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  ( fn.getType (  )   !=  Token.NAME )  {^129^^^^^123^154^[REPLACE] if  ( fn.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( v != this )  {^137^^^^^123^154^[REPLACE] if  ( v == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^return;  ;^138^^^^^123^154^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( fnDef != true ) {^142^143^^^^123^154^[REPLACE] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^return;  ;^145^^^^^142^146^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^return;  ;^145^^^^^123^154^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^String parentName = fn.getType (  ) ;^131^^^^^123^154^[REPLACE] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^String fnName = fn.getString (  )  ;^134^^^^^123^154^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[ADD]^^141^^^^^123^154^[ADD] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^FunctionInfo f = getFunctionInfo ( fnDef, this .getInitialValue (  )   ) ;^148^^^^^123^154^[REPLACE] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( v != null )  {^137^^^^^123^154^[REPLACE] if  ( v == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( parent != null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^123^154^[REPLACE] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[ADD]^^142^143^^145^146^123^154^[ADD] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^Node fn = parent.getFirstChild (  ) ;^128^^^^^123^154^[REPLACE] Node fn = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[ADD]^^131^^^^^123^154^[ADD] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^Node fnDef = false.getInitialValue (  ) ;^141^^^^^123^154^[REPLACE] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[ADD]^^148^^^^^123^154^[ADD] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
