[REPLACE]^private  Map<Node, FunctionInfo> functionInfos;^47^^^^^^^[REPLACE] private final Map<Node, FunctionInfo> functionInfos;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^final DiagnosticType WRONG_ARGUMENT_COUNT_ERROR = DiagnosticType.error ( "JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument ( s ) . " + "All definitions of this function require at least {2} argument ( s ) " +^51^52^53^54^^51^55^[REPLACE] static final DiagnosticType WRONG_ARGUMENT_COUNT_ERROR = DiagnosticType.error ( "JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument ( s ) . " + "All definitions of this function require at least {2} argument ( s ) " +^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^static  DiagnosticType OPTIONAL_ARGS_ERROR = DiagnosticType.error ( "JSC_OPTIONAL_ARGS_ERROR", "Required argument must precede optional argument ( s ) " ) ;^57^58^59^^^57^59^[REPLACE] static final DiagnosticType OPTIONAL_ARGS_ERROR = DiagnosticType.error ( "JSC_OPTIONAL_ARGS_ERROR", "Required argument must precede optional argument ( s ) " ) ;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^static final DiagnosticType VAR_ARGS_ERROR ;^61^62^63^^^61^63^[REPLACE] static final DiagnosticType VAR_ARGS_ERROR = DiagnosticType.error ( "JSC_VAR_ARGS_ERROR", "Argument must precede var_args argument" ) ;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^final  long  optionalArgs;^82^^^^^^^[REPLACE] final int optionalArgs;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^boolean hasVarArgs;^83^^^^^^^[REPLACE] final boolean hasVarArgs;^ [CLASS] FunctionCheck FunctionInfo ArgCheck  
[REPLACE]^this.compiler =  null;^67^^^^^66^70^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^this.level =  null;^68^^^^^66^70^[REPLACE] this.level = level;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^this.functionInfos ;^69^^^^^66^70^[REPLACE] this.functionInfos = new HashMap<Node, FunctionInfo> (  ) ;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^this.args =  optionalArgs;^86^^^^^85^89^[REPLACE] this.args = args;^[METHOD] <init> [TYPE] FunctionCheck$FunctionInfo(int,int,boolean) [PARAMETER] int args int optionalArgs boolean hasVarArgs [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^this.optionalArgs =  args;^87^^^^^85^89^[REPLACE] this.optionalArgs = optionalArgs;^[METHOD] <init> [TYPE] FunctionCheck$FunctionInfo(int,int,boolean) [PARAMETER] int args int optionalArgs boolean hasVarArgs [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^this.hasVarArgs =  true;^88^^^^^85^89^[REPLACE] this.hasVarArgs = hasVarArgs;^[METHOD] <init> [TYPE] FunctionCheck$FunctionInfo(int,int,boolean) [PARAMETER] int args int optionalArgs boolean hasVarArgs [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[ADD]^^88^^^^^85^89^[ADD] this.hasVarArgs = hasVarArgs;^[METHOD] <init> [TYPE] FunctionCheck$FunctionInfo(int,int,boolean) [PARAMETER] int args int optionalArgs boolean hasVarArgs [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^NodeTraversal .getScope (  )   ) ;^73^74^^^^72^75^[REPLACE] NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node externs  root  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^74^^^^^72^75^[REPLACE] Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node externs  root  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^if  ( ! ! ( other instanceof FunctionInfo )  )  {^92^^^^^91^101^[REPLACE] if  ( ! ( other instanceof FunctionInfo )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^return true;^93^^^^^91^101^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^for  ( FunctionInfo f : infos )  { int requiredCount = f.args - f.optionalArgs;^96^^^^^91^101^[REPLACE] FunctionInfo o =  ( FunctionInfo )  other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^return false ;^98^99^100^^^91^101^[REPLACE] return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs 
[REPLACE]^int result = 17 * 4;^104^^^^^103^109^[REPLACE] int result = 17;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^result = 11 * result  &  args;^105^^^^^103^109^[REPLACE] result = 37 * result + args;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^105^106^^^^103^109^[ADD] result = 37 * result + args; result = 37 * result + optionalArgs;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^result = 37 * result + args; ;^106^^^^^103^109^[REPLACE] result = 37 * result + optionalArgs;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^result = 37 * result +  (result ) ;^107^^^^^103^109^[REPLACE] result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return optionalArgs;^108^^^^^103^109^[REPLACE] return result;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return false ;^112^113^114^^^111^115^[REPLACE] return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^if  ( fn.getType (  )   &&  Token.NAME )  {^129^^^^^123^154^[REPLACE] if  ( fn.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^129^130^131^^^123^154^[ADD] if  ( fn.getType (  )  == Token.NAME )  {  String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^if  ( v != null )  {^137^^^^^123^154^[REPLACE] if  ( v == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return false;^138^^^^^123^154^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^if  (  fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^123^154^[REPLACE] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return false;^145^^^^^142^146^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^return false;^145^^^^^123^154^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^String parentName = fn.getType (  ) ;^131^^^^^123^154^[REPLACE] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^Scope.Var v = t.getCompiler (  ) .getVar ( fnName ) ;^134^^^^^123^154^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^Node fnDef = null.getInputName (  ) ;^141^^^^^123^154^[REPLACE] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^FunctionInfo f = getFunctionInfo ( fnDef, null.getInputName (  )  ) ;^148^^^^^123^154^[REPLACE] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^Node fn = parent.getFirstChild (  ) ;^128^^^^^123^154^[REPLACE] Node fn = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^String parentName = fn.getString (  ) ;^131^^^^^123^154^[REPLACE] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^131^^^^^123^154^[ADD] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^Node fnDef = true.getInitialValue (  ) ;^141^^^^^123^154^[REPLACE] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[ADD]^^148^^^^^123^154^[ADD] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  optionalArgs  result 
[REPLACE]^int count = n.getChildCount (  )   ^  1;^162^^^^^161^189^[REPLACE] int count = n.getChildCount (  )  - 1;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^162^163^^^^161^189^[ADD] int count = n.getChildCount (  )  - 1; boolean matched = false;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^boolean matched = true;^163^^^^^161^189^[REPLACE] boolean matched = false;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^int maxArgs = Integer.MIN_VALUE;^165^^^^^161^189^[REPLACE] int minArgs = Integer.MAX_VALUE;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^165^^^^^161^189^[ADD] int minArgs = Integer.MAX_VALUE;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^int minArgs = Integer.MAX_VALUE;^166^^^^^161^189^[REPLACE] int maxArgs = Integer.MIN_VALUE;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  (true ||  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^[REPLACE] if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^matched = false;^171^^^^^161^189^[REPLACE] matched = true;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^minArgs =  Math.min ( requiredCount, requiredCount ) ;^175^^^^^161^189^[REPLACE] minArgs = Math.min ( minArgs, requiredCount ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^175^176^^^^161^189^[ADD] minArgs = Math.min ( minArgs, requiredCount ) ; maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^maxArgs =  Math.max ( requiredCount, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^[REPLACE] maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^176^^^^^161^189^[ADD] maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^for  ( FunctionInfo f : infos )  { int requiredCount = f.args - f.optionalArgs;^168^^^^^161^189^[REPLACE] for  ( FunctionInfo f : infos )  {^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^int requiredCount =requiredCount - f.optionalArgs;^169^^^^^161^189^[REPLACE] int requiredCount = f.args - f.optionalArgs;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  ( matched )  {^179^^^^^161^189^[REPLACE] if  ( !matched )  {^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^t.getCompiler (  )  .getNext (  )  ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^[REPLACE] t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[ADD]^^180^181^182^^^161^189^[ADD] t.getCompiler (  ) .report ( JSError.make ( t, n, level,^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^t.getScope (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^[REPLACE] t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,   count   , String.^181^182^183^184^^161^189^[REPLACE] JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^count   , String.^184^185^186^187^^161^189^[REPLACE] String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^String.valueOf ( count ) , String.valueOf ( requiredCount ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^[REPLACE] String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[METHOD] checkCall [TYPE] void [PARAMETER] Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  Iterable infos  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node n  [TYPE]  FunctionInfo f  [TYPE]  String fnName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^FunctionInfo fi = functionInfos .put ( fn , fi )  ;^201^^^^^200^207^[REPLACE] FunctionInfo fi = functionInfos.get ( fn ) ;^[METHOD] getFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node fn  [TYPE]  FunctionInfo fi  [TYPE]  String fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  ( fi != null )  {^202^^^^^200^207^[REPLACE] if  ( fi == null )  {^[METHOD] getFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node fn  [TYPE]  FunctionInfo fi  [TYPE]  String fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^fi =  createFunctionInfo ( compiler, null, nullSourceName ) ;^203^^^^^200^207^[REPLACE] fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[METHOD] getFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node fn  [TYPE]  FunctionInfo fi  [TYPE]  String fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^return;^206^^^^^200^207^[REPLACE] return fi;^[METHOD] getFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node fn  [TYPE]  FunctionInfo fi  [TYPE]  String fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  optionalArgs  requiredCount  result 
[REPLACE]^Preconditions.checkState ( fn.getType (  )   &&  Token.FUNCTION ) ;^220^^^^^219^253^[REPLACE] Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^220^^^^^219^253^[REPLACE] Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^int numArgs = 3, optArgs = 3;^224^^^^^219^253^[REPLACE] int numArgs = 0, optArgs = 0;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^224^^^^^219^253^[ADD] int numArgs = 0, optArgs = 0;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^int numArgs = 0 + 0, optArgs = 0 + 0;^224^^^^^219^253^[REPLACE] int numArgs = 0, optArgs = 0;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^boolean hasVarArgs = true;^225^^^^^219^253^[REPLACE] boolean hasVarArgs = false;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^225^226^^^^219^253^[ADD] boolean hasVarArgs = false; Node args = fn.getFirstChild (  ) .getNext (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^Node args = fn.getString (  ) .getNext (  ) ;^226^^^^^219^253^[REPLACE] Node args = fn.getFirstChild (  ) .getNext (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^226^^^^^219^253^[ADD] Node args = fn.getFirstChild (  ) .getNext (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^Node varArg = this;^227^^^^^219^253^[REPLACE] Node varArg = null;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^if  ( fn.getType (  )  == Token.NAME )  {^232^^^^^219^253^[REPLACE] if  ( hasVarArgs )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^234^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( argName, a, VAR_ARGS_ERROR )  ) ;^234^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^} else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^237^^^^^219^253^[REPLACE] if  ( a.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^237^238^239^^241^219^253^[ADD] if  ( a.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  { varArg = a; hasVarArgs = true; numArgs--;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  else {^242^^^^^219^253^[REPLACE] } else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^}   optArgs++;compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^242^243^244^^246^219^253^[ADD] else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  { optArgs++; } else if  ( optArgs > 0 )  { compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  if  (requiredCount  ==  0 )  {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^}   compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^244^245^246^247^^219^253^[ADD] else if  ( optArgs > 0 )  {  compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( fnSourceName, varArg, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^246^^^^^219^253^[ADD] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( argName, a, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REMOVE]^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^246^^^^^219^253^[REMOVE] ^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^} else if  ( optArgs  >=  0 )  {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REMOVE]^if  ( hasVarArgs )  {     compiler.report ( make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ; }^244^^^^^219^253^[REMOVE] ^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler .getNext (  )  ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^varArg =  args;^238^^^^^219^253^[REPLACE] varArg = a;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^hasVarArgs = false;^239^^^^^219^253^[REPLACE] hasVarArgs = true;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^239^^^^^219^253^[ADD] hasVarArgs = true;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^246^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  else {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^for  ( NodevarArg = args.getFirstChild (  ) ; a == null; a = a.getNext (  )  )  {^228^^^^^219^253^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^232^233^234^235^^219^253^[ADD] if  ( hasVarArgs )  {  compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ; }^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^compiler.report ( JSError.make ( fnSourceName, varArg, VAR_ARGS_ERROR )  ) ;^234^^^^^219^253^[REPLACE] compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^}  if  ( optArgs  !=  0 )  {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^varArg =  null;^238^^^^^219^253^[REPLACE] varArg = a;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^} else if  (optionalArgs  <  0 )  {^244^^^^^219^253^[REPLACE] } else if  ( optArgs > 0 )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^String varArgrgName = a.getString (  ) ;^231^^^^^219^253^[REPLACE] String argName = a.getString (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^for  ( Node a =  varArgrgs.getFirstChild (  ) ; varArg !^228^^^^^219^253^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[ADD]^^228^229^^231^^219^253^[ADD] for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ; String argName = a.getString (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^for  ( Node a = varArg.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^219^253^[REPLACE] for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^String varArgrgName = a.getType (  ) ;^231^^^^^219^253^[REPLACE] String argName = a.getString (  ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^return new FunctionInfo ( requiredCount, optArgs, hasVarArgs ) ;^252^^^^^219^253^[REPLACE] return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionCheck FunctionInfo ArgCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^final  short  args;^81^^^^^^^[REPLACE] final int args;^[METHOD] createFunctionInfo [TYPE] FunctionCheck$FunctionInfo [PARAMETER] AbstractCompiler compiler Node fn String fnSourceName [CLASS] FunctionInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasVarArgs  matched  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  [TYPE]  Node a  args  fn  varArg  [TYPE]  String argName  fnSourceName  [TYPE]  Map functionInfos  [TYPE]  int args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result 
[REPLACE]^this.args =  optionalArgs;^86^^^^^85^89^[REPLACE] this.args = args;^[METHOD] <init> [TYPE] FunctionCheck$FunctionInfo(int,int,boolean) [PARAMETER] int args int optionalArgs boolean hasVarArgs [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^this.optionalArgs =  args;^87^^^^^85^89^[REPLACE] this.optionalArgs = optionalArgs;^[METHOD] <init> [TYPE] FunctionCheck$FunctionInfo(int,int,boolean) [PARAMETER] int args int optionalArgs boolean hasVarArgs [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^this.hasVarArgs =  true;^88^^^^^85^89^[REPLACE] this.hasVarArgs = hasVarArgs;^[METHOD] <init> [TYPE] FunctionCheck$FunctionInfo(int,int,boolean) [PARAMETER] int args int optionalArgs boolean hasVarArgs [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^if  ( ! ! ( other instanceof FunctionInfo )  )  {^92^^^^^91^101^[REPLACE] if  ( ! ( other instanceof FunctionInfo )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionInfo   [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  int args  optionalArgs 
[REPLACE]^return true;^93^^^^^91^101^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionInfo   [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  int args  optionalArgs 
[REPLACE]^int result = 17;^96^^^^^91^101^[REPLACE] FunctionInfo o =  ( FunctionInfo )  other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionInfo   [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  int args  optionalArgs 
[REPLACE]^return   o.optionalArgs ;^98^99^100^^^91^101^[REPLACE] return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] FunctionInfo   [TYPE]  FunctionInfo o  [TYPE]  Object other  [TYPE]  boolean false  hasVarArgs  true  [TYPE]  int args  optionalArgs 
[REPLACE]^int result = 17 - 3;^104^^^^^103^109^[REPLACE] int result = 17;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  result  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^result = 37 * result +result;^105^^^^^103^109^[REPLACE] result = 37 * result + args;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  result  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^result = 37 * result + args; ;^106^^^^^103^109^[REPLACE] result = 37 * result + optionalArgs;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  result  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^result  =  1 ;^107^^^^^103^109^[REPLACE] result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  result  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^return optionalArgs;^108^^^^^103^109^[REPLACE] return result;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  result  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^return args  &  " total argument ( s )  "  &  "of which "  &  optionalArgs  &  " is/are optional"  &  ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^[REPLACE] return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] FunctionInfo   [TYPE]  int args  optionalArgs  result  [TYPE]  boolean false  hasVarArgs  true 
[REPLACE]^if  ( fn.getType (  )   ||  Token.NAME )  {^129^^^^^123^154^[REPLACE] if  ( fn.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( v != false )  {^137^^^^^123^154^[REPLACE] if  ( v == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( fnDef != null ) {^142^143^^^^123^154^[REPLACE] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[ADD]^^142^143^^145^146^123^154^[ADD] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^String parentName = fn .getFirstChild (  )  ;^131^^^^^123^154^[REPLACE] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^String fnName = fn.getString (  ) ;^134^^^^^123^154^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^Node fnDef = this.getInitialValue (  ) ;^141^^^^^123^154^[REPLACE] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^FunctionInfo f = getFunctionInfo ( fnDef, v.getInitialValue (  )  ) ;^148^^^^^123^154^[REPLACE] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( v != null )  {^137^^^^^123^154^[REPLACE] if  ( v == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^if  ( fnDef != this ) {^142^143^^^^123^154^[REPLACE] if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^Node fn = parent.getFirstChild (  ) ;^128^^^^^123^154^[REPLACE] Node fn = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^String fnName = fn .getFirstChild (  )  ;^131^^^^^123^154^[REPLACE] String fnName = fn.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^Node fnDef = null.getInputName (  ) ;^141^^^^^123^154^[REPLACE] Node fnDef = v.getInitialValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[REPLACE]^FunctionInfo f = getFunctionInfo ( parent, v.getInputName (  )  ) ;^148^^^^^123^154^[REPLACE] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
[ADD]^^148^^^^^123^154^[ADD] FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ArgCheck   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node fn  fnDef  n  parent  [TYPE]  FunctionInfo f  [TYPE]  String fnName 
