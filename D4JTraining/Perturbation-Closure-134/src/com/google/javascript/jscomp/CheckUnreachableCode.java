[REPLACE]^static final DiagnosticType UNREACHABLE_CODE ;^35^36^^^^35^36^[REPLACE] static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error ( "JSC_UNREACHABLE_CODE", "unreachable code" ) ;^ [CLASS] CheckUnreachableCode  
[REPLACE]^private  AbstractCompiler compiler;^38^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CheckUnreachableCode  
[REPLACE]^private  CheckLevel level;^39^^^^^^^[REPLACE] private final CheckLevel level;^ [CLASS] CheckUnreachableCode  
[ADD]^^55^^^^^54^76^[ADD] GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
[REPLACE]^if  ( gNode == null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^[REPLACE] if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
[REPLACE]^if  ( n.getLineno (  )  != -1 ) {^62^63^64^^^54^76^[REPLACE] if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
[REPLACE]^return false;  ;^72^^^^^62^73^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
[REPLACE]^return true;^72^^^^^54^76^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
[REPLACE]^if  ( n.getLineno (  )  != -1 ||  n.getType (  )  != Token.EMPTY || n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^[REPLACE] if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
[REPLACE]^return true;^72^^^^^62^73^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
[REPLACE]^return false;^75^^^^^54^76^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckUnreachableCode   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNREACHABLE_CODE  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  GraphNode gNode 
