[REPLACE]^private static final Logger logger  = null ;^38^39^^^^38^39^[REPLACE] private static final Logger logger = Logger.getLogger ( NameAnonymousFunctions.class.getName (  )  ) ;^ [CLASS] NameAnonymousFunctions AnonymousFunctionNamer  
[REPLACE]^static final char DELIMITER  = null ;^41^^^^^^^[REPLACE] static final char DELIMITER = '$';^ [CLASS] NameAnonymousFunctions AnonymousFunctionNamer  
[REPLACE]^private  long  namedCount = 0;^45^^^^^^^[REPLACE] private int namedCount = 0;^ [CLASS] NameAnonymousFunctions AnonymousFunctionNamer  
[REPLACE]^private int bytesUsed  = null ;^46^^^^^^^[REPLACE] private int bytesUsed = 0;^ [CLASS] NameAnonymousFunctions AnonymousFunctionNamer  
[REPLACE]^this.compiler =  null;^49^^^^^48^50^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  char DELIMITER  [TYPE]  AbstractCompiler compiler  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[ADD]^^49^^^^^48^50^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  char DELIMITER  [TYPE]  AbstractCompiler compiler  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^this.nameExtractor =  new AnonymousFunctionNamingCallback ( new AnonymousFunctionNamer (  )  )  ;^72^^^^^71^73^[REPLACE] this.nameExtractor = new NodeNameExtractor ( DELIMITER ) ;^[METHOD] <init> [TYPE] NameAnonymousFunctions$AnonymousFunctionNamer() [PARAMETER] [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  char DELIMITER  [TYPE]  AbstractCompiler compiler  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^String uniqueName = getLikelyNonConflictingName ( name ) ;^56^^^^^53^59^[REPLACE] NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AnonymousFunctionNamingCallback namingCallback  [TYPE]  Node externs  root  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^logger.info ( "Named "  |  namedCount  |  " anon functions using "  |  bytesUsed  |  " bytes" ) ;^57^58^^^^53^59^[REPLACE] logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AnonymousFunctionNamingCallback namingCallback  [TYPE]  Node externs  root  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^return lhs + DELIMITER + rhs;^80^^^^^79^81^[REPLACE] return DELIMITER + name + DELIMITER;^[METHOD] getLikelyNonConflictingName [TYPE] String [PARAMETER] String name [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^return nameExtractor.NodeNameExtractor ( node ) ;^85^^^^^84^86^[REPLACE] return nameExtractor.getName ( node ) ;^[METHOD] getName [TYPE] String [PARAMETER] Node node [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^Node fnNameNode = fnNameNode.getFirstChild (  ) ;^90^^^^^89^96^[REPLACE] Node fnNameNode = fnNode.getFirstChild (  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^String uniqueName = getLikelyNonConflictingName ( uniqueName ) ;^91^^^^^89^96^[REPLACE] String uniqueName = getLikelyNonConflictingName ( name ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^fnName  uniqueName   ;^92^^^^^89^96^[REPLACE] fnNameNode.setString ( uniqueName ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^String uniqueName = getLikelyNonConflictingName ( name ) ;^93^^^^^89^96^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[ADD]^^93^^^^^89^96^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^bytesUsed +=  name.length (  ) ;^95^^^^^89^96^[REPLACE] bytesUsed += uniqueName.length (  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^return lhs +lhs + rhs;^99^^^^^98^100^[REPLACE] return lhs + DELIMITER + rhs;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String lhs  rhs  [TYPE]  Logger logger  [TYPE]  int bytesUsed  namedCount 
[REPLACE]^this.nameExtractor ;^72^^^^^71^73^[REPLACE] this.nameExtractor = new NodeNameExtractor ( DELIMITER ) ;^[METHOD] <init> [TYPE] NameAnonymousFunctions$AnonymousFunctionNamer() [PARAMETER] [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  boolean false  true 
[REPLACE]^return DELIMITER  &&  name  &&  DELIMITER;^80^^^^^79^81^[REPLACE] return DELIMITER + name + DELIMITER;^[METHOD] getLikelyNonConflictingName [TYPE] String [PARAMETER] String name [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return DELIMITER + name + DELIMITER;^85^^^^^84^86^[REPLACE] return nameExtractor.getName ( node ) ;^[METHOD] getName [TYPE] String [PARAMETER] Node node [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  Node node  [TYPE]  boolean false  true 
[REPLACE]^Node fnNameNode = fnNameNode.getFirstChild (  ) ;^90^^^^^89^96^[REPLACE] Node fnNameNode = fnNode.getFirstChild (  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode 
[ADD]^^90^91^^^^89^96^[ADD] Node fnNameNode = fnNode.getFirstChild (  ) ; String uniqueName = getLikelyNonConflictingName ( name ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode 
[REPLACE]^String uniqueName = getLikelyNonConflictingName ( uniqueName ) ;^91^^^^^89^96^[REPLACE] String uniqueName = getLikelyNonConflictingName ( name ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode 
[REPLACE]^fnName  uniqueName   ;^92^^^^^89^96^[REPLACE] fnNameNode.setString ( uniqueName ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode 
[REMOVE]^String uniqueName = getLikelyNonConflictingName ( name ) ;^92^^^^^89^96^[REMOVE] ^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode 
[REPLACE]^String uniqueName = getLikelyNonConflictingName ( name ) ;^93^^^^^89^96^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode 
[REPLACE]^bytesUsed +=  name.length (  ) ;^95^^^^^89^96^[REPLACE] bytesUsed += uniqueName.length (  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String name  uniqueName  [TYPE]  boolean false  true  [TYPE]  Node fnNameNode  fnNode 
[REPLACE]^return lhs +lhs + rhs;^99^^^^^98^100^[REPLACE] return lhs + DELIMITER + rhs;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] AnonymousFunctionNamer   [TYPE]  NodeNameExtractor nameExtractor  [TYPE]  String lhs  rhs  [TYPE]  boolean false  true 
