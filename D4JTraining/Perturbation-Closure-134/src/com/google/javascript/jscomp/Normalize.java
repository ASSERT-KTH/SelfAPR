[REPLACE]^private static final boolean CONVERT_WHILE_TO_FOR ;^70^^^^^^^[REPLACE] private static final boolean CONVERT_WHILE_TO_FOR = true;^ [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  
[REPLACE]^static final boolean MAKE_LOCAL_NAMES_UNIQUE ;^71^^^^^^^[REPLACE] static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;^ [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  
[REPLACE]^private Map<String,Boolean> constantMap ;^180^^^^^^^[REPLACE] private Map<String,Boolean> constantMap = Maps.newHashMap (  ) ;^ [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  
[REPLACE]^if  ( n.getType (  )   ) {^126^^^^^124^153^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^127^^^^^124^153^[REPLACE] if  ( n.getString (  ) .isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^return;  ;^128^^^^^124^153^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == this )  {^134^^^^^124^153^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^135^^^^^124^153^[REPLACE] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^if  (  ( info == null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^[REPLACE] if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[ADD]^^138^139^140^141^142^124^153^[ADD] if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; if  ( assertOnChange )  { String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^141^^^^^138^151^[REPLACE] if  ( assertOnChange )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^String parentame = n.getParent (  ) ;^142^^^^^138^151^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^return ;^143^144^145^146^^138^151^[REPLACE] throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^141^^^^^124^153^[REPLACE] if  ( assertOnChange )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^String parentame = n.getString (  ) ;^142^^^^^124^153^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[ADD]^^143^144^145^^^124^153^[ADD] throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" +^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^Node previous = null  ;^131^^^^^124^153^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^124^153^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^String parentame = n.getParent (  ) ;^142^^^^^124^153^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^return ;^143^144^145^146^^124^153^[REPLACE] throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^if  ( parent.getParent (  ) .isEmpty (  )  )  {^127^^^^^124^153^[REPLACE] if  ( n.getString (  ) .isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[ADD]^info = var.getJSDocInfo (  ) ;^134^135^136^^^124^153^[ADD] if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^String parentame = n .getParent (  )  ;^142^^^^^138^151^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = false;^131^^^^^124^153^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( parent.getParent (  )  ) ;^133^^^^^124^153^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[ADD]^^142^^^^^124^153^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map constantMap 
[REPLACE]^if  ( n.getType (  )   !=  Token.NAME )  {^184^^^^^183^230^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^184^185^186^187^188^183^230^[ADD] if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( parent.getString (  ) .isEmpty (  )  )  {^186^^^^^183^230^[REPLACE] if  ( n.getString (  ) .isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^return;  ;^187^^^^^183^230^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^191^^^^^183^230^[REPLACE] if  ( checkUserDeclarations )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( NodeUtil.isConstantName ( n ) && compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^183^230^[REPLACE] if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == this )  {^201^^^^^193^210^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^201^202^203^^^193^210^[ADD] if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^202^^^^^193^210^[ADD] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == this && info.isConstant (  )  )  {^205^^^^^193^210^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^208^^^^^205^209^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^206^^^^^193^210^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^197^^^^^193^210^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^206^^^^^193^210^[ADD] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^208^^^^^193^210^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = true;^199^^^^^193^210^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^193^210^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^195^^^^^193^210^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == null )  {^201^^^^^183^230^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^202^^^^^183^230^[REPLACE] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  (  info.isConstant (  )  )  {^205^^^^^183^230^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^208^^^^^205^209^[ADD] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^206^^^^^183^230^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  (true )  {^212^^^^^183^230^[REPLACE] if  ( expectedConst )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState (true  &&  isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( expectedConst  !=  isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^183^230^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^195^^^^^183^230^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true  ;^197^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^208^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^boolean expectedConst = true;^192^^^^^183^230^[REPLACE] boolean expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^199^^^^^183^230^[ADD] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^200^^^^^183^230^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( NodeUtil.isConstantName ( parent ) && compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^183^230^[REPLACE] if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^193^194^195^196^197^183^230^[ADD] if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  { expectedConst = true; } else { expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == null )  {^201^^^^^193^210^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^193^210^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false  ;^206^^^^^193^210^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^197^^^^^193^210^[ADD] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^202^^^^^193^210^[REPLACE] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^199^200^^^^193^210^[ADD] JSDocInfo info = null; Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^info = var.getJSDocInfo (  ) ;^201^202^203^^^183^230^[ADD] if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^202^^^^^183^230^[ADD] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == true && info.isConstant (  )  )  {^205^^^^^183^230^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^expectedConst = true;expectedConst = false;^205^206^207^208^209^183^230^[ADD] if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false  ;^206^^^^^183^230^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^212^213^214^215^216^183^230^[ADD] if  ( expectedConst )  { Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ; } else { Preconditions.checkState ( expectedConst == isConst,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( true  &&  isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( expectedConst  ||  false, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^183^230^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( value != null )  {^222^^^^^183^230^[REPLACE] if  ( value == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState (true (  )   &&  isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^[REPLACE] Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^225^226^227^^^222^228^[ADD] Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^constantMap.put ( name, expectedConst ) ;^223^^^^^183^230^[REPLACE] constantMap.put ( name, isConst ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false  ;^195^^^^^183^230^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^185^^^^^183^230^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^boolean isConst = n.putBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^183^230^[REPLACE] boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = this;^199^^^^^183^230^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( n.getParent (  )  ) ;^200^^^^^183^230^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^221^^^^^183^230^[ADD] Boolean value = constantMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^return;^186^187^188^^^183^230^[ADD] if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == false )  {^201^^^^^193^210^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^205^206^207^208^209^193^210^[ADD] if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^208^^^^^193^210^[ADD] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = this;^199^^^^^193^210^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^201^202^203^^^183^230^[ADD] if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^183^230^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^206^^^^^183^230^[ADD] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( false )  {^212^^^^^183^230^[REPLACE] if  ( expectedConst )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions .checkState (  )  ;^216^217^^^^212^218^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( false  &&  isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^183^230^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^195^^^^^183^230^[ADD] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^197^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Node previous = null  ;^199^^^^^183^230^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^200^^^^^183^230^[ADD] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  (  compiler.reportCodeChange (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^183^230^[REPLACE] if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  (  info.isConstant (  )  )  {^205^^^^^193^210^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false  ;^195^^^^^193^210^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( expectedConst  &&  isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^183^230^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( value != this )  {^222^^^^^183^230^[REPLACE] if  ( value == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( true (  )   ||  expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^[REPLACE] Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^compiler.reportCodeChange (  )  ;^223^^^^^183^230^[REPLACE] constantMap.put ( name, isConst ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true  ;^208^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^String parentame = n.getString (  ) ;^185^^^^^183^230^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^boolean isConst = parent.putBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^183^230^[REPLACE] boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t .traverseRoots ( parent , parent )  .getVar ( n.getString (  )  ) ;^200^^^^^183^230^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( n.getType (  )   ||  Token.LABEL )  {^252^^^^^251^271^[REPLACE] if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^normalizeLabels ( parent ) ;^253^^^^^251^271^[REPLACE] normalizeLabels ( n ) ;^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^253^^^^^251^271^[ADD] normalizeLabels ( n ) ;^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.isConstantName ( n )  && n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^[REPLACE] if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^extractForInitializer ( n, this, this ) ;^259^^^^^251^271^[REPLACE] extractForInitializer ( n, null, null ) ;^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if   (  NodeUtil.isStatementBlock  (  gramps  )    )   {  ;^264^^^^^251^271^[REPLACE] if  ( NodeUtil.isStatementBlock ( n )  )  {^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^splitVarDeclarations ( parent ) ;^265^^^^^251^271^[REPLACE] splitVarDeclarations ( n ) ;^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^268^^^^^251^271^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^moveNamedFunctions ( parent.getLastChild (  )  ) ;^269^^^^^251^271^[REPLACE] moveNamedFunctions ( n.getLastChild (  )  ) ;^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^269^^^^^251^271^[ADD] moveNamedFunctions ( n.getLastChild (  )  ) ;^[METHOD] doStatementNormalizations [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^Preconditions.checkArgument ( n.getType (  )   !=  Token.LABEL ) ;^281^^^^^280^298^[REPLACE] Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[METHOD] normalizeLabels [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node block  last  n 
[REPLACE]^( gramps.getType (  )  )  ;^281^^^^^280^298^[REPLACE] Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[METHOD] normalizeLabels [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node block  last  n 
[REPLACE]^Node newStatement  ;^283^^^^^280^298^[REPLACE] Node last = n.getLastChild (  ) ;^[METHOD] normalizeLabels [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node block  last  n 
[REPLACE]^return;  ;^290^^^^^280^298^[REPLACE] return;^[METHOD] normalizeLabels [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node block  last  n 
[REPLACE]^return;  ;^296^^^^^280^298^[REPLACE] return;^[METHOD] normalizeLabels [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node block  last  n 
[REPLACE]^Node newVar = new Node ( VAR, name, n.getLineno (  ) , n.getCharno (  )  )  ;^292^^^^^280^298^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] normalizeLabels [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node block  last  n 
[REPLACE]^if  ( !NodeUtil.newExpr ( c ) ) {^323^324^^^^312^343^[REPLACE] if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[ADD]^^323^324^325^326^^312^343^[ADD] if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  { Node init = c.getFirstChild (  ) ; c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^if  ( init .setType (  )    !=  Token.VAR )  {^331^^^^^323^339^[REPLACE] if  ( init.getType (  )  == Token.VAR )  {^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^newStatement =  NodeUtil.newExpr ( next ) ;^334^^^^^331^335^[REPLACE] newStatement = NodeUtil.newExpr ( init ) ;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^newStatement =  next;^332^^^^^323^339^[REPLACE] newStatement = init;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^newStatement =  NodeUtil.newExpr ( next ) ;^334^^^^^323^339^[REPLACE] newStatement = NodeUtil.newExpr ( init ) ;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^Node init = c.getLastChild (  ) ;^325^^^^^323^339^[REPLACE] Node init = c.getFirstChild (  ) ;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^Node c = n.getFirstChild (  )  ;^328^^^^^323^339^[REPLACE] Node newStatement;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^if  ( init.getType (  )   ) {^331^^^^^312^343^[REPLACE] if  ( init.getType (  )  == Token.VAR )  {^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[ADD]^newStatement = init;newStatement = NodeUtil.newExpr ( init ) ;^331^332^333^334^335^312^343^[ADD] if  ( init.getType (  )  == Token.VAR )  { newStatement = init; } else { newStatement = NodeUtil.newExpr ( init ) ; }^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^newStatement =  next;^332^^^^^312^343^[REPLACE] newStatement = init;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^for  ( Node next, c =  n.getFirstChild (  ) ; c !^314^^^^^312^343^[REPLACE] for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[ADD]^Node insertBefore =  ( before == null )  ? c : before;^315^316^^^^312^343^[ADD] next = c.getNext (  ) ; Node insertBefore =  ( before == null )  ? c : before;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^newStatement =  NodeUtil.newExpr ( next ) ;^334^^^^^312^343^[REPLACE] newStatement = NodeUtil.newExpr ( init ) ;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[ADD]^^314^315^316^317^^312^343^[ADD] for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  { next = c.getNext (  ) ; Node insertBefore =  ( before == null )  ? c : before; Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^for  ( Node next, c = n.getLastChild (  ) ; c != null; c = next )  {^314^^^^^312^343^[REPLACE] for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[ADD]^^316^317^318^319^320^312^343^[ADD] Node insertBefore =  ( before == null )  ? c : before; Node insertBeforeParent =  ( before == null )  ? n : beforeParent; switch  ( c.getType (  )  )  { case Token.LABEL: extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^Node insertBeforeParent  =  beforeParent;^317^^^^^312^343^[REPLACE] Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^Node c = n.getFirstChild (  )  ;^325^^^^^312^343^[REPLACE] Node init = c.getFirstChild (  ) ;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^Node c = n.getFirstChild (  )  ;^328^^^^^312^343^[REPLACE] Node newStatement;^[METHOD] extractForInitializer [TYPE] void [PARAMETER] Node n Node before Node beforeParent [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next 
[REPLACE]^if  ( c.getType (  )   &&  Token.VAR )  {^357^^^^^354^371^[REPLACE] if  ( c.getType (  )  == Token.VAR )  {^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^if  ( assertOnChange && c.putBooleanProp (  )  )  {^358^^^^^354^371^[REPLACE] if  ( assertOnChange && !c.hasChildren (  )  )  {^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^throw new IllegalStateException (  ( "Normalize constraints violated:\n" + changeDescription )  )  ;^359^^^^^354^371^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[ADD]^^363^364^^^^354^371^[ADD] Node name = c.getFirstChild (  ) ; c.removeChild ( name ) ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^Node newVar = new Node ( Token.VAR, next, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^[REPLACE] Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^return ;^359^^^^^354^371^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^if  ( assertOnChange && c.hasChildren (  )  )  {^358^^^^^354^371^[REPLACE] if  ( assertOnChange && !c.hasChildren (  )  )  {^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[ADD]^^358^359^360^^^354^371^[ADD] if  ( assertOnChange && !c.hasChildren (  )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[ADD]^^355^356^357^358^359^354^371^[ADD] for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  { next = c.getNext (  ) ; if  ( c.getType (  )  == Token.VAR )  { if  ( assertOnChange && !c.hasChildren (  )  )  { throw new IllegalStateException  (" ")  ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[ADD]^^356^^^^^354^371^[ADD] next = c.getNext (  ) ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^Node newStatement  ;^355^^^^^354^371^[REPLACE] for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^for  ( Node next, c = n.getLastChild (  ) ; c != null; c = next )  {^355^^^^^354^371^[REPLACE] for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[ADD]^^363^^^^^354^371^[ADD] Node name = c.getFirstChild (  ) ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^Node newVar = new Node ( Token.VAR, next, n.getLineno (  ) , n.getParent (  )  ) ;^365^^^^^354^371^[REPLACE] Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[METHOD] splitVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node c  n  name  newVar  next 
[REPLACE]^Preconditions.checkState ( functionBody.getString (  ) .getType (  )   &&  Token.FUNCTION ) ;^378^379^^^^377^409^[REPLACE] Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^functionBody .getString (  )  .getType (  )  == Token.FUNCTION ) ;^379^^^^^377^409^[REPLACE] functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[ADD]^^379^^^^^377^409^[ADD] functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^functionBody.getString (  ) .getType (  )  == Token.FUNCTION ) ;^379^^^^^377^409^[REPLACE] functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[ADD]^^379^380^^^^377^409^[ADD] functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ; Node previous = null;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^Node previous = this;^380^^^^^377^409^[REPLACE] Node previous = null;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[ADD]^^381^^^^^377^409^[ADD] Node current = functionBody.getFirstChild (  ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^previous =  next;^385^^^^^377^409^[REPLACE] previous = current;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^current =  next.getNext (  ) ;^386^^^^^377^409^[REPLACE] current = current.getNext (  ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[ADD]^^390^^^^^377^409^[ADD] Node insertAfter = previous;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( next )  )  {^394^^^^^377^409^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^previous =  next;^405^^^^^394^406^[REPLACE] previous = current;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[ADD]^^401^^^^^377^409^[ADD] insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^insertAfter =  addToFront ( previous, current, insertAfter ) ;^401^^^^^377^409^[REPLACE] insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^previous =  next;^405^^^^^377^409^[REPLACE] previous = current;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^current =  previous;^407^^^^^377^409^[REPLACE] current = next;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[ADD]^^393^^^^^377^409^[ADD] Node next = current.getNext (  ) ;^[METHOD] moveNamedFunctions [TYPE] void [PARAMETER] Node functionBody [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  Node current  functionBody  insertAfter  next  previous 
[REPLACE]^checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  )  ;^450^^^^^449^496^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Preconditions.checkState ( replacement.getType (  )  == Token.NAME ) ;^450^^^^^449^496^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^450^^^^^449^496^[ADD] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^451^^^^^449^496^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REMOVE]^if  ( n.hasChildren (  )  )  {     parent.removeChild ( n ) ;     Node value = n.getFirstChild (  ) ;     n.removeChild ( value ) ;     Node replacement = new Node ( ASSIGN, n, value ) ;     gramps.replaceChild ( parent, new Node ( EXPR_RESULT, replacement )  ) ; }else {     if  ( isStatementBlock ( gramps )  )  {         gramps.removeChild ( parent ) ;     }else         if  (  ( gramps.getType (  )  )  ==  ( FOR )  )  {             parent.removeChild ( n ) ;             gramps.replaceChild ( parent, n ) ;         }else {             checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  ) ;             gramps.replaceChild ( parent, new Node ( EMPTY )  ) ;         }      }^451^^^^^449^496^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^471^^^^^449^496^[REPLACE] if  ( n.hasChildren (  )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^if   (  NodeUtil.isStatementBlock  (  n  )    )   {  ;^481^^^^^471^493^[REPLACE] if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^481^482^483^^^471^493^[ADD] if  ( NodeUtil.isStatementBlock ( gramps )  )  { gramps.removeChild ( parent ) ; } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^}  if  ( gramps.getType (  )   ||  Token.FOR )  {^483^^^^^471^493^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Preconditions.checkState ( value.getType (  )   !=  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REMOVE]^checkState (  ( expectedConst == isConst ) ,  (  ( "The name " + name )  + " is not annotated as constant." )  )  ;^490^^^^^483^492^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps .getLastChild (  )  ;^491^^^^^483^492^[REPLACE] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^parent .removeChildAfter ( parent )  ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REMOVE]^compiler.reportCodeChange (  )  ;^487^^^^^471^493^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.removeChild ( parent )  ;^488^^^^^471^493^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps .removeChildAfter ( parent )  ;^482^^^^^471^493^[REPLACE] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^482^^^^^471^493^[ADD] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^}  if  (   Token.FOR )  {^483^^^^^471^493^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^}   parent.removeChild ( n ) ;^483^484^^^487^471^493^[ADD] else if  ( gramps.getType (  )  == Token.FOR )  {  parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^checkState (  (  ( n.getType (  )  )  ==  ( NAME )  )  )  ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^( n.getType (  )  )  ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REMOVE]^( c.getFirstChild (  ) .getType (  )  )  ;^490^^^^^483^492^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^[REPLACE] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^parent .removeChildAfter ( replacement )  ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.replaceChild ( parent, replacement ) ;^488^^^^^471^493^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Node value = n .getLastChild (  )  ;^475^^^^^449^496^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Node replacement = replacementew Node ( Token.ASSIGN, n, value ) ;^477^^^^^449^496^[REPLACE] Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^449^496^[REPLACE] if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^}  else {^483^^^^^449^496^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^}   parent.removeChild ( n ) ;^483^484^^^487^449^496^[ADD] else if  ( gramps.getType (  )  == Token.FOR )  {  parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^490^^^^^483^492^[ADD] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.addChildAfter ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^[REPLACE] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^parent.removeChildAfter ( n ) ;^487^^^^^449^496^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^487^^^^^449^496^[ADD] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.removeChild ( parent )  ;^488^^^^^449^496^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.removeChildAfter ( parent ) ;^482^^^^^449^496^[REPLACE] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REMOVE]^c.removeChild ( name )  ;^482^^^^^449^496^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^490^491^^^^483^492^[ADD] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^491^^^^^483^492^[ADD] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REMOVE]^c.removeChild ( name )  ;^488^^^^^449^496^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Node value = replacement.getFirstChild (  ) ;^475^^^^^449^496^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^477^^^^^449^496^[ADD] Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^471^472^473^^475^449^496^[ADD] if  ( n.hasChildren (  )  )  {  parent.removeChild ( n ) ; Node value = n.getFirstChild (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^}  if  ( gramps.getType (  )   &&  Token.FOR )  {^483^^^^^471^493^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Preconditions.checkState ( value.getType (  )   ||  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^parent.removeChild ( replacement ) ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.addChildAfter ( parent, n ) ;^488^^^^^471^493^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.replaceChild ( parent, n )  ;^482^^^^^471^493^[REPLACE] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^} else if  ( gramps.getType (  )   ||  Token.FOR )  {^483^^^^^471^493^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.addChildAfter ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^[REPLACE] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^parent.removeChildAfter ( n ) ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^475^476^^^^449^496^[ADD] Node value = n.getFirstChild (  ) ; n.removeChild ( value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^if   (  NodeUtil.isStatementBlock  (  n  )    )   {  ;^481^^^^^449^496^[REPLACE] if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^}  if  ( gramps.getType (  )   ||  Token.FOR )  {^483^^^^^449^496^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^parent.removeChild ( replacement ) ;^487^^^^^449^496^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.replaceChild ( value, n ) ;^488^^^^^449^496^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Preconditions.checkState ( gramps .setType (  )    ||  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Preconditions.checkState ( value.putBooleanProp (  )  == Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^parent.hasOneChild (  )  ;^487^^^^^449^496^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REMOVE]^compiler.reportCodeChange (  )  ;^487^^^^^449^496^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^gramps.replaceChild ( parent, replacement ) ;^488^^^^^449^496^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[ADD]^^475^^^^^449^496^[ADD] Node value = n.getFirstChild (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^Node newVar = new Node ( VAR, name, n.getLineno (  ) , n.getCharno (  )  )  ;^477^^^^^449^496^[REPLACE] Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  String name  [TYPE]  Scope s  [TYPE]  Map constantMap  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value 
[REPLACE]^private  AbstractCompiler compiler;^109^^^^^^^[REPLACE] private final AbstractCompiler compiler;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  false  forbidChanges  isConst  true  [TYPE]  Map constantMap  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )   ) {^126^^^^^124^153^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^126^127^128^129^^124^153^[ADD] if  ( n.getType (  )  == Token.NAME )  { if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( parent.getString (  ) .isEmpty (  )  )  {^127^^^^^124^153^[REPLACE] if  ( n.getString (  ) .isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^128^^^^^124^153^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( var == null )  {^134^^^^^124^153^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^135^^^^^124^153^[REPLACE] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  ( info == null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^[REPLACE] if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^141^^^^^138^151^[REPLACE] if  ( assertOnChange )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^String name = n.getString (  ) ;^141^142^143^144^145^138^151^[ADD] if  ( assertOnChange )  { String name = n.getString (  ) ; throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" +^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^String parentame = n.getString (  ) ;^142^^^^^138^151^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^return ;^143^144^145^146^^138^151^[REPLACE] throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^141^^^^^124^153^[REPLACE] if  ( assertOnChange )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^142^^^^^124^153^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^return ;^143^144^145^146^^124^153^[REPLACE] throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = false;^131^^^^^124^153^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^133^^^^^124^153^[ADD] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^String parentame = n.getParent (  ) ;^142^^^^^124^153^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^String name = n.getParent (  ) ;^142^^^^^138^151^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[ADD]^^143^144^145^^^124^153^[ADD] throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" +^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = this;^131^^^^^124^153^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] PropogateConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^private boolean checkUserDeclarations;^163^^^^^^^[REPLACE] final private boolean checkUserDeclarations;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^private Map<String,Boolean> constantMap ;^180^^^^^^^[REPLACE] private Map<String,Boolean> constantMap = Maps.newHashMap (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^184^^^^^183^230^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( parent.getString (  ) .isEmpty (  )  )  {^186^^^^^183^230^[REPLACE] if  ( n.getString (  ) .isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^return;  ;^187^^^^^183^230^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^191^^^^^183^230^[REPLACE] if  ( checkUserDeclarations )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( NodeUtil.isConstantName ( n ) && compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^183^230^[REPLACE] if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^193^194^195^196^197^183^230^[ADD] if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  { expectedConst = true; } else { expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == null )  {^201^^^^^193^210^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^202^^^^^193^210^[REPLACE] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == this ) {^205^^^^^193^210^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^expectedConst = true;expectedConst = false;^205^206^207^208^209^193^210^[ADD] if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^208^^^^^205^209^[ADD] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false  ;^206^^^^^193^210^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^197^^^^^193^210^[ADD] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^206^^^^^193^210^[ADD] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^208^^^^^193^210^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = this;^199^^^^^193^210^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( n.getParent (  )  ) ;^200^^^^^193^210^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^195^^^^^193^210^[ADD] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == false )  {^201^^^^^183^230^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^202^^^^^183^230^[REPLACE] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == null ) {^205^^^^^183^230^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^206^^^^^183^230^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( true )  {^212^^^^^183^230^[REPLACE] if  ( expectedConst )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^212^213^214^215^216^183^230^[ADD] if  ( expectedConst )  { Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ; } else { Preconditions.checkState ( expectedConst == isConst,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( expectedConst  &&  isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( expectedConst  != true, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^183^230^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^195^^^^^183^230^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^197^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false  ;^206^^^^^183^230^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^208^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^boolean expectedConst = true;^192^^^^^183^230^[REPLACE] boolean expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^199^^^^^183^230^[ADD] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^183^230^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  (  compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^183^230^[REPLACE] if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if   (  value == null  )   {  ;^201^^^^^193^210^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^201^202^203^^^193^210^[ADD] if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == false && info.isConstant (  )  )  {^205^^^^^193^210^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^205^206^207^208^209^193^210^[ADD] if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^208^^^^^205^209^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = true;^199^^^^^193^210^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^193^210^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^195^^^^^193^210^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == true )  {^201^^^^^183^230^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == false && info.isConstant (  )  )  {^205^^^^^183^230^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true  ;^208^^^^^205^209^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( expectedConst  != true, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions .checkState (  )  ;^213^214^^^^183^230^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^213^214^^^^183^230^[ADD] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( value != false )  {^222^^^^^183^230^[REPLACE] if  ( value == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^222^223^224^225^226^183^230^[ADD] if  ( value == null )  { constantMap.put ( name, isConst ) ; } else { Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " +^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( true (  )   ||  false, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^[REPLACE] Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^newArrayList ( externs, root )  ;^223^^^^^183^230^[REPLACE] constantMap.put ( name, isConst ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^223^^^^^183^230^[ADD] constantMap.put ( name, isConst ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^206^^^^^183^230^[ADD] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true  ;^208^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^String parentame = n.getString (  ) ;^185^^^^^183^230^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^boolean isConst = parent.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^183^230^[REPLACE] boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = this;^199^^^^^183^230^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^200^^^^^183^230^[ADD] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Boolean value = constantMap .put ( false , 0 )  ;^221^^^^^183^230^[REPLACE] Boolean value = constantMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( var == false )  {^201^^^^^193^210^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true;^197^^^^^193^210^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = false;^206^^^^^193^210^[REPLACE] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if   (  value == null  )   {  ;^201^^^^^183^230^[REPLACE] if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^183^230^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  (true )  {^212^^^^^183^230^[REPLACE] if  ( expectedConst )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( expectedConst  && true, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^183^230^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^195^^^^^183^230^[ADD] expectedConst = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true  ;^197^^^^^183^230^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^202^^^^^183^230^[ADD] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^JSDocInfo info = false;^199^^^^^183^230^[REPLACE] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^202^^^^^193^210^[ADD] info = var.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  (  info.isConstant (  )  )  {^205^^^^^193^210^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true  ;^197^^^^^193^210^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^expectedConst = true  ;^208^^^^^193^210^[REPLACE] expectedConst = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^199^^^^^193^210^[ADD] JSDocInfo info = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^200^^^^^193^210^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if  ( info == this && info.isConstant (  )  )  {^205^^^^^183^230^[REPLACE] if  ( info != null && info.isConstant (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState (true  !=  isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^[REPLACE] Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^if   (  var != null  )   {  ;^222^^^^^183^230^[REPLACE] if  ( value == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( value.booleanValue (  )   &&  isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^[REPLACE] Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^225^226^227^^^222^228^[ADD] Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^constantMap.put ( name, false ) ;^223^^^^^183^230^[REPLACE] constantMap.put ( name, isConst ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Var var = t .traverseRoots ( compiler , this )  .getVar ( n.getString (  )  ) ;^200^^^^^183^230^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[ADD]^^221^^^^^183^230^[ADD] Boolean value = constantMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] VerifyConstants   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean checkUserDeclarations  expectedConst  false  isConst  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Boolean value  [TYPE]  Map constantMap 
[REPLACE]^Preconditions.checkState ( replacement.getType (  )   ||  Token.NAME ) ;^450^^^^^449^496^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^( gramps.getType (  )  )  ;^450^^^^^449^496^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )   !=  Token.VAR )  {^451^^^^^449^496^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^} else if   (  gramps.getType  (    )   == Token.FOR  )   {  ;^471^^^^^449^496^[REPLACE] if  ( n.hasChildren (  )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^if   (  n.hasChildren  (    )    )   {  ;^481^^^^^471^493^[REPLACE] if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^gramps.removeChild ( parent ) ;^481^482^483^^^471^493^[ADD] if  ( NodeUtil.isStatementBlock ( gramps )  )  { gramps.removeChild ( parent ) ; } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^} else if  ( gramps.getType (  )   !=  Token.FOR )  {^483^^^^^471^493^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^}   parent.removeChild ( n ) ;^483^484^^^487^471^493^[ADD] else if  ( gramps.getType (  )  == Token.FOR )  {  parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( gramps.getType (  )   ||  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^490^491^^^^483^492^[ADD] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^[REPLACE] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^491^^^^^483^492^[ADD] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^parent .replaceChild ( replacement , nodeWithLineNumber )  ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^487^^^^^471^493^[ADD] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps.replaceChild ( parent, replacement ) ;^488^^^^^471^493^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps.removeChild ( value ) ;^482^^^^^471^493^[REPLACE] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^}  else {^483^^^^^471^493^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( value.getType (  )   !=  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( value.removeChild (  )  == Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^parent.removeChild ( replacement ) ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps.replaceChild ( value, n ) ;^488^^^^^471^493^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^488^^^^^471^493^[ADD] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Node value = replacement.hasOneChild (  ) ;^475^^^^^449^496^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Node replacement = replacementew Node ( Token.ASSIGN, n, value ) ;^477^^^^^449^496^[REPLACE] Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^if   (  n.hasChildren  (    )    )   {  ;^481^^^^^449^496^[REPLACE] if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^}  else {^483^^^^^449^496^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^490^^^^^483^492^[ADD] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^parent.removeChild ( replacement ) ;^487^^^^^449^496^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps.removeChild ( parent )  ;^488^^^^^449^496^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps .replaceChild ( parent , nodeWithLineNumber )  ;^482^^^^^449^496^[REPLACE] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^}   parent.removeChild ( n ) ;^483^484^^^487^449^496^[ADD] else if  ( gramps.getType (  )  == Token.FOR )  {  parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( gramps.removeChild (  )  == Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^parent .replaceChild ( gramps , value )  ;^487^^^^^449^496^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^487^488^^^^449^496^[ADD] parent.removeChild ( n ) ; gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^475^476^^^^449^496^[ADD] Node value = n.getFirstChild (  ) ; n.removeChild ( value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Node value = n.getFirstChild (  )  ;^477^^^^^449^496^[REPLACE] Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REMOVE]^if  (  ( gramps.getType (  )  )  ==  ( FOR )  )  {     parent.removeChild ( n ) ;     gramps.replaceChild ( parent, n ) ; }else {     checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  ) ;     gramps.replaceChild ( parent, new Node ( EMPTY )  ) ; }^481^^^^^471^493^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^}  if  ( gramps.getType (  )   &&  Token.FOR )  {^483^^^^^471^493^[REPLACE] } else if  ( gramps.getType (  )  == Token.FOR )  {^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( gramps.getType (  )   !=  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REMOVE]^isStatementBlock ( gramps )  ;^491^^^^^483^492^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^parent .replaceChild ( parent , gramps )  ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps.removeChild ( parent )  ;^488^^^^^471^493^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( value.getType (  )   ||  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps .removeChild ( gramps )  ;^491^^^^^483^492^[REPLACE] gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^parent.hasOneChild (  )  ;^487^^^^^471^493^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^477^^^^^449^496^[ADD] Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( gramps.getType (  )   &&  Token.LABEL ) ;^490^^^^^483^492^[REPLACE] Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^parent.hasOneChild (  )  ;^487^^^^^449^496^[REPLACE] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps.replaceChild ( parent, n )  ;^482^^^^^449^496^[REPLACE] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^482^^^^^449^496^[ADD] gramps.removeChild ( parent ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REMOVE]^if  ( isStatementBlock ( gramps )  )  {     gramps.removeChild ( parent ) ; }else     if  (  ( gramps.getType (  )  )  ==  ( FOR )  )  {         parent.removeChild ( n ) ;         gramps.replaceChild ( parent, n ) ;     }else {         checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  ) ;         gramps.replaceChild ( parent, new Node ( EMPTY )  ) ;     }^483^^^^^449^496^[REMOVE] ^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[ADD]^^487^^^^^449^496^[ADD] parent.removeChild ( n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^gramps .removeChild ( nodeWithLineNumber )  ;^488^^^^^449^496^[REPLACE] gramps.replaceChild ( parent, n ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
[REPLACE]^Node value = replacement.getFirstChild (  ) ;^475^^^^^449^496^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] onRedeclaration [TYPE] void [PARAMETER] Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [CLASS] DuplicateDeclarationHandler   [TYPE]  boolean false  true  [TYPE]  Scope s  [TYPE]  Node gramps  n  nodeWithLineNumber  parent  replacement  value  [TYPE]  String name 
