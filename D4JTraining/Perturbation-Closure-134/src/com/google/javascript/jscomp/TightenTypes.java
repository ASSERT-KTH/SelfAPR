[REPLACE]^public static final String NON_HALTING_ERROR_MSG ;^79^80^^^^79^80^[REPLACE] public static final String NON_HALTING_ERROR_MSG = "TightenTypes pass appears to be stuck in an infinite loop.";^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  AbstractCompiler compiler;^83^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final Map<Node, ConcreteFunctionType> functionFromDeclaration  = null ;^90^91^^^^90^91^[REPLACE] private final Map<Node, ConcreteFunctionType> functionFromDeclaration = Maps.newHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final Map<FunctionType, ConcreteFunctionType> functionFromJSType  = null ;^99^100^^^^99^100^[REPLACE] private final Map<FunctionType, ConcreteFunctionType> functionFromJSType = Maps.newIdentityHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final Map<ObjectType, ConcreteInstanceType> instanceFromJSType  = null ;^107^108^^^^107^108^[REPLACE] private final Map<ObjectType, ConcreteInstanceType> instanceFromJSType = Maps.newHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final Map<ConcreteJSTypePair, ConcreteType> typeIntersectionMemos  = null ;^113^114^^^^113^114^[REPLACE] private final Map<ConcreteJSTypePair, ConcreteType> typeIntersectionMemos = Maps.newHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private Set<ConcreteType> allInstantiatedTypes ;^130^^^^^^^[REPLACE] private Set<ConcreteType> allInstantiatedTypes = Sets.newHashSet (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  List<Action> actions;^182^^^^^^^[REPLACE] private final List<Action> actions;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  ConcreteScope scope;^265^^^^^^^[REPLACE] private final ConcreteScope scope;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  ConcreteSlot slot;^316^^^^^^^[REPLACE] private final ConcreteSlot slot;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  ConcreteType type;^317^^^^^^^[REPLACE] private final ConcreteType type;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node receiver;^349^^^^^^^[REPLACE] private final Node receiver;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final  int  propName;^350^^^^^^^[REPLACE] private final String propName;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node expression;^351^^^^^^^[REPLACE] private final Node expression;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private boolean isNewCall  = null ;^384^^^^^^^[REPLACE] private boolean isNewCall = false;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private boolean isCallFunction  = null ;^385^^^^^^^[REPLACE] private boolean isCallFunction = false;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node firstArgument;^387^^^^^^^[REPLACE] private final Node firstArgument;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private String propName  = null ;^388^^^^^^^[REPLACE] private String propName = null;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node receiver;^478^^^^^^^[REPLACE] private final Node receiver;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final  int  propName;^479^^^^^^^[REPLACE] private final String propName;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node firstArgument;^480^^^^^^^[REPLACE] private final Node firstArgument;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node receiver;^540^^^^^^^[REPLACE] private final Node receiver;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  boolean inExterns;^576^^^^^^^[REPLACE] private final boolean inExterns;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^ConcreteType concrete;^1366^^^^^^^[REPLACE] final ConcreteType concrete;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^this.compiler =  null;^120^^^^^119^121^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.parent =  topScope;^185^^^^^184^188^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope) [PARAMETER] ConcreteScope parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.slots  =  this.slots ;^186^^^^^184^188^[REPLACE] this.slots = Maps.newHashMap (  ) ;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope) [PARAMETER] ConcreteScope parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.actions  =  this.actions ;^187^^^^^184^188^[REPLACE] this.actions = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope) [PARAMETER] ConcreteScope parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.jstype = jstype; ;^270^^^^^269^273^[REPLACE] this.scope = scope;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.name =  propName;^271^^^^^269^273^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^271^272^^^^269^273^[ADD] this.name = name; this.type = ConcreteType.NONE;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^272^^^^^269^273^[REPLACE] this.type = ConcreteType.NONE;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^272^^^^^269^273^[ADD] this.type = ConcreteType.NONE;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.slot =  null;^320^^^^^319^325^[REPLACE] this.slot = slot;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.jstype = jstype; ;^321^^^^^319^325^[REPLACE] this.type = type;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( expr ) ;^323^^^^^319^325^[REPLACE] Preconditions.checkNotNull ( slot ) ;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( thisType ) ;^324^^^^^319^325^[REPLACE] Preconditions.checkNotNull ( type ) ;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.slot =  null;^334^^^^^333^339^[REPLACE] this.slot = slot;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.expression =  receiver;^335^^^^^333^339^[REPLACE] this.expression = expr;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( expr ) ;^337^^^^^333^339^[REPLACE] Preconditions.checkNotNull ( slot ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( receiver ) ;^338^^^^^333^339^[REPLACE] Preconditions.checkNotNull ( expr ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.receiver =  firstArgument;^354^^^^^353^361^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.propName =  firstArgument.getNext (  ) .getString (  ) ;^355^^^^^353^361^[REPLACE] this.propName = receiver.getNext (  ) .getString (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.expression =  receiver;^356^^^^^353^361^[REPLACE] this.expression = expr;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( firstArgument ) ;^358^^^^^353^361^[REPLACE] Preconditions.checkNotNull ( receiver ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( type ) ;^359^^^^^353^361^[REPLACE] Preconditions.checkNotNull ( propName ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^359^360^^^^353^361^[ADD] Preconditions.checkNotNull ( propName ) ; Preconditions.checkNotNull ( expr ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( receiver ) ;^360^^^^^353^361^[REPLACE] Preconditions.checkNotNull ( expr ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.receiver =  firstArgument;^391^^^^^390^393^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.firstArgument =  receiver;^392^^^^^390^393^[REPLACE] this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.receiver =  firstArgument;^464^^^^^462^467^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] List) [PARAMETER] Node receiver ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.jstype = jstype; ;^465^^^^^462^467^[REPLACE] this.thisType = thisType;^[METHOD] <init> [TYPE] List) [PARAMETER] Node receiver ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.argTypes =  this;^466^^^^^462^467^[REPLACE] this.argTypes = argTypes;^[METHOD] <init> [TYPE] List) [PARAMETER] Node receiver ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.isNewCall =  true;^488^^^^^486^494^[REPLACE] this.isNewCall = isNewCall;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.receiver =  firstArgument;^489^^^^^486^494^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^this.propName = propName;^489^490^^^^486^494^[ADD] this.receiver = receiver; this.propName = propName;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.propName =  name;^490^^^^^486^494^[REPLACE] this.propName = propName;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.firstArgument =  receiver;^491^^^^^486^494^[REPLACE] this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( firstArgument ) ;^493^^^^^486^494^[REPLACE] Preconditions.checkNotNull ( receiver ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.receiver =  firstArgument;^545^^^^^544^550^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^545^^^^^544^550^[ADD] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.propName =  name;^546^^^^^544^550^[REPLACE] this.propName = propName;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^546^547^^^^544^550^[ADD] this.propName = propName; this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.firstArgument =  receiver;^547^^^^^544^550^[REPLACE] this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^receiver   ;^549^^^^^544^550^[REPLACE] Preconditions.checkNotNull ( receiver ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.jstype = jstype; ;^579^^^^^578^581^[REPLACE] this.scope = scope;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope,boolean) [PARAMETER] ConcreteScope scope boolean inExterns [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.inExterns =  true;^580^^^^^578^581^[REPLACE] this.inExterns = inExterns;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope,boolean) [PARAMETER] ConcreteScope scope boolean inExterns [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.concrete =  type;^1371^^^^^1370^1374^[REPLACE] this.concrete = concrete;^[METHOD] <init> [TYPE] JSType) [PARAMETER] ConcreteType concrete JSType jstype [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.thisType = thisType; ;^1372^^^^^1370^1374^[REPLACE] this.jstype = jstype;^[METHOD] <init> [TYPE] JSType) [PARAMETER] ConcreteType concrete JSType jstype [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.hashcode = concrete.hashCode (  )   >  getJSTypeHashCode (  ) ;^1373^^^^^1370^1374^[REPLACE] this.hashcode = concrete.hashCode (  )  + getJSTypeHashCode (  ) ;^[METHOD] <init> [TYPE] JSType) [PARAMETER] ConcreteType concrete JSType jstype [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope getScope (  )  { return scope; }^124^^^^^^^[REPLACE] ConcreteScope getTopScope (  )  { return topScope; }^[METHOD] getTopScope [TYPE] TightenTypes$ConcreteScope [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^public JSTypeRegistry.getCodingConvention (  )  { return compiler.getTypeRegistry (  ) ; }^127^^^^^^^[REPLACE] public JSTypeRegistry getTypeRegistry (  )  { return compiler.getTypeRegistry (  ) ; }^[METHOD] getTypeRegistry [TYPE] JSTypeRegistry [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  firstArgument  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  [TYPE]  List actions  argTypes  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^topScope = new ConcreteScope ( false ) ;^135^^^^^133^172^[REPLACE] topScope = new ConcreteScope ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^topScope.initForExternRoot ( receiver ) ;^136^^^^^133^172^[REPLACE] topScope.initForExternRoot ( externRoot ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^topScope.initForScopeRoot ( firstArgument ) ;^137^^^^^133^172^[REPLACE] topScope.initForScopeRoot ( jsRoot ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^long maxIterations = 408;^145^^^^^133^172^[REPLACE] long maxIterations = 1000;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^long iterations = 3;^146^^^^^133^172^[REPLACE] long iterations = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Set<ConcreteScope> workSet =   topScope   ;^148^^^^^133^172^[REPLACE] Set<ConcreteScope> workSet = Sets.newHashSet ( topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^148^^^^^133^172^[ADD] Set<ConcreteScope> workSet = Sets.newHashSet ( topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^149^^^^^133^172^[REPLACE] List<ConcreteScope> workList = Lists.newArrayList ( topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node name;^151^^^^^133^172^[REPLACE] boolean changed;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^158^^^^^133^172^[REPLACE] if  ( assign.slot.addConcreteType ( assign.type )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^changed = true;ConcreteScope varScope = assign.slot.getScope (  ) ;workSet.add ( varScope ) ;^158^159^160^161^162^133^172^[ADD] if  ( assign.slot.addConcreteType ( assign.type )  )  { changed = true; ConcreteScope varScope = assign.slot.getScope (  ) ; if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  { workSet.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ( varScope != scope )  || !workSet.contains ( varScope )  )  {^161^^^^^133^172^[REPLACE] if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^workSet.add ( topScope ) ;^162^^^^^133^172^[REPLACE] workSet.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^boolean added = allInstantiatedTypes.add ( thisType ) ;^162^^^^^133^172^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^workList.get ( varScope ) ;^163^^^^^133^172^[REPLACE] workList.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^changed = false; ;^159^^^^^133^172^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope varScope = assign.slot.getType (  ) ;^160^^^^^133^172^[REPLACE] ConcreteScope varScope = assign.slot.getScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ( varScope != scope )  ) {^161^^^^^133^172^[REPLACE] if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( int i = 0; i < workList.size (  )  + 4; ++i )  {^154^^^^^133^172^[REPLACE] for  ( int i = 0; i < workList.size (  ) ; ++i )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  !workSet.contains ( varScope )  )  {^161^^^^^133^172^[REPLACE] if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^workSet.contains ( varScope ) ;^162^^^^^133^172^[REPLACE] workSet.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^159^^^^^133^172^[ADD] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  (true )  ) {^161^^^^^133^172^[REPLACE] if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^workList .contains ( null )  ;^163^^^^^133^172^[REPLACE] workList.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^changed = false;^159^^^^^133^172^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = this.get ( i ) ;^155^^^^^133^172^[REPLACE] ConcreteScope scope = workList.get ( i ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^155^^^^^133^172^[ADD] ConcreteScope scope = workList.get ( i ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^156^^^^^133^172^[REPLACE] for  ( Action action : scope.getActions (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^157^^^^^133^172^[REPLACE] for  ( Assignment assign : action.getAssignments ( scope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^changed = true; ;^153^^^^^133^172^[REPLACE] changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( int i = 0 ; i < workList.size (  ) ; ++i )  {^154^^^^^133^172^[REPLACE] for  ( int i = 0; i < workList.size (  ) ; ++i )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^154^155^156^157^^133^172^[ADD] for  ( int i = 0; i < workList.size (  ) ; ++i )  { ConcreteScope scope = workList.get ( i ) ; for  ( Action action : scope.getActions (  )  )  { for  ( Assignment assign : action.getAssignments ( scope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = workList.add ( i ) ;^155^^^^^133^172^[REPLACE] ConcreteScope scope = workList.get ( i ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope varScope = assign.slot .getType (  )  ;^160^^^^^133^172^[REPLACE] ConcreteScope varScope = assign.slot.getScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^public JSTypeRegistry getTypeRegistry (  )  { return compiler.getTypeRegistry (  ) ; }^191^^^^^^^[REPLACE] public StaticScope<ConcreteType> getParentScope (  )  { return parent; }^[METHOD] getParentScope [TYPE] StaticScope [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createConcreteInstance ( jsType.toObjectType (  )  ) ;^195^^^^^194^196^[REPLACE] return slots.get ( name ) ;^[METHOD] getOwnSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^StaticSlot<ConcreteType> var = getOwnSlot ( propName ) ;^200^^^^^199^208^[REPLACE] StaticSlot<ConcreteType> var = getOwnSlot ( name ) ;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( this == true )  {^201^^^^^199^208^[REPLACE] if  ( var != null )  {^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^} else if  ( parent == this )  {^203^^^^^199^208^[REPLACE] } else if  ( parent != null )  {^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return false;^206^^^^^199^208^[REPLACE] return null;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return parent.getOwnSlot ( name ) ;^204^^^^^199^208^[REPLACE] return parent.getSlot ( name ) ;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^202^^^^^199^208^[REPLACE] return var;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^} else if  ( parent == false )  {^203^^^^^199^208^[REPLACE] } else if  ( parent != null )  {^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return parent .getSlots (  )  ;^204^^^^^199^208^[REPLACE] return parent.getSlot ( name ) ;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^206^^^^^199^208^[REPLACE] return null;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  StaticSlot var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Collection<ConcreteSlot> getSlots (  )  { return slots.clear (  ) ; }^211^^^^^^^[REPLACE] Collection<ConcreteSlot> getSlots (  )  { return slots.values (  ) ; }^[METHOD] getSlots [TYPE] Collection [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^217^^^^^214^219^[REPLACE] ConcreteSlot thisVar = slots.get ( ConcreteFunctionType.THIS_SLOT_NAME ) ;^[METHOD] getTypeOfThis [TYPE] ConcreteType [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^217^^^^^214^219^[ADD] ConcreteSlot thisVar = slots.get ( ConcreteFunctionType.THIS_SLOT_NAME ) ;^[METHOD] getTypeOfThis [TYPE] ConcreteType [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return  ( slot != null )  ? thisVar.getScope (  )  : ConcreteType.NONE;^218^^^^^214^219^[REPLACE] return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[METHOD] getTypeOfThis [TYPE] ConcreteType [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^slots .put ( firstArgument )  ;^223^^^^^222^224^[REPLACE] slots.put ( name, new ConcreteSlot ( this, name )  ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteSlot var = new ConcreteSlot ( this, propName ) ;^228^^^^^227^231^[REPLACE] ConcreteSlot var = new ConcreteSlot ( this, name ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^var.addConcreteType ( thisType ) ;^229^^^^^227^231^[REPLACE] var.addConcreteType ( type ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^229^230^^^^227^231^[ADD] var.addConcreteType ( type ) ; slots.put ( name, var ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^slots.put ( name, thisVar ) ;^230^^^^^227^231^[REPLACE] slots.put ( name, var ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^234^^^^^^^[REPLACE] List<Action> getActions (  )  { return actions; }^[METHOD] getActions [TYPE] List [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( expr ) ;^238^^^^^237^245^[REPLACE] Preconditions.checkNotNull ( decl ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^238^^^^^237^245^[ADD] Preconditions.checkNotNull ( decl ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( decl.getType (  )   &&  Token.FUNCTION )  {^239^^^^^237^245^[REPLACE] if  ( decl.getType (  )  == Token.FUNCTION )  {^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^decl = decl.getLastChild (  ) ;^239^240^241^^^237^245^[ADD] if  ( decl.getType (  )  == Token.FUNCTION )  { decl = decl.getLastChild (  ) ; }^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^decl =  receiver.getLastChild (  ) ;^240^^^^^237^245^[REPLACE] decl = decl.getLastChild (  ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^decl =  null.getLastChild (  ) ;^240^^^^^237^245^[REPLACE] decl = decl.getLastChild (  ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkArgument ( decl.getType (  )   &&  Token.BLOCK ) ;^242^^^^^237^245^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkArgument ( receiver.getType (  )  == Token.BLOCK ) ;^242^^^^^237^245^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^244^^^^^237^245^[REPLACE] NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^244^^^^^237^245^[ADD] NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( receiver ) ;^249^^^^^248^253^[REPLACE] Preconditions.checkNotNull ( decl ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkArgument ( decl.getType (  )   ||  Token.BLOCK ) ;^250^^^^^248^253^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkArgument ( name.getType (  )  == Token.NAME ) ;^250^^^^^248^253^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^NodeTraversal.traverse ( compiler, receiver, new CreateScope ( this, false )  ) ;^252^^^^^248^253^[REPLACE] NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^boolean added = allInstantiatedTypes.add ( thisType ) ;^252^^^^^248^253^[REMOVE] ^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^void.getAction ( Action action )  { actions.add ( action ) ; }^256^^^^^^^[REPLACE] void addAction ( Action action )  { actions.add ( action ) ; }^[METHOD] addAction [TYPE] void [PARAMETER] Action action [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getTypeOfThis (  ) .toString (  )   ;^259^^^^^258^260^[REPLACE] return getTypeOfThis (  ) .toString (  )  + " " + getSlots (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope getTopScope (  )  { return topScope; }^276^^^^^^^[REPLACE] ConcreteScope getScope (  )  { return scope; }^[METHOD] getScope [TYPE] TightenTypes$ConcreteScope [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^public JSTypeRegistry getTypeRegistry (  )  { return compiler.getTypeRegistry (  ) ; }^279^^^^^^^[REPLACE] @Override public String getName (  )  { return name; }^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.createForTypes ( set ) .unionWith ( type ) ;^281^^^^^^^[REPLACE] @Override public ConcreteType getType (  )  { return type; }^[METHOD] getType [TYPE] ConcreteType [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^public boolean isTypeInferred (  )  { return false; }^284^^^^^^^[REPLACE] public boolean isTypeInferred (  )  { return true; }^[METHOD] isTypeInferred [TYPE] boolean [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType ret;^291^^^^^290^294^[REPLACE] ConcreteType origType = this.type;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  origType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^291^292^^^^290^294^[ADD] ConcreteType origType = this.type; this.type = origType.unionWith ( type ) ;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  origType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^thisType = thisType.unionWith ( instType ) ; ;^292^^^^^290^294^[REPLACE] this.type = origType.unionWith ( type ) ;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  origType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^292^293^^^^290^294^[ADD] this.type = origType.unionWith ( type ) ; return !this.type.equals ( origType ) ;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  origType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return !this.type.unionWith ( origType ) ;^293^^^^^290^294^[REPLACE] return !this.type.equals ( origType ) ;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  origType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getName (  )   ^  ": "  ^  getType (  ) ;^297^^^^^296^298^[REPLACE] return getName (  )  + ": " + getType (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  origType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.ArrayList (  new Assignment ( variable, argTypes.get ( i )  )   )  ) ;^342^343^^^^341^344^[REPLACE] return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  origType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType recvType = inferConcreteType ( varScope, receiver ) ;^370^^^^^369^379^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  StaticSlot prop  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType exprType = inferConcreteType ( varScope, expression ) ;^371^^^^^369^379^[REPLACE] ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  StaticSlot prop  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^371^^^^^369^379^[ADD] ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  StaticSlot prop  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists.newArrayList (  ) ;^373^^^^^369^379^[REPLACE] List<Assignment> assigns = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  StaticSlot prop  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^378^^^^^369^379^[REPLACE] return assigns;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  StaticSlot prop  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.propName =  name;^396^^^^^395^398^[REPLACE] this.propName = propName;^[METHOD] setPropName [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] String propName [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^397^^^^^395^398^[REPLACE] return this;^[METHOD] setPropName [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] String propName [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkState (  (true ;^402^403^^^^401^407^[REPLACE] Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[METHOD] setIsNewCall [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] boolean isNew [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^isNewCall =  true;^405^^^^^401^407^[REPLACE] isNewCall = isNew;^[METHOD] setIsNewCall [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] boolean isNew [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^405^^^^^401^407^[ADD] isNewCall = isNew;^[METHOD] setIsNewCall [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] boolean isNew [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^406^^^^^401^407^[REPLACE] return this;^[METHOD] setIsNewCall [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] boolean isNew [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions .checkState ( true , propName )  ;^414^415^^^^413^419^[REPLACE] Preconditions.checkState ( !isNewCall, "A function call cannot be of the form: new Object.call (  ) " ) ;^[METHOD] setIsCallFunction [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^isCallFunction = false;^417^^^^^413^419^[REPLACE] isCallFunction = true;^[METHOD] setIsCallFunction [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^417^418^^^^413^419^[ADD] isCallFunction = true; return this;^[METHOD] setIsCallFunction [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^418^^^^^413^419^[REPLACE] return this;^[METHOD] setIsCallFunction [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^422^^^^^421^427^[REPLACE] if  ( isCallFunction )  {^[METHOD] build [TYPE] TightenTypes$Action [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return  new FunctionCallBuilder ( first, receiver.getNext (  )  )  ;^425^^^^^421^427^[REPLACE] return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[METHOD] build [TYPE] TightenTypes$Action [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return  new FunctionCall ( isNewCall, receiver, propName, firstArgument )  ;^423^^^^^421^427^[REPLACE] return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[METHOD] build [TYPE] TightenTypes$Action [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists.newArrayList (  ) ;^436^^^^^434^450^[REPLACE] List<Assignment> assigns = Lists.newArrayList (  ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^436^^^^^434^450^[ADD] List<Assignment> assigns = Lists.newArrayList (  ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( variable == false )  {^444^^^^^434^450^[REPLACE] if  ( variable != null )  {^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^444^445^446^^^434^450^[ADD] if  ( variable != null )  { assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ; }^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^assigns.add ( new Assignment ( variable, argTypes.add ( i )  )  ) ;^445^^^^^434^450^[REPLACE] assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( int i = 0; i < argTypes.length (  ) ; ++i )  {^440^^^^^434^450^[REPLACE] for  ( int i = 0; i < argTypes.size (  ) ; ++i )  {^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^440^441^^^^434^450^[ADD] for  ( int i = 0; i < argTypes.size (  ) ; ++i )  { ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( variable == this )  {^444^^^^^434^450^[REPLACE] if  ( variable != null )  {^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^assigns.get ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^445^^^^^434^450^[REPLACE] assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^List<Action> actions = Lists.newArrayList (  ) ;^445^^^^^434^450^[REMOVE] ^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^assigns.add ( new Assignment ( variable, false.get ( i )  )  ) ;^445^^^^^434^450^[REPLACE] assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteSlot variable =  ( ConcreteSlot )  fType.getReturnSlot ( i ) ;^441^^^^^434^450^[REPLACE] ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^437^^^^^434^450^[REPLACE] for  ( ConcreteFunctionType fType : recvType.getFunctions (  )  )  {^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( int i = 0 ; i < argTypes.size (  ) ; ++i )  {^440^^^^^434^450^[REPLACE] for  ( int i = 0; i < argTypes.size (  ) ; ++i )  {^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteSlot variable =  ( ConcreteSlot )  fType .getReturnSlot (  )  ;^441^^^^^434^450^[REPLACE] ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return this;^449^^^^^434^450^[REPLACE] return assigns;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getFunctionCallAssignments ( inferConcreteType ( varScope, receiver ) , thisType, argTypes ) ;^470^471^^^^469^472^[REPLACE] return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = ConcreteType.NONE;^497^^^^^496^535^[REPLACE] ConcreteType thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType recvType = inferConcreteType ( varScope, receiver ) ;^498^^^^^496^535^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( propName == true )  {^502^^^^^496^535^[REPLACE] if  ( propName != null )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = recvType; ;^503^^^^^496^535^[REPLACE] thisType = recvType;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^recvType =  type.getPropertyType ( propName ) ;^504^^^^^496^535^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^recvType = thisType.getPropertyType ( propName ) ;^503^504^^^^496^535^[ADD] thisType = recvType; recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^504^^^^^496^535^[ADD] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isAll (  )  )  {^507^^^^^496^535^[REPLACE] if  ( recvType.isAll (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^507^508^^510^511^496^535^[ADD] if  ( recvType.isAll (  )  )  {  throw new AssertionError ( "Found call on all type, which makes tighten types useless." ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ;^510^511^^^^496^535^[REPLACE] throw new AssertionError ( "Found call on all type, which makes tighten types useless." ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^516^^^^^496^535^[REPLACE] if  ( isNewCall )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( true )  {^523^^^^^496^535^[REPLACE] if  ( added )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^523^524^525^526^^496^535^[ADD] if  ( added )  {  typeIntersectionMemos.clear (  ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^typeIntersectionMemos.values (  ) ;^525^^^^^496^535^[REPLACE] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^517^^^^^496^535^[REPLACE] thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.type = origType.unionWith ( type ) ; ;^520^^^^^496^535^[REPLACE] thisType = thisType.unionWith ( instType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^520^^^^^496^535^[ADD] thisType = thisType.unionWith ( instType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^boolean added = allInstantiatedTypes .contains ( this )  ;^522^^^^^496^535^[REPLACE] boolean added = allInstantiatedTypes.add ( thisType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^typeIntersectionMemos .get ( i )  ;^525^^^^^496^535^[REPLACE] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^boolean added = allInstantiatedTypes.add ( type ) ;^522^^^^^496^535^[REPLACE] boolean added = allInstantiatedTypes.add ( thisType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<ConcreteType> argTypes = Lists .newArrayList ( parent )  ;^529^^^^^496^535^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( Node arg = firstArgument; arg == null; arg = arg.getNext (  )  )  {^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^530^531^532^^^496^535^[ADD] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  { argTypes.add ( inferConcreteType ( scope, arg )  ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^argTypes.add ( inferConcreteType ( varScope, arg )  ) ;^531^^^^^496^535^[REPLACE] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^argTypes.add ( inferConcreteType ( scope, jsRoot )  ) ;^531^^^^^496^535^[REPLACE] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( Node arg =  firstArgument; jsRoot !^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getFunctionCallAssignments ( recvType, thisType, false ) ;^534^^^^^496^535^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType  =  getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^[REPLACE] ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^553^554^555^^^552^570^[ADD] ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType recvType = inferConcreteType ( varScope, receiver ) ;^556^^^^^552^570^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^[REPLACE] if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^recvType =  type.getPropertyType ( propName ) ;^560^^^^^552^570^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteFunctionType funType = functionFromDeclaration.get ( decl ) ;^562^^^^^552^570^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( NodejsRoot = firstArgument.getNext (  ) ;^564^^^^^552^570^[REPLACE] for  ( Node arg = firstArgument.getNext (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^564^565^566^567^568^552^570^[ADD] for  ( Node arg = firstArgument.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  { argTypes.add ( inferConcreteType ( scope, arg )  ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^argTypes.add ( inferConcreteType ( varScope, arg )  ) ;^567^^^^^552^570^[REPLACE] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^argTypes.add ( inferConcreteType ( scope, jsRoot )  ) ;^567^^^^^552^570^[REPLACE] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^arg =  jsRoot.getNext (  )  )  {^566^^^^^552^570^[REPLACE] arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( Node arg = firstArgument .getType (  )  ;^564^^^^^552^570^[REPLACE] for  ( Node arg = firstArgument.getNext (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getFunctionCallAssignments ( recvType, thisType, null ) ;^569^^^^^552^570^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^590^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( name.getFirstChild (  )  == false )  {^597^^^^^590^601^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^598^599^^^^590^601^[ADD] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name, receiver.getLastChild (  ) , n )  ) ;^599^^^^^590^601^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( parentame.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( parent .getFirstChild (  )  , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^594^^^^^584^745^[ADD] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( parent.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( name.getFirstChild (  )  == this )  {^597^^^^^584^745^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^584^745^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^607^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isInstance (  )  )  {^611^^^^^584^745^[REPLACE] if  ( type.isNone (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (varScope == null )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  && type.createForTypes (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  createType ( parent.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^retType = createUnionWithSubTypes ( retType ) ; ;^620^^^^^584^745^[REPLACE] type = createUnionWithSubTypes ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , parent.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^584^745^[REPLACE] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node parentameNode = n .getFirstChild (  )  ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^621^^^^^584^745^[ADD] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( scope ==varScope )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^615^616^617^618^619^584^745^[ADD] if  ( scope != null )  { type = createType ( n.getJSType (  )  ) ; if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( thisType.isNone (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  createType ( null.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  && type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^608^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^612^613^614^^^584^745^[ADD] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node nameNode = n.getFirstChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( thisType.isNone (  )  )  {^611^^^^^584^745^[REPLACE] if  ( type.isNone (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^611^612^613^614^^584^745^[ADD] if  ( type.isNone (  )  )  { ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( scope == this  )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.createForTypes (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^Node nameNode = n.getLastChild (  ) ;^620^621^^^^584^745^[ADD] type = createUnionWithSubTypes ( type ) ; Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( thisType.createForTypes (  )  && type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( scope == null )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^616^^^^^584^745^[ADD] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^620^^^^^584^745^[ADD] type = createUnionWithSubTypes ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  type.createForTypes (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^630^^^^^584^745^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( n.getJSType (  ) .isNoObjectType (  )  )  {^631^^^^^584^745^[REPLACE] if  ( !n.getJSType (  ) .isNoObjectType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( inExterns && type .getPrototypeType (  )   == this )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^allInstantiatedTypes.add ( type .getPrototypeType (  )   ) ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteFunctionType type = createConcreteFunction ( parent, scope ) ;^632^^^^^584^745^[REPLACE] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( true && type.getInstanceType (  )  == null )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^allInstantiatedTypes.add ( type.getPrototypeType (  )  ) ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (true && type.getInstanceType (  )  == false )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  type .getPrototypeType (  )   == null )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^638^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^647^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^647^648^649^650^651^584^745^[ADD] if  ( inExterns )  {  ConcreteScope scope; if  ( lhs.getType (  )  == Token.GETPROP )  { ConcreteType type = inferConcreteType ( getTopScope (  ) ,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( lhs, parent.getLastChild (  ) , n )  ) ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^681^^^^^647^682^[ADD] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^List<Action> actions = Lists.newArrayList (  ) ;^681^^^^^647^682^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getType (  )   !=  Token.GETPROP )  {^650^^^^^584^745^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope  = null ;^655^^^^^650^656^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^parentScope =  ( ConcreteScope )  prototype.getScope (  ) ; ;^653^^^^^584^745^[REPLACE] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , firstArgument.getFirstChild (  )  ) ;^651^652^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (varScope != null )  break;^658^^^^^584^745^[REPLACE] if  ( scope == null )  break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  type.isAll (  )  )  {^661^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  )  {^665^^^^^584^745^[REPLACE] if  ( type.isFunction (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = createTypeWithSubTypes ( jsType ) ; ;^673^^^^^584^745^[REPLACE] retType = createUnionWithSubTypes ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType retType = createType (  (  ( FunctionType ) firstArgument.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^584^745^[REPLACE] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = thisType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getJSType (  )  != null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope  =  scope ;^655^^^^^584^745^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^655^^^^^584^745^[ADD] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^673^^^^^584^745^[ADD] retType = createUnionWithSubTypes ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType ret;^649^^^^^584^745^[REPLACE] ConcreteScope scope;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^649^^^^^584^745^[ADD] ConcreteScope scope;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^660^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^660^^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( recvType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^674^675^^^^584^745^[ADD] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getType (  )   &&  Token.GETPROP )  {^650^^^^^584^745^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^650^651^652^653^^584^745^[ADD] if  ( lhs.getType (  )  == Token.GETPROP )  { ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ; scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope  =  scope ;^655^^^^^650^656^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^655^^^^^650^656^[ADD] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  && type.isAll (  )  )  {^661^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs .getType (  )   != false || ! ( lhs^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType retType = createType (  (  ( FunctionType ) firstArgument.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnSlot (  )  ) ;^670^671^672^^^584^745^[REPLACE] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = type.isFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( thisType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getJSType (  )  != this || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^666^667^668^669^^584^745^[ADD] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( receiver.getType (  )   &&  Token.GETPROP )  {^688^^^^^584^745^[REPLACE] if  ( receiver.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   &&  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   !=  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^712^713^714^^^688^715^[ADD] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   ||  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setIsNewCall ( parent.getType (  )  == Token.NEW ) .build (  )  ) ;^713^714^^^^688^715^[REPLACE] .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^713^714^^^^688^715^[ADD] .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^691^^^^^584^745^[REPLACE] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, name.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( first.getType (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( first.getType (  )   &&  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^700^701^702^^^692^703^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^first, parent .getType (  )   ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getType (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( parent.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getFirstChild (  ) .unionWith (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^695^696^697^^^584^745^[ADD] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( parent.getType (  )   &&  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  )  .getFirstChild (  )   ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^first, receiver .getType (  )   ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^694^695^696^^^584^745^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( first.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node first = parent.getFirstChild (  ) ;^689^^^^^584^745^[REPLACE] Node first = receiver.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^691^692^^694^695^584^745^[ADD] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  { if  ( first.getType (  )  == Token.GETPROP )  { addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^706^707^708^^^691^709^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  )  .setIsNewCall ( changed )   ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getType (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( first.getType (  )   ||  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .FunctionCallBuilder ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( first .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^692^693^694^695^696^584^745^[ADD] if  ( first.getType (  )  == Token.GETPROP )  {  addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver .getType (  )   ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^first, receiver.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .FunctionCallBuilder ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .isSuperClassReference (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^719^^^^^584^745^[REPLACE] if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( parent.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^584^745^[REPLACE] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^724^725^726^^^584^745^[ADD] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^createUnionWithSubTypes ( createType (.getTypesWithPropertyRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^725^726^^^^584^745^[REPLACE] createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .isSuperClassReference (  )  )  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^createType (.getTypesWithPropertyRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^726^^^^^584^745^[ADD] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( parent.getFirstChild (  )  == null )  {^731^^^^^584^745^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( parentew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^584^745^[REPLACE] addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^( ConcreteSlot )  scope.getSlots ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^733^734^^^^584^745^[REPLACE] ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^733^734^^^^584^745^[ADD] ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteFunctionType.RETURN_SLOT_NAME ) , parent.getFirstChild (  )  )  ) ;^734^^^^^584^745^[REPLACE] ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( name = n.getFirstChild (  ) ; name ==receiver; name = name.getNext (  )  )  {^589^^^^^584^745^[REPLACE] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^590^591^^^594^584^745^[ADD] if  ( inExterns )  {  scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( name.getFirstChild (  )  == null )  {^597^^^^^590^601^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^590^601^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( parentame.getType (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( name.getType (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( receiver.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( name.getFirstChild (  )  == true )  {^597^^^^^584^745^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name, name.getLastChild (  ) , n )  ) ;^599^^^^^584^745^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^599^^^^^584^745^[ADD] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  { if  ( inExterns )  { ;^589^^^^^584^745^[REPLACE] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope  = null ;^655^^^^^584^745^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^boolean changed;^588^^^^^584^745^[REPLACE] Node name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^608^^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node lhs = parent.getFirstChild (  ) ;^646^^^^^584^745^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^651^652^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = recvType.toFunction (  )  .getReturnType (  )  .getType (  ) .unionWith ( retType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = n.getLastChild (  ) ;^687^^^^^584^745^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node first = name.getFirstChild (  ) ;^689^^^^^584^745^[REPLACE] Node first = receiver.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Collection<Action> actions = getImplicitActions ( parent ) ;^739^^^^^584^745^[REPLACE] Collection<Action> actions = getImplicitActions ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( actions == null )  {^740^^^^^584^745^[REPLACE] if  ( actions != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^740^741^742^743^^584^745^[ADD] if  ( actions != null )  { for  ( Action action : actions )  { addAction ( action ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists.newArrayList (  ) ;^741^^^^^584^745^[REPLACE] for  ( Action action : actions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions .checkState ( added , propName )  ;^749^^^^^748^751^[REPLACE] Preconditions.checkState ( !inExterns, "Unexpected action in externs." ) ;^[METHOD] addAction [TYPE] void [PARAMETER] Action action [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.ConcreteScope ( action ) ;^750^^^^^748^751^[REPLACE] scope.addAction ( action ) ;^[METHOD] addAction [TYPE] void [PARAMETER] Action action [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( expr ) ;^755^^^^^754^759^[REPLACE] Preconditions.checkState ( !inExterns, "Unexpected action in externs." ) ;^[METHOD] addActions [TYPE] void [PARAMETER] Action> actions [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists.newArrayList (  ) ;^756^^^^^754^759^[REPLACE] for  ( Action action : actions )  {^[METHOD] addActions [TYPE] void [PARAMETER] Action> actions [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getFirstChild (  ) .getType (  )   &&  Token.REF_SPECIAL )  {^786^^^^^766^797^[REPLACE] if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError ( "Attempted new call on all type!" ) ; ;^789^790^^^^786^791^[REPLACE] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^"Bad LHS for getref: " + nameNode.toStringTree (  )  ) ;^790^^^^^786^791^[REPLACE] "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists .newArrayList ( scope )  ;^787^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>ArrayList (  new PropertyAssignAction ( receiver, rhs )   ) ;^773^774^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>ArrayList (  new ConcreteJSTypePair ( concreteType, jsType )   ) ;^778^779^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^782^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteSlot var =  ( ConcreteSlot )  scope .getSlots (  )  ;^769^^^^^766^797^[REPLACE] ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^769^^^^^766^797^[ADD] ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = rhs.getFirstChild (  ) ;^777^^^^^766^797^[REPLACE] Node receiver = lhs.getFirstChild (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError ( "Attempted new call on all type!" ) ; ;^789^790^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^789^790^^^^766^797^[ADD] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ; ;^794^795^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^794^795^^^^766^797^[ADD] throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<ConcreteType> argTypes = Lists .newArrayList ( varScope )  ;^801^^^^^799^812^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType ret;^802^^^^^799^812^[REPLACE] ConcreteType thisType;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( fun == null )  {^803^^^^^799^812^[REPLACE] if  ( fun != null )  {^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^809^^^^^799^812^[REPLACE] thisType = ConcreteType.NONE;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^thisType =  createType ( jstype ) ;^804^^^^^799^812^[REPLACE] thisType = createType ( jsThisType ) ;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^804^^^^^799^812^[ADD] thisType = createType ( jsThisType ) ;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^805^^^^^799^812^[REPLACE] for  ( Node arg : fun.getParameters (  )  )  {^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^805^806^807^^^799^812^[ADD] for  ( Node arg : fun.getParameters (  )  )  { argTypes.add ( createType ( arg, scope )  ) ; }^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return  new PropertyAssignAction ( receiver, rhs )  ;^811^^^^^799^812^[REPLACE] return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  FunctionType fun  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( n.getJSType (  )  == this )  {^815^^^^^814^820^[REPLACE] if  ( n.getJSType (  )  != null )  {^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getTypeRegistry (  ) .getType ( UNKNOWN_TYPE ) ;^818^^^^^814^820^[REPLACE] return getTypeRegistry (  ) .getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return parent.getType (  ) ;^816^^^^^814^820^[REPLACE] return n.getJSType (  ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return n.getType (  ) ;^816^^^^^814^820^[REPLACE] return n.getJSType (  ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( inExterns ) {^835^^^^^826^851^[REPLACE] if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromCall ( n, receiver.getType (  )  ) ;^836^^^^^826^851^[REPLACE] return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( inExterns ) {^844^^^^^826^851^[REPLACE] if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , parent.getLastChild (  )  ) ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^836^^^^^826^851^[REPLACE] return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getFirstChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = parent.getFirstChild (  ) ;^834^^^^^826^851^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node lhs = parent.getLastChild (  ) ;^841^^^^^826^851^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^850^^^^^826^851^[REPLACE] return null;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = n .getLastChild (  )  ;^855^^^^^854^893^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^855^^^^^854^893^[ADD] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! recvType instanceof UnionType )  {^856^^^^^854^893^[REPLACE] if  ( recvType instanceof UnionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  else {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( action ) ;^863^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^861^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists .newArrayList ( varScope )  ;^857^^^^^854^893^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^858^^^^^854^893^[REPLACE] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^858^859^860^^^854^893^[ADD] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  { actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ; }^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^} else if  ( ! ! ( recvType instanceof FunctionType )  )  {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^}   return Lists.<Action>newArrayList (  ) ;^862^863^864^^^854^893^[ADD] else if  ( ! ( recvType instanceof FunctionType )  )  { return Lists.<Action>newArrayList (  ) ; }^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return 0;^861^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Set<ConcreteScope> workSet = Sets.newHashSet ( topScope ) ;^857^^^^^854^893^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType objType = ObjectType.cast ( getJSType ( rhs.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^866^867^868^^^854^893^[REPLACE] ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^866^867^868^^^854^893^[ADD] ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^String prop = rhs.getLastChild (  ) .getString (  ) ;^869^^^^^854^893^[REPLACE] String prop = receiver.getLastChild (  ) .getString (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^while  ( paramIter.hasNext (  )  || argumentIter.hasNext (  )  )  {^880^^^^^854^893^[REPLACE] while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! arg.getJSType (  )  instanceof FunctionType )  {^883^^^^^854^893^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^883^884^885^886^887^854^893^[ADD] if  ( arg.getJSType (  )  instanceof FunctionType )  { actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( parent, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^884^885^886^^^854^893^[ADD] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) ,^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  parent.getJSType (  )  ) .getType (  ) , param.getJSType (  )  )  ) ;^886^887^^^^854^893^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  parent.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^854^893^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^param.getType (  )  )  ) ;^887^^^^^854^893^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node arg = null.next (  ) ;^881^^^^^854^893^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node param = paramIter .hasNext (  )  ;^882^^^^^854^893^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^882^^^^^854^893^[ADD] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( objType == false && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != false )  {^870^871^872^^^854^893^[REPLACE] if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^870^871^872^873^^854^893^[ADD] if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  { List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^while  ( paramIter.hasNext (  )  ;^880^^^^^870^891^[REPLACE] while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! arg.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getType (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( parent, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  arg.getJSType (  )  ) .getType (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  parent.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^param.getType (  )  )  ) ;^887^^^^^870^891^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node arg = null.next (  ) ;^881^^^^^870^891^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^881^^^^^870^891^[ADD] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node param = null.next (  ) ;^882^^^^^870^891^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! parent.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  parent.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^886^887^^^^870^891^[ADD] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^890^^^^^870^891^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Set<ConcreteScope> workSet = Sets.newHashSet ( topScope ) ;^873^^^^^870^891^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .getAlternates (  ) ;^876^877^^^^870^891^[REPLACE] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> argumentIter = parent .toStringTree (  )  .iterator (  ) ;^878^^^^^870^891^[REPLACE] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^argumentIter.next (  ) ;^878^879^^^^870^891^[ADD] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ; argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node arg = argumentIter.hasNext (  ) ;^881^^^^^870^891^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! arg.getType (  )  instanceof FunctionType )  {^883^^^^^854^893^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , nameNode.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  parent .getJSType (  )   ) .getTypeOfThis (  ) , param^886^887^^^^854^893^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^886^887^^^^854^893^[ADD] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return this;^890^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists .newArrayList ( topScope )  ;^873^^^^^854^893^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^873^^^^^854^893^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  )  .getAlternates (  )  ;^876^877^^^^854^893^[REPLACE] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> argumentIter = parent.children (  ) .iterator (  ) ;^878^^^^^854^893^[REPLACE] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node arg = true.next (  ) ;^881^^^^^854^893^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node param = null.hasNext (  ) ;^882^^^^^854^893^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( action ) ;^892^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! paramType instanceof UnionType )  {^897^^^^^895^911^[REPLACE] if  ( paramType instanceof UnionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  if  ( ! paramType instanceof FunctionType )  {^904^^^^^895^911^[REPLACE] } else if  ( paramType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, true )  ) ;^908^909^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, nullType,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( parent, thisType,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return 1;^903^^^^^895^911^[REPLACE] return actions;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists .newArrayList ( topScope )  ;^898^^^^^895^911^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^899^^^^^895^911^[REPLACE] for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^899^900^901^902^^895^911^[ADD] for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  { actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ; }^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, this )  ) ;^908^909^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return this;^903^^^^^895^911^[REPLACE] return actions;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, false )  ) ;^908^909^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Set<ConcreteScope> workSet = Sets.newHashSet ( topScope ) ;^898^^^^^895^911^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists .newArrayList ( varScope )  ;^915^^^^^914^946^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^916^^^^^914^946^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( objType == null && !objType.hasProperty (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( objType, propName, fnNode ) ;^935^^^^^916^937^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( objType, prop, receiver ) ;^935^^^^^916^937^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType objType = ObjectType.cast ( recvType ) ;^932^^^^^916^937^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (type == null )  {^920^^^^^914^946^[REPLACE] if  ( altObj != null )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^920^921^922^923^924^914^946^[ADD] if  ( altObj != null )  { actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ; if  ( altObj.hasProperty ( prop )  )  { found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( altObj.hasProperty ( propName )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^found = false;^924^^^^^914^946^[REPLACE] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.hasProperty ( prop )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( true )  {^928^^^^^914^946^[REPLACE] if  ( found )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return 1;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^924^^^^^914^946^[ADD] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^boolean found = true;^917^^^^^914^946^[REPLACE] boolean found = false;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^917^^^^^914^946^[ADD] boolean found = false;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^918^^^^^914^946^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^alt   ;^919^^^^^914^946^[REPLACE] ObjectType altObj = ObjectType.cast ( alt ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( altObj == false )  {^920^^^^^914^946^[REPLACE] if  ( altObj != null )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( altObj.getPropertyType ( propName )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^923^924^925^^^914^946^[ADD] if  ( altObj.hasProperty ( prop )  )  { found = true; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( objType == true ) {^933^934^^^^914^946^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^933^936^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return this;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( objType, prop, receiver ) ;^935^^^^^914^946^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType recvTypeObj = ObjectType.hasProperty ( alt ) ;^919^^^^^914^946^[REPLACE] ObjectType altObj = ObjectType.cast ( alt ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType objType = ObjectType.cast ( recvType ) ;^932^^^^^914^946^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( propName ) ;^941^^^^^914^946^[REPLACE] Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( prop ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^942^^^^^914^946^[REPLACE] for  ( ObjectType type : types )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return null;^945^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^JSType propType = thisType.getPropertyType ( prop ) .isSuperClassReference (  ) ;^950^951^^^^948^967^[REPLACE] JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( jsType.isPropertyInExterns ( prop )  || propType.isFunctionType (  )  )  {^952^^^^^948^967^[REPLACE] if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! jsType instanceof FunctionPrototypeType )  {^954^^^^^948^967^[REPLACE] if  ( jsType instanceof FunctionPrototypeType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^954^955^956^957^^948^967^[ADD] if  ( jsType instanceof FunctionPrototypeType )  { thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^thisType =   (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^955^956^^^^948^967^[REPLACE] thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^959^^^^^948^967^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^callType =   ( FunctionType )  propType;^960^^^^^948^967^[REPLACE] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^960^^^^^948^967^[ADD] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList (  ) ;^964^^^^^948^967^[REPLACE] return Lists.<Action>newArrayList ( action ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType thisType = thisType;^953^^^^^948^967^[REPLACE] ObjectType thisType = jsType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType callType = true;^958^^^^^948^967^[REPLACE] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^958^^^^^948^967^[ADD] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Action action = createExternFunctionCall ( receiver, thisType, callType ) ;^962^963^^^^948^967^[REPLACE] Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^callType =  ( FunctionType )  propType;^959^960^961^^^948^967^[ADD] if  ( propType instanceof FunctionType )  { callType =  ( FunctionType )  propType; }^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^955^956^^^^948^967^[ADD] thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType callType = this;^958^^^^^948^967^[REPLACE] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Action action = createExternFunctionCall ( fnNode, jsType, callType ) ;^962^963^^^^948^967^[REPLACE] Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^962^963^^^^948^967^[ADD] Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( action ) ;^966^^^^^948^967^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( receiver ) ;^972^^^^^971^985^[REPLACE] Preconditions.checkNotNull ( name ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkArgument ( name.getType (  )   ||  Token.NAME ) ;^973^^^^^971^985^[REPLACE] Preconditions.checkArgument ( name.getType (  )  == Token.NAME ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkArgument ( parent.getType (  )  == Token.NAME ) ;^973^^^^^971^985^[REPLACE] Preconditions.checkArgument ( name.getType (  )  == Token.NAME ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( name.getJSType (  )  != null )  {^975^^^^^971^985^[REPLACE] if  ( name.getJSType (  )  == null )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.NONE;^976^^^^^971^985^[REPLACE] return ConcreteType.ALL;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (   ( name.getFirstChild (  ) .getType (  )  != Token.FUNCTION )  )  {^979^980^^^^971^985^[REPLACE] if  (  ( name.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createConcreteFunction ( name.getLastChild (  ) , scope ) ;^981^^^^^971^985^[REPLACE] return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createConcreteFunction ( name.getLastChild (  ) , varScope ) ;^981^^^^^971^985^[REPLACE] return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createType ( receiver.getJSType (  )  ) ;^984^^^^^971^985^[REPLACE] return createType ( name.getJSType (  )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] Node name ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  jsType.equals (  )  )  {^989^^^^^988^1014^[REPLACE] if  ( jsType.isUnknownType (  )  || jsType.isEmptyType (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^989^990^991^^^988^1014^[ADD] if  ( jsType.isUnknownType (  )  || jsType.isEmptyType (  )  )  { return ConcreteType.ALL; }^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.NONE;^990^^^^^988^1014^[REPLACE] return ConcreteType.ALL;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  )  {^993^^^^^988^1014^[REPLACE] if  ( jsType.isUnionType (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^ConcreteType type = ConcreteType.NONE;^993^994^995^996^997^988^1014^[ADD] if  ( jsType.isUnionType (  )  )  { ConcreteType type = ConcreteType.NONE; for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { type = type.unionWith ( createType ( alt )  ) ; }^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  null.unionWith ( createType ( alt )  ) ;^996^^^^^988^1014^[REPLACE] type = type.unionWith ( createType ( alt )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return thisType;^998^^^^^988^1014^[REPLACE] return type;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE;^994^^^^^988^1014^[REPLACE] ConcreteType type = ConcreteType.NONE;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^994^^^^^988^1014^[ADD] ConcreteType type = ConcreteType.NONE;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^995^^^^^988^1014^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  thisType.unionWith ( createType ( alt )  ) ;^996^^^^^988^1014^[REPLACE] type = type.unionWith ( createType ( alt )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^998^^^^^988^1014^[REPLACE] return type;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^995^996^997^^^988^1014^[ADD] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { type = type.unionWith ( createType ( alt )  ) ; }^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( jsType.isUnionType (  )  )  {^1001^^^^^988^1014^[REPLACE] if  ( jsType.isFunctionType (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1001^1002^1003^1004^^988^1014^[ADD] if  ( jsType.isFunctionType (  )  )  { if  ( getConcreteFunction (  ( FunctionType )  jsType )  != null )  { return getConcreteFunction (  ( FunctionType )  jsType ) ; }^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( getConcreteFunction (  ( FunctionType )  jsType )  == null )  {^1002^^^^^988^1014^[REPLACE] if  ( getConcreteFunction (  ( FunctionType )  jsType )  != null )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^return getConcreteFunction (  ( FunctionType )  jsType ) ;^1002^1003^1004^^^988^1014^[ADD] if  ( getConcreteFunction (  ( FunctionType )  jsType )  != null )  { return getConcreteFunction (  ( FunctionType )  jsType ) ; }^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^1003^^^^^988^1014^[REPLACE] return getConcreteFunction (  ( FunctionType )  jsType ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.NONE;^1006^^^^^988^1014^[REPLACE] return ConcreteType.ALL;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  )  {^1009^^^^^988^1014^[REPLACE] if  ( jsType.isObject (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createConcreteInstance ( jsType.isObject (  )  ) ;^1010^^^^^988^1014^[REPLACE] return createConcreteInstance ( jsType.toObjectType (  )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createConcreteInstance ( recvType.toObjectType (  )  ) ;^1010^^^^^988^1014^[REPLACE] return createConcreteInstance ( jsType.toObjectType (  )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.ALL;^1013^^^^^988^1014^[REPLACE] return ConcreteType.NONE;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = ConcreteType.NONE;^1021^^^^^1020^1043^[REPLACE] ConcreteType ret = ConcreteType.NONE;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^1022^^^^^1020^1043^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1022^1023^1024^1025^^1020^1043^[ADD] if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ; }^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( instType == null ) {^1028^1029^1030^^^1020^1043^[REPLACE] if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1028^1029^1030^1031^1032^1020^1043^[ADD] if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  { Collection<FunctionType> implementors = getTypeRegistry (  ) .getDirectImplementors ( instType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1020^1043^[REPLACE] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  null.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1020^1043^[REPLACE] ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1035^1036^^^^1020^1043^[ADD] ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Collection<FunctionType> implementors = getTypeRegistry (  ) .getTypesWithProperty ( instType ) ;^1031^1032^^^^1020^1043^[REPLACE] Collection<FunctionType> implementors = getTypeRegistry (  ) .getDirectImplementors ( instType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1034^^^^^1020^1043^[REPLACE] for  ( FunctionType implementor : implementors )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1034^1035^1036^1037^^1020^1043^[ADD] for  ( FunctionType implementor : implementors )  { ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ; }^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1020^1043^[REPLACE] ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  null.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1020^1043^[REPLACE] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1039^^^^^1020^1043^[ADD] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType instType = ObjectType.cast ( recvType ) ;^1027^^^^^1020^1043^[REPLACE] ObjectType instType = ObjectType.cast ( jsType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1027^^^^^1020^1043^[ADD] ObjectType instType = ObjectType.cast ( jsType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createTypeWithSubTypes ( alt )  ) ;^1024^^^^^1020^1043^[REPLACE] ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1023^^^^^1020^1043^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1031^1032^^^^1020^1043^[ADD] Collection<FunctionType> implementors = getTypeRegistry (  ) .getDirectImplementors ( instType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  retType.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1020^1043^[REPLACE] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return thisType;^1042^^^^^1020^1043^[REPLACE] return ret;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( varScope ) ;^1047^^^^^1046^1178^[REPLACE] Preconditions.checkNotNull ( scope ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkNotNull ( receiver ) ;^1048^^^^^1046^1178^[REPLACE] Preconditions.checkNotNull ( expr ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope parentScope = null;^1049^^^^^1046^1178^[REPLACE] ConcreteType ret;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( slot == null )  {^1054^^^^^1046^1178^[REPLACE] if  ( slot != null )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^1059^^^^^1054^1060^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = scope.getTypeOfThis (  ) ; ;^1055^^^^^1046^1178^[REPLACE] ret = slot.getType (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isAll (  )  )  {^1096^^^^^1046^1178^[REPLACE] if  ( recvType.isAll (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^ret = recvType;break;^1096^1097^1098^1099^^1046^1178^[ADD] if  ( recvType.isAll (  )  )  { ret = recvType; break; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = recvType; ;^1097^^^^^1046^1178^[REPLACE] ret = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( "prototype" .isAll (  )   )  {^1103^^^^^1046^1178^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  else {^1107^1108^^^^1046^1178^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  if  ( "call".equals ( prop )  )  {^1112^^^^^1046^1178^[REPLACE] } else if  ( "call".equals ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = recvType; ;^1113^^^^^1046^1178^[REPLACE] type = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = type.unionWith ( funType.getPrototypeType (  )  ) ; ;^1110^^^^^1107^1114^[REPLACE] type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1109^^^^^1107^1114^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^}   type = recvType;^1112^1113^1114^^^1046^1178^[ADD] else if  ( "call".equals ( propName )  )  { type = recvType; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = type.unionWith ( funType.getPrototypeType (  )  ) ; ;^1110^^^^^1046^1178^[REPLACE] type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1113^^^^^1046^1178^[ADD] type = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1109^^^^^1046^1178^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = type.unionWith ( superType.getPrototypeType (  )  ) ; ;^1105^^^^^1046^1178^[REPLACE] type = type.unionWith ( funType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1104^^^^^1046^1178^[REPLACE] for  ( ConcreteFunctionType funType : recvType.getFunctions (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1104^1105^1106^^^1046^1178^[ADD] for  ( ConcreteFunctionType funType : recvType.getFunctions (  )  )  { type = type.unionWith ( funType.getPrototypeType (  )  ) ; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( propName )  )  {^1107^1108^^^^1046^1178^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^}^1107^1108^1109^1110^1111^1046^1178^[ADD] else if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( propName )  )  { for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  { type = type.unionWith ( superType.getPrototypeType (  )  ) ; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  else {^1112^^^^^1046^1178^[REPLACE] } else if  ( "call".equals ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1110^^^^^1107^1114^[ADD] type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1109^1110^1111^^^1107^1114^[ADD] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  { type = type.unionWith ( superType.getPrototypeType (  )  ) ; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^}^1112^1113^1114^^^1046^1178^[ADD] else if  ( "call".equals ( propName )  )  { type = recvType; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type .equals ( exprType )   )  {^1127^^^^^1046^1178^[REPLACE] if  ( targetType.isAll (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = recvType; ;^1128^^^^^1046^1178^[REPLACE] ret = targetType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1128^^^^^1046^1178^[ADD] ret = targetType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ret .equals ( exprType )   )  {^1140^^^^^1046^1178^[REPLACE] if  ( constructorType.isAll (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ;^1141^^^^^1046^1178^[REPLACE] throw new AssertionError ( "Attempted new call on all type!" ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  !expr.getJSType (  ) .isUnknownType (  )  )  {^1156^^^^^1046^1178^[REPLACE] if  (  ( expr.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^1162^^^^^1156^1163^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  null;^1160^^^^^1046^1178^[REPLACE] ret = inst;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^JSType receiverType = expr.getType (  ) .restrictByNotNullOrUndefined (  ) ;^1157^^^^^1046^1178^[REPLACE] JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1157^1158^^^^1046^1178^[ADD] JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ; ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType inst = createConcreteInstance ( exprType.isObject (  )  ) ;^1158^^^^^1046^1178^[REPLACE] ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^1059^^^^^1046^1178^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = slot.getType (  ) ; ;^1064^^^^^1046^1178^[REPLACE] ret = scope.getTypeOfThis (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1064^1065^^^^1046^1178^[ADD] ret = scope.getTypeOfThis (  ) ; break;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1070^^^^^1046^1178^[REPLACE] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1070^^^^^1046^1178^[ADD] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1074^^^^^1046^1178^[REPLACE] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1074^1075^^^^1046^1178^[ADD] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ; break;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1080^^^^^1046^1178^[REPLACE] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( varScope, expr.getLastChild (  )  )  ) ;^1084^1085^^^^1046^1178^[REPLACE] ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1084^1085^^^^1046^1178^[ADD] ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( varScope, expr.getLastChild (  )  )  ) ;^1089^1090^1091^^^1046^1178^[REPLACE] ret = inferConcreteType ( scope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1089^1090^1091^^^1046^1178^[ADD] ret = inferConcreteType ( scope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = recvType; ;^1115^^^^^1046^1178^[REPLACE] ret = type;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^1119^^^^^1046^1178^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = concreteType; ;^1131^^^^^1046^1178^[REPLACE] ret = ConcreteType.NONE;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  recvType.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^1133^^^^^1046^1178^[REPLACE] ret = ret.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = concreteType; ;^1143^^^^^1046^1178^[REPLACE] ret = ConcreteType.NONE;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype ) ; ;^1146^^^^^1046^1178^[REPLACE] ret = ret.unionWith ( instType ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1146^^^^^1046^1178^[ADD] ret = ret.unionWith ( instType ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  createConcreteFunction ( receiver, scope ) ;^1152^^^^^1046^1178^[REPLACE] ret = createConcreteFunction ( expr, scope ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType;^1160^^^^^1046^1178^[REPLACE] ret = inst;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^1162^^^^^1046^1178^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  instType;^1171^^^^^1046^1178^[REPLACE] ret = inst;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = concreteType; ;^1175^^^^^1046^1178^[REPLACE] ret = ConcreteType.NONE;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^StaticSlot<ConcreteType> slot = varScope.getSlot ( expr.getString (  )  ) ;^1052^^^^^1046^1178^[REPLACE] StaticSlot<ConcreteType> slot = scope.getSlot ( expr.getString (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1052^^^^^1046^1178^[ADD] StaticSlot<ConcreteType> slot = scope.getSlot ( expr.getString (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType recvType = inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1095^^^^^1046^1178^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node prop = expr .getFirstChild (  )  ;^1100^^^^^1046^1178^[REPLACE] Node prop = expr.getLastChild (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^String rhsName = prop.getString (  ) ;^1101^^^^^1046^1178^[REPLACE] String propName = prop.getString (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = recvType.getPropertyType ( prop ) ;^1102^^^^^1046^1178^[REPLACE] ConcreteType type = recvType.getPropertyType ( propName ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType targetType = inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1125^1126^^^^1046^1178^[REPLACE] ConcreteType targetType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1125^1126^^^^1046^1178^[ADD] ConcreteType targetType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1132^^^^^1046^1178^[REPLACE] for  ( ConcreteFunctionType funType : targetType.getFunctions (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType constructorType = inferConcreteType ( scope, receiver.getFirstChild (  )  ) ;^1138^1139^^^^1046^1178^[REPLACE] ConcreteType constructorType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1144^1145^1146^1147^^1046^1178^[ADD] for  ( ConcreteInstanceType instType : constructorType.getFunctionInstanceTypes (  )  )  { ret = ret.unionWith ( instType ) ; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^JSType receiverType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^1157^^^^^1046^1178^[REPLACE] JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType inst = createConcreteInstance ( paramType.toObjectType (  )  ) ;^1158^^^^^1046^1178^[REPLACE] ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1169^^^^^1046^1178^[REPLACE] ConcreteInstanceType inst = createConcreteInstance ( arrayType ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createTypeIntersection ( ret, expr .getJSType (  )   ) ;^1177^^^^^1046^1178^[REPLACE] return createTypeIntersection ( ret, expr.getJSType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteJSTypePair key = new ConcreteJSTypePair ( type, jsType ) ;^1185^^^^^1181^1226^[REPLACE] ConcreteJSTypePair key = new ConcreteJSTypePair ( concreteType, jsType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1186^^^^^1181^1226^[REPLACE] ConcreteType ret = typeIntersectionMemos.get ( key ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (thisType == null )  {^1187^^^^^1181^1226^[REPLACE] if  ( ret != null )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return retType;^1188^^^^^1181^1226^[REPLACE] return ret;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return thisType;^1188^^^^^1181^1226^[REPLACE] return ret;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( paramType != null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^1191^^^^^1181^1226^[REPLACE] if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  else {^1193^^^^^1181^1226^[REPLACE] } else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^retType = createUnionWithSubTypes ( retType ) ; ;^1197^^^^^1193^1198^[REPLACE] ret = createTypeWithSubTypes ( jsType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  recvType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1181^1226^[REPLACE] ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  targetType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1181^1226^[REPLACE] ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^retType = createUnionWithSubTypes ( retType ) ; ;^1197^^^^^1181^1226^[REPLACE] ret = createTypeWithSubTypes ( jsType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE; ;^1192^^^^^1181^1226^[REPLACE] ret = concreteType;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^} else if  ( concreteType.isUnion (  )  && concreteType.isSingleton (  )  )  {^1193^^^^^1181^1226^[REPLACE] } else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  null.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1181^1226^[REPLACE] ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  retType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1181^1226^[REPLACE] ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  recvType.intersectWith ( ConcrecvTypeeType.createForTypes ( allInstantiatedTypes )  ) ;^1199^^^^^1181^1226^[REPLACE] ret = ret.intersectWith ( ConcreteType.createForTypes ( allInstantiatedTypes )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype ) ; ;^1205^^^^^1181^1226^[REPLACE] ret = ret.unionWith ( functionType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1204^^^^^1181^1226^[REPLACE] for  ( ConcreteFunctionType functionType : concreteType.getFunctions (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( instType ) ; ;^1212^^^^^1181^1226^[REPLACE] ret = ret.unionWith ( prototype ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1211^^^^^1181^1226^[REPLACE] for  ( ConcreteInstanceType prototype : concreteType.getPrototypeTypes (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( prototype.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  {^1218^1219^^^^1181^1226^[REPLACE] if  ( !instance.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1218^1219^1220^1221^^1181^1226^[ADD] if  ( !instance.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  { ret = ret.unionWith ( instance ) ; }^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype ) ; ;^1220^^^^^1218^1221^[REPLACE] ret = ret.unionWith ( instance ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype ) ; ;^1220^^^^^1181^1226^[REPLACE] ret = ret.unionWith ( instance ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1217^^^^^1181^1226^[REPLACE] for  ( ConcreteInstanceType instance : concreteType.getInstances (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^getSubTypes ( type.getConstructorType (  ) .getJSType (  ) , set ) ;^1224^^^^^1181^1226^[REPLACE] typeIntersectionMemos.put ( key, ret ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return set;^1225^^^^^1181^1226^[REPLACE] return ret;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteFunctionType funType = functionFromDeclaration.get ( receiver ) ;^1231^^^^^1229^1240^[REPLACE] ConcreteFunctionType funType = functionFromDeclaration.get ( decl ) ;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( funType != null )  {^1232^^^^^1229^1240^[REPLACE] if  ( funType == null )  {^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( receiver.getJSType (  )  == null )  {^1235^^^^^1229^1240^[REPLACE] if  ( decl.getJSType (  )  != null )  {^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^functionFromJSType.values (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^1236^^^^^1229^1240^[REPLACE] functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^functionFromJSType.put (  ( FunctionType )  decl .getJSType (  )  , funType ) ;^1236^^^^^1229^1240^[REPLACE] functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1236^^^^^1229^1240^[ADD] functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^funType =  new ConcreteFunctionType ( this, receiver, parent )  ) ;^1234^^^^^1229^1240^[REPLACE] funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( decl.getJSType (  )  == false )  {^1235^^^^^1229^1240^[REPLACE] if  ( decl.getJSType (  )  != null )  {^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^functionFromJSType.put (  ( FunctionType )  receiver.getJSType (  ) , funType ) ;^1236^^^^^1229^1240^[REPLACE] functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1234^^^^^1229^1240^[ADD] funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return jstype == jsType;^1239^^^^^1229^1240^[REPLACE] return funType;^[METHOD] createConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Preconditions.checkArgument ( !instanceType.isFunctionType (  )   |  instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^1245^1246^1247^^^1243^1254^[REPLACE] Preconditions.checkArgument ( !instanceType.isFunctionType (  )  || instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^[METHOD] createConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^!instanceType.hasProperty (  )  || instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^1246^1247^^^^1243^1254^[REPLACE] !instanceType.isFunctionType (  )  || instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^[METHOD] createConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^1247^^^^^1243^1254^[REPLACE] instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^[METHOD] createConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteInstanceType instType = instanceFromJSType.put ( instanceType ) ;^1248^^^^^1243^1254^[REPLACE] ConcreteInstanceType instType = instanceFromJSType.get ( instanceType ) ;^[METHOD] createConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( instType != null )  {^1249^^^^^1243^1254^[REPLACE] if  ( instType == null )  {^[METHOD] createConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^instType =  new ConcreteInstanceType ( this, null )  ) ;^1251^^^^^1243^1254^[REPLACE] instType = new ConcreteInstanceType ( this, instanceType )  ) ;^[METHOD] createConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return jstype == jsType;^1253^^^^^1243^1254^[REPLACE] return instType;^[METHOD] createConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return functionFromDeclaration.put ( decl ) ;^1258^^^^^1257^1259^[REPLACE] return functionFromDeclaration.get ( decl ) ;^[METHOD] getConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] Node decl [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^1263^^^^^1262^1264^[REPLACE] return functionFromJSType.get ( functionType ) ;^[METHOD] getConcreteFunction [TYPE] ConcreteFunctionType [PARAMETER] FunctionType functionType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType functionType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return instanceFromJSType.put ( instanceType ) ;^1268^^^^^1267^1269^[REPLACE] return instanceFromJSType.get ( instanceType ) ;^[METHOD] getConcreteInstance [TYPE] ConcreteInstanceType [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1274^^^^^1272^1287^[REPLACE] ConcreteScope scope = new ConcreteScope (  ( ConcreteScope )  parent ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( ConcreteFunctionType.CALL_SLOT_NAME, receiver ) ;^1275^^^^^1272^1287^[REPLACE] scope.declareSlot ( ConcreteFunctionType.CALL_SLOT_NAME, decl ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( ConcreteFunctionType.CALL_SLOT_NAME, decl ) ;^1276^^^^^1272^1287^[REPLACE] scope.declareSlot ( ConcreteFunctionType.THIS_SLOT_NAME, decl ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, receiver ) ;^1277^^^^^1272^1287^[REPLACE] scope.declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, decl ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( Node parent = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^1278^^^^^1272^1287^[REPLACE] for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1278^1279^1280^1281^1282^1272^1287^[ADD] for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ; n != null; n = n.getNext (  )  )  { scope.declareSlot ( n.getString (  ) , n ) ; }^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( parent.getString (  ) , n ) ;^1281^^^^^1272^1287^[REPLACE] scope.declareSlot ( n.getString (  ) , n ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( n.getType (  ) , n ) ;^1281^^^^^1272^1287^[REPLACE] scope.declareSlot ( n.getString (  ) , n ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^n =  parent.getNext (  )  )  {^1280^^^^^1272^1287^[REPLACE] n = n.getNext (  )  )  {^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1280^1281^^^^1272^1287^[ADD] n = n.getNext (  )  )  { scope.declareSlot ( n.getString (  ) , n ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( Node n = receiver .getLastChild (  )  .getNext (  )^1278^^^^^1272^1287^[REPLACE] for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.initForScopeRoot ( decl.getFirstChild (  )  ) ;^1285^^^^^1272^1287^[REPLACE] scope.initForScopeRoot ( decl.getLastChild (  )  ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.initForScopeRoot ( receiver.getFirstChild (  )  ) ;^1285^^^^^1272^1287^[REPLACE] scope.initForScopeRoot ( decl.getLastChild (  )  ) ;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return varScope;^1286^^^^^1272^1287^[REPLACE] return scope;^[METHOD] createFunctionScope [TYPE] StaticScope [PARAMETER] Node decl ConcreteType> parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  StaticScope parent  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope parentScope = this;^1292^^^^^1290^1303^[REPLACE] ConcreteScope parentScope = null;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1292^^^^^1290^1303^[ADD] ConcreteScope parentScope = null;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( instanceType.getImplicitPrototype (  )  == false )  {^1293^^^^^1290^1303^[REPLACE] if  ( instanceType.getImplicitPrototype (  )  != null )  {^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope =  ( ConcreteScope )  type.getScope (  ) ; ;^1296^^^^^1290^1303^[REPLACE] parentScope =  ( ConcreteScope )  prototype.getScope (  ) ;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteInstanceType prototype = createConcreteInstance ( instanceType .getPropertyType ( NON_HALTING_ERROR_MSG )   ) ;^1294^1295^^^^1290^1303^[REPLACE] ConcreteInstanceType prototype = createConcreteInstance ( instanceType.getImplicitPrototype (  )  ) ;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1294^1295^^^^1290^1303^[ADD] ConcreteInstanceType prototype = createConcreteInstance ( instanceType.getImplicitPrototype (  )  ) ;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( varScope ) ;^1298^^^^^1290^1303^[REPLACE] ConcreteScope scope = new ConcreteScope ( parentScope ) ;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1298^^^^^1290^1303^[ADD] ConcreteScope scope = new ConcreteScope ( parentScope ) ;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1299^^^^^1290^1303^[REPLACE] for  ( String propName : instanceType.getOwnPropertyNames (  )  )  {^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1299^1300^1301^^^1290^1303^[ADD] for  ( String propName : instanceType.getOwnPropertyNames (  )  )  { scope.declareSlot ( propName, null ) ; }^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return jstype == jsType;^1302^^^^^1290^1303^[REPLACE] return scope;^[METHOD] createInstanceScope [TYPE] StaticScope [PARAMETER] ObjectType instanceType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instanceType  [TYPE]  ConcreteInstanceType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Set<ConcreteType> set = false;^1312^^^^^1311^1318^[REPLACE] Set<ConcreteType> set = null;^[METHOD] createUnionWithSubTypes [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( retType.isInstance (  )  )  {^1313^^^^^1311^1318^[REPLACE] if  ( type.isInstance (  )  )  {^[METHOD] createUnionWithSubTypes [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^set =  getSubTypes ( thisType.toInstance (  )  ) ;^1314^^^^^1311^1318^[REPLACE] set = getSubTypes ( type.toInstance (  )  ) ;^[METHOD] createUnionWithSubTypes [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1314^^^^^1311^1318^[ADD] set = getSubTypes ( type.toInstance (  )  ) ;^[METHOD] createUnionWithSubTypes [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^set =  getSubTypes ( null.toInstance (  )  ) ;^1314^^^^^1311^1318^[REPLACE] set = getSubTypes ( type.toInstance (  )  ) ;^[METHOD] createUnionWithSubTypes [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.getPropertyType ( set ) .unionWith ( recvType ) ;^1317^^^^^1311^1318^[REPLACE] return ConcreteType.createForTypes ( set ) .unionWith ( type ) ;^[METHOD] createUnionWithSubTypes [TYPE] ConcreteType [PARAMETER] ConcreteType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type .getScope (  )   != null )  {^1322^^^^^1321^1329^[REPLACE] if  ( type.getConstructorType (  )  == null )  {^[METHOD] getSubTypes [TYPE] Set [PARAMETER] ConcreteInstanceType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1323^^^^^1321^1329^[REPLACE] return null;^[METHOD] getSubTypes [TYPE] Set [PARAMETER] ConcreteInstanceType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1326^^^^^1321^1329^[REPLACE] Set<ConcreteType> set = Sets.newHashSet (  ) ;^[METHOD] getSubTypes [TYPE] Set [PARAMETER] ConcreteInstanceType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^getSubTypes ( type.getConstructorType (  ) .unionWith (  ) , set ) ;^1327^^^^^1321^1329^[REPLACE] getSubTypes ( type.getConstructorType (  ) .getJSType (  ) , set ) ;^[METHOD] getSubTypes [TYPE] Set [PARAMETER] ConcreteInstanceType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^getSubTypes ( type.getScope (  ) .getJSType (  ) , set ) ;^1327^^^^^1321^1329^[REPLACE] getSubTypes ( type.getConstructorType (  ) .getJSType (  ) , set ) ;^[METHOD] getSubTypes [TYPE] Set [PARAMETER] ConcreteInstanceType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1328^^^^^1321^1329^[REPLACE] return set;^[METHOD] getSubTypes [TYPE] Set [PARAMETER] ConcreteInstanceType type [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.getSubTypes (  )  == null )  {^1336^^^^^1335^1359^[REPLACE] if  ( type.getSubTypes (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  concrete.toFunction (  ) .getInstanceType (  )  == null )  {^1339^1340^^^^1335^1359^[REPLACE] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1339^1340^1341^1342^1343^1335^1359^[ADD] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  { concrete = concrete.toFunction (  ) .getInstanceType (  ) ; if  ( !set.contains ( concrete )  )  { set.add ( concrete ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1354^^^^^1335^1359^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( set.contains ( concrete )  )  {^1342^^^^^1335^1359^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, this )  )  {^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1345^^^^^1335^1359^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, true )  )  {^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  retType.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1341^^^^^1335^1359^[ADD] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^return false;^1344^1345^1346^^^1335^1359^[ADD] if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, null )  )  {^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  ret.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^1337^^^^^1335^1359^[REPLACE] for  ( FunctionType sub : type.getSubTypes (  )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType ret;^1338^^^^^1335^1359^[REPLACE] ConcreteType concrete = createType ( sub ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .unionWith (  )  == this )  {^1339^1340^^^^1335^1359^[REPLACE] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !set.contains ( recvType )  )  {^1342^^^^^1335^1359^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^set.add ( concrete ) ;return false;^1342^1343^1344^1345^1346^1335^1359^[ADD] if  ( !set.contains ( concrete )  )  { set.add ( concrete ) ; if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, 1 )  )  {^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( getSubTypes ( sub, set )  )  {^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  type.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return false;^1358^^^^^1335^1359^[REPLACE] return true;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return jstype ;^1377^^^^^1376^1378^[REPLACE] return jstype != null ? jstype.hashCode (  )  : 0;^[METHOD] getJSTypeHashCode [TYPE] int [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( jsType != this || jstype == this )  {^1381^^^^^1380^1386^[REPLACE] if  ( jsType == null || jstype == null )  {^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return paramType .isAll (  )  ;^1384^^^^^1380^1386^[REPLACE] return jsType.equals ( this.jstype ) ;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return jstype  !=  recvType;;^1382^^^^^1380^1386^[REPLACE] return jstype == jsType;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return jstype  && recvType;^1382^^^^^1380^1386^[REPLACE] return jstype == jsType;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return recvType.equals ( this.jstype ) ;^1384^^^^^1380^1386^[REPLACE] return jsType.equals ( this.jstype ) ;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! o instanceof ConcreteJSTypePair )  {^1390^^^^^1389^1398^[REPLACE] if  ( o instanceof ConcreteJSTypePair )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ( pair.concrete.unionWith ( this.concrete ) ) {^1392^1393^^^^1389^1398^[REPLACE] if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1392^1393^1394^1395^^1389^1398^[ADD] if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  { return true; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return false;^1394^^^^^1389^1398^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^1391^^^^^1389^1398^[REPLACE] ConcreteJSTypePair pair =  ( ConcreteJSTypePair )  o;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ( pair.concrete.equals ( this.concrete ) ) {^1392^1393^^^^1389^1398^[REPLACE] if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return type;^1394^^^^^1389^1398^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1391^^^^^1389^1398^[ADD] ConcreteJSTypePair pair =  ( ConcreteJSTypePair )  o;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1397^^^^^1389^1398^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Object o  [TYPE]  ConcreteJSTypePair pair  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return jstype == jsType;^1402^^^^^1401^1403^[REPLACE] return hashcode;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^private  Map<String, ConcreteSlot> slots;^181^^^^^^^[REPLACE] private final Map<String, ConcreteSlot> slots;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] ConcreteScope   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^private  List<Action> actions;^182^^^^^^^[REPLACE] private final List<Action> actions;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] ConcreteScope   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.parent =  null;^185^^^^^184^188^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope) [PARAMETER] ConcreteScope parent [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^this.slots ;^186^^^^^184^188^[REPLACE] this.slots = Maps.newHashMap (  ) ;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope) [PARAMETER] ConcreteScope parent [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^this.actions  =  this.actions ;^187^^^^^184^188^[REPLACE] this.actions = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope) [PARAMETER] ConcreteScope parent [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^Collection<ConcreteSlot> getSlots (  )  { return slots.values (  ) ; }^191^^^^^^^[REPLACE] public StaticScope<ConcreteType> getParentScope (  )  { return parent; }^[METHOD] getParentScope [TYPE] StaticScope [PARAMETER] [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return null;^195^^^^^194^196^[REPLACE] return slots.get ( name ) ;^[METHOD] getOwnSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^ConcreteSlot thisVar = slots.get ( ConcreteFunctionType.THIS_SLOT_NAME ) ;^200^^^^^199^208^[REPLACE] StaticSlot<ConcreteType> var = getOwnSlot ( name ) ;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^if  ( var == null )  {^201^^^^^199^208^[REPLACE] if  ( var != null )  {^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^}  if  ( parent == null )  {^203^^^^^199^208^[REPLACE] } else if  ( parent != null )  {^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return true;^206^^^^^199^208^[REPLACE] return null;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return parent.getOwnSlot ( name ) ;^204^^^^^199^208^[REPLACE] return parent.getSlot ( name ) ;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return null;^202^^^^^199^208^[REPLACE] return var;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[ADD]^}   return parent.getSlot ( name ) ;return null;^203^204^205^206^207^199^208^[ADD] else if  ( parent != null )  { return parent.getSlot ( name ) ; } else { return null; }^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return parent .getSlots (  )  ;^204^^^^^199^208^[REPLACE] return parent.getSlot ( name ) ;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return false;^206^^^^^199^208^[REPLACE] return null;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  StaticSlot var  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^Collection<ConcreteSlot> getSlots (  )  { return slots .get ( null )  ; }^211^^^^^^^[REPLACE] Collection<ConcreteSlot> getSlots (  )  { return slots.values (  ) ; }^[METHOD] getSlots [TYPE] Collection [PARAMETER] [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^ConcreteSlot thisVar = slots .put ( 1 , null )  ;^217^^^^^214^219^[REPLACE] ConcreteSlot thisVar = slots.get ( ConcreteFunctionType.THIS_SLOT_NAME ) ;^[METHOD] getTypeOfThis [TYPE] ConcreteType [PARAMETER] [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  ConcreteSlot thisVar  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return  ( thisVar  =  ConcreteType.NONE;^218^^^^^214^219^[REPLACE] return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[METHOD] getTypeOfThis [TYPE] ConcreteType [PARAMETER] [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  ConcreteSlot thisVar  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^slots.put ( name, var ) ;^223^^^^^222^224^[REPLACE] slots.put ( name, new ConcreteSlot ( this, name )  ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node declaration 
[REPLACE]^StaticSlot<ConcreteType> var = getOwnSlot ( name ) ;^228^^^^^227^231^[REPLACE] ConcreteSlot var = new ConcreteSlot ( this, name ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration ConcreteType type [CLASS] ConcreteScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  true  [TYPE]  ConcreteScope parent  [TYPE]  Node declaration  [TYPE]  List actions  [TYPE]  String name  [TYPE]  Map slots  [TYPE]  ConcreteType type 
[REPLACE]^Preconditions.checkNotNull ( decl ) ;^229^^^^^227^231^[REPLACE] var.addConcreteType ( type ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration ConcreteType type [CLASS] ConcreteScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  true  [TYPE]  ConcreteScope parent  [TYPE]  Node declaration  [TYPE]  List actions  [TYPE]  String name  [TYPE]  Map slots  [TYPE]  ConcreteType type 
[REPLACE]^return slots.get ( name ) ;^230^^^^^227^231^[REPLACE] slots.put ( name, var ) ;^[METHOD] declareSlot [TYPE] void [PARAMETER] String name Node declaration ConcreteType type [CLASS] ConcreteScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  true  [TYPE]  ConcreteScope parent  [TYPE]  Node declaration  [TYPE]  List actions  [TYPE]  String name  [TYPE]  Map slots  [TYPE]  ConcreteType type 
[REPLACE]^Collection<ConcreteSlot> getSlots (  )  { return slots.values (  ) ; }^234^^^^^^^[REPLACE] List<Action> getActions (  )  { return actions; }^[METHOD] getActions [TYPE] List [PARAMETER] [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^Preconditions .checkArgument (  )  ;^238^^^^^237^245^[REPLACE] Preconditions.checkNotNull ( decl ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^if  ( decl.getType (  )   ||  Token.FUNCTION )  {^239^^^^^237^245^[REPLACE] if  ( decl.getType (  )  == Token.FUNCTION )  {^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[ADD]^^239^240^241^^^237^245^[ADD] if  ( decl.getType (  )  == Token.FUNCTION )  { decl = decl.getLastChild (  ) ; }^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^decl =  null.getLastChild (  ) ;^240^^^^^237^245^[REPLACE] decl = decl.getLastChild (  ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^Preconditions.checkArgument ( decl.getType (  )   !=  Token.BLOCK ) ;^242^^^^^237^245^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^Preconditions.checkArgument ( decl .addConcreteType ( false )   == Token.BLOCK ) ;^242^^^^^237^245^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[ADD]^^242^^^^^237^245^[ADD] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^244^^^^^237^245^[REPLACE] NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[METHOD] initForScopeRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^decl   ;^249^^^^^248^253^[REPLACE] Preconditions.checkNotNull ( decl ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^Preconditions.checkArgument ( decl.getType (  )   !=  Token.BLOCK ) ;^250^^^^^248^253^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REMOVE]^Preconditions.checkNotNull ( decl ) ;^250^^^^^248^253^[REMOVE] ^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^Preconditions.checkArgument ( decl .addConcreteType ( this )   == Token.BLOCK ) ;^250^^^^^248^253^[REPLACE] Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^252^^^^^248^253^[REPLACE] NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^[METHOD] initForExternRoot [TYPE] void [PARAMETER] Node decl [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent  [TYPE]  Node decl 
[REPLACE]^Preconditions.checkNotNull ( decl ) ;^256^^^^^^^[REPLACE] void addAction ( Action action )  { actions.add ( action ) ; }^[METHOD] addAction [TYPE] void [PARAMETER] Action action [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  Action action  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[ADD]^^256^257^258^^^^^[ADD] void addAction ( Action action )  { actions.add ( action ) ; }  @Override public String toString (  )  {^[METHOD] addAction [TYPE] void [PARAMETER] Action action [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  Action action  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^return getTypeOfThis (  ) .toString (  )   ;^259^^^^^258^260^[REPLACE] return getTypeOfThis (  ) .toString (  )  + " " + getSlots (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ConcreteScope   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^this.scope =  null;^270^^^^^269^273^[REPLACE] this.scope = scope;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType type  [TYPE]  ConcreteScope scope 
[REPLACE]^this.name =  null;^271^^^^^269^273^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType type  [TYPE]  ConcreteScope scope 
[REPLACE]^this.type ;^272^^^^^269^273^[REPLACE] this.type = ConcreteType.NONE;^[METHOD] <init> [TYPE] String) [PARAMETER] ConcreteScope scope String name [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType type  [TYPE]  ConcreteScope scope 
[REPLACE]^@Override public String getName (  )  { return name; }^276^^^^^^^[REPLACE] ConcreteScope getScope (  )  { return scope; }^[METHOD] getScope [TYPE] TightenTypes$ConcreteScope [PARAMETER] [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType type  [TYPE]  ConcreteScope scope 
[REPLACE]^return getName (  )  + ": " + getType (  ) ;^279^^^^^^^[REPLACE] @Override public String getName (  )  { return name; }^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType type  [TYPE]  ConcreteScope scope 
[REPLACE]^@Override public String getName (  )  { return name; }^281^^^^^^^[REPLACE] @Override public ConcreteType getType (  )  { return type; }^[METHOD] getType [TYPE] ConcreteType [PARAMETER] [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType type  [TYPE]  ConcreteScope scope 
[REPLACE]^public boolean isTypeInferred (  )  { return false; }^284^^^^^^^[REPLACE] public boolean isTypeInferred (  )  { return true; }^[METHOD] isTypeInferred [TYPE] boolean [PARAMETER] [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType type  [TYPE]  ConcreteScope scope 
[ADD]^^291^^^^^290^294^[ADD] ConcreteType origType = this.type;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType origType  type  [TYPE]  ConcreteScope scope 
[REPLACE]^this.type =  type.unionWith ( type ) ;^292^^^^^290^294^[REPLACE] this.type = origType.unionWith ( type ) ;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType origType  type  [TYPE]  ConcreteScope scope 
[REPLACE]^return !this.type.equals ( type ) ;^293^^^^^290^294^[REPLACE] return !this.type.equals ( origType ) ;^[METHOD] addConcreteType [TYPE] boolean [PARAMETER] ConcreteType type [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType origType  type  [TYPE]  ConcreteScope scope 
[REPLACE]^return getName (  )   ||  ": "  ||  getType (  ) ;^297^^^^^296^298^[REPLACE] return getName (  )  + ": " + getType (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ConcreteSlot   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType origType  type  [TYPE]  ConcreteScope scope 
[REPLACE]^private  ConcreteSlot slot;^316^^^^^^^[REPLACE] private final ConcreteSlot slot;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Assignment   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType origType  type  [TYPE]  ConcreteScope scope 
[REPLACE]^private  ConcreteType type;^317^^^^^^^[REPLACE] private final ConcreteType type;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Assignment   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType origType  type  [TYPE]  ConcreteScope scope 
[REPLACE]^this.slot =  null;^320^^^^^319^325^[REPLACE] this.slot = slot;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] Assignment   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[REPLACE]^this.type =  null;^321^^^^^319^325^[REPLACE] this.type = type;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] Assignment   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[ADD]^^321^^^^^319^325^[ADD] this.type = type;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] Assignment   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[REPLACE]^slot   ;^323^^^^^319^325^[REPLACE] Preconditions.checkNotNull ( slot ) ;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] Assignment   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[ADD]^Preconditions.checkNotNull ( type ) ;^323^324^^^^319^325^[ADD] Preconditions.checkNotNull ( slot ) ; Preconditions.checkNotNull ( type ) ;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] Assignment   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[REPLACE]^type   ;^324^^^^^319^325^[REPLACE] Preconditions.checkNotNull ( type ) ;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] Assignment   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[ADD]^^324^^^^^319^325^[ADD] Preconditions.checkNotNull ( type ) ;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] Assignment   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[REPLACE]^private  Node expression;^331^^^^^^^[REPLACE] private final Node expression;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] VariableAssignAction   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[REPLACE]^this.slot =  null;^334^^^^^333^339^[REPLACE] this.slot = slot;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] VariableAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  Node expr  expression  [TYPE]  boolean false  true 
[REPLACE]^this.expression =  null;^335^^^^^333^339^[REPLACE] this.expression = expr;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] VariableAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  Node expr  expression  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkNotNull ( expr ) ;^337^^^^^333^339^[REPLACE] Preconditions.checkNotNull ( slot ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] VariableAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  Node expr  expression  [TYPE]  boolean false  true 
[REPLACE]^expression   ;^338^^^^^333^339^[REPLACE] Preconditions.checkNotNull ( expr ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] VariableAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  Node expr  expression  [TYPE]  boolean false  true 
[ADD]^^338^^^^^333^339^[ADD] Preconditions.checkNotNull ( expr ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] ConcreteSlot slot Node expr [CLASS] VariableAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  Node expr  expression  [TYPE]  boolean false  true 
[REPLACE]^return   new Assignment ( slot, inferConcreteType ( scope, expression )   ) ;^342^343^^^^341^344^[REPLACE] return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] VariableAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression 
[REPLACE]^private  Node receiver;^349^^^^^^^[REPLACE] private final Node receiver;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression 
[REPLACE]^private final  int  propName;^350^^^^^^^[REPLACE] private final String propName;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression 
[REPLACE]^private  Node expression;^351^^^^^^^[REPLACE] private final Node expression;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression 
[REPLACE]^this.receiver =  expression;^354^^^^^353^361^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^this.propName =  expression.getNext (  ) .getString (  ) ;^355^^^^^353^361^[REPLACE] this.propName = receiver.getNext (  ) .getString (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^this.expression =  receiver;^356^^^^^353^361^[REPLACE] this.expression = expr;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkNotNull ( expression ) ;^358^^^^^353^361^[REPLACE] Preconditions.checkNotNull ( receiver ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REMOVE]^Preconditions.checkNotNull ( expr ) ;^358^^^^^353^361^[REMOVE] ^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkNotNull ( expr ) ;^359^^^^^353^361^[REPLACE] Preconditions.checkNotNull ( propName ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkNotNull ( receiver ) ;^360^^^^^353^361^[REPLACE] Preconditions.checkNotNull ( expr ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[ADD]^^360^^^^^353^361^[ADD] Preconditions.checkNotNull ( expr ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node expr [CLASS] PropertyAssignAction   [TYPE]  Node expr  expression  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^ConcreteType exprType = inferConcreteType ( scope, expression ) ;^370^^^^^369^379^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[ADD]^^370^371^^^^369^379^[ADD] ConcreteType recvType = inferConcreteType ( scope, receiver ) ; ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^371^^^^^369^379^[REPLACE] ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^373^^^^^369^379^[REPLACE] List<Assignment> assigns = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[ADD]^^373^^^^^369^379^[ADD] List<Assignment> assigns = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^return this;^378^^^^^369^379^[REPLACE] return assigns;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private boolean isNewCall  = null ;^384^^^^^^^[REPLACE] private boolean isNewCall = false;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private boolean isCallFunction = true;^385^^^^^^^[REPLACE] private boolean isCallFunction = false;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private  short  propName = null;^388^^^^^^^[REPLACE] private String propName = null;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^this.receiver =  firstArgument;^391^^^^^390^393^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node firstArgument [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^this.firstArgument =  receiver;^392^^^^^390^393^[REPLACE] this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver Node firstArgument [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^this.propName =  null;^396^^^^^395^398^[REPLACE] this.propName = propName;^[METHOD] setPropName [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] String propName [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^return null;^397^^^^^395^398^[REPLACE] return this;^[METHOD] setPropName [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] String propName [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^Preconditions.checkState ( ! (true ;^402^403^^^^401^407^[REPLACE] Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[METHOD] setIsNewCall [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] boolean isNew [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNew  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^isNewCall =  null;^405^^^^^401^407^[REPLACE] isNewCall = isNew;^[METHOD] setIsNewCall [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] boolean isNew [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNew  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^return null;^406^^^^^401^407^[REPLACE] return this;^[METHOD] setIsNewCall [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] boolean isNew [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNew  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^isCallFunction = false;^417^^^^^413^419^[REPLACE] isCallFunction = true;^[METHOD] setIsCallFunction [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNew  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^return null;^418^^^^^413^419^[REPLACE] return this;^[METHOD] setIsCallFunction [TYPE] TightenTypes$FunctionCallBuilder [PARAMETER] [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNew  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^return  new NativeCallFunctionCall ( receiver, propName, firstArgument )  ;^425^^^^^421^427^[REPLACE] return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[METHOD] build [TYPE] TightenTypes$Action [PARAMETER] [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNew  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^return  new FunctionCall ( isNewCall, receiver, propName, firstArgument )  ;^423^^^^^421^427^[REPLACE] return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[METHOD] build [TYPE] TightenTypes$Action [PARAMETER] [CLASS] FunctionCallBuilder   [TYPE]  boolean false  isCallFunction  isNew  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^this.receiver =  null;^464^^^^^462^467^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] List) [PARAMETER] Node receiver ConcreteType thisType ConcreteType> argTypes [CLASS] ExternFunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  Node receiver 
[REPLACE]^this.thisType =  null;^465^^^^^462^467^[REPLACE] this.thisType = thisType;^[METHOD] <init> [TYPE] List) [PARAMETER] Node receiver ConcreteType thisType ConcreteType> argTypes [CLASS] ExternFunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  Node receiver 
[REPLACE]^this.argTypes =  null;^466^^^^^462^467^[REPLACE] this.argTypes = argTypes;^[METHOD] <init> [TYPE] List) [PARAMETER] Node receiver ConcreteType thisType ConcreteType> argTypes [CLASS] ExternFunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  Node receiver 
[REPLACE]^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , nullType, argTypes ) ;^470^471^^^^469^472^[REPLACE] return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] ExternFunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node receiver 
[REPLACE]^private  boolean isNewCall;^477^^^^^^^[REPLACE] private final boolean isNewCall;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node receiver 
[REPLACE]^private  Node receiver;^478^^^^^^^[REPLACE] private final Node receiver;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node receiver 
[REPLACE]^private final  double  propName;^479^^^^^^^[REPLACE] private final String propName;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node receiver 
[REPLACE]^this.isNewCall =  true;^488^^^^^486^494^[REPLACE] this.isNewCall = isNewCall;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[ADD]^^488^^^^^486^494^[ADD] this.isNewCall = isNewCall;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^this.receiver =  null;^489^^^^^486^494^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^this.propName =  null;^490^^^^^486^494^[REPLACE] this.propName = propName;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[ADD]^^490^491^^^^486^494^[ADD] this.propName = propName; this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^this.firstArgument =  receiver;^491^^^^^486^494^[REPLACE] this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^firstArgument   ;^493^^^^^486^494^[REPLACE] Preconditions.checkNotNull ( receiver ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[ADD]^^493^^^^^486^494^[ADD] Preconditions.checkNotNull ( receiver ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] boolean isNewCall Node receiver String propName Node firstArgument [CLASS] FunctionCall   [TYPE]  boolean false  isNewCall  true  [TYPE]  String propName  [TYPE]  Node firstArgument  receiver 
[REPLACE]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^497^^^^^496^535^[REPLACE] ConcreteType thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^497^498^^^^496^535^[ADD] ConcreteType thisType = ConcreteType.NONE; ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE;^498^^^^^496^535^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if  ( propName == this  )  {^502^^^^^496^535^[REPLACE] if  ( propName != null )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^thisType =  null;^503^^^^^496^535^[REPLACE] thisType = recvType;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^recvType =  null.getPropertyType ( propName ) ;^504^^^^^496^535^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^503^^^^^496^535^[ADD] thisType = recvType;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if  ( thisType.isAll (  )  )  {^507^^^^^496^535^[REPLACE] if  ( recvType.isAll (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^return ;^510^511^^^^496^535^[REPLACE] throw new AssertionError ( "Found call on all type, which makes tighten types useless." ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if  ( propName != null )  {^516^^^^^496^535^[REPLACE] if  ( isNewCall )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^thisType = ConcreteType.NONE;^516^517^518^519^520^496^535^[ADD] if  ( isNewCall )  { thisType = ConcreteType.NONE; for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  { thisType = thisType.unionWith ( instType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if  ( true )  {^523^^^^^496^535^[REPLACE] if  ( added )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^525^^^^^496^535^[REPLACE] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^525^^^^^496^535^[ADD] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^thisType  =  thisType ;^517^^^^^496^535^[REPLACE] thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^thisType =  recvType.unionWith ( instType ) ;^520^^^^^496^535^[REPLACE] thisType = thisType.unionWith ( instType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^518^519^520^521^^496^535^[ADD] for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  { thisType = thisType.unionWith ( instType ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^boolean added = allInstantiatedTypes.add ( recvType ) ;^522^^^^^496^535^[REPLACE] boolean added = allInstantiatedTypes.add ( thisType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^522^^^^^496^535^[ADD] boolean added = allInstantiatedTypes.add ( thisType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE;^529^^^^^496^535^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^529^^^^^496^535^[ADD] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^for  ( Node arg = firstArgument; arg == null; arg = arg.getNext (  )  )  {^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^argTypes.add ( inferConcreteType ( scope, firstArgument )  ) ;^531^^^^^496^535^[REPLACE] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^531^^^^^496^535^[REPLACE] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^for  ( Node arg =  firstArgument; firstArgument !^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  { argTypes.add ( inferConcreteType ( scope, arg )  ) ;^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^return getFunctionCallAssignments ( recvType, thisType, this ) ;^534^^^^^496^535^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^private  String propName;^541^^^^^^^[REPLACE] private final String propName;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^private  Node firstArgument;^542^^^^^^^[REPLACE] private final Node firstArgument;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^this.receiver =  null;^545^^^^^544^550^[REPLACE] this.receiver = receiver;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] NativeCallFunctionCall   [TYPE]  Node firstArgument  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^this.propName =  null;^546^^^^^544^550^[REPLACE] this.propName = propName;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] NativeCallFunctionCall   [TYPE]  Node firstArgument  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[ADD]^^546^547^^^^544^550^[ADD] this.propName = propName; this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] NativeCallFunctionCall   [TYPE]  Node firstArgument  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^this.firstArgument =  receiver;^547^^^^^544^550^[REPLACE] this.firstArgument = firstArgument;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] NativeCallFunctionCall   [TYPE]  Node firstArgument  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkNotNull ( firstArgument ) ;^549^^^^^544^550^[REPLACE] Preconditions.checkNotNull ( receiver ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node receiver String propName Node firstArgument [CLASS] NativeCallFunctionCall   [TYPE]  Node firstArgument  receiver  [TYPE]  String propName  [TYPE]  boolean false  true 
[REPLACE]^ConcreteType thisType  =  inferConcreteType ( scope, firstArgument ) ;^553^554^555^^^552^570^[REPLACE] ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^553^554^555^^^552^570^[ADD] ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument )^556^^^^^552^570^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^if  ( ! recvType instanceof ConcreteInstanceType ) {^558^559^^^^552^570^[REPLACE] if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^recvType =  null.getPropertyType ( propName ) ;^560^^^^^552^570^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^560^^^^^552^570^[ADD] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^562^^^^^552^570^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^for  ( Node firstArgument = firstArgument.getNext (  ) ;^564^^^^^552^570^[REPLACE] for  ( Node arg = firstArgument.getNext (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^argTypes.add ( inferConcreteType ( scope, firstArgument )  ) ;^567^^^^^552^570^[REPLACE] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^567^^^^^552^570^[ADD] argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REMOVE]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^567^^^^^552^570^[REMOVE] ^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^arg =  firstArgument.getNext (  )  )  {^566^^^^^552^570^[REPLACE] arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^566^567^^^^552^570^[ADD] arg = arg.getNext (  )  )  { argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^564^^^^^552^570^[REPLACE] for  ( Node arg = firstArgument.getNext (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^return getFunctionCallAssignments ( recvType, thisType, true ) ;^569^^^^^552^570^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^private  boolean inExterns;^576^^^^^^^[REPLACE] private final boolean inExterns;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] CreateScope   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^this.scope =  null;^579^^^^^578^581^[REPLACE] this.scope = scope;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope,boolean) [PARAMETER] ConcreteScope scope boolean inExterns [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true 
[ADD]^^579^580^^^^578^581^[ADD] this.scope = scope; this.inExterns = inExterns;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope,boolean) [PARAMETER] ConcreteScope scope boolean inExterns [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true 
[REPLACE]^this.inExterns =  true;^580^^^^^578^581^[REPLACE] this.inExterns = inExterns;^[METHOD] <init> [TYPE] TightenTypes$ConcreteScope,boolean) [PARAMETER] ConcreteScope scope boolean inExterns [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^590^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^590^591^^^594^584^745^[ADD] if  ( inExterns )  {  scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( receiver.getFirstChild (  )  == null )  {^597^^^^^590^601^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^597^598^599^600^^590^601^[ADD] if  ( name.getFirstChild (  )  != null )  { addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( name, name .getLastChild (  )  , n )  ) ;^598^599^^^^590^601^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^590^601^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( name.getType (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( receiver.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^594^^^^^584^745^[ADD] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( receiver.getFirstChild (  )  == null )  {^597^^^^^584^745^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( receiver, name.getLastChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^584^745^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^607^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isFunction (  )  )  {^611^^^^^584^745^[REPLACE] if  ( type.isNone (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^611^612^613^614^^584^745^[ADD] if  ( type.isNone (  )  )  { ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope == true )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^type = createType ( n.getJSType (  )  ) ;break;^615^616^617^618^619^584^745^[ADD] if  ( scope != null )  { type = createType ( n.getJSType (  )  ) ; if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( retType.isNone (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^break;^617^618^619^^^584^745^[ADD] if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^type =  createType ( parent.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^retType = createUnionWithSubTypes ( retType ) ; ;^620^^^^^584^745^[REPLACE] type = createUnionWithSubTypes ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (  type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , parent.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^584^745^[REPLACE] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^621^622^^^^584^745^[ADD] Node nameNode = n.getLastChild (  ) ; scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope == null )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  && type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^620^^^^^584^745^[ADD] type = createUnionWithSubTypes ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^608^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^608^^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope == false )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^612^613^614^^^584^745^[ADD] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^621^^^^^584^745^[ADD] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (  type .isNone (  )   )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (   parent    )  {^630^^^^^584^745^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( n.getJSType (  ) .isNoObjectType (  )  )  {^631^^^^^584^745^[REPLACE] if  ( !n.getJSType (  ) .isNoObjectType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (  type.getInstanceType (  )  == true )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node nameNode = n.getLastChild (  ) ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^638^^^^^584^745^[ADD] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteFunctionType type = createConcreteFunction ( parent, scope ) ;^632^^^^^584^745^[REPLACE] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^632^633^^^^584^745^[ADD] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ; scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( inExterns && type.getInstanceType (  )  == null )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REMOVE]^.setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^638^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REMOVE]^if  (  (  ( parent.getType (  )  )  ==  ( CATCH )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ; }^631^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (  type.getInstanceType (  )  == false )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^632^^^^^584^745^[ADD] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^635^636^^638^639^584^745^[ADD] if  ( inExterns && type.getInstanceType (  )  != null )  {  allInstantiatedTypes.add ( type.getInstanceType (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^647^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^647^648^649^650^651^584^745^[ADD] if  ( inExterns )  {  ConcreteScope scope; if  ( lhs.getType (  )  == Token.GETPROP )  { ConcreteType type = inferConcreteType ( getTopScope (  ) ,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( first, n.getLastChild (  ) , n )  ) ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( lhs, parent.getFirstChild (  ) , n )  ) ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( lhs, parent.getLastChild (  ) , n )  ) ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getType (  )   &&  Token.GETPROP )  {^650^^^^^584^745^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope  =  scope ;^655^^^^^650^656^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^655^^^^^650^656^[ADD] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope =   ( ConcreteScope )  retType.getScope (  ) ;^653^^^^^584^745^[REPLACE] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , first.getFirstChild (  )  ) ;^651^652^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope != null )  break;^658^^^^^584^745^[REPLACE] if  ( scope == null )  break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^658^659^660^661^662^584^745^[ADD] if  ( scope == null )  break;  ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ; if  ( type.isNone (  )  || type.isAll (  )  )  { break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  && type.isAll (  )  )  {^661^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^661^662^663^^^584^745^[ADD] if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  )  {^665^^^^^584^745^[REPLACE] if  ( type.isFunction (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs .getType (  )   != null || ! ( lhs^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^type = createUnionWithSubTypes ( type ) ; ;^673^^^^^584^745^[REPLACE] retType = createUnionWithSubTypes ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType retType = createType (  (  ( FunctionType ) first.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^584^745^[REPLACE] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( newret ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getJSType (  )  != true || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^666^667^668^669^^584^745^[ADD] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope =   ( ConcreteScope )  null.getScope (  ) ;^653^^^^^584^745^[REPLACE] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope  =  scope ;^655^^^^^584^745^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^655^^^^^584^745^[ADD] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType thisType;^649^^^^^584^745^[REPLACE] ConcreteScope scope;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^649^^^^^584^745^[ADD] ConcreteScope scope;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^660^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^660^^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^670^671^672^^^584^745^[ADD] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getType (  )   !=  Token.GETPROP )  {^650^^^^^584^745^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope ;^655^^^^^650^656^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope != true )  break;^658^^^^^584^745^[REPLACE] if  ( scope == null )  break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getJSType (  )  != null ) {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^673^^^^^584^745^[ADD] retType = createUnionWithSubTypes ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .getReturnType (  )  ) .getReturnType (  )  ) ;^670^671^672^^^584^745^[REPLACE] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .unionWith (  ) .unionWith ( newret ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( parent.getType (  )   !=  Token.GETPROP )  {^688^^^^^584^745^[REPLACE] if  ( receiver.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^Node first = receiver.getFirstChild (  ) ;^688^689^^691^^584^745^[ADD] if  ( receiver.getType (  )  == Token.GETPROP )  { Node first = receiver.getFirstChild (  ) ; if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   ||  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   !=  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getType (  )  ) .setIsNewCall ( n.getType (  )   ||  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver .getType (  )   ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setIsNewCall ( parent.getType (  )  == Token.NEW ) .build (  )  ) ;^713^714^^^^688^715^[REPLACE] .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( "call".equals ( parent.getNext (  ) .getString (  )  )  )  {^691^^^^^584^745^[REPLACE] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .unionWith (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getType (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( first.getType (  )   !=  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^700^701^702^^^692^703^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  )  .getOwnerFunction (  )  .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^694^695^696^^^584^745^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^692^693^694^695^696^584^745^[ADD] if  ( first.getType (  )  == Token.GETPROP )  {  addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  )  .getOwnerFunction (  )  .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .FunctionCallBuilder (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .unionWith (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.unionWith (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node first = parent.getFirstChild (  ) ;^689^^^^^584^745^[REPLACE] Node first = receiver.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( "call".equals ( first.getNext (  )  .getLastChild (  )   )  )  {^691^^^^^584^745^[REPLACE] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getType (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .FunctionCallBuilder ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( first.getNext (  )  .getLastChild (  )   ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver .getType (  )  .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( first.getType (  )   ||  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REMOVE]^if  ( paramType instanceof FunctionType )  {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType,  (  ( FunctionType )   ( paramType )  )  )  ) ; }else {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ; }^692^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^first, receiver.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .FunctionCallBuilder ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.unionWith (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( first.getFirstChild (  ) .unionWith (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( first.getType (  )   &&  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .FunctionCallBuilder (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^701^702^^^^692^703^[ADD] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent .getType (  )   ) .setPropName ( first.getFirstChild (  )^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^695^696^697^^^584^745^[ADD] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( receiver.getType (  )  == Token.CATCH || parent.getFirstChild (  )  == n )  {^719^^^^^584^745^[REPLACE] if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( parent.getString (  ) , n, createUnionWithSubTypes ( createType (.getTypesWithPropertyRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^584^745^[REPLACE] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( parent.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^584^745^[REPLACE] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^724^725^726^^^584^745^[ADD] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  )  .getInstanceType (  )   )  ) ;^725^726^^^^584^745^[REPLACE] createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^createType ( getTypeRegistry (  ) .getType ( "Error" )  )  .getInstanceType (  )   )  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^createType (.getTypesWithPropertyRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^726^^^^^584^745^[ADD] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( n.getFirstChild (  )  == null )  {^731^^^^^584^745^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( parentew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^584^745^[REPLACE] addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^732^733^734^^^584^745^[ADD] addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^( ConcreteSlot )  scope .getSlot ( null )  , n.getFirstChild (  )  )  ) ;^733^734^^^^584^745^[REPLACE] ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getLastChild (  )  )  ) ;^734^^^^^584^745^[REPLACE] ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^for  ( name = n.getFirstChild (  ) ; name == null; name = name.getNext (  )  )  {^589^^^^^584^745^[REPLACE] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( name.getFirstChild (  )  == true )  {^597^^^^^590^601^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^598^599^^^^590^601^[ADD] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^599^^^^^590^601^[ADD] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( receiver .getLastChild (  )  , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( name.getFirstChild (  )  == null )  {^597^^^^^584^745^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^597^598^599^600^^584^745^[ADD] if  ( name.getFirstChild (  )  != null )  { addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  { if  ( inExterns )  { ;^589^^^^^584^745^[REPLACE] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^type =  createType ( null.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^653^^^^^584^745^[ADD] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^588^^^^^584^745^[REPLACE] Node name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^588^^^^^584^745^[ADD] Node name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^621^622^^^^584^745^[ADD] Node nameNode = n.getLastChild (  ) ; scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node lhs = parent .getLastChild (  )  ;^646^^^^^584^745^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^646^^^^^584^745^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node receiver = parent.getLastChild (  ) ;^687^^^^^584^745^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^689^^^^^584^745^[ADD] Node first = receiver.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Collection<Action> actions = getImplicitActions ( parent ) ;^739^^^^^584^745^[REPLACE] Collection<Action> actions = getImplicitActions ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^739^^^^^584^745^[ADD] Collection<Action> actions = getImplicitActions ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( actions == this  )  {^740^^^^^584^745^[REPLACE] if  ( actions != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^List<Action> actions = Lists.newArrayList (  ) ;^741^^^^^584^745^[REPLACE] for  ( Action action : actions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s",^749^^^^^748^751^[REPLACE] Preconditions.checkState ( !inExterns, "Unexpected action in externs." ) ;^[METHOD] addAction [TYPE] void [PARAMETER] Action action [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true 
[REPLACE]^scope .addActions ( this )  ;^750^^^^^748^751^[REPLACE] scope.addAction ( action ) ;^[METHOD] addAction [TYPE] void [PARAMETER] Action action [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true 
[REPLACE]^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s",^755^^^^^754^759^[REPLACE] Preconditions.checkState ( !inExterns, "Unexpected action in externs." ) ;^[METHOD] addActions [TYPE] void [PARAMETER] Action> actions [CLASS] CreateScope   [TYPE]  List actions  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope 
[REMOVE]^Collection<Action> actions = getImplicitActions ( n ) ;^755^^^^^754^759^[REMOVE] ^[METHOD] addActions [TYPE] void [PARAMETER] Action> actions [CLASS] CreateScope   [TYPE]  List actions  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope 
[REPLACE]^List<Action> actions = Lists.newArrayList (  ) ;^756^^^^^754^759^[REPLACE] for  ( Action action : actions )  {^[METHOD] addActions [TYPE] void [PARAMETER] Action> actions [CLASS] CreateScope   [TYPE]  List actions  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope 
[REPLACE]^if  ( rhs.getFirstChild (  ) .getType (  )   ||  Token.REF_SPECIAL )  {^786^^^^^766^797^[REPLACE] if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ; ;^789^790^^^^786^791^[REPLACE] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^"Bad LHS for getref: " + rhs.toStringTree (  )  ) ;^790^^^^^786^791^[REPLACE] "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists .newArrayList ( 0 )  ;^787^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>ArrayList (  new PropertyAssignAction ( receiver, rhs )   ) ;^773^774^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>ArrayList (  new ExternFunctionCall ( receiver, thisType, argTypes )   ) ;^778^779^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^782^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^787^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( rhs.getString (  )  ) ;^769^^^^^766^797^[REPLACE] ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^Node receiver = rhs.getLastChild (  ) ;^777^^^^^766^797^[REPLACE] Node receiver = lhs.getFirstChild (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[ADD]^^777^^^^^766^797^[ADD] Node receiver = lhs.getFirstChild (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return ;^789^790^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[ADD]^^789^790^^^^766^797^[ADD] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return ;^794^795^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^List<ConcreteType> argTypes = Lists .newArrayList ( null )  ;^801^^^^^799^812^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[REPLACE]^FunctionType callType = null;^802^^^^^799^812^[REPLACE] ConcreteType thisType;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[REPLACE]^if  ( fun == null )  {^803^^^^^799^812^[REPLACE] if  ( fun != null )  {^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[ADD]^thisType = createType ( jsThisType ) ;^803^804^805^806^807^799^812^[ADD] if  ( fun != null )  { thisType = createType ( jsThisType ) ; for  ( Node arg : fun.getParameters (  )  )  { argTypes.add ( createType ( arg, scope )  ) ; }^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[REPLACE]^thisType  =  thisType ;^809^^^^^799^812^[REPLACE] thisType = ConcreteType.NONE;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[REPLACE]^thisType =  createType ( null ) ;^804^^^^^799^812^[REPLACE] thisType = createType ( jsThisType ) ;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[REPLACE]^Node arg = argumentIter.next (  ) ;^805^^^^^799^812^[REPLACE] for  ( Node arg : fun.getParameters (  )  )  {^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[ADD]^^809^^^^^799^812^[ADD] thisType = ConcreteType.NONE;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[REPLACE]^return  new FunctionCallBuilder ( receiver, receiver.getNext (  )  )  ;^811^^^^^799^812^[REPLACE] return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[METHOD] createExternFunctionCall [TYPE] TightenTypes$ExternFunctionCall [PARAMETER] Node receiver JSType jsThisType FunctionType fun [CLASS] CreateScope   [TYPE]  boolean false  inExterns  true  [TYPE]  JSType jsThisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  receiver  [TYPE]  FunctionType fun  [TYPE]  List argTypes  [TYPE]  ConcreteType thisType 
[REPLACE]^if  ( n.getJSType (  )  == null )  {^815^^^^^814^820^[REPLACE] if  ( n.getJSType (  )  != null )  {^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node n 
[REPLACE]^return getTypeRegistry (  ) .getType ( UNKNOWN_TYPE ) ;^818^^^^^814^820^[REPLACE] return getTypeRegistry (  ) .getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node n 
[REPLACE]^return n .getJSType (  )  ;^816^^^^^814^820^[REPLACE] return n.getJSType (  ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node n 
[REPLACE]^return n.getType (  ) ;^816^^^^^814^820^[REPLACE] return n.getJSType (  ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node n 
[REPLACE]^return getTypeRegistry (  )  .getType (  )  ;^818^^^^^814^820^[REPLACE] return getTypeRegistry (  ) .getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node n 
[REPLACE]^if  (  receiver.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^[REPLACE] if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[ADD]^^835^836^837^^^826^851^[ADD] if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  { return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ; }^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return getImplicitActionsFromCall ( n, receiver .getJSType (  )   ) ;^836^^^^^826^851^[REPLACE] return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^if  ( inExterns && lhs.getType (  )  == Token.GETPROP )  {^844^^^^^826^851^[REPLACE] if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .unionWith (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^836^^^^^826^851^[REPLACE] return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return getImplicitActionsFromProp ( lhs.getFirstChild (  )  .getType (  )  , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^Node receiver = n .getLastChild (  )  ;^834^^^^^826^851^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[ADD]^^834^^^^^826^851^[ADD] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^Node lhs = n.getLastChild (  ) ;^841^^^^^826^851^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return this;^850^^^^^826^851^[REPLACE] return null;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^Node receiver = n.getLastChild (  ) ;^855^^^^^854^893^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! recvType instanceof UnionType )  {^856^^^^^854^893^[REPLACE] if  ( recvType instanceof UnionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REMOVE]^if  ( paramType instanceof FunctionType )  {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType,  (  ( FunctionType )   ( paramType )  )  )  ) ; }else {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ; }^856^^^^^854^893^[REMOVE] ^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^}  else {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^}^862^863^864^^^854^893^[ADD] else if  ( ! ( recvType instanceof FunctionType )  )  { return Lists.<Action>newArrayList (  ) ; }^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList ( action ) ;^863^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return this;^861^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^857^^^^^854^893^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  { actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^858^^^^^854^893^[REPLACE] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^}  if  ( ! ! ( recvType instanceof FunctionType )  )  {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return true;^861^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^List<Action> actions = Lists .newArrayList ( this )  ;^857^^^^^854^893^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^857^^^^^854^893^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .unionWith (  )  ) ;^866^867^868^^^854^893^[REPLACE] ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^String prop = receiver.getLastChild (  ) .unionWith (  ) ;^869^^^^^854^893^[REPLACE] String prop = receiver.getLastChild (  ) .getString (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^869^^^^^854^893^[ADD] String prop = receiver.getLastChild (  ) .getString (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^while  ( paramIter.hasNext (  )  ;^880^^^^^854^893^[REPLACE] while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! arg.getJSType (  )  instanceof FunctionType )  {^883^^^^^854^893^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  )  .getType (  )  , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getType (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^(  ( FunctionType )  param.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^854^893^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^param.getType (  )  )  ) ;^887^^^^^854^893^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node arg = null .hasNext (  )  ;^881^^^^^854^893^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^881^^^^^854^893^[ADD] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node param = paramIter.hasNext (  ) ;^882^^^^^854^893^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  (  ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != false )  {^870^871^872^^^854^893^[REPLACE] if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^while  ( paramIter.hasNext (  )   ^  argumentIter.hasNext (  )  )  {^880^^^^^870^891^[REPLACE] while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! arg.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg .getJSType (  )   ) .getTypeOfThis (  ) , param^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^(  ( FunctionType )  param.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^param.getType (  )  )  ) ;^887^^^^^870^891^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node arg = this.next (  ) ;^881^^^^^870^891^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node param = false.next (  ) ;^882^^^^^870^891^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^884^885^886^^^870^891^[ADD] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) ,^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getType (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^(  ( FunctionType )  param.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^param .getJSType (  )   )  ) ;^887^^^^^870^891^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^887^^^^^870^891^[ADD] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return null;^890^^^^^870^891^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^873^^^^^870^891^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getAlternates (  ) .iterator (  ) ;^876^877^^^^870^891^[REPLACE] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Iterator<Node> argumentIter = n.getString (  ) .iterator (  ) ;^878^^^^^870^891^[REPLACE] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node arg = true.next (  ) ;^881^^^^^870^891^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node param = 1.next (  ) ;^882^^^^^870^891^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! param.getJSType (  )  instanceof FunctionType )  {^883^^^^^854^893^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^883^884^885^886^887^854^893^[ADD] if  ( arg.getJSType (  )  instanceof FunctionType )  { actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^param .getJSType (  )   )  ) ;^887^^^^^854^893^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return null;^890^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^List<Action> actions = Lists .newArrayList ( null )  ;^873^^^^^854^893^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^873^^^^^854^893^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getAlternates (  ) .iterator (  ) ;^876^877^^^^854^893^[REPLACE] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Iterator<Node> argumentIter = n.getString (  ) .iterator (  ) ;^878^^^^^854^893^[REPLACE] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node arg = true.hasNext (  ) ;^881^^^^^854^893^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^882^^^^^854^893^[ADD] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList ( action ) ;^892^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! paramType instanceof UnionType )  {^897^^^^^895^911^[REPLACE] if  ( paramType instanceof UnionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REMOVE]^if  ( paramType instanceof FunctionType )  {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType,  (  ( FunctionType )   ( paramType )  )  )  ) ; }else {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ; }^897^^^^^895^911^[REMOVE] ^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^} else if  ( ! paramType instanceof FunctionType )  {^904^^^^^895^911^[REPLACE] } else if  ( paramType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, true )  ) ;^908^909^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, nullType,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^return false;^903^^^^^895^911^[REPLACE] return actions;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^898^^^^^895^911^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  { actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^899^^^^^895^911^[REPLACE] for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^}  else {^904^^^^^895^911^[REPLACE] } else if  ( paramType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[ADD]^}   arg, thisType,  ( FunctionType )  paramType )  ) ;^904^905^906^907^908^895^911^[ADD] else if  ( paramType instanceof FunctionType )  { return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ; } else { return Lists.<Action>newArrayList ( createExternFunctionCall (^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, this )  ) ;^908^909^^^^895^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^915^^^^^914^946^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^916^^^^^914^946^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( objType == null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^935^^^^^916^937^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^916^937^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType objType = ObjectType.hasProperty ( jsType ) ;^932^^^^^916^937^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( altObj == null )  {^920^^^^^914^946^[REPLACE] if  ( altObj != null )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( altObj .getPropertyType ( prop )   )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^found = false;^924^^^^^914^946^[REPLACE] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( altObj.getPropertyType ( prop )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( true )  {^928^^^^^914^946^[REPLACE] if  ( found )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^return actions;^928^929^930^^^914^946^[ADD] if  ( found )  { return actions; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return 0;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return this;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^boolean found = true;^917^^^^^914^946^[REPLACE] boolean found = false;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  { actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^918^^^^^914^946^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType altObj = ObjectType.hasProperty ( alt ) ;^919^^^^^914^946^[REPLACE] ObjectType altObj = ObjectType.cast ( alt ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( altObj ==type )  {^920^^^^^914^946^[REPLACE] if  ( altObj != null )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( type.getPropertyType ( prop )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( receiver.getType (  )  == Token.GETPROP )  {^928^^^^^914^946^[REPLACE] if  ( found )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( objType == null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^914^946^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^933^934^935^936^^914^946^[ADD] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  { return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^935^^^^^933^936^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return true;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^935^^^^^914^946^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType objType = ObjectType.cast ( alt ) ;^932^^^^^914^946^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^932^^^^^914^946^[ADD] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Set<ObjectType> types = getTypeRegistry (  ) .getType ( prop ) ;^941^^^^^914^946^[REPLACE] Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( prop ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType objType = ObjectType.cast ( jsType ) ;^942^^^^^914^946^[REPLACE] for  ( ObjectType type : types )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return true;^945^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^JSType propType = thisType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^948^967^[REPLACE] JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^950^951^^^^948^967^[ADD] JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^if  ( jsType.isPropertyInExterns ( prop )  || propType.isFunctionType (  )  )  {^952^^^^^948^967^[REPLACE] if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^if  ( ! jsType instanceof FunctionPrototypeType )  {^954^^^^^948^967^[REPLACE] if  ( jsType instanceof FunctionPrototypeType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^thisType =   (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^955^956^^^^948^967^[REPLACE] thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^959^^^^^948^967^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^callType =   ( FunctionType )  propType;^960^^^^^948^967^[REPLACE] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^960^^^^^948^967^[ADD] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList (  ) ;^964^^^^^948^967^[REPLACE] return Lists.<Action>newArrayList ( action ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^ObjectType thisType = thisType;^953^^^^^948^967^[REPLACE] ObjectType thisType = jsType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^953^^^^^948^967^[ADD] ObjectType thisType = jsType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^FunctionType callType = true;^958^^^^^948^967^[REPLACE] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^962^963^^^^948^967^[ADD] Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList ( action ) ;^966^^^^^948^967^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^ConcreteType concrete;^1366^^^^^^^[REPLACE] final ConcreteType concrete;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] ConcreteJSTypePair   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^JSType jstype;^1367^^^^^^^[REPLACE] final JSType jstype;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] ConcreteJSTypePair   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^this.concrete =  null;^1371^^^^^1370^1374^[REPLACE] this.concrete = concrete;^[METHOD] <init> [TYPE] JSType) [PARAMETER] ConcreteType concrete JSType jstype [CLASS] ConcreteJSTypePair   [TYPE]  JSType jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^this.jstype =  null;^1372^^^^^1370^1374^[REPLACE] this.jstype = jstype;^[METHOD] <init> [TYPE] JSType) [PARAMETER] ConcreteType concrete JSType jstype [CLASS] ConcreteJSTypePair   [TYPE]  JSType jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^this.hashcode = concrete.hashCode (  )   &  getJSTypeHashCode (  ) ;^1373^^^^^1370^1374^[REPLACE] this.hashcode = concrete.hashCode (  )  + getJSTypeHashCode (  ) ;^[METHOD] <init> [TYPE] JSType) [PARAMETER] ConcreteType concrete JSType jstype [CLASS] ConcreteJSTypePair   [TYPE]  JSType jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[ADD]^^1373^^^^^1370^1374^[ADD] this.hashcode = concrete.hashCode (  )  + getJSTypeHashCode (  ) ;^[METHOD] <init> [TYPE] JSType) [PARAMETER] ConcreteType concrete JSType jstype [CLASS] ConcreteJSTypePair   [TYPE]  JSType jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return jstype  =  0;^1377^^^^^1376^1378^[REPLACE] return jstype != null ? jstype.hashCode (  )  : 0;^[METHOD] getJSTypeHashCode [TYPE] int [PARAMETER] [CLASS] ConcreteJSTypePair   [TYPE]  JSType jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^if  ( jsType != null || jstype == null )  {^1381^^^^^1380^1386^[REPLACE] if  ( jsType == null || jstype == null )  {^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] ConcreteJSTypePair   [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return jstype .equals ( this )  ;^1384^^^^^1380^1386^[REPLACE] return jsType.equals ( this.jstype ) ;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] ConcreteJSTypePair   [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return jstype  &&  jsType;^1382^^^^^1380^1386^[REPLACE] return jstype == jsType;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] ConcreteJSTypePair   [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return jstype  !=  jsType;;^1382^^^^^1380^1386^[REPLACE] return jstype == jsType;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] ConcreteJSTypePair   [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return jstype.equals ( this.jstype ) ;^1384^^^^^1380^1386^[REPLACE] return jsType.equals ( this.jstype ) ;^[METHOD] equalsJSType [TYPE] boolean [PARAMETER] JSType jsType [CLASS] ConcreteJSTypePair   [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^if  ( ! o instanceof ConcreteJSTypePair )  {^1390^^^^^1389^1398^[REPLACE] if  ( o instanceof ConcreteJSTypePair )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] ConcreteJSTypePair   [TYPE]  Object o  [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteJSTypePair pair  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^if  (  ( pair.concrete.equals ( this.concrete ) || equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^[REPLACE] if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] ConcreteJSTypePair   [TYPE]  Object o  [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteJSTypePair pair  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return false;^1394^^^^^1389^1398^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] ConcreteJSTypePair   [TYPE]  Object o  [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteJSTypePair pair  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return true;^1397^^^^^1389^1398^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] ConcreteJSTypePair   [TYPE]  Object o  [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteJSTypePair pair  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
[REPLACE]^return false;^1402^^^^^1401^1403^[REPLACE] return hashcode;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] ConcreteJSTypePair   [TYPE]  JSType jsType  jstype  [TYPE]  boolean false  true  [TYPE]  ConcreteType concrete  [TYPE]  int hashcode 
