[REPLACE]^public static final String NON_HALTING_ERROR_MSG  = null ;^79^80^^^^79^80^[REPLACE] public static final String NON_HALTING_ERROR_MSG = "TightenTypes pass appears to be stuck in an infinite loop.";^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final Map<Node, ConcreteFunctionType> functionFromDeclaration ;^90^91^^^^90^91^[REPLACE] private final Map<Node, ConcreteFunctionType> functionFromDeclaration = Maps.newHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final Map<FunctionType, ConcreteFunctionType> functionFromJSType ;^99^100^^^^99^100^[REPLACE] private final Map<FunctionType, ConcreteFunctionType> functionFromJSType = Maps.newIdentityHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final Map<ObjectType, ConcreteInstanceType> instanceFromJSType ;^107^108^^^^107^108^[REPLACE] private final Map<ObjectType, ConcreteInstanceType> instanceFromJSType = Maps.newHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Map<ConcreteJSTypePair, ConcreteType> typeIntersectionMemos = Maps.newHashMap (  ) ;^113^114^^^^113^114^[REPLACE] private final Map<ConcreteJSTypePair, ConcreteType> typeIntersectionMemos = Maps.newHashMap (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private Set<ConcreteType> allInstantiatedTypes  = null ;^130^^^^^^^[REPLACE] private Set<ConcreteType> allInstantiatedTypes = Sets.newHashSet (  ) ;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Map<String, ConcreteSlot> slots;^181^^^^^^^[REPLACE] private final Map<String, ConcreteSlot> slots;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  List<Action> actions;^182^^^^^^^[REPLACE] private final List<Action> actions;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  ConcreteScope scope;^265^^^^^^^[REPLACE] private final ConcreteScope scope;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  String name;^266^^^^^^^[REPLACE] private final String name;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  ConcreteSlot slot;^316^^^^^^^[REPLACE] private final ConcreteSlot slot;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node expression;^331^^^^^^^[REPLACE] private final Node expression;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node receiver;^349^^^^^^^[REPLACE] private final Node receiver;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private final  double  propName;^350^^^^^^^[REPLACE] private final String propName;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node expression;^351^^^^^^^[REPLACE] private final Node expression;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private boolean isNewCall  = null ;^384^^^^^^^[REPLACE] private boolean isNewCall = false;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private boolean isCallFunction ;^385^^^^^^^[REPLACE] private boolean isCallFunction = false;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node receiver;^386^^^^^^^[REPLACE] private final Node receiver;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node firstArgument;^387^^^^^^^[REPLACE] private final Node firstArgument;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private String propName ;^388^^^^^^^[REPLACE] private String propName = null;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  boolean isNewCall;^477^^^^^^^[REPLACE] private final boolean isNewCall;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  String propName;^479^^^^^^^[REPLACE] private final String propName;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node firstArgument;^480^^^^^^^[REPLACE] private final Node firstArgument;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private  Node receiver;^540^^^^^^^[REPLACE] private final Node receiver;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^private   char  propName;^541^^^^^^^[REPLACE] private final String propName;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[REPLACE]^int hashcode;^1368^^^^^^^[REPLACE] final int hashcode;^ [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  
[ADD]^^135^^^^^133^172^[ADD] topScope = new ConcreteScope ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^topScope.initForScopeRoot ( receiver ) ;^136^^^^^133^172^[REPLACE] topScope.initForExternRoot ( externRoot ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^136^^^^^133^172^[ADD] topScope.initForExternRoot ( externRoot ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^topScope.initForExternRoot ( firstArgument ) ;^137^^^^^133^172^[REPLACE] topScope.initForScopeRoot ( jsRoot ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^137^^^^^133^172^[ADD] topScope.initForScopeRoot ( jsRoot ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^long maxIterations = 89;^145^^^^^133^172^[REPLACE] long maxIterations = 1000;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^long iterations = 2;^146^^^^^133^172^[REPLACE] long iterations = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workList = newArrayList ( topScope )  ;^148^^^^^133^172^[REPLACE] Set<ConcreteScope> workSet = Sets.newHashSet ( topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workSet = newHashSet ( topScope )  ;^149^^^^^133^172^[REPLACE] List<ConcreteScope> workList = Lists.newArrayList ( topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType instType = cast ( jsType )  ;^151^^^^^133^172^[REPLACE] boolean changed;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( assign.slot .contains ( null )   {^158^^^^^133^172^[REPLACE] if  ( assign.slot.addConcreteType ( assign.type )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ( varScope != scope )  || !workSet.contains ( varScope )  )  {^161^^^^^133^172^[REPLACE] if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^( workSet.contains ( varScope )  )  ;^162^^^^^133^172^[REPLACE] workSet.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^workSet.add ( varScope )  ;^163^^^^^133^172^[REPLACE] workList.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^ConcreteScope varScope = assign.slot.getScope (  ) ;^159^160^^^^133^172^[ADD] changed = true; ConcreteScope varScope = assign.slot.getScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope varScope = assign.slot.getType (  ) ;^160^^^^^133^172^[REPLACE] ConcreteScope varScope = assign.slot.getScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^workSet.add ( varScope ) ;workList.add ( varScope ) ;^161^162^163^164^^133^172^[ADD] if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  { workSet.add ( varScope ) ; workList.add ( varScope ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^workSet.contains ( varScope ) ;^162^^^^^133^172^[REPLACE] workSet.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^162^^^^^133^172^[ADD] workSet.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^workList .contains ( null )  ;^163^^^^^133^172^[REPLACE] workList.add ( varScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^changed = true;^153^^^^^154^168^[REPLACE] changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^changed = false;^159^^^^^154^168^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^154^155^156^157^^154^168^[ADD] for  ( int i = 0; i < workList.size (  ) ; ++i )  { ConcreteScope scope = workList.get ( i ) ; for  ( Action action : scope.getActions (  )  )  { for  ( Assignment assign : action.getAssignments ( scope )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^155^^^^^154^168^[ADD] ConcreteScope scope = workList.get ( i ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope  ;^156^^^^^154^168^[REPLACE] for  ( Action action : scope.getActions (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^157^158^159^160^^154^168^[ADD] for  ( Assignment assign : action.getAssignments ( scope )  )  { if  ( assign.slot.addConcreteType ( assign.type )  )  { changed = true; ConcreteScope varScope = assign.slot.getScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope varScope = assign.slot.getType (  ) ;^160^^^^^154^168^[REPLACE] ConcreteScope varScope = assign.slot.getScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node jsRoot [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  thisType  type  [TYPE]  int hashcode  i  [TYPE]  long iterations  maxIterations  [TYPE]  Assignment assign  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workSet = newHashSet ( topScope )  ;^436^^^^^435^450^[REPLACE] List<Assignment> assigns = Lists.newArrayList (  ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (var == null )  {^444^^^^^435^450^[REPLACE] if  ( variable != null )  {^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^444^445^446^^^435^450^[ADD] if  ( variable != null )  { assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ; }^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^437^438^439^440^441^435^450^[ADD] for  ( ConcreteFunctionType fType : recvType.getFunctions (  )  )  { assigns.add ( new Assignment (  ( ConcreteSlot )  fType.getCallSlot (  ) , fType )  ) ; assigns.add ( new Assignment (  ( ConcreteSlot )  fType.getThisSlot (  ) , thisType )  ) ; for  ( int i = 0; i < argTypes.size (  ) ; ++i )  { ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^437^^^^^435^450^[REPLACE] for  ( ConcreteFunctionType fType : recvType.getFunctions (  )  )  {^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^440^441^^^^435^450^[ADD] for  ( int i = 0; i < argTypes.size (  ) ; ++i )  { ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteSlot variable =  ( ConcreteSlot )  fType.getReturnSlot ( i ) ;^441^^^^^435^450^[REPLACE] ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return actions;  ;^449^^^^^435^450^[REPLACE] return assigns;^[METHOD] getFunctionCallAssignments [TYPE] List [PARAMETER] ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType fType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , n )  ;^497^^^^^496^535^[REPLACE] ConcreteType thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^498^^^^^496^535^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( propName ==name )  {^502^^^^^496^535^[REPLACE] if  ( propName != null )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^thisType = recvType;recvType = thisType.getPropertyType ( propName ) ;^502^503^504^505^^496^535^[ADD] if  ( propName != null )  { thisType = recvType; recvType = thisType.getPropertyType ( propName ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = recvType  ;^503^^^^^496^535^[REPLACE] thisType = recvType;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^recvType =  type.getPropertyType ( propName ) ;^504^^^^^496^535^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type .equals ( concrete )   )  {^507^^^^^496^535^[REPLACE] if  ( recvType.isAll (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^507^508^^510^511^496^535^[ADD] if  ( recvType.isAll (  )  )  {  throw new AssertionError ( "Found call on all type, which makes tighten types useless." ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^510^511^^^^496^535^[ADD] throw new AssertionError ( "Found call on all type, which makes tighten types useless." ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError (  ( "Bad LHS for getref: " +  ( parent.toStringTree (  )  )  )  )  ;^510^511^^^^496^535^[REPLACE] throw new AssertionError ( "Found call on all type, which makes tighten types useless." ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^516^^^^^496^535^[REPLACE] if  ( isNewCall )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^thisType = ConcreteType.NONE;^516^517^518^519^520^496^535^[ADD] if  ( isNewCall )  { thisType = ConcreteType.NONE; for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  { thisType = thisType.unionWith ( instType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( true )  {^523^^^^^496^535^[REPLACE] if  ( added )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^typeIntersectionMemos.get ( key )  ;^525^^^^^496^535^[REPLACE] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^525^^^^^496^535^[ADD] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : type.getFunctions (  )  )  {^518^519^^^^516^527^[REPLACE] for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^517^^^^^516^527^[ADD] thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^this.type = origType.unionWith ( type )  ;^520^^^^^516^527^[REPLACE] thisType = thisType.unionWith ( instType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^518^519^520^521^^516^527^[ADD] for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  { thisType = thisType.unionWith ( instType ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^522^^^^^516^527^[ADD] boolean added = allInstantiatedTypes.add ( thisType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^523^524^525^526^^496^535^[ADD] if  ( added )  {  typeIntersectionMemos.clear (  ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^typeIntersectionMemos.values (  ) ;^525^^^^^496^535^[REPLACE] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : type.getFunctionInstanceTypes (  )  )  {^518^519^^^^516^527^[REPLACE] for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE  ;^517^^^^^516^527^[REPLACE] thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^boolean added = allInstantiatedTypes.add ( type ) ;^522^^^^^516^527^[REPLACE] boolean added = allInstantiatedTypes.add ( thisType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workSet = newHashSet ( topScope )  ;^529^^^^^496^535^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name = name.getNext (  )  ;^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = n.getFirstChild (  )  ;^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getFunctionCallAssignments ( recvType, type, argTypes ) ;^534^^^^^496^535^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteInstanceType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType  =  getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^[REPLACE] ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^556^^^^^552^570^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^[REPLACE] if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^recvType =  type.getPropertyType ( propName ) ;^560^^^^^558^561^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^recvType =  type.getPropertyType ( propName ) ;^560^^^^^552^570^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workSet = newHashSet ( topScope )  ;^562^^^^^552^570^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name = name.getNext (  )  ;^566^^^^^552^570^[REPLACE] arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node param = paramIter.next (  )  ;^564^^^^^552^570^[REPLACE] for  ( Node arg = firstArgument.getNext (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getFunctionCallAssignments ( recvType, type, argTypes ) ;^569^^^^^552^570^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  origType  recvType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^590^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( receiver.getFirstChild (  )  == null )  {^597^^^^^590^601^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( receiver.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^expr.getString (  )  ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( name.getFirstChild (  )  == false )  {^597^^^^^584^745^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^597^598^599^600^^584^745^[ADD] if  ( name.getFirstChild (  )  != null )  { addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^584^745^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^( arg.getJSType (  )  )  ;^599^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^607^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  type.isInstance  (    )    )   {  ;^611^^^^^584^745^[REPLACE] if  ( type.isNone (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( varScope == false )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  type .equals ( retType )   )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  createType ( null.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^retType = createUnionWithSubTypes ( retType )  ;^620^^^^^584^745^[REPLACE] type = createUnionWithSubTypes ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^617^618^619^^^584^745^[ADD] if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^616^^^^^584^745^[ADD] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , parent.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^584^745^[REPLACE] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = n.getFirstChild (  )  ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( scope == null )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^type = createType ( n.getJSType (  )  ) ;break;^615^616^617^618^619^584^745^[ADD] if  ( scope != null )  { type = createType ( n.getJSType (  )  ) ; if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( recvType.isNone (  )  && type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^Node nameNode = n.getLastChild (  ) ;^620^621^^^^584^745^[ADD] type = createUnionWithSubTypes ( type ) ; Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node parentameNode = n .getFirstChild (  )  ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  createType ( parent.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^608^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^611^612^613^614^^584^745^[ADD] if  ( type.isNone (  )  )  { ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( scope ==varScope )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( retType.isNone (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.createForTypes (  )  && type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^621^^^^^584^745^[ADD] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( retType.isNone (  )  && type .equals ( concrete )   )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^620^621^^^^584^745^[ADD] type = createUnionWithSubTypes ( type ) ; Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^630^^^^^584^745^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^630^631^632^633^^584^745^[ADD] if  ( NodeUtil.isFunctionDeclaration ( n )  )  { if  ( !n.getJSType (  ) .isNoObjectType (  )  )  { ConcreteFunctionType type = createConcreteFunction ( n, scope ) ; scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( parent.getJSType (  ) .isNoObjectType (  )  )  {^631^^^^^584^745^[REPLACE] if  ( !n.getJSType (  ) .isNoObjectType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( true && type.getInstanceType (  )  == null )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^635^636^^638^639^584^745^[ADD] if  ( inExterns && type.getInstanceType (  )  != null )  {  allInstantiatedTypes.add ( type.getInstanceType (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^allInstantiatedTypes.add ( type.getPrototypeType (  )  ) ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteFunctionType type = createConcreteFunction ( parent, scope ) ;^632^^^^^584^745^[REPLACE] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( inExterns ) {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^allInstantiatedTypes.add ( thisType )  ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^638^^^^^584^745^[ADD] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^( type.getConstructorType (  )  )  ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^632^^^^^584^745^[ADD] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( n.getJSType (  ) .isNoObjectType (  )  )  {^631^^^^^584^745^[REPLACE] if  ( !n.getJSType (  ) .isNoObjectType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( inExterns && type.getInstanceType (  )  == null )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^allInstantiatedTypes.add ( type .getPrototypeType (  )   ) ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^647^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( firstArgument, n.getFirstChild (  ) , n )  ) ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addActions ( createAssignmentActions ( firstArgument, n.getLastChild (  ) , n )  ) ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^681^^^^^647^682^[ADD] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^name.getFirstChild (  )  ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getType (  )   !=  Token.GETPROP )  {^650^^^^^584^745^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^655^^^^^650^656^[ADD] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^topScope = new ConcreteScope ( null )  ;^653^^^^^584^745^[REPLACE] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , firstArgument.getFirstChild (  )  ) ;^651^652^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  scope == null  )   break;  ;^658^^^^^584^745^[REPLACE] if  ( scope == null )  break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isNone (  )  ) {^661^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  type.isNone  (    )    )   {  ;^665^^^^^584^745^[REPLACE] if  ( type.isFunction (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = createTypeWithSubTypes ( jsType )  ;^673^^^^^584^745^[REPLACE] retType = createUnionWithSubTypes ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^670^671^672^^^584^745^[ADD] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = recvType.toFunction (  ) .getReturnSlot (  ) .unionWith (  ) .unionWith ( retType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getJSType (  )  != null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^666^667^668^669^^584^745^[ADD] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope  =  scope ;^655^^^^^584^745^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^649^^^^^584^745^[ADD] ConcreteScope scope;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^651^652^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^660^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType retType = createType (  (  ( FunctionType ) firstArgument.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^584^745^[REPLACE] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( recvType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope  =  scope ;^655^^^^^650^656^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^653^^^^^584^745^[ADD] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( scope != true )  break;^658^^^^^584^745^[REPLACE] if  ( scope == null )  break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( thisType.isFunction (  )  )  {^665^^^^^584^745^[REPLACE] if  ( type.isFunction (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = type.isFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs .getType (  )   != this || ! ( lhs^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^688^^^^^584^745^[REPLACE] if  ( receiver.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^688^689^^691^^584^745^[ADD] if  ( receiver.getType (  )  == Token.GETPROP )  { Node first = receiver.getFirstChild (  ) ; if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   &&  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   !=  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   ||  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setIsNewCall ( parent.getType (  )  == Token.NEW ) .build (  )  ) ;^713^714^^^^688^715^[REPLACE] .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( "call".equals ( first.getType (  ) .getString (  )  )  )  {^691^^^^^584^745^[REPLACE] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getType (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getNext (  ) .isSuperClassReference (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^707^708^^^^691^709^[ADD] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( first.getType (  )   ) {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^700^701^702^^^692^703^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^first, parent.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .FunctionCallBuilder ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.unionWith (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^694^695^696^^^584^745^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver .getType (  )   ) .setPropName ( first.getFirstChild (  )^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( first.getFirstChild (  )  .getType (  )  .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^695^696^697^^^584^745^[ADD] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( first.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( first.getType (  )   !=  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^first, receiver .getType (  )   ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .isSuperClassReference (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getType (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .isSuperClassReference (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( parent.getFirstChild (  ) .getNext (  )  .getFirstChild (  )   ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( receiver .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node first = parent.getFirstChild (  ) ;^689^^^^^584^745^[REPLACE] Node first = receiver.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( "call".equals ( first .getType (  )  .getString (  )  )  )  {^691^^^^^584^745^[REPLACE] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^691^692^^694^695^584^745^[ADD] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  { if  ( first.getType (  )  == Token.GETPROP )  { addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .isSuperClassReference (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getType (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( first.getType (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent .getType (  )   ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.unionWith (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^.setPropName ( parent.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( first.getType (  )   &&  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .FunctionCallBuilder (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^701^702^^^^692^703^[ADD] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent .getType (  )   ) .setPropName ( first.getFirstChild (  )^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( parent.getType (  )  == Token.CATCH ) {^719^^^^^584^745^[REPLACE] if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^719^720^^^^584^745^[ADD] if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( parent.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^584^745^[REPLACE] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^scope.declareSlot ( n.getType (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^584^745^[REPLACE] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^createUnionWithSubTypes ( createType (.getTypesWithPropertyRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^725^726^^^^584^745^[REPLACE] createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .isSuperClassReference (  )  )  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^726^^^^^584^745^[ADD] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^getTypeRegistry (  ) .getTypesWithProperty ( prop )  ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^compiler.getTypeRegistry (  )  ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( n.getFirstChild (  )  == null )  {^731^^^^^584^745^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getLastChild (  )  )  ) ;^732^733^734^^^584^745^[REPLACE] addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^( ConcreteSlot )  scope.getSlots ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^733^734^^^^584^745^[REPLACE] ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^733^734^^^^584^745^[ADD] ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^( parent.getFirstChild (  )  )  ;^734^^^^^584^745^[REPLACE] ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^589^590^^^^584^745^[ADD] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  { if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^arg = arg.getNext (  )  ;^589^^^^^584^745^[REPLACE] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^620^^^^^584^745^[ADD] type = createUnionWithSubTypes ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node arg  ;^588^^^^^584^745^[REPLACE] Node name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^612^613^614^^^584^745^[ADD] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^632^633^^^^584^745^[ADD] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ; scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node lhs = parent .getLastChild (  )  ;^646^^^^^584^745^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^660^^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType newret = thisType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = lhs.getFirstChild (  )  ;^687^^^^^584^745^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = n.getFirstChild (  )  ;^689^^^^^584^745^[REPLACE] Node first = receiver.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Collection<Action> actions = getImplicitActions ( parent ) ;^739^^^^^584^745^[REPLACE] Collection<Action> actions = getImplicitActions ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( actions == null )  {^740^^^^^584^745^[REPLACE] if  ( actions != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( Action action : null )  {^741^^^^^740^744^[REPLACE] for  ( Action action : actions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope  ;^741^^^^^740^744^[REPLACE] for  ( Action action : actions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^741^742^743^^^740^744^[ADD] for  ( Action action : actions )  { addAction ( action ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  NodeTraversal t  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection actions  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( lhs.getFirstChild (  ) .getType (  )   !=  Token.REF_SPECIAL )  {^786^^^^^766^797^[REPLACE] if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ;^789^790^^^^786^791^[REPLACE] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^"Bad LHS for getref: " + name.toStringTree (  )  ) ;^790^^^^^786^791^[REPLACE] "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^790^791^^^^786^791^[ADD] "Bad LHS for getref: " + parent.toStringTree (  )  ) ; }^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^787^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>ArrayList (  new PropertyAssignAction ( receiver, rhs )   ) ;^773^774^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>ArrayList (  new ConcreteJSTypePair ( concreteType, jsType )   ) ;^778^779^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^782^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs .getFirstChild (  )   ) ;^769^^^^^766^797^[REPLACE] ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = rhs.getFirstChild (  ) ;^777^^^^^766^797^[REPLACE] Node receiver = lhs.getFirstChild (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError ( "Found call on all type, which makes tighten types useless." )  ;^789^790^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError ( "Found call on all type, which makes tighten types useless." )  ;^794^795^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( inExterns && rhs.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^[REPLACE] if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromCall  (  n, receiver.getJSType  (    )    )  ;  ;^836^^^^^826^851^[REPLACE] return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  receiver.getType  (    )   == Token.GETPROP  )   {  ;^844^^^^^826^851^[REPLACE] if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromProp  (  lhs.getFirstChild  (    )  .getJSType  (    )  , lhs.getLastChild  (    )  .getString  (    )  , n.getLastChild  (    )    )  ;  ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromCall ( n, rhs.getJSType (  )  ) ;^836^^^^^826^851^[REPLACE] return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , parent.getLastChild (  )  ) ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^834^^^^^826^851^[ADD] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = n.getFirstChild (  )  ;^841^^^^^826^851^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return this;^850^^^^^826^851^[REPLACE] return null;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType jsThisType  jstype  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node receiver = parent.getFirstChild (  ) ;^855^^^^^854^893^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! recvType instanceof UnionType )  {^856^^^^^854^893^[REPLACE] if  ( recvType instanceof UnionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  if  ( ! ! ( recvType instanceof FunctionType )  )  {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^863^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  recvType )  .getReturnType (  )   )  {^858^^^^^856^862^[REPLACE] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return actions;  ;^861^^^^^856^862^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workSet = newHashSet ( topScope )  ;^857^^^^^856^862^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^858^^^^^856^862^[REPLACE] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^} else if  ( ! ! ( recvType instanceof FunctionType )  )  {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  recvType ) .getReturnType (  )  )  {^858^^^^^856^862^[REPLACE] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^861^^^^^856^862^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^863^^^^^856^862^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^List<Action> actions = Lists .newArrayList ( topScope )  ;^857^^^^^856^862^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^866^867^868^^^854^893^[ADD] ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^String prop = rhs.getLastChild (  ) .getString (  ) ;^869^^^^^854^893^[REPLACE] String prop = receiver.getLastChild (  ) .getString (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( objType == null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^854^893^[REPLACE] if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! arg.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg .getJSType (  )   ) .getTypeOfThis (  ) , param^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( parent, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  parent .getJSType (  )   ) .getTypeOfThis (  ) , param^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  param.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^( arg.getJSType (  )  )  ;^887^^^^^870^891^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^( arg.getJSType (  )  )  ;^887^^^^^870^891^[REMOVE] ^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^890^^^^^870^891^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^873^^^^^870^891^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> paramIter = (  ( FunctionType )  recvType )  .getInstanceType (  )  .iterator (  ) ;^876^877^^^^870^891^[REPLACE] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> argumentIter = parent.children (  ) .iterator (  ) ;^878^^^^^870^891^[REPLACE] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node param = paramIter.next (  )  ;^881^^^^^870^891^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node prop = expr.getLastChild (  )  ;^882^^^^^870^891^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! parent.getJSType (  )  instanceof FunctionType )  {^883^^^^^854^893^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( parent, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^854^893^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^(  ( FunctionType )  parent.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^854^893^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^param.getType (  )  )  ) ;^887^^^^^854^893^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REMOVE]^( arg.getJSType (  )  )  ;^887^^^^^854^893^[REMOVE] ^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^890^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^873^^^^^854^893^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getAlternates (  ) .iterator (  ) ;^876^877^^^^854^893^[REPLACE] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Iterator<Node> argumentIter = parent.children (  ) .iterator (  ) ;^878^^^^^854^893^[REPLACE] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node param = paramIter.next (  )  ;^881^^^^^854^893^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^882^^^^^854^893^[ADD] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^892^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! paramType instanceof UnionType )  {^897^^^^^896^911^[REPLACE] if  ( paramType instanceof UnionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^} else if  ( ! recvType instanceof FunctionType )  {^904^^^^^896^911^[REPLACE] } else if  ( paramType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getReturnType (  )  )  {^899^^^^^896^911^[REPLACE] for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return actions;  ;^903^^^^^896^911^[REPLACE] return actions;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, nullType,  ( FunctionType )  paramType )  ) ;^905^906^^^^896^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, this )  ) ;^908^909^^^^896^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workSet = newHashSet ( topScope )  ;^898^^^^^896^911^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^899^^^^^896^911^[REPLACE] for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  workSet  [TYPE]  JSType alt  jsThisType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope> workSet = newHashSet ( topScope )  ;^915^^^^^914^946^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^916^^^^^914^946^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( objType == null ) {^933^934^^^^916^937^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^933^936^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( objType, prop, receiver ) ;^935^^^^^916^937^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType objType = ObjectType.hasProperty ( recvType ) ;^932^^^^^916^937^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( altObj == null )  {^920^^^^^914^946^[REPLACE] if  ( altObj != null )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.hasProperty ( prop )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^923^924^925^^^914^946^[ADD] if  ( altObj.hasProperty ( prop )  )  { found = true; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^found = false;^924^^^^^914^946^[REPLACE] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^924^^^^^914^946^[ADD] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( true )  {^928^^^^^914^946^[REPLACE] if  ( found )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return false;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^found = false;^924^^^^^916^931^[REPLACE] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return 0;^929^^^^^916^931^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^boolean found = true;^917^^^^^916^931^[REPLACE] boolean found = false;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^918^^^^^916^931^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType recvTypeObj = ObjectType.cast ( alt ) ;^919^^^^^916^931^[REPLACE] ObjectType altObj = ObjectType.cast ( alt ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( altObj.getPropertyType ( prop )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( altObj.hasProperty ( propName )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^928^^^^^914^946^[REPLACE] if  ( found )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( objType == null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^914^946^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion ( objType, prop, receiver ) ;^935^^^^^933^936^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^918^919^920^921^922^916^931^[ADD] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { ObjectType altObj = ObjectType.cast ( alt ) ; if  ( altObj != null )  { actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^924^^^^^916^931^[ADD] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^929^^^^^916^931^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return getImplicitActionsFromPropNonUnion  (  objType, prop, fnNode  )  ;  ;^935^^^^^916^931^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType objType = ObjectType.cast ( recvType ) ;^932^^^^^916^931^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( propName ) ;^941^^^^^914^946^[REPLACE] Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( prop ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ObjectType objType : types )  {^942^^^^^914^946^[REPLACE] for  ( ObjectType type : types )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ;^943^^^^^914^946^[REPLACE] actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^943^^^^^914^946^[ADD] actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, receiver )  ) ;^943^^^^^914^946^[REPLACE] actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^942^943^944^^^914^946^[ADD] for  ( ObjectType type : types )  { actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return actions;  ;^945^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType altObj  objType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^JSType propNameType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^949^967^[REPLACE] JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  propType.isFunctionType (  )  )  {^952^^^^^949^967^[REPLACE] if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^ObjectType thisType = jsType;.getOwnerFunction (  ) .getInstanceType (  ) ;^952^953^954^955^956^949^967^[ADD] if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  { ObjectType thisType = jsType; if  ( jsType instanceof FunctionPrototypeType )  { thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! thisType instanceof FunctionPrototypeType )  {^954^^^^^949^967^[REPLACE] if  ( jsType instanceof FunctionPrototypeType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^954^955^956^957^^949^967^[ADD] if  ( jsType instanceof FunctionPrototypeType )  { thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^955^956^^^^949^967^[ADD] thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^959^^^^^949^967^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^callType =   ( FunctionType )  propType;^960^^^^^949^967^[REPLACE] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^thisType =   (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^955^956^^^^949^967^[REPLACE] thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^960^^^^^949^967^[ADD] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^964^^^^^949^967^[REPLACE] return Lists.<Action>newArrayList ( action ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^953^^^^^949^967^[ADD] ObjectType thisType = jsType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^958^^^^^949^967^[ADD] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Action action = createExternFunctionCall ( fnNode, jsType, callType ) ;^962^963^^^^949^967^[REPLACE] Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! jsType instanceof FunctionPrototypeType )  {^954^^^^^949^967^[REPLACE] if  ( jsType instanceof FunctionPrototypeType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^953^^^^^949^967^[REPLACE] ObjectType thisType = jsType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^958^^^^^949^967^[REPLACE] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^966^^^^^949^967^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Action action  [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType callType  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType jsType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( jsType.isUnknownType (  )  && jsType.equals (  )  )  {^989^^^^^988^1014^[REPLACE] if  ( jsType.isUnknownType (  )  || jsType.isEmptyType (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.NONE;  ;^990^^^^^988^1014^[REPLACE] return ConcreteType.ALL;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( jsType .isFunctionType (  )   )  {^993^^^^^988^1014^[REPLACE] if  ( jsType.isUnionType (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( JSType paramType :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^995^^^^^993^999^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  thisType.unionWith ( createType ( alt )  ) ;^996^^^^^993^999^[REPLACE] type = type.unionWith ( createType ( alt )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return retType;^998^^^^^993^999^[REPLACE] return type;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^994^^^^^993^999^[REPLACE] ConcreteType type = ConcreteType.NONE;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^995^996^997^^^993^999^[ADD] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { type = type.unionWith ( createType ( alt )  ) ; }^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type =  recvType.unionWith ( createType ( alt )  ) ;^996^^^^^993^999^[REPLACE] type = type.unionWith ( createType ( alt )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return type;  ;^998^^^^^993^999^[REPLACE] return type;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^994^^^^^993^999^[ADD] ConcreteType type = ConcreteType.NONE;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^995^^^^^993^999^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  jsType.isUnionType  (    )    )   {  ;^1001^^^^^988^1014^[REPLACE] if  ( jsType.isFunctionType (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( getConcreteFunction (  ( FunctionType )  jsType )  == null )  {^1002^^^^^988^1014^[REPLACE] if  ( getConcreteFunction (  ( FunctionType )  jsType )  != null )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^1003^^^^^988^1014^[REPLACE] return getConcreteFunction (  ( FunctionType )  jsType ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.NONE;  ;^1006^^^^^988^1014^[REPLACE] return ConcreteType.ALL;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  type.isNone  (    )    )   {  ;^1009^^^^^988^1014^[REPLACE] if  ( jsType.isObject (  )  )  {^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createConcreteInstance ( recvType.toObjectType (  )  ) ;^1010^^^^^988^1014^[REPLACE] return createConcreteInstance ( jsType.toObjectType (  )  ) ;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return ConcreteType.NONE;  ;^1013^^^^^988^1014^[REPLACE] return ConcreteType.NONE;^[METHOD] createType [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1021^^^^^1020^1043^[REPLACE] ConcreteType ret = ConcreteType.NONE;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ! jsType instanceof UnionType )  {^1022^^^^^1020^1043^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1022^1023^1024^1025^^1020^1043^[ADD] if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ; }^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^1028^1029^1030^^^1022^1041^[REPLACE] if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1028^1029^1030^1031^1032^1022^1041^[ADD] if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  { Collection<FunctionType> implementors = getTypeRegistry (  ) .getDirectImplementors ( instType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  )  ;^1039^^^^^1028^1040^[REPLACE] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1035^1036^^^^1028^1040^[ADD] ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^1034^^^^^1028^1040^[REPLACE] for  ( FunctionType implementor : implementors )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  recvType.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1030^1038^[REPLACE] ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  retType.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1030^1038^[REPLACE] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1027^^^^^1030^1038^[ADD] ObjectType instType = ObjectType.cast ( jsType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Collection<FunctionType> implementors = getTypeRegistry (  ) .getTypesWithProperty ( instType ) ;^1031^1032^^^^1030^1038^[REPLACE] Collection<FunctionType> implementors = getTypeRegistry (  ) .getDirectImplementors ( instType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^1034^^^^^1030^1038^[REPLACE] for  ( FunctionType implementor : implementors )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( JSType recvType :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^1023^^^^^1022^1026^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1024^^^^^1022^1026^[ADD] ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType sub  ;^1023^^^^^1022^1026^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^1028^1029^1030^^^1020^1043^[REPLACE] if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1028^1040^[REPLACE] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1034^1035^1036^1037^^1028^1040^[ADD] for  ( FunctionType implementor : implementors )  { ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ; }^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1028^1040^[REPLACE] ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Collection<FunctionType> implementors = getTypeRegistry (  ) .getTypesWithProperty ( instType ) ;^1031^1032^^^^1028^1040^[REPLACE] Collection<FunctionType> implementors = getTypeRegistry (  ) .getDirectImplementors ( instType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1023^1024^1025^^^1022^1026^[ADD] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ; }^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( FunctionType implementor : null )  {^1034^^^^^1022^1026^[REPLACE] for  ( FunctionType implementor : implementors )  {^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createTypeWithSubTypes ( alt )  ) ;^1024^^^^^1022^1026^[REPLACE] ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1022^1026^[REPLACE] ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1022^1026^[REPLACE] ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ObjectType instType = ObjectType.hasProperty ( jsType ) ;^1027^^^^^1022^1026^[REPLACE] ObjectType instType = ObjectType.cast ( jsType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Collection<FunctionType> implementors = getTypeRegistry (  )  .getNativeType (  )  ;^1031^1032^^^^1022^1026^[REPLACE] Collection<FunctionType> implementors = getTypeRegistry (  ) .getDirectImplementors ( instType ) ;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1034^1035^1036^1037^^1022^1026^[ADD] for  ( FunctionType implementor : implementors )  { ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ; }^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;  ;^1042^^^^^1020^1043^[REPLACE] return ret;^[METHOD] createTypeWithSubTypes [TYPE] ConcreteType [PARAMETER] JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  [TYPE]  FunctionType implementor  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ObjectType instType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  Collection implementors  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^checkNotNull ( name )  ;^1047^^^^^1046^1178^[REPLACE] Preconditions.checkNotNull ( scope ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1047^1048^^^^1046^1178^[ADD] Preconditions.checkNotNull ( scope ) ; Preconditions.checkNotNull ( expr ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^checkNotNull ( name )  ;^1048^^^^^1046^1178^[REPLACE] Preconditions.checkNotNull ( expr ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteScope scope  ;^1049^^^^^1046^1178^[REPLACE] ConcreteType ret;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  altObj != null  )   {  ;^1054^^^^^1046^1178^[REPLACE] if  ( slot != null )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^ret = slot.getType (  ) ;^1054^1055^1056^^^1046^1178^[ADD] if  ( slot != null )  { ret = slot.getType (  ) ; } else {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE  ;^1059^^^^^1054^1060^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  null.getType (  ) ;^1055^^^^^1046^1178^[REPLACE] ret = slot.getType (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.isAll (  )  )  {^1096^^^^^1046^1178^[REPLACE] if  ( recvType.isAll (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = type  ;^1097^^^^^1046^1178^[REPLACE] ret = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( "prototype".equals ( prop )  )  {^1103^^^^^1046^1178^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  else {^1107^1108^^^^1046^1178^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  if  ( "call" .isAll (  )   )  {^1112^^^^^1046^1178^[REPLACE] } else if  ( "call".equals ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^}^1112^1113^1114^^^1046^1178^[ADD] else if  ( "call".equals ( propName )  )  { type = recvType; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1113^^^^^1046^1178^[ADD] type = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^thisType = recvType  ;^1113^^^^^1046^1178^[REPLACE] type = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteFunctionType superType : type.getSuperclassTypes (  )  )  {^1109^^^^^1107^1114^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = type.unionWith ( funType.getPrototypeType (  )  )  ;^1110^^^^^1107^1114^[REPLACE] type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1109^1110^1111^^^1107^1114^[ADD] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  { type = type.unionWith ( superType.getPrototypeType (  )  ) ; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  else {^1112^^^^^1046^1178^[REPLACE] } else if  ( "call".equals ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^}   type = recvType;^1112^1113^1114^^^1046^1178^[ADD] else if  ( "call".equals ( propName )  )  { type = recvType; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteFunctionType superType : type.getPrototypeTypes (  )  )  {^1109^^^^^1108^1112^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = type.unionWith ( funType.getPrototypeType (  )  )  ;^1110^^^^^1108^1112^[REPLACE] type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1113^^^^^1108^1112^[ADD] type = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1109^^^^^1108^1112^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteFunctionType funType : thisType.getFunctions (  )  )  {^1104^^^^^1103^1107^[REPLACE] for  ( ConcreteFunctionType funType : recvType.getFunctions (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1105^^^^^1103^1107^[ADD] type = type.unionWith ( funType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1104^^^^^1103^1107^[REPLACE] for  ( ConcreteFunctionType funType : recvType.getFunctions (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  if  ( "call".equals ( prop )  )  {^1112^^^^^1046^1178^[REPLACE] } else if  ( "call".equals ( propName )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteFunctionType superType : recvType.getPrototypeTypes (  )  )  {^1109^^^^^1107^1114^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1109^^^^^1107^1114^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ret.isAll (  )  )  {^1127^^^^^1046^1178^[REPLACE] if  ( targetType.isAll (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1127^1128^1129^1130^^1046^1178^[ADD] if  ( targetType.isAll (  )  )  { ret = targetType; break; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  recvType;^1128^^^^^1046^1178^[REPLACE] ret = targetType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( constructorType.isNone (  )  )  {^1140^^^^^1046^1178^[REPLACE] if  ( constructorType.isAll (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError ( "Found call on all type, which makes tighten types useless." )  ;^1141^^^^^1046^1178^[REPLACE] throw new AssertionError ( "Attempted new call on all type!" ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  ( expr .getJSType (  )   == null )  && !expr^1156^^^^^1046^1178^[REPLACE] if  (  ( expr.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE  ;^1162^^^^^1156^1163^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  targetType;^1160^^^^^1046^1178^[REPLACE] ret = inst;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  )  ;^1157^^^^^1046^1178^[REPLACE] JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1158^^^^^1046^1178^[ADD] ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteFunctionType funType : recvType.isFunction (  )  )  {^1104^^^^^1103^1107^[REPLACE] for  ( ConcreteFunctionType funType : recvType.getFunctions (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1109^1110^1111^^^1103^1107^[ADD] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  { type = type.unionWith ( superType.getPrototypeType (  )  ) ; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteFunctionType funType : targetType.isFunction (  )  )  {^1132^^^^^1103^1107^[REPLACE] for  ( ConcreteFunctionType funType : targetType.getFunctions (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( ConcreteInstanceType instType : constructorType.getFunctions (  )  )  {^1144^1145^^^^1103^1107^[REPLACE] for  ( ConcreteInstanceType instType : constructorType.getFunctionInstanceTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = scope.getTypeOfThis (  )  ;^1055^^^^^1103^1107^[REPLACE] ret = slot.getType (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE  ;^1059^^^^^1103^1107^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1064^^^^^1103^1107^[ADD] ret = scope.getTypeOfThis (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1070^^^^^1103^1107^[ADD] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1074^^^^^1103^1107^[REPLACE] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1080^^^^^1103^1107^[REPLACE] ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1084^1085^^^^1103^1107^[ADD] ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  inferConcreteType ( varScope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( varScope, expr.getLastChild (  )  )  ) ;^1089^1090^1091^^^1103^1107^[REPLACE] ret = inferConcreteType ( scope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = type  ;^1097^^^^^1103^1107^[REPLACE] ret = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = type.unionWith ( superType.getPrototypeType (  )  )  ;^1105^^^^^1103^1107^[REPLACE] type = type.unionWith ( funType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^type = type.unionWith ( funType.getPrototypeType (  )  )  ;^1110^^^^^1103^1107^[REPLACE] type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^thisType = recvType  ;^1113^^^^^1103^1107^[REPLACE] type = recvType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = recvType  ;^1115^^^^^1103^1107^[REPLACE] ret = type;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE  ;^1119^^^^^1103^1107^[REPLACE] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  type;^1128^^^^^1103^1107^[REPLACE] ret = targetType;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.ALL  ;^1131^^^^^1103^1107^[REPLACE] ret = ConcreteType.NONE;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  null.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^1133^^^^^1103^1107^[REPLACE] ret = ret.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.ALL  ;^1143^^^^^1103^1107^[REPLACE] ret = ConcreteType.NONE;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype )  ;^1146^^^^^1103^1107^[REPLACE] ret = ret.unionWith ( instType ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  createConcreteFunction ( receiver, scope ) ;^1152^^^^^1103^1107^[REPLACE] ret = createConcreteFunction ( expr, scope ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  thisType;^1160^^^^^1103^1107^[REPLACE] ret = inst;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1162^^^^^1103^1107^[ADD] ret = ConcreteType.ALL;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^break;^1171^1172^^^^1103^1107^[ADD] ret = inst; break;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.ALL  ;^1175^^^^^1103^1107^[REPLACE] ret = ConcreteType.NONE;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1052^^^^^1103^1107^[ADD] StaticSlot<ConcreteType> slot = scope.getSlot ( expr.getString (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , n )  ;^1095^^^^^1103^1107^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^Node prop = receiver.getLastChild (  ) ;^1100^^^^^1103^1107^[REPLACE] Node prop = expr.getLastChild (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^String rhsName = prop .getFirstChild (  )  ;^1101^^^^^1103^1107^[REPLACE] String propName = prop.getString (  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType type = recvType.getPropertySlots ( prop ) ;^1102^^^^^1103^1107^[REPLACE] ConcreteType type = recvType.getPropertyType ( propName ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1109^^^^^1103^1107^[REPLACE] for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType targetType = inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1125^1126^^^^1103^1107^[REPLACE] ConcreteType targetType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1132^1133^1134^^^1103^1107^[ADD] for  ( ConcreteFunctionType funType : targetType.getFunctions (  )  )  { ret = ret.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ; }^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType constructorType = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^1138^1139^^^^1103^1107^[REPLACE] ConcreteType constructorType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^1157^1158^^^^1103^1107^[ADD] JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ; ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType inst = createConcreteInstance ( recvType.toObjectType (  )  ) ;^1158^^^^^1103^1107^[REPLACE] ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteFunctionType type = createConcreteFunction ( n, scope )  ;^1169^^^^^1103^1107^[REPLACE] ConcreteInstanceType inst = createConcreteInstance ( arrayType ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^throw new AssertionError ( "Found call on all type, which makes tighten types useless." )  ;^1141^^^^^1103^1107^[REPLACE] throw new AssertionError ( "Attempted new call on all type!" ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return createTypeIntersection ( ret, receiver.getJSType (  )  ) ;^1177^^^^^1046^1178^[REPLACE] return createTypeIntersection ( ret, expr.getJSType (  )  ) ;^[METHOD] inferConcreteType [TYPE] ConcreteType [PARAMETER] ConcreteScope scope Node expr [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType funType  superType  [TYPE]  ConcreteInstanceType inst  instType  [TYPE]  ObjectType arrayType  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  StaticSlot slot  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteSlot var = new ConcreteSlot ( this, name )  ;^1185^^^^^1181^1226^[REPLACE] ConcreteJSTypePair key = new ConcreteJSTypePair ( concreteType, jsType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1186^^^^^1181^1226^[REPLACE] ConcreteType ret = typeIntersectionMemos.get ( key ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ret == null )  {^1187^^^^^1181^1226^[REPLACE] if  ( ret != null )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return thisType;^1188^^^^^1181^1226^[REPLACE] return ret;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return retType;^1188^^^^^1181^1226^[REPLACE] return ret;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( jsType != null ) {^1191^^^^^1181^1226^[REPLACE] if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^} else if  (  concreteType.isSingleton (  )  )  {^1193^^^^^1181^1226^[REPLACE] } else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^retType = createUnionWithSubTypes ( retType )  ;^1197^^^^^1193^1198^[REPLACE] ret = createTypeWithSubTypes ( jsType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  recvType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1181^1226^[REPLACE] ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  )  ;^1194^^^^^1181^1226^[REPLACE] ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^retType = createUnionWithSubTypes ( retType )  ;^1197^^^^^1181^1226^[REPLACE] ret = createTypeWithSubTypes ( jsType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ConcreteType.NONE  ;^1192^^^^^1181^1226^[REPLACE] ret = concreteType;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^}  if  (  concreteType.isSingleton (  )  )  {^1193^^^^^1181^1226^[REPLACE] } else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret =  null.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1181^1226^[REPLACE] ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1199^^^^^1181^1226^[ADD] ret = ret.intersectWith ( ConcreteType.createForTypes ( allInstantiatedTypes )  ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1204^1205^1206^^^1181^1226^[ADD] for  ( ConcreteFunctionType functionType : concreteType.getFunctions (  )  )  { ret = ret.unionWith ( functionType ) ; }^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1205^^^^^1181^1226^[ADD] ret = ret.unionWith ( functionType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype )  ;^1205^^^^^1181^1226^[REPLACE] ret = ret.unionWith ( functionType ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1204^^^^^1181^1226^[REPLACE] for  ( ConcreteFunctionType functionType : concreteType.getFunctions (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1211^1212^1213^^^1181^1226^[ADD] for  ( ConcreteInstanceType prototype : concreteType.getPrototypeTypes (  )  )  { ret = ret.unionWith ( prototype ) ; }^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( functionType )  ;^1212^^^^^1181^1226^[REPLACE] ret = ret.unionWith ( prototype ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1212^^^^^1181^1226^[ADD] ret = ret.unionWith ( prototype ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( instance.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  {^1218^1219^^^^1181^1226^[REPLACE] if  ( !instance.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype )  ;^1220^^^^^1218^1221^[REPLACE] ret = ret.unionWith ( instance ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1217^1218^1219^1220^1221^1181^1226^[ADD] for  ( ConcreteInstanceType instance : concreteType.getInstances (  )  )  { if  ( !instance.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  { ret = ret.unionWith ( instance ) ; }^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1218^1219^1220^1221^^1181^1226^[ADD] if  ( !instance.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  { ret = ret.unionWith ( instance ) ; }^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ret = ret.unionWith ( prototype )  ;^1220^^^^^1181^1226^[REPLACE] ret = ret.unionWith ( instance ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  )  ;^1217^^^^^1181^1226^[REPLACE] for  ( ConcreteInstanceType instance : concreteType.getInstances (  )  )  {^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^typeIntersectionMemos.get ( key )  ;^1224^^^^^1181^1226^[REPLACE] typeIntersectionMemos.put ( key, ret ) ;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;  ;^1225^^^^^1181^1226^[REPLACE] return ret;^[METHOD] createTypeIntersection [TYPE] ConcreteType [PARAMETER] ConcreteType concreteType JSType jsType [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  ConcreteFunctionType functionType  [TYPE]  ConcreteInstanceType instance  prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  ConcreteJSTypePair key  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( type.getSubTypes (  )  == null )  {^1336^^^^^1335^1359^[REPLACE] if  ( type.getSubTypes (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  == null )  {^1339^1340^^^^1335^1359^[REPLACE] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1339^1340^1341^1342^1343^1335^1359^[ADD] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  { concrete = concrete.toFunction (  ) .getInstanceType (  ) ; if  ( !set.contains ( concrete )  )  { set.add ( concrete ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1354^^^^^1339^1355^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !set .clear (  )   )  {^1342^^^^^1339^1355^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, true )  )  {^1344^^^^^1339^1355^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1345^^^^^1339^1355^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, null )  )  {^1344^^^^^1339^1355^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  ret.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1339^1355^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^1342^^^^^1335^1359^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, this )  )  {^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1345^^^^^1335^1359^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( getSubTypes ( sub, set )  )  {^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return false;  ;^1345^^^^^1335^1359^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^for  ( FunctionType sub : type .getSubTypes ( this )   )  {^1337^^^^^1336^1357^[REPLACE] for  ( FunctionType sub : type.getSubTypes (  )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( ret.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  == null )  {^1339^1340^^^^1336^1357^[REPLACE] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !set.contains ( retType )  )  {^1342^^^^^1339^1355^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( getSubTypes ( sub, set )  )  {^1344^^^^^1339^1355^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return false;  ;^1345^^^^^1339^1355^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  null.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1339^1355^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !set .clear (  )   )  {^1342^^^^^1336^1357^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, null )  )  {^1344^^^^^1336^1357^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1344^1345^1346^^^1336^1357^[ADD] if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1345^^^^^1336^1357^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( getSubTypes ( sub, set )  )  {^1344^^^^^1336^1357^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  type.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1336^1357^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return false;  ;^1345^^^^^1336^1357^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return true;^1354^^^^^1336^1357^[REPLACE] return false;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^1338^^^^^1336^1357^[REPLACE] ConcreteType concrete = createType ( sub ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  recvType.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1336^1357^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1337^1338^1339^1340^1341^1336^1357^[ADD] for  ( FunctionType sub : type.getSubTypes (  )  )  { ConcreteType concrete = createType ( sub ) ; if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  { concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  (  concrete.isFunction (  ) .getInstanceType (  )  == null )  {^1339^1340^^^^1335^1359^[REPLACE] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^set.add ( concrete ) ;return false;^1342^1343^1344^1345^1346^1339^1355^[ADD] if  ( !set.contains ( concrete )  )  { set.add ( concrete ) ; if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !getSubTypes ( sub, false )  )  {^1344^^^^^1339^1355^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1344^1345^1346^^^1339^1355^[ADD] if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  type.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1339^1355^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !set .clear (  )   )  {^1342^^^^^1335^1359^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1342^1343^1344^1345^1346^1335^1359^[ADD] if  ( !set.contains ( concrete )  )  { set.add ( concrete ) ; if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^return false;^1344^1345^1346^^^1335^1359^[ADD] if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^1344^^^^^1335^1359^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1344^1345^1346^^^1335^1359^[ADD] if  ( !getSubTypes ( sub, set )  )  { return false; }^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .unionWith (  )  == null )  {^1339^1340^^^^1336^1357^[REPLACE] if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( set.contains ( concrete )  )  {^1342^^^^^1339^1355^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if  ( !set.add ( concrete )  )  {^1342^^^^^1336^1357^[REPLACE] if  ( !set.contains ( concrete )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^1344^^^^^1336^1357^[REPLACE] if  ( !getSubTypes ( sub, set )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[ADD]^^1341^^^^^1336^1357^[ADD] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^concrete =  ret.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1336^1357^[REPLACE] concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^FunctionType implementor  ;^1337^^^^^1336^1357^[REPLACE] for  ( FunctionType sub : type.getSubTypes (  )  )  {^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^return type;  ;^1358^^^^^1335^1359^[REPLACE] return true;^[METHOD] getSubTypes [TYPE] boolean [PARAMETER] FunctionType type ConcreteType> set [CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  FunctionType sub  type  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^private  ConcreteScope parent;^180^^^^^^^[REPLACE] private final ConcreteScope parent;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] ConcreteScope   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^private  Map<String, ConcreteSlot> slots;^181^^^^^^^[REPLACE] private final Map<String, ConcreteSlot> slots;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] ConcreteScope   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^private  List<Action> actions;^182^^^^^^^[REPLACE] private final List<Action> actions;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] ConcreteScope   [TYPE]  Set allInstantiatedTypes  set  types  workSet  [TYPE]  JSType alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  [TYPE]  Node arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  [TYPE]  String NON_HALTING_ERROR_MSG  name  prop  propName  [TYPE]  ConcreteType concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  [TYPE]  int hashcode  i  [TYPE]  AbstractCompiler compiler  [TYPE]  ConcreteSlot slot  thisVar  var  variable  [TYPE]  boolean added  changed  false  found  inExterns  isCallFunction  isNew  isNewCall  true  [TYPE]  ConcreteScope parent  parentScope  scope  topScope  varScope  [TYPE]  List actions  argTypes  assigns  workList  [TYPE]  Map functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos 
[REPLACE]^private  ConcreteScope scope;^265^^^^^^^[REPLACE] private final ConcreteScope scope;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ConcreteSlot   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^private final  char  name;^266^^^^^^^[REPLACE] private final String name;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ConcreteSlot   [TYPE]  List actions  [TYPE]  boolean false  true  [TYPE]  Map slots  [TYPE]  ConcreteScope parent 
[REPLACE]^private  ConcreteSlot slot;^316^^^^^^^[REPLACE] private final ConcreteSlot slot;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Assignment   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  ConcreteType origType  type  [TYPE]  ConcreteScope scope 
[REPLACE]^private  Node expression;^331^^^^^^^[REPLACE] private final Node expression;^[METHOD] <init> [TYPE] ConcreteType) [PARAMETER] ConcreteSlot slot ConcreteType type [CLASS] VariableAssignAction   [TYPE]  ConcreteType type  [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true 
[REPLACE]^private  Node expression;^351^^^^^^^[REPLACE] private final Node expression;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] PropertyAssignAction   [TYPE]  ConcreteSlot slot  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression 
[REPLACE]^private boolean isNewCall = true;^384^^^^^^^[REPLACE] private boolean isNewCall = false;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private boolean isCallFunction  = null ;^385^^^^^^^[REPLACE] private boolean isCallFunction = false;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private  Node receiver;^386^^^^^^^[REPLACE] private final Node receiver;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private  Node firstArgument;^387^^^^^^^[REPLACE] private final Node firstArgument;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private String propName = true;^388^^^^^^^[REPLACE] private String propName = null;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCallBuilder   [TYPE]  StaticSlot prop  [TYPE]  boolean false  true  [TYPE]  ConcreteScope scope  [TYPE]  Node expr  expression  receiver  [TYPE]  List assigns  [TYPE]  String propName  [TYPE]  ConcreteType exprType  recvType 
[REPLACE]^private  boolean isNewCall;^477^^^^^^^[REPLACE] private final boolean isNewCall;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node receiver 
[REPLACE]^private  Node receiver;^478^^^^^^^[REPLACE] private final Node receiver;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node receiver 
[REPLACE]^private final  long  propName;^479^^^^^^^[REPLACE] private final String propName;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  List argTypes  [TYPE]  boolean false  true  [TYPE]  ConcreteType thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node receiver 
[REPLACE]^ConcreteType recvType = inferConcreteType ( scope, receiver )  ;^497^^^^^496^535^[REPLACE] ConcreteType thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^ConcreteType thisType = ConcreteType.NONE  ;^498^^^^^496^535^[REPLACE] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if  ( propName == null )  {^502^^^^^496^535^[REPLACE] if  ( propName != null )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^thisType =  null;^503^^^^^496^535^[REPLACE] thisType = recvType;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^504^^^^^496^535^[ADD] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^recvType =  null.getPropertyType ( propName ) ;^504^^^^^496^535^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if  ( thisType.isAll (  )  )  {^507^^^^^496^535^[REPLACE] if  ( recvType.isAll (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^return ;^510^511^^^^496^535^[REPLACE] throw new AssertionError ( "Found call on all type, which makes tighten types useless." ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if   (  propName != null  )   {  ;^516^^^^^496^535^[REPLACE] if  ( isNewCall )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^if  ( true )  {^523^^^^^496^535^[REPLACE] if  ( added )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^523^524^525^526^^496^535^[ADD] if  ( added )  {  typeIntersectionMemos.clear (  ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^recvType.getFunctionInstanceTypes (  )  ;^525^^^^^496^535^[REPLACE] typeIntersectionMemos.clear (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REMOVE]^recvType.getFunctionInstanceTypes (  )  ;^525^^^^^496^535^[REMOVE] ^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^for  ( ConcreteInstanceType instType : recvType.isAll (  )  )  {^518^519^^^^516^527^[REPLACE] for  ( ConcreteInstanceType instType : recvType.getFunctionInstanceTypes (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^thisType  =  thisType ;^517^^^^^516^527^[REPLACE] thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^thisType =  recvType.unionWith ( instType ) ;^520^^^^^516^527^[REPLACE] thisType = thisType.unionWith ( instType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^boolean added = allInstantiatedTypes.add ( recvType ) ;^522^^^^^516^527^[REPLACE] boolean added = allInstantiatedTypes.add ( thisType ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^thisType  = null ;^517^^^^^516^527^[REPLACE] thisType = ConcreteType.NONE;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^boolean added = allInstantiatedTypes.add ( thisType )  ;^529^^^^^496^535^[REPLACE] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[ADD]^^530^531^532^^^496^535^[ADD] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  { argTypes.add ( inferConcreteType ( scope, arg )  ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^boolean added = allInstantiatedTypes.add ( thisType )  ;^530^^^^^496^535^[REPLACE] for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^return getFunctionCallAssignments  (  recvType, thisType, argTypes  )  ;  ;^534^^^^^496^535^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] FunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^private  Node receiver;^540^^^^^^^[REPLACE] private final Node receiver;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  ConcreteInstanceType instType  [TYPE]  boolean added  false  isNewCall  true  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver  [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  ConcreteType recvType  thisType 
[REPLACE]^ConcreteType thisType  =  inferConcreteType ( scope,receiver ) ;^553^554^555^^^552^570^[REPLACE] ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^556^^^^^552^570^[ADD] ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^if  ( ! recvType instanceof ConcreteInstanceType ) {^558^559^^^^552^570^[REPLACE] if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^558^559^560^561^^552^570^[ADD] if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  { recvType = thisType.getPropertyType ( propName ) ; }^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^560^^^^^558^561^[ADD] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^recvType =  null.getPropertyType ( propName ) ;^560^^^^^552^570^[REPLACE] recvType = thisType.getPropertyType ( propName ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[ADD]^^562^^^^^552^570^[ADD] List<ConcreteType> argTypes = Lists.newArrayList (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^arg =  firstArgument.getNext (  )  )  {^566^^^^^552^570^[REPLACE] arg = arg.getNext (  )  )  {^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^ConcreteType> argTypes = newArrayList (  )  ;^564^^^^^552^570^[REPLACE] for  ( Node arg = firstArgument.getNext (  ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^return getFunctionCallAssignments ( recvType, nullType, argTypes ) ;^569^^^^^552^570^[REPLACE] return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] NativeCallFunctionCall   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^private  ConcreteScope scope;^575^^^^^^^[REPLACE] private final ConcreteScope scope;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] CreateScope   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^private  boolean inExterns;^576^^^^^^^[REPLACE] private final boolean inExterns;^[METHOD] getAssignments [TYPE] Collection [PARAMETER] ConcreteScope scope [CLASS] CreateScope   [TYPE]  List argTypes  [TYPE]  String propName  [TYPE]  boolean false  true  [TYPE]  ConcreteType recvType  thisType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  firstArgument  receiver 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^590^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( receiver.getFirstChild (  )  == null )  {^597^^^^^590^601^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^597^598^599^600^^590^601^[ADD] if  ( name.getFirstChild (  )  != null )  { addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( receiver.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^lhs.getString (  )  ;^594^^^^^584^745^[REPLACE] scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  n.getFirstChild  (    )   != null  )   {  ;^597^^^^^584^745^[REPLACE] if  ( name.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^584^745^[REPLACE] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^598^599^^^^584^745^[ADD] addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^lhs.getFirstChild (  )  ;^599^^^^^584^745^[REPLACE] name, name.getFirstChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^607^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  type.isFunction  (    )    )   {  ;^611^^^^^584^745^[REPLACE] if  ( type.isNone (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope == true )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^615^616^617^618^619^584^745^[ADD] if  ( scope != null )  { type = createType ( n.getJSType (  )  ) ; if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( retType.isNone (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^616^^^^^584^745^[ADD] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^retType = createUnionWithSubTypes ( retType )  ;^620^^^^^584^745^[REPLACE] type = createUnionWithSubTypes ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (  type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^type =  createType ( null.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , parent.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^584^745^[REPLACE] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node lhs = n.getFirstChild (  )  ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope == this  )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( retType.isNone (  )  && type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^type =  createType ( parent.getJSType (  )  ) ;^616^^^^^584^745^[REPLACE] type = createType ( n.getJSType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  && type.isAll (  )  )  {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^608^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getJSType (  ) ;^612^613^614^^^584^745^[REPLACE] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^621^^^^^584^745^[REPLACE] Node nameNode = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope == null )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^612^613^614^^^584^745^[ADD] ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope == this )  {^615^^^^^584^745^[REPLACE] if  ( scope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^break;^617^618^619^^^584^745^[ADD] if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  ) {^617^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^630^^^^^584^745^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( n.getJSType (  ) .isNoObjectType (  )  )  {^631^^^^^584^745^[REPLACE] if  ( !n.getJSType (  ) .isNoObjectType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( true ) {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^( arg.getJSType (  )  )  ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^( type.getInstanceType (  )  )  ;^638^^^^^584^745^[REPLACE] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^632^633^^^^584^745^[ADD] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ; scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( inExterns && type.getInstanceType (  )  == null )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^635^636^^638^639^584^745^[ADD] if  ( inExterns && type.getInstanceType (  )  != null )  {  allInstantiatedTypes.add ( type.getInstanceType (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteFunctionType type = createConcreteFunction ( parent, scope ) ;^632^^^^^584^745^[REPLACE] ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (true && type.getInstanceType (  )  == null )  {^635^^^^^584^745^[REPLACE] if  ( inExterns && type.getInstanceType (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^638^^^^^584^745^[ADD] allInstantiatedTypes.add ( type.getInstanceType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^647^^^^^584^745^[REPLACE] if  ( inExterns )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( lhs, parent.getFirstChild (  ) , n )  ) ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  )  ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^lhs.getFirstChild (  )  ;^681^^^^^647^682^[REPLACE] addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getType (  )   ||  Token.GETPROP )  {^650^^^^^584^745^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^650^651^652^653^^584^745^[ADD] if  ( lhs.getType (  )  == Token.GETPROP )  { ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ; scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope  = null ;^655^^^^^650^656^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope =   ( ConcreteScope )  retType.getScope (  ) ;^653^^^^^584^745^[REPLACE] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , first.getFirstChild (  )  ) ;^651^652^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( scope != null )  break;^658^^^^^584^745^[REPLACE] if  ( scope == null )  break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  ) {^661^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  type.isNone  (    )    )   {  ;^665^^^^^584^745^[REPLACE] if  ( type.isFunction (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^665^666^667^668^669^584^745^[ADD] if  ( type.isFunction (  )  )  { if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (  ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^type = createUnionWithSubTypes ( type )  ;^673^^^^^584^745^[REPLACE] retType = createUnionWithSubTypes ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType retType = createType (  (  ( FunctionType ) first.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^584^745^[REPLACE] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^674^675^^^^584^745^[ADD] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs .getType (  )   != null || ! ( lhs^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^653^^^^^584^745^[ADD] scope =  ( ConcreteScope )  type.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope  =  scope ;^655^^^^^584^745^[REPLACE] scope = getTopScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^649^^^^^584^745^[ADD] ConcreteScope scope;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^660^^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^670^671^672^^^584^745^[ADD] ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( newret ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getType (  )   !=  Token.GETPROP )  {^650^^^^^584^745^[REPLACE] if  ( lhs.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  scope == null  )   break;  ;^658^^^^^584^745^[REPLACE] if  ( scope == null )  break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( type.isNone (  )  && type .isNone (  )   )  {^661^^^^^584^745^[REPLACE] if  ( type.isNone (  )  || type.isAll (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^661^662^663^^^584^745^[ADD] if  ( type.isNone (  )  || type.isAll (  )  )  { break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REMOVE]^if  ( paramType instanceof FunctionType )  {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType,  (  ( FunctionType )   ( paramType )  )  )  ) ; }else {     return Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ; }^665^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^673^^^^^584^745^[ADD] retType = createUnionWithSubTypes ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType newret = type .isFunction (  )  .getReturnSlot (  ) .getType (  ) .unionWith ( newret ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getJSType (  )  != null ) {^666^667^^^^584^745^[REPLACE] if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^688^^^^^584^745^[REPLACE] if  ( receiver.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REMOVE]^if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {     if  (  ( first.getType (  )  )  ==  ( GETPROP )  )  {         addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;     }else {         addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;     } }else {     addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ; }^688^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   ||  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^712^713^714^^^688^715^[ADD] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   &&  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )   &&  Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^[REPLACE] addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setIsNewCall ( parent.getType (  )  == Token.NEW ) .build (  )  ) ;^713^714^^^^688^715^[REPLACE] .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( "call".equals ( parent .getType (  )  .getString (  )  )  )  {^691^^^^^584^745^[REPLACE] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^691^692^^694^695^584^745^[ADD] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  { if  ( first.getType (  )  == Token.GETPROP )  { addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^706^707^708^^^691^709^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent .getType (  )   ) .setPropName ( first^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver .getType (  )  .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^707^708^^^^691^709^[ADD] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( first.getType (  )   &&  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .FunctionCallBuilder (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .FunctionCallBuilder (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^700^701^702^^^692^703^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^[REPLACE] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^701^702^^^^692^703^[ADD] first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^694^695^696^^^584^745^[ADD] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent.getType (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( first.getFirstChild (  ) .unionWith (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^695^696^697^^^584^745^[ADD] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( parent.getType (  )   ||  Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^692^693^694^695^696^584^745^[ADD] if  ( first.getType (  )  == Token.GETPROP )  {  addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  )^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getType (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node first = parent.getFirstChild (  ) ;^689^^^^^584^745^[REPLACE] Node first = receiver.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if   (  !inExterns && lhs.getType  (    )   == Token.GETPROP  )   {  ;^691^^^^^584^745^[REPLACE] if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver .getType (  )   ) .setPropName ( first^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getType (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( receiver.getType (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^[REPLACE] .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  (   Token.GETPROP )  {^692^^^^^584^745^[REPLACE] if  ( first.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, parent .getType (  )   ) .setPropName ( first.getFirstChild (  )^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getType (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first .getLastChild (  )  .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( new FunctionCallBuilder ( first, receiver .getType (  )   ) .setPropName ( first.getFirstChild (  )^694^695^696^697^^584^745^[REPLACE] addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^.setPropName ( first.getLastChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^584^745^[REPLACE] .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( receiver.getType (  )  == Token.CATCH || parent.getFirstChild (  )  == n )  {^719^^^^^584^745^[REPLACE] if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( parent.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^584^745^[REPLACE] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^scope.declareSlot ( parent.getType (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^584^745^[REPLACE] scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .unionWith (  )  )  ) ;^725^726^^^^584^745^[REPLACE] createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^725^726^^^^584^745^[ADD] createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^createType (.getTypesWithPropertyRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^( arg.getJSType (  )  )  ;^726^^^^^584^745^[REPLACE] createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REMOVE]^getImplicitActions ( n )  ;^726^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( n.getFirstChild (  )  == null )  {^731^^^^^584^745^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^addAction ( parentew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^584^745^[REPLACE] addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^( ConcreteSlot )  scope .getSlot ( false )  , n.getFirstChild (  )  )  ) ;^733^734^^^^584^745^[REPLACE] ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^lhs.getFirstChild (  )  ;^734^^^^^584^745^[REPLACE] ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REMOVE]^getImplicitActions ( n )  ;^734^^^^^584^745^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^for  ( name =  null.getFirstChild (  ) ; nullame !^589^^^^^584^745^[REPLACE] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^for  ( name =  n.getFirstChild (  ) ; receiver !^589^^^^^584^745^[REPLACE] for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^JSType alt  ;^588^^^^^584^745^[REPLACE] Node name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^608^^^^^584^745^[ADD] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node lhs = parent.getFirstChild (  ) ;^646^^^^^584^745^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType thisType  ;^649^^^^^584^745^[REPLACE] ConcreteScope scope;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^660^^^^^584^745^[REPLACE] ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteType newret = newret.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^584^745^[REPLACE] ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Node receiver = parent.getFirstChild (  ) ;^687^^^^^584^745^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^Collection<Action> actions = getImplicitActions ( parent ) ;^739^^^^^584^745^[REPLACE] Collection<Action> actions = getImplicitActions ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( false == null )  {^740^^^^^584^745^[REPLACE] if  ( actions != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^ConcreteScope scope  ;^741^^^^^740^744^[REPLACE] for  ( Action action : actions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^for  ( Action action : null )  {^741^^^^^740^744^[REPLACE] for  ( Action action : actions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[ADD]^^741^742^743^^^740^744^[ADD] for  ( Action action : actions )  { addAction ( action ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateScope   [TYPE]  ConcreteFunctionType type  [TYPE]  Action action  [TYPE]  boolean false  inExterns  true  [TYPE]  NodeTraversal t  [TYPE]  ConcreteScope scope  [TYPE]  Node first  lhs  n  name  nameNode  parent  receiver  [TYPE]  Collection actions  [TYPE]  ConcreteType newret  retType  type 
[REPLACE]^if  ( lhs.getFirstChild (  ) .getType (  )   !=  Token.REF_SPECIAL )  {^786^^^^^766^797^[REPLACE] if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[ADD]^^786^787^788^789^790^766^797^[ADD] if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  { return Lists.newArrayList (  ) ; } else { throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[ADD]^^789^790^^^^786^791^[ADD] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^"Bad LHS for getref: " + rhs.toStringTree (  )  ) ;^790^^^^^786^791^[REPLACE] "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[ADD]^^790^791^^^^786^791^[ADD] "Bad LHS for getref: " + parent.toStringTree (  )  ) ; }^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists .newArrayList ( false )  ;^787^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>ArrayList (  new PropertyAssignAction ( receiver, rhs )   ) ;^773^774^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>ArrayList (  new ExternFunctionCall ( receiver, thisType, argTypes )   ) ;^778^779^^^^766^797^[REPLACE] return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^782^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^787^^^^^766^797^[REPLACE] return Lists.newArrayList (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( rhs.getType (  )  ) ;^769^^^^^766^797^[REPLACE] ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^Node receiver = rhs.getFirstChild (  ) ;^777^^^^^766^797^[REPLACE] Node receiver = lhs.getFirstChild (  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^throw new AssertionError (  ( "Bad LHS for assignment: " +  ( parent.toStringTree (  )  )  )  )  ;^789^790^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^return ;^794^795^^^^766^797^[REPLACE] throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[METHOD] createAssignmentActions [TYPE] List [PARAMETER] Node lhs Node rhs Node parent [CLASS] CreateScope   [TYPE]  ConcreteSlot var  [TYPE]  boolean false  inExterns  true  [TYPE]  ConcreteScope scope  [TYPE]  Node lhs  parent  receiver  rhs 
[REPLACE]^if  ( inExterns && receiver.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^[REPLACE] if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return getImplicitActionsFromCall ( n, receiver.getType (  )  ) ;^836^^^^^826^851^[REPLACE] return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^if  ( inExterns && lhs.getType (  )  == Token.GETPROP )  {^844^^^^^826^851^[REPLACE] if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return getImplicitActionsFromProp  (  lhs.getFirstChild  (    )  .getJSType  (    )  , lhs.getLastChild  (    )  .getString  (    )  , n.getLastChild  (    )    )  ;  ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return getImplicitActionsFromProp ( lhs .getLastChild (  )  .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^[REPLACE] return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^Node receiver = n.getLastChild (  ) ;^834^^^^^826^851^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[ADD]^^841^^^^^826^851^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^return null;  ;^850^^^^^826^851^[REPLACE] return null;^[METHOD] getImplicitActions [TYPE] Collection [PARAMETER] Node n [CLASS] CreateScope   [TYPE]  ConcreteScope scope  [TYPE]  boolean false  inExterns  true  [TYPE]  Node lhs  n  receiver 
[REPLACE]^Node lhs = n.getFirstChild (  )  ;^855^^^^^854^893^[REPLACE] Node receiver = n.getFirstChild (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! recvType instanceof UnionType )  {^856^^^^^854^893^[REPLACE] if  ( recvType instanceof UnionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^} else if  ( ! ! ( recvType instanceof FunctionType )  )  {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^863^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return null;^861^^^^^856^862^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ConcreteType> argTypes = newArrayList (  )  ;^857^^^^^856^862^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^FunctionType callType = null  ;^858^^^^^856^862^[REPLACE] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^} else if  ( ! ! ( alt instanceof FunctionType )  )  {^862^^^^^854^893^[REPLACE] } else if  ( ! ( recvType instanceof FunctionType )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^}   return Lists.<Action>newArrayList (  ) ;^862^863^864^^^854^893^[ADD] else if  ( ! ( recvType instanceof FunctionType )  )  { return Lists.<Action>newArrayList (  ) ; }^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^for  ( JSType alt :  (  ( UnionType )  recvType ) .getReturnType (  )  )  {^858^^^^^856^862^[REPLACE] for  ( JSType alt :  (  ( UnionType )  recvType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^863^^^^^856^862^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^857^^^^^856^862^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType objType = ObjectType.cast ( getJSType ( receiver .getLastChild (  )   ) .restrictByNotNullOrUndefined (  )  ) ;^866^867^868^^^854^893^[REPLACE] ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^String prop = receiver.getLastChild (  ) .unionWith (  ) ;^869^^^^^854^893^[REPLACE] String prop = receiver.getLastChild (  ) .getString (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  (  ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^854^893^[REPLACE] if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! arg.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^883^884^885^886^887^870^891^[ADD] if  ( arg.getJSType (  )  instanceof FunctionType )  { actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( param, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^884^885^886^^^870^891^[ADD] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) ,^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^(  ( FunctionType )  param.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^( arg.getJSType (  )  )  ;^887^^^^^870^891^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return actions;  ;^890^^^^^870^891^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^873^^^^^870^891^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^876^877^^^^870^891^[ADD] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^878^^^^^870^891^[ADD] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node arg = this.next (  ) ;^881^^^^^870^891^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node lhs = n.getFirstChild (  )  ;^882^^^^^870^891^[REPLACE] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( ! arg.getJSType (  )  instanceof FunctionType )  {^883^^^^^854^893^[REPLACE] if  ( arg.getJSType (  )  instanceof FunctionType )  {^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^883^884^885^886^887^854^893^[ADD] if  ( arg.getJSType (  )  instanceof FunctionType )  { actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg .getJSType (  )   ) .getTypeOfThis (  ) , param^884^885^886^887^^854^893^[REPLACE] actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^(  ( FunctionType )  param.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^854^893^[REPLACE] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^886^887^^^^854^893^[ADD] (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^param.getType (  )  )  ) ;^887^^^^^854^893^[REPLACE] param.getJSType (  )  )  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return actions;  ;^890^^^^^854^893^[REPLACE] return actions;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^List<Action> actions = Lists .newArrayList ( null )  ;^873^^^^^854^893^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^876^877^^^^854^893^[ADD] Iterator<Node> paramIter = (  ( FunctionType )  recvType ) .getParameters (  ) .iterator (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^878^879^^^^854^893^[ADD] Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ; argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Node arg = true.next (  ) ;^881^^^^^854^893^[REPLACE] Node arg = argumentIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^882^^^^^854^893^[ADD] Node param = paramIter.next (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^892^^^^^854^893^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromCall [TYPE] Collection [PARAMETER] Node n JSType recvType [CLASS] CreateScope   [TYPE]  ObjectType objType  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType alt  recvType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg  n  param  receiver  [TYPE]  Iterator argumentIter  paramIter  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if   (  recvType instanceof UnionType  )   {  ;^897^^^^^896^911^[REPLACE] if  ( paramType instanceof UnionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[ADD]^List<Action> actions = Lists.newArrayList (  ) ;^897^898^899^900^901^896^911^[ADD] if  ( paramType instanceof UnionType )  { List<Action> actions = Lists.newArrayList (  ) ; for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  { actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^}  else {^904^^^^^896^911^[REPLACE] } else if  ( paramType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[ADD]^}   arg, thisType,  ( FunctionType )  paramType )  ) ;^904^905^906^907^908^896^911^[ADD] else if  ( paramType instanceof FunctionType )  { return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ; } else { return Lists.<Action>newArrayList ( createExternFunctionCall (^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getReturnType (  )  )  {^899^^^^^896^911^[REPLACE] for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^return true;^903^^^^^896^911^[REPLACE] return actions;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, nullType,  ( FunctionType )  paramType )  ) ;^905^906^^^^896^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, true )  ) ;^908^909^^^^896^911^[REPLACE] return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[ADD]^^898^^^^^896^911^[ADD] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^FunctionType callType = null  ;^899^^^^^896^911^[REPLACE] for  ( JSType paramAlt :  (  ( UnionType )  paramType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromArgument [TYPE] Collection [PARAMETER] Node arg ObjectType thisType JSType paramType [CLASS] CreateScope   [TYPE]  ObjectType thisType  [TYPE]  List actions  [TYPE]  boolean false  inExterns  true  [TYPE]  JSType paramAlt  paramType  [TYPE]  ConcreteScope scope  [TYPE]  Node arg 
[REPLACE]^ConcreteType> argTypes = newArrayList (  )  ;^915^^^^^914^946^[REPLACE] List<Action> actions = Lists.newArrayList (  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if   (  recvType instanceof UnionType  )   {  ;^916^^^^^914^946^[REPLACE] if  ( jsType instanceof UnionType )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^boolean found = false;^916^917^918^919^^914^946^[ADD] if  ( jsType instanceof UnionType )  { boolean found = false; for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { ObjectType altObj = ObjectType.cast ( alt ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  (  !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^933^934^935^936^^916^937^[ADD] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  { return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return getImplicitActionsFromPropNonUnion  (  objType, prop, fnNode  )  ;  ;^935^^^^^933^936^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return getImplicitActionsFromPropNonUnion  (  objType, prop, fnNode  )  ;  ;^935^^^^^916^937^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType objType = ObjectType.cast ( alt ) ;^932^^^^^916^937^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( altObj ==type )  {^920^^^^^914^946^[REPLACE] if  ( altObj != null )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( altObj.getPropertyType ( prop )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^found = true;^923^924^925^^^914^946^[ADD] if  ( altObj.hasProperty ( prop )  )  { found = true; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^924^^^^^914^946^[ADD] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^923^924^925^^^914^946^[ADD] if  ( altObj.hasProperty ( prop )  )  { found = true; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^found = false;^924^^^^^914^946^[REPLACE] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( true )  {^928^^^^^914^946^[REPLACE] if  ( found )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return false;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^918^919^920^921^922^916^931^[ADD] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { ObjectType altObj = ObjectType.cast ( alt ) ; if  ( altObj != null )  { actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^found = false;^924^^^^^916^931^[REPLACE] found = true;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return actions;  ;^929^^^^^916^931^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^boolean found = true;^917^^^^^916^931^[REPLACE] boolean found = false;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^FunctionType callType = null  ;^918^^^^^916^931^[REPLACE] for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType jsTypeObj = ObjectType.cast ( alt ) ;^919^^^^^916^931^[REPLACE] ObjectType altObj = ObjectType.cast ( alt ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( altObj == true )  {^920^^^^^914^946^[REPLACE] if  ( altObj != null )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( type.getPropertyType ( prop )  )  {^923^^^^^914^946^[REPLACE] if  ( altObj.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return actions;  ;^929^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^if  ( objType == false && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^914^946^[REPLACE] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^933^934^935^936^^914^946^[ADD] if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  { return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ; }^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return null;^929^^^^^916^931^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return getImplicitActionsFromPropNonUnion  (  objType, prop, fnNode  )  ;  ;^935^^^^^916^931^[REPLACE] return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^919^^^^^916^931^[ADD] ObjectType altObj = ObjectType.cast ( alt ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^ObjectType objType = ObjectType.cast ( alt ) ;^932^^^^^916^931^[REPLACE] ObjectType objType = ObjectType.cast ( jsType ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^Set<ObjectType> types = getTypeRegistry (  ) .getType ( prop ) ;^941^^^^^914^946^[REPLACE] Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( prop ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^for  ( ObjectType objType : types )  {^942^^^^^914^946^[REPLACE] for  ( ObjectType type : types )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ;^943^^^^^914^946^[REPLACE] actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[ADD]^^943^^^^^914^946^[ADD] actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^FunctionType callType = null  ;^942^^^^^914^946^[REPLACE] for  ( ObjectType type : types )  {^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^return 1;^945^^^^^914^946^[REPLACE] return actions;^[METHOD] getImplicitActionsFromProp [TYPE] Collection [PARAMETER] JSType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType altObj  objType  type  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType alt  jsType  [TYPE]  Set types  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  List actions  [TYPE]  String prop 
[REPLACE]^JSType propType = thisType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^949^967^[REPLACE] JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^if  ( jsType.isPropertyInExterns ( prop )  || propType.isFunctionType (  )  )  {^952^^^^^949^967^[REPLACE] if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^952^953^954^955^956^949^967^[ADD] if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  { ObjectType thisType = jsType; if  ( jsType instanceof FunctionPrototypeType )  { thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^if  ( ! thisType instanceof FunctionPrototypeType )  {^954^^^^^949^967^[REPLACE] if  ( jsType instanceof FunctionPrototypeType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^thisType =   (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^955^956^^^^949^967^[REPLACE] thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^959^^^^^949^967^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^callType =   ( FunctionType )  propType;^960^^^^^949^967^[REPLACE] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^960^^^^^949^967^[ADD] callType =  ( FunctionType )  propType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^964^^^^^949^967^[REPLACE] return Lists.<Action>newArrayList ( action ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^FunctionType callType = null  ;^953^^^^^949^967^[REPLACE] ObjectType thisType = jsType;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^FunctionType callType = this;^958^^^^^949^967^[REPLACE] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^955^956^^^^949^967^[ADD] thisType =  (  ( FunctionPrototypeType )  jsType ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[ADD]^^958^^^^^949^967^[ADD] FunctionType callType = null;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^return Lists.<Action>newArrayList  (  createExternFunctionCall  (  arg, thisType, null  )    )  ;  ;^966^^^^^949^967^[REPLACE] return Lists.<Action>newArrayList (  ) ;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] CreateScope   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^ConcreteType concrete;^1366^^^^^^^[REPLACE] final ConcreteType concrete;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] ConcreteJSTypePair   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
[REPLACE]^JSType jstype;^1367^^^^^^^[REPLACE] final JSType jstype;^[METHOD] getImplicitActionsFromPropNonUnion [TYPE] Collection [PARAMETER] ObjectType jsType String prop Node fnNode [CLASS] ConcreteJSTypePair   [TYPE]  ObjectType jsType  thisType  [TYPE]  Action action  [TYPE]  boolean false  found  inExterns  true  [TYPE]  JSType propType  [TYPE]  ConcreteScope scope  [TYPE]  Node fnNode  [TYPE]  FunctionType callType  [TYPE]  String prop 
