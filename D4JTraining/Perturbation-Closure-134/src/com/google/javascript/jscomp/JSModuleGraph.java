[REPLACE]^private Map<JSModule, Set<JSModule>> dependencyMap ;^67^^^^^^^[REPLACE] private Map<JSModule, Set<JSModule>> dependencyMap = Maps.newHashMap (  ) ;^ [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  
[REPLACE]^private static final long serialVersionUID ;^286^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^ [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  
[REPLACE]^moduleDepths =  new HashMap<JSModule, Integer> ( null.length ) ;^73^^^^^72^95^[REPLACE] moduleDepths = new HashMap<JSModule, Integer> ( modulesInDepOrder.length ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^modulesByDepth =  new JSModule> (  )  ;^74^^^^^72^95^[REPLACE] modulesByDepth = new ArrayList<List<JSModule>> (  ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^if  ( depDepth != null )  {^80^^^^^72^95^[REPLACE] if  ( depDepth == null )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^80^81^82^83^84^72^95^[ADD] if  ( depDepth == null )  { throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^81^82^83^84^85^72^95^[ADD] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ; }^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", dependentModule.getName (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^72^95^[REPLACE] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module .getInputs (  )  , dep^83^84^^^^72^95^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getName (  ) , module.getName (  )  ) , module, dep ) ;^83^84^^^^72^95^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^if  ( depth == modulesByDepth.size (  )  - 5 )  {^90^^^^^72^95^[REPLACE] if  ( depth == modulesByDepth.size (  )  )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^modulesByDepth.add ( new ArrayList<JSModule> (  )  ) ;^90^91^92^^^72^95^[ADD] if  ( depth == modulesByDepth.size (  )  )  { modulesByDepth.add ( new ArrayList<JSModule> (  )  ) ; }^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^modulesByDepth.get ( new ArrayList<JSModule> (  )  ) ;^91^^^^^72^95^[REPLACE] modulesByDepth.add ( new ArrayList<JSModule> (  )  ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getInputs (  ) , dep.getName (  )  ) , dependentModule, dep ) ;^83^84^^^^72^95^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getInputs (  ) , dep.getName (  )  ) , module, dep ) ;^83^84^^^^72^95^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^if  ( depth == modulesByDepth.get (  )  + 2 )  {^90^^^^^72^95^[REPLACE] if  ( depth == modulesByDepth.size (  )  )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^for  ( JSModule dep : module.getName (  )  )  {^78^^^^^76^94^[REPLACE] for  ( JSModule dep : module.getDependencies (  )  )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^if   (  deps == null  )   {  ;^80^^^^^76^94^[REPLACE] if  ( depDepth == null )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^return ;^81^82^83^84^^76^94^[REPLACE] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", dependentModule.getName (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^76^94^[REPLACE] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getName (  ) , dep.getName (  )  ) , dependentModule, dep ) ;^83^84^^^^76^94^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^83^84^^^^76^94^[ADD] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getName (  ) , module.getName (  )  ) , module, dep ) ;^83^84^^^^76^94^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^depth = Math.max ( depth, depDepth  1 ) ;^86^^^^^76^94^[REPLACE] depth = Math.max ( depth, depDepth + 1 ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^Integer moduleDepth = moduleDepths.get ( dep ) ;^79^^^^^76^94^[REPLACE] Integer depDepth = moduleDepths.get ( dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^int depth = 0 / 3;^77^^^^^76^94^[REPLACE] int depth = 0;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^JSModule m = modulesAtDepth.get ( i )  ;^78^^^^^76^94^[REPLACE] for  ( JSModule dep : module.getDependencies (  )  )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^81^82^83^84^85^76^94^[ADD] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ; }^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^78^79^80^81^82^76^94^[ADD] for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ; if  ( depDepth == null )  { throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s",^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^if  ( depDepth != this )  {^80^^^^^76^94^[REPLACE] if  ( depDepth == null )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", dependentModule.getInputs (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^76^94^[REPLACE] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getInputs (  ) , module.getName (  )  ) , module, dep ) ;^83^84^^^^76^94^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^depth = Math.max ( depth, depDepth  3 ) ;^86^^^^^76^94^[REPLACE] depth = Math.max ( depth, depDepth + 1 ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^76^77^78^79^^76^94^[ADD] for  ( JSModule module : modulesInDepOrder )  { int depth = 0; for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^int depth = 1;^77^^^^^76^94^[REPLACE] int depth = 0;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^int m2Depth = getDepth ( m2 )  ;^152^^^^^151^168^[REPLACE] int m1Depth = getDepth ( m1 ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[ADD]^^153^^^^^151^168^[ADD] int m2Depth = getDepth ( m2 ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^if  ( dependsOn ( module, m )  || dependsOn ( m2, m )  )  {^162^^^^^151^168^[REPLACE] if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^return module;^163^^^^^151^168^[REPLACE] return m;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^return 0;  ;^163^^^^^151^168^[REPLACE] return m;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int depth = Math.min ( m1Depth, m2Depth )   1; depth >= 0; depth )  {^156^^^^^151^168^[REPLACE] for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^List<JSModule> modulesAtDepth = modulesByDepth.get ( m2Depth ) ;^157^^^^^151^168^[REPLACE] List<JSModule> modulesAtDepth = modulesByDepth.get ( depth ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int i = modulesAtDepth.length (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^[REPLACE] for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^JSModule m = modulesAtDepth.add ( i ) ;^161^^^^^151^168^[REPLACE] JSModule m = modulesAtDepth.get ( i ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^return true;^167^^^^^151^168^[REPLACE] return null;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^int m2Depth = getDepth ( m2 )  ;^239^^^^^238^261^[REPLACE] Multimap<String, JSModule> fileRefs = LinkedHashMultimap.create (  ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModule m2 : moduleDepths.keySet (  )  )  {^240^^^^^238^261^[REPLACE] for  ( JSModule module : moduleDepths.keySet (  )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^241^242^243^^^240^244^[ADD] for  ( CompilerInput jsFile : module.getInputs (  )  )  { fileRefs.put ( jsFile.getName (  ) , module ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule dep  ;^241^^^^^240^244^[REPLACE] for  ( CompilerInput jsFile : module.getInputs (  )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule m = modulesAtDepth.get ( i )  ;^240^^^^^240^244^[REPLACE] for  ( JSModule module : moduleDepths.keySet (  )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( refModules.size (  )  *  2 > 1 )  {^248^^^^^238^261^[REPLACE] if  ( refModules.size (  )  > 1 )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( module  ==  depModule )  {^252^^^^^238^261^[REPLACE] if  ( module != depModule )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^module .getName (  )  ;^253^^^^^238^261^[REPLACE] module.removeByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !refModules.contains ( module )  )  {^256^^^^^238^261^[REPLACE] if  ( !refModules.contains ( depModule )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^depModule.add ( file ) ;^256^257^258^^^238^261^[ADD] if  ( !refModules.contains ( depModule )  )  { depModule.add ( file ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^depModule.add ( jsFile ) ;^257^^^^^238^261^[REPLACE] depModule.add ( file ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^251^252^253^254^^248^259^[ADD] for  ( JSModule module : refModules )  { if  ( module != depModule )  { module.removeByName ( path ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^249^250^^^^248^259^[ADD] JSModule depModule = getDeepestCommonDependencyInclusive ( refModules ) ; CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^250^^^^^248^259^[ADD] CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule m = modulesAtDepth.get ( i )  ;^251^^^^^248^259^[REPLACE] for  ( JSModule module : refModules )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^module.removeByName ( path ) ;^252^253^254^^^238^261^[ADD] if  ( module != depModule )  { module.removeByName ( path ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^module.add ( path ) ;^253^^^^^238^261^[REPLACE] module.removeByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REMOVE]^module.getInputs (  )  ;^253^^^^^238^261^[REMOVE] ^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^256^257^258^^^238^261^[ADD] if  ( !refModules.contains ( depModule )  )  { depModule.add ( file ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^depModule.removeByName ( jsFile ) ;^257^^^^^238^261^[REPLACE] depModule.add ( file ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( refModules.size (  )  - 2 > 1 )  {^248^^^^^238^261^[REPLACE] if  ( refModules.size (  )  > 1 )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  (m2  ==  depModule )  {^252^^^^^238^261^[REPLACE] if  ( module != depModule )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !refModules .add ( null )   )  {^256^^^^^238^261^[REPLACE] if  ( !refModules.contains ( depModule )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModule module : null )  {^251^^^^^248^259^[REPLACE] for  ( JSModule module : refModules )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule depModule = getDeepestCommonDependencyInclusive ( false ) ;^249^^^^^248^259^[REPLACE] JSModule depModule = getDeepestCommonDependencyInclusive ( refModules ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^CompilerInput file = refModules.iterator (  ) .getByName (  ) .getByName ( path ) ;^250^^^^^248^259^[REPLACE] CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( m2  ==  depModule )  {^252^^^^^238^261^[REPLACE] if  ( module != depModule )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( refModules.contains ( depModule )  )  {^256^^^^^238^261^[REPLACE] if  ( !refModules.contains ( depModule )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^depModule.removeByName ( file ) ;^257^^^^^238^261^[REPLACE] depModule.add ( file ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^247^^^^^248^259^[ADD] Collection<JSModule> refModules = fileRefs.get ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule depModule = getDeepestCommonDependencyInclusive ( this ) ;^249^^^^^248^259^[REPLACE] JSModule depModule = getDeepestCommonDependencyInclusive ( refModules ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^CompilerInput file = refModules.size (  ) .next (  ) .getByName ( path ) ;^250^^^^^248^259^[REPLACE] CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModulem2 : refModules )  {^251^^^^^248^259^[REPLACE] for  ( JSModule module : refModules )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^int m2Depth = getDepth ( m2 )  ;^246^^^^^248^259^[REPLACE] for  ( String path : fileRefs.keySet (  )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^Collection<JSModule> refModules = fileRefs.put ( path ) ;^247^^^^^248^259^[REPLACE] Collection<JSModule> refModules = fileRefs.get ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule depModule = getDeepestCommonDependencyInclusive ( null ) ;^249^^^^^248^259^[REPLACE] JSModule depModule = getDeepestCommonDependencyInclusive ( refModules ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^private static final long serialVersionUID = 1 - 4;^286^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^private  JSModule dependentModule;^289^^^^^^^[REPLACE] private final JSModule dependentModule;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
