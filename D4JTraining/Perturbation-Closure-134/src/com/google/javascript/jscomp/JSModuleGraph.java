[REPLACE]^private Map<JSModule, Set<JSModule>> dependencyMap ;^67^^^^^^^[REPLACE] private Map<JSModule, Set<JSModule>> dependencyMap = Maps.newHashMap (  ) ;^ [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  
[REPLACE]^private static final long serialVersionUID = 1L;^286^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^ [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  
[REPLACE]^private  JSModule dependentModule;^289^^^^^^^[REPLACE] private final JSModule dependentModule;^ [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  
[REPLACE]^moduleDepths =  new HashMap<JSModule, Integer> ( null.length ) ;^73^^^^^72^95^[REPLACE] moduleDepths = new HashMap<JSModule, Integer> ( modulesInDepOrder.length ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^modulesByDepth = new ArrayList<List<JSModule>> (  ) ;^73^74^^^^72^95^[ADD] moduleDepths = new HashMap<JSModule, Integer> ( modulesInDepOrder.length ) ; modulesByDepth = new ArrayList<List<JSModule>> (  ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^modulesByDepth =  new JSModule> (  )  ;^74^^^^^72^95^[REPLACE] modulesByDepth = new ArrayList<List<JSModule>> (  ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^if  ( depDepth != true )  {^80^^^^^72^95^[REPLACE] if  ( depDepth == null )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", ;^81^82^83^84^^72^95^[REPLACE] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^throw new ModuleDependenceException ( String.format ( "Modules not in dependentModuleendency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^72^95^[REPLACE] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^81^82^83^84^85^72^95^[ADD] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ; }^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getInputs (  ) , dep.getName (  )  ) , module, dep ) ;^83^84^^^^72^95^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^module.getName (  ) , module.getName (  )  ) , module, dep ) ;^83^84^^^^72^95^[REPLACE] module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^if  ( depth == modulesByDepth.size (  )  + 3 )  {^90^^^^^72^95^[REPLACE] if  ( depth == modulesByDepth.size (  )  )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^modulesByDepth.get ( new ArrayList<JSModule> (  )  ) ;^91^^^^^72^95^[REPLACE] modulesByDepth.add ( new ArrayList<JSModule> (  )  ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^91^^^^^72^95^[ADD] modulesByDepth.add ( new ArrayList<JSModule> (  )  ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^depth = Math.max ( depth, depDepth  <=  1 / 3 ) ;^86^^^^^72^95^[REPLACE] depth = Math.max ( depth, depDepth + 1 ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ;^76^^^^^72^95^[REPLACE] for  ( JSModule module : modulesInDepOrder )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[ADD]^^76^77^78^79^^72^95^[ADD] for  ( JSModule module : modulesInDepOrder )  { int depth = 0; for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^int depth = 1;^77^^^^^72^95^[REPLACE] int depth = 0;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ;^78^^^^^72^95^[REPLACE] for  ( JSModule dep : module.getDependencies (  )  )  {^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^Integer moduleDepth = moduleDepths.get ( dep ) ;^79^^^^^72^95^[REPLACE] Integer depDepth = moduleDepths.get ( dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^return ;^81^82^83^84^^72^95^[REPLACE] throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[METHOD] <init> [TYPE] JSModule[]) [PARAMETER] JSModule[] modulesInDepOrder [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Integer depDepth  [TYPE]  boolean false  true  [TYPE]  JSModule[] modulesInDepOrder  [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth 
[REPLACE]^addDeps ( deps, m ) ;^293^^^^^291^296^[REPLACE] super ( message ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] String message JSModule module JSModule dependentModule [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^293^^^^^291^296^[ADD] super ( message ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] String message JSModule module JSModule dependentModule [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^this.module =  dependentModule;^294^^^^^291^296^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] String message JSModule module JSModule dependentModule [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^this.dependentModule =  module;^295^^^^^291^296^[REPLACE] this.dependentModule = dependentModule;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] String message JSModule module JSModule dependentModule [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return moduleDepths.size (  ) ;^101^^^^^100^102^[REPLACE] return moduleDepths.keySet (  ) ;^[METHOD] getAllModules [TYPE] Iterable [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return moduleDepths.keySet (  ) ;^108^^^^^107^109^[REPLACE] return moduleDepths.size (  ) ;^[METHOD] getModuleCount [TYPE] int [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return Iterables.addOnlyElement ( modulesByDepth.get ( 0 )  ) ;^115^^^^^114^116^[REPLACE] return Iterables.getOnlyElement ( modulesByDepth.get ( 0 )  ) ;^[METHOD] getRootModule [TYPE] JSModule [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return moduleDepths .put ( dependentModule , true )  ;^125^^^^^124^126^[REPLACE] return moduleDepths.get ( module ) ;^[METHOD] getDepth [TYPE] int [PARAMETER] JSModule module [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  module  [TYPE]  List modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^Set<JSModule> deps = dependencyMap.get ( m ) ;^133^^^^^132^140^[REPLACE] Set<JSModule> deps = dependencyMap.get ( src ) ;^[METHOD] dependsOn [TYPE] boolean [PARAMETER] JSModule src JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  module  src  [TYPE]  List modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( true != true )  {^134^^^^^132^140^[REPLACE] if  ( deps == null )  {^[METHOD] dependsOn [TYPE] boolean [PARAMETER] JSModule src JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  module  src  [TYPE]  List modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^deps =  getTransitiveDepsDeepestFirst ( null ) ;^135^^^^^132^140^[REPLACE] deps = getTransitiveDepsDeepestFirst ( src ) ;^[METHOD] dependsOn [TYPE] boolean [PARAMETER] JSModule src JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  module  src  [TYPE]  List modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^135^136^^^^132^140^[ADD] deps = getTransitiveDepsDeepestFirst ( src ) ; dependencyMap.put ( src, deps ) ;^[METHOD] dependsOn [TYPE] boolean [PARAMETER] JSModule src JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  module  src  [TYPE]  List modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return deps.add ( module ) ;^139^^^^^132^140^[REPLACE] return deps.contains ( m ) ;^[METHOD] dependsOn [TYPE] boolean [PARAMETER] JSModule src JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  module  src  [TYPE]  List modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^int m2Depth = getDepth ( m2 ) ;^152^^^^^151^168^[REPLACE] int m1Depth = getDepth ( m1 ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^int m1Depth = getDepth ( m1 ) ;^153^^^^^151^168^[REPLACE] int m2Depth = getDepth ( m2 ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[ADD]^^153^^^^^151^168^[ADD] int m2Depth = getDepth ( m2 ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^if  (  dependsOn ( m2, m )  )  {^162^^^^^151^168^[REPLACE] if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^return module;^163^^^^^151^168^[REPLACE] return m;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int depth = Math.min ( m1Depth, moduleDepth )   !=  1; depth >= 0; depth !=  !=  )  {^156^^^^^151^168^[REPLACE] for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^if  ( dependsOn ( m1, m )  || dependsOn ( m2, m )  )  {^162^^^^^151^168^[REPLACE] if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^return 0;^163^^^^^151^168^[REPLACE] return m;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int i = modulesAtDepth.size (  )  /  2 - 1; i >= 0; i-- )  {^160^^^^^151^168^[REPLACE] for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^if  ( dependsOn ( m1, m )  ) {^162^^^^^151^168^[REPLACE] if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[ADD]^^162^163^164^^^151^168^[ADD] if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  { return m; }^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^JSModule m = null .put ( src , depth )  ;^161^^^^^151^168^[REPLACE] JSModule m = modulesAtDepth.get ( i ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^List<JSModule> modulesAtDepth = modulesByDepth.get ( m2Depth ) ;^157^^^^^151^168^[REPLACE] List<JSModule> modulesAtDepth = modulesByDepth.get ( depth ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int i = modulesAtDepth.size (  )  - 1 - 1; i >= 0; i-- )  {^160^^^^^151^168^[REPLACE] for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^JSModule m = this.get ( i ) ;^161^^^^^151^168^[REPLACE] JSModule m = modulesAtDepth.get ( i ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int i = modulesAtDepth.size (  )  + 2 - 1; i >= 0; i-- )  {^160^^^^^151^168^[REPLACE] for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^JSModule m = modulesAtDepth.add ( i ) ;^161^^^^^151^168^[REPLACE] JSModule m = modulesAtDepth.get ( i ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[ADD]^^161^^^^^151^168^[ADD] JSModule m = modulesAtDepth.get ( i ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int depth = Math.min ( m4Depth, m2Depth )   ^  4; depth >= 0; depth ^  ^  )  {^156^^^^^151^168^[REPLACE] for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^for  ( int i = modulesAtDepth.length (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^[REPLACE] for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^JSModule m = this.add ( i ) ;^161^^^^^151^168^[REPLACE] JSModule m = modulesAtDepth.get ( i ) ;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^return false;^167^^^^^151^168^[REPLACE] return null;^[METHOD] getDeepestCommonDependency [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int depth  i  m1Depth  m2Depth 
[REPLACE]^if  ( m2 == m1 ) {^181^^^^^179^188^[REPLACE] if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^181^182^183^184^185^179^188^[ADD] if  ( m2 == m1 || dependsOn ( m2, m1 )  )  { return m1; } else if  ( dependsOn ( m1, m2 )  )  { return m2; }^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^} else if  ( dependsOn ( m1, module )  )  {^183^^^^^179^188^[REPLACE] } else if  ( dependsOn ( m1, m2 )  )  {^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^}   return m2;^183^184^185^^^179^188^[ADD] else if  ( dependsOn ( m1, m2 )  )  { return m2; }^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return module;^184^^^^^179^188^[REPLACE] return m2;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return module;^182^^^^^179^188^[REPLACE] return m1;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( dependsOn ( m1, module )  )  {^183^^^^^179^188^[REPLACE] } else if  ( dependsOn ( m1, m2 )  )  {^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return m1;^184^^^^^179^188^[REPLACE] return m2;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return getDeepestCommonDependency ( m1, module ) ;^187^^^^^179^188^[REPLACE] return getDeepestCommonDependency ( m1, m2 ) ;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<JSModule> iter = modules.size (  ) ;^193^^^^^191^199^[REPLACE] Iterator<JSModule> iter = modules.iterator (  ) ;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule> modules [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  Iterator iter  [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  Collection modules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule dep = iter.hasNext (  ) ;^194^^^^^191^199^[REPLACE] JSModule dep = iter.next (  ) ;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule> modules [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  Iterator iter  [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  Collection modules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^while  ( iter.next (  )  )  {^195^^^^^191^199^[REPLACE] while  ( iter.hasNext (  )  )  {^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule> modules [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  Iterator iter  [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  Collection modules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^dep =  getDeepestCommonDependencyInclusive ( module, iter.next (  )  ) ;^196^^^^^191^199^[REPLACE] dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule> modules [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  Iterator iter  [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  Collection modules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^196^^^^^191^199^[ADD] dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule> modules [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  Iterator iter  [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  Collection modules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return deps;^198^^^^^191^199^[REPLACE] return dep;^[METHOD] getDeepestCommonDependencyInclusive [TYPE] JSModule [PARAMETER] JSModule> modules [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  Iterator iter  [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  Collection modules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^Set<JSModule> deps = dependencyMap.get ( module ) ;^210^^^^^209^218^[REPLACE] Set<JSModule> deps = dependencyMap.get ( m ) ;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( deps == true )  {^211^^^^^209^218^[REPLACE] if  ( deps != null )  {^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^return deps;^211^212^213^^^209^218^[ADD] if  ( deps != null )  { return deps; }^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return null;^212^^^^^209^218^[REPLACE] return deps;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return 0;^212^^^^^209^218^[REPLACE] return deps;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^deps  =  deps ;^214^^^^^209^218^[REPLACE] deps = new TreeSet<JSModule> ( new InverseDepthComparator (  )  ) ;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^addDeps ( this, m ) ;^215^^^^^209^218^[REPLACE] addDeps ( deps, m ) ;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^dependencyMap.put ( m, null ) ;^216^^^^^209^218^[REPLACE] dependencyMap.put ( m, deps ) ;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^216^^^^^209^218^[ADD] dependencyMap.put ( m, deps ) ;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return null;^217^^^^^209^218^[REPLACE] return deps;^[METHOD] getTransitiveDepsDeepestFirst [TYPE] Set [PARAMETER] JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ;^224^^^^^223^228^[REPLACE] for  ( JSModule dep : m.getDependencies (  )  )  {^[METHOD] addDeps [TYPE] void [PARAMETER] JSModule> deps JSModule m [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  Set deps  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<JSModule> iter = modules.iterator (  ) ;^239^^^^^238^261^[REPLACE] Multimap<String, JSModule> fileRefs = LinkedHashMultimap.create (  ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^239^^^^^238^261^[ADD] Multimap<String, JSModule> fileRefs = LinkedHashMultimap.create (  ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ;^240^^^^^238^261^[REPLACE] for  ( JSModule module : moduleDepths.keySet (  )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModule module : modulesInDepOrder )  { int depth = 0;^241^^^^^238^261^[REPLACE] for  ( CompilerInput jsFile : module.getInputs (  )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( this.size (  )  %  2 > 1 )  {^248^^^^^238^261^[REPLACE] if  ( refModules.size (  )  > 1 )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  (m2  ==  depModule )  {^252^^^^^238^261^[REPLACE] if  ( module != depModule )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^module.add ( path ) ;^253^^^^^238^261^[REPLACE] module.removeByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( refModules.contains ( depModule )  )  {^256^^^^^238^261^[REPLACE] if  ( !refModules.contains ( depModule )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^256^257^258^^^238^261^[ADD] if  ( !refModules.contains ( depModule )  )  { depModule.add ( file ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^depModule.add ( jsFile ) ;^257^^^^^238^261^[REPLACE] depModule.add ( file ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule depModule = getDeepestCommonDependencyInclusive ( 1 ) ;^249^^^^^238^261^[REPLACE] JSModule depModule = getDeepestCommonDependencyInclusive ( refModules ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^CompilerInput file = this.size (  ) .next (  ) .getByName ( path ) ;^250^^^^^238^261^[REPLACE] CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModule dep : module.getDependencies (  )  )  { Integer depDepth = moduleDepths.get ( dep ) ;^251^^^^^238^261^[REPLACE] for  ( JSModule module : refModules )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( m2  ==  m2 )  {^252^^^^^238^261^[REPLACE] if  ( module != depModule )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^module .getName (  )  ;^253^^^^^238^261^[REPLACE] module.removeByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^depModule.add ( file ) ;^256^257^258^^^238^261^[ADD] if  ( !refModules.contains ( depModule )  )  { depModule.add ( file ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSModule module : modulesInDepOrder )  { int depth = 0;^246^^^^^238^261^[REPLACE] for  ( String path : fileRefs.keySet (  )  )  {^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^Collection<JSModule> refModules = fileRefs .put ( m1 , 1 )  ;^247^^^^^238^261^[REPLACE] Collection<JSModule> refModules = fileRefs.get ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^JSModule depModule = getDeepestCommonDependencyInclusive ( null ) ;^249^^^^^238^261^[REPLACE] JSModule depModule = getDeepestCommonDependencyInclusive ( refModules ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^249^250^^^^238^261^[ADD] JSModule depModule = getDeepestCommonDependencyInclusive ( refModules ) ; CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[ADD]^^251^252^253^254^^238^261^[ADD] for  ( JSModule module : refModules )  { if  ( module != depModule )  { module.removeByName ( path ) ; }^[METHOD] coalesceDuplicateFiles [TYPE] void [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  Multimap fileRefs  [TYPE]  CompilerInput file  jsFile  [TYPE]  boolean false  true  [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  Collection refModules  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  String path  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( module  ||  module )  {^269^^^^^268^275^[REPLACE] if  ( m1 == m2 )  {^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int d1  d2 
[REPLACE]^return 3;^270^^^^^268^275^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int d1  d2 
[REPLACE]^return m;^270^^^^^268^275^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int d1  d2 
[REPLACE]^int d1 = getDepth ( module ) ;^272^^^^^268^275^[REPLACE] int d1 = getDepth ( m1 ) ;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int d1  d2 
[REPLACE]^int d1 = getDepth ( m1 ) ;^273^^^^^268^275^[REPLACE] int d2 = getDepth ( m2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int d1  d2 
[REPLACE]^return d2 < d2 ? -1 : d2 == d1 ? m2.getInputs (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^[REPLACE] return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID  [TYPE]  int d1  d2 
[REPLACE]^return deps.contains ( m ) ;^299^^^^^298^300^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^return deps.contains ( m ) ;^303^^^^^302^304^[REPLACE] return dependentModule;^[METHOD] getDependentModule [TYPE] JSModule [PARAMETER] [CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [TYPE]  JSModule dep  depModule  dependentModule  m  m1  m2  module  src  [TYPE]  List modulesAtDepth  modulesByDepth  [TYPE]  boolean false  true  [TYPE]  Map dependencyMap  moduleDepths  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( m1  !=  m2 )  {^269^^^^^268^275^[REPLACE] if  ( m1 == m2 )  {^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] InverseDepthComparator   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^return 1;^270^^^^^268^275^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] InverseDepthComparator   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^return 0 / 0;^270^^^^^268^275^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] InverseDepthComparator   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^int d1 = getDepth ( m2 ) ;^272^^^^^268^275^[REPLACE] int d1 = getDepth ( m1 ) ;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] InverseDepthComparator   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[ADD]^^272^273^^^^268^275^[ADD] int d1 = getDepth ( m1 ) ; int d2 = getDepth ( m2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] InverseDepthComparator   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^int d1 = getDepth ( m1 ) ;^273^^^^^268^275^[REPLACE] int d2 = getDepth ( m2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] InverseDepthComparator   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^return   -1 ;^274^^^^^268^275^[REPLACE] return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] InverseDepthComparator   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^private static final long serialVersionUID = 4;^286^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^[METHOD] compare [TYPE] int [PARAMETER] JSModule m1 JSModule m2 [CLASS] ModuleDependenceException   [TYPE]  boolean false  true  [TYPE]  JSModule m1  m2  [TYPE]  int d1  d2 
[REPLACE]^this.module =  dependentModule;^294^^^^^291^296^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] String message JSModule module JSModule dependentModule [CLASS] ModuleDependenceException   [TYPE]  JSModule dependentModule  module  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^this.dependentModule =  module;^295^^^^^291^296^[REPLACE] this.dependentModule = dependentModule;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] String message JSModule module JSModule dependentModule [CLASS] ModuleDependenceException   [TYPE]  JSModule dependentModule  module  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return dependentModule;^299^^^^^298^300^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] ModuleDependenceException   [TYPE]  JSModule dependentModule  module  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return module;^303^^^^^302^304^[REPLACE] return dependentModule;^[METHOD] getDependentModule [TYPE] JSModule [PARAMETER] [CLASS] ModuleDependenceException   [TYPE]  JSModule dependentModule  module  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
