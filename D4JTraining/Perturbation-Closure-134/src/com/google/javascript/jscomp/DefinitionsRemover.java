[REPLACE]^private static  Set<Integer> ALLOWED_TYPES = ImmutableSet.of ( Token.NAME, Token.GETPROP, Token.GETELEM ) ;^89^90^^^^89^90^[REPLACE] private static final Set<Integer> ALLOWED_TYPES = ImmutableSet.of ( Token.NAME, Token.GETPROP, Token.GETELEM ) ;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^private  Node lValue;^91^^^^^^^[REPLACE] private final Node lValue;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^protected  Node function;^167^^^^^^^[REPLACE] protected final Node function;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^private  Node value;^258^^^^^^^[REPLACE] private final Node value;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^if  ( parent != null )  {^40^^^^^37^61^[REPLACE] if  ( parent == null )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return true;^41^^^^^37^61^[REPLACE] return null;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return false;^41^^^^^37^61^[REPLACE] return null;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( n )  || n.hasChildren (  )  )  {^44^^^^^37^61^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  && n.hasChildren (  )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if ( NodeUtil.isFunction ( parent )  || parent.getFirstChild (  )  == n )  {^46^^^^^37^61^[REPLACE] } else if ( NodeUtil.isFunction ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^52^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REMOVE]^if  ( ! ( isAnonymousFunction ( parent )  )  )  {     return new NamedFunctionDefinition ( parent ) ; }else     if  ( ! ( n.getString (  ) .equals ( "" )  )  )  {         return new AnonymousFunctionDefinition ( parent ) ;     }^52^^^^^37^61^[REMOVE] ^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;Node function = parent.getParent (  ) ;return new FunctionArgumentDefinition ( function, n ) ;^54^55^56^57^58^37^61^[ADD] else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  { return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ; } else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( parent.getType (  )   ) {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^58^^^^^37^61^[REPLACE] return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = value.getParent (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  nodeew AssignmentDefinition ( parent )   ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( parent.getType (  )   ||  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new FunctionArgumentDefinition ( function, n ) ;^56^57^58^59^^37^61^[ADD] else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )   ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = parent.getString (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  )  ;^53^^^^^37^61^[REPLACE] return new AssignmentDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( parent.getType (  )   &&  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^^57^58^^^^37^61^[ADD] Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node parent = assignment.getParent (  )  ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( parent.newString (  )   ||  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REMOVE]^if  ( ! ( isAnonymousFunction ( parent )  )  )  {     return new NamedFunctionDefinition ( parent ) ; }else     if  ( ! ( n.getString (  ) .equals ( "" )  )  )  {         return new AnonymousFunctionDefinition ( parent ) ;     }^56^^^^^37^61^[REMOVE] ^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  parentew AssignmentDefinition ( parent )  ;^58^^^^^37^61^[REPLACE] return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^^57^^^^^37^61^[ADD] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = node.getParent (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( !NodeUtil.isAnonymousFunction ( value )  )  {^47^^^^^37^61^[REPLACE] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( !n.getParent (  ) .equals ( "" )  )  {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( node )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^48^^^^^37^61^[REPLACE] return new NamedFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( n.getString (  ) .equals ( "" )  )  {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new AnonymousFunctionDefinition ( parent ) ;^49^50^51^^^37^61^[ADD] else if  ( !n.getString (  ) .equals ( "" )  )  { return new AnonymousFunctionDefinition ( parent ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( value )  ;^48^^^^^37^61^[REPLACE] return new NamedFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( !NodeUtil .isFunction ( value )   {^47^^^^^37^61^[REPLACE] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^return new NamedFunctionDefinition ( parent ) ;return new AnonymousFunctionDefinition ( parent ) ;^47^48^49^50^51^37^61^[ADD] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  { return new NamedFunctionDefinition ( parent ) ; } else if  ( !n.getString (  ) .equals ( "" )  )  { return new AnonymousFunctionDefinition ( parent ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( !n.getParent (  ) .equals ( "" )  )  {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REMOVE]^if  ( ! ( isAnonymousFunction ( parent )  )  )  {     return new NamedFunctionDefinition ( parent ) ; }else     if  ( ! ( n.getString (  ) .equals ( "" )  )  )  {         return new AnonymousFunctionDefinition ( parent ) ;     }^49^^^^^37^61^[REMOVE] ^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( name )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( NodeUtil.isAssign ( parent )  ) {^52^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( parent.getType (  )   ||  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( parent.getType (  )   !=  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   Node function = parent.getParent (  ) ;return new FunctionArgumentDefinition ( function, n ) ;^56^57^58^59^^37^61^[ADD] else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^return new FunctionArgumentDefinition ( function, n ) ;^57^58^^^^37^61^[ADD] Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( NodeUtil.isObjectLitKey ( parent, parent )  )  {^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^45^^^^^37^61^[REPLACE] return new VarDefinition ( n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( isAssign ( parent )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return new AssignmentDefinition ( parent ) ; }else     if  ( isObjectLitKey ( n, parent )  )  {         return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;     }else         if  (  ( parent.getType (  )  )  ==  ( LP )  )  {             Node function = parent.getParent (  ) ;             return new FunctionArgumentDefinition ( function, n ) ;         }^46^^^^^37^61^[REMOVE] ^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new AssignmentDefinition ( parent ) ;return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^52^53^54^55^^37^61^[ADD] else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  { return new AssignmentDefinition ( parent ) ; } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  { return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   Node function = parent.getParent (  ) ;return new FunctionArgumentDefinition ( function, n ) ;^54^55^56^57^58^37^61^[ADD] else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  { return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ; } else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = value .getString (  )  ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( value )   ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new ObjectLiteralPropertyDefinition ( value, n, n.getNext (  )  )  ;^53^^^^^37^61^[REPLACE] return new AssignmentDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( NodeUtil.isObjectLitKey ( n, value )  )  {^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = node.getString (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isAnonymousFunction ( parent )  )  {^47^^^^^37^61^[REPLACE] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( value )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( n.getString (  ) .equals ( "" )  )  {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^52^53^54^55^^37^61^[ADD] else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  { return new AssignmentDefinition ( parent ) ; } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  { return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if   (  parent == null  )   {  ;^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( parent.getType (  )   ) {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = name .getString (  )  ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return false;^60^^^^^37^61^[REPLACE] return null;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^private static final Set<Integer> ALLOWED_TYPES  = null ;^89^90^^^^89^90^[REPLACE] private static final Set<Integer> ALLOWED_TYPES = ImmutableSet.of ( Token.NAME, Token.GETPROP, Token.GETELEM ) ;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^private  Node lValue;^91^^^^^^^[REPLACE] private final Node lValue;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^protected  Node function;^167^^^^^^^[REPLACE] protected final Node function;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionDefinition   [TYPE]  boolean false  true 
[REPLACE]^private  Node literal;^256^^^^^^^[REPLACE] private final Node literal;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^private  Node value;^258^^^^^^^[REPLACE] private final Node value;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
