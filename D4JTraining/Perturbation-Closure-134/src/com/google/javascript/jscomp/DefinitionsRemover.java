[REPLACE]^private static final Set<Integer> ALLOWED_TYPES  = null ;^89^90^^^^89^90^[REPLACE] private static final Set<Integer> ALLOWED_TYPES = ImmutableSet.of ( Token.NAME, Token.GETPROP, Token.GETELEM ) ;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^private  Node lValue;^91^^^^^^^[REPLACE] private final Node lValue;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^protected  Node function;^167^^^^^^^[REPLACE] protected final Node function;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^private  Node name;^257^^^^^^^[REPLACE] private final Node name;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^private  Node value;^258^^^^^^^[REPLACE] private final Node value;^ [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition  
[REPLACE]^Preconditions.checkNotNull ( value ) ;^94^^^^^93^99^[REPLACE] Preconditions.checkNotNull ( lValue ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[ADD]^^94^^^^^93^99^[ADD] Preconditions.checkNotNull ( lValue ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type "  ==  Token.name ( lValue.getType (  )  )  ) ;^95^96^97^^^93^99^[REPLACE] Preconditions.checkArgument ( ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^ALLOWED_TYPES.contains ( value.getType (  )  ) , "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^96^97^^^^93^99^[REPLACE] ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^ALLOWED_TYPES.contains ( value .getString (  )   ) , "Unexpected lValue type " + Token.name ( lValue^96^97^^^^93^99^[REPLACE] ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^"Unexpected value type " + Token.name ( lValue.getType (  )  )  ) ;^97^^^^^93^99^[REPLACE] "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^this.value = value; ;^98^^^^^93^99^[REPLACE] this.lValue = lValue;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[ADD]^^98^^^^^93^99^[ADD] this.lValue = lValue;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^super ( value ) ;^118^^^^^117^119^[REPLACE] super ( lValue ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^super ( value ) ;^134^^^^^133^135^[REPLACE] super ( lValue ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[ADD]^^134^^^^^133^135^[ADD] super ( lValue ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^super ( value ) ;^150^^^^^149^153^[REPLACE] super ( argumentName ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( name )  ) ;^151^^^^^149^153^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( function )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( value )  ) ;^152^^^^^149^153^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( argumentName )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isAssign ( value )  ) ;^152^^^^^149^153^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( argumentName )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( value )  ) ;^170^^^^^169^172^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isAssign ( node )  ) ;^170^^^^^169^172^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[ADD]^^170^171^^^^169^172^[ADD] Preconditions.checkArgument ( NodeUtil.isFunction ( node )  ) ; function = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^function =  value;^171^^^^^169^172^[REPLACE] function = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^super ( value ) ;^191^^^^^190^192^[REPLACE] super ( node ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^super ( value ) ;^206^^^^^205^209^[REPLACE] super ( node ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isAnonymousFunction ( value )  ) ;^207^208^^^^205^209^[REPLACE] Preconditions.checkArgument ( NodeUtil.isAnonymousFunction ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^NodeUtil.isAnonymousFunction ( literal )  ) ;^208^^^^^205^209^[REPLACE] NodeUtil.isAnonymousFunction ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REMOVE]^Preconditions.checkArgument ( NodeUtil.isAssign ( node )  ) ;^208^^^^^205^209^[REMOVE] ^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isAssign ( literal )  ) ;^226^^^^^225^228^[REPLACE] Preconditions.checkArgument ( NodeUtil.isAssign ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( node )  ) ;^226^^^^^225^228^[REPLACE] Preconditions.checkArgument ( NodeUtil.isAssign ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^assignment =  value;^227^^^^^225^228^[REPLACE] assignment = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^this.literal =  value;^262^^^^^261^265^[REPLACE] this.literal = lit;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lit Node name Node value [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^this.name =  value;^263^^^^^261^265^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lit Node name Node value [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^this.lValue = lValue; ;^264^^^^^261^265^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lit Node name Node value [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( literal )  ) ;^297^^^^^296^302^[REPLACE] Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[ADD]^^297^^^^^296^302^[ADD] Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( value )  ) ;^297^^^^^296^302^[REPLACE] Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of "  ==  node .newString ( null )    ==  "should be assigned a value." ) ;^298^299^300^^^296^302^[REPLACE] Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( value.getLastChild (  ) , "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^298^299^300^^^296^302^[REPLACE] Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[ADD]^^298^299^300^^^296^302^[ADD] Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^"VAR Declaration of " + value.newString (  )  + "should be assigned a value." ) ;^299^300^^^^296^302^[REPLACE] "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^name =  value;^301^^^^^296^302^[REPLACE] name = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  name  node  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( value != null )  {^40^^^^^37^61^[REPLACE] if  ( parent == null )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^return null;^40^41^42^^^37^61^[ADD] if  ( parent == null )  { return null; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return this;^41^^^^^37^61^[REPLACE] return null;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return true;^41^^^^^37^61^[REPLACE] return null;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( n )  || n.hasChildren (  )  )  {^44^^^^^37^61^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  && n.hasChildren (  )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if ( NodeUtil.isFunction ( parent )  ) {^46^^^^^37^61^[REPLACE] } else if ( NodeUtil.isFunction ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new NamedFunctionDefinition ( parent ) ;return new AnonymousFunctionDefinition ( parent ) ;^46^47^48^49^50^37^61^[ADD] else if ( NodeUtil.isFunction ( parent )  && parent.getFirstChild (  )  == n )  { if  ( !NodeUtil.isAnonymousFunction ( parent )  )  { return new NamedFunctionDefinition ( parent ) ; } else if  ( !n.getString (  ) .equals ( "" )  )  { return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  (  parent.newString (  )  == n )  {^52^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;Node function = parent.getParent (  ) ;return new FunctionArgumentDefinition ( function, n ) ;^54^55^56^57^58^37^61^[ADD] else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  { return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ; } else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( parent.getType (  )   !=  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^58^^^^^37^61^[REPLACE] return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = name.getParent (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  parentew AssignmentDefinition ( parent )  ;^58^^^^^37^61^[REPLACE] return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = value.getParent (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return new ObjectLiteralPropertyDefinition ( parent, n, n .getParent (  )   ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( parent.getType (  )   &&  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = node.getParent (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )   ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = parent.getString (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  )  ;^53^^^^^37^61^[REPLACE] return new AssignmentDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   Node function = parent.getParent (  ) ;return new FunctionArgumentDefinition ( function, n ) ;^54^55^56^57^58^37^61^[ADD] else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  { return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ; } else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( value.getType (  )   &&  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new FunctionArgumentDefinition ( function, n ) ;^56^57^58^59^^37^61^[ADD] else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return new ObjectLiteralPropertyDefinition ( parent, n, n.getParent (  )  ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^return new FunctionArgumentDefinition ( function, n ) ;^57^58^^^^37^61^[ADD] Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new ObjectLiteralPropertyDefinition ( name, n, n.getNext (  )  )  ;^53^^^^^37^61^[REPLACE] return new AssignmentDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return new ObjectLiteralPropertyDefinition ( value, n, n.getParent (  )  ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^^57^58^^^^37^61^[ADD] Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isAnonymousFunction ( parent )  )  {^47^^^^^37^61^[REPLACE] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}^49^50^51^^^37^61^[ADD] else if  ( !n.getString (  ) .equals ( "" )  )  { return new AnonymousFunctionDefinition ( parent ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( name )  ;^48^^^^^37^61^[REPLACE] return new NamedFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( n.getString (  ) .equals ( "" )  )  {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new AnonymousFunctionDefinition ( parent ) ;^49^50^51^^^37^61^[ADD] else if  ( !n.getString (  ) .equals ( "" )  )  { return new AnonymousFunctionDefinition ( parent ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^48^^^^^37^61^[REPLACE] return new NamedFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( !NodeUtil.isAnonymousFunction ( value )  )  {^47^^^^^37^61^[REPLACE] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^return new NamedFunctionDefinition ( parent ) ;return new AnonymousFunctionDefinition ( parent ) ;^47^48^49^50^51^37^61^[ADD] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  { return new NamedFunctionDefinition ( parent ) ; } else if  ( !n.getString (  ) .equals ( "" )  )  { return new AnonymousFunctionDefinition ( parent ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return new AnonymousFunctionDefinition ( parent ) ;^48^^^^^37^61^[REPLACE] return new NamedFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( node )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  (  parent.getFirstChild (  )  == n )  {^52^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( NodeUtil.isObjectLitKey ( n, node )  )  {^54^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = value .getString (  )  ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return new ObjectLiteralPropertyDefinition ( value, n, n .getParent (  )   ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( parent.getType (  )   ||  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^^57^^^^^37^61^[ADD] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( parent.getType (  )   ||  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( node.getType (  )   ||  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )  ;^45^^^^^37^61^[REPLACE] return new VarDefinition ( n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^46^^^^^37^61^[REPLACE] } else if ( NodeUtil.isFunction ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( NodeUtil.isAssign ( parent )  || parent.getFirstChild (  )  == n )  {^52^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   Node function = parent.getParent (  ) ;return new FunctionArgumentDefinition ( function, n ) ;^56^57^58^59^^37^61^[ADD] else if  ( parent.getType (  )  == Token.LP )  { Node function = parent.getParent (  ) ; return new FunctionArgumentDefinition ( function, n ) ; }^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( parent.newString (  )   !=  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( parent )    ) ;^55^^^^^37^61^[REPLACE] return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( !NodeUtil.isAnonymousFunctionode ( parent )  )  {^47^^^^^37^61^[REPLACE] if  ( !NodeUtil.isAnonymousFunction ( parent )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( n.getString (  ) .equals ( "" )  )  {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( value )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REMOVE]^if  ( ! ( n.getString (  ) .equals ( "" )  )  )  {     return new AnonymousFunctionDefinition ( parent ) ; }^47^^^^^37^61^[REMOVE] ^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( !n.getParent (  ) .equals ( "" )  )  {^49^^^^^37^61^[REPLACE] } else if  ( !n.getString (  ) .equals ( "" )  )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( NodeUtil.isAssign ( parent )  || parent.getFirstChild (  )  == n )  {^52^^^^^37^61^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^}   return new AssignmentDefinition ( parent ) ;return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^52^53^54^55^^37^61^[ADD] else if  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n )  { return new AssignmentDefinition ( parent ) ; } else if  ( NodeUtil.isObjectLitKey ( n, parent )  )  { return new ObjectLiteralPropertyDefinition ( parent, n, n.getNext (  )  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( parent.newString (  )   &&  Token.LP )  {^56^^^^^37^61^[REPLACE] } else if  ( parent.getType (  )  == Token.LP )  {^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = parent .getString (  )  ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = value.getString (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node function = name.getString (  ) ;^57^^^^^37^61^[REPLACE] Node function = parent.getParent (  ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  parentew AssignmentDefinition ( parent )  ;^45^^^^^37^61^[REPLACE] return new VarDefinition ( n ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( node )  ;^48^^^^^37^61^[REPLACE] return new NamedFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return  new AssignmentDefinition ( name )  ;^50^^^^^37^61^[REPLACE] return new AnonymousFunctionDefinition ( parent ) ;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return false;^60^^^^^37^61^[REPLACE] return null;^[METHOD] getDefinition [TYPE] DefinitionsRemover$Definition [PARAMETER] Node n Node parent [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return value;^103^^^^^102^104^[REPLACE] return lValue;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return true;^108^^^^^107^109^[REPLACE] return null;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return ;^123^^^^^122^124^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "Can't remove a FunctionArgumentDefinition" ) ; ;^139^140^^^^138^141^[REPLACE] throw new IllegalArgumentException ( "Can't remove external name-only definition" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^^139^140^^^^138^141^[ADD] throw new IllegalArgumentException ( "Can't remove external name-only definition" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "Can't remove external name-only definition" ) ; ;^157^158^^^^156^159^[REPLACE] throw new IllegalArgumentException ( "Can't remove a FunctionArgumentDefinition" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return function.getLastChild (  ) ;^176^^^^^175^177^[REPLACE] return function.getFirstChild (  ) ;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return lValue;^181^^^^^180^182^[REPLACE] return function;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^function.getParent (  ) ;^196^^^^^195^197^[REPLACE] function.detachFromParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^function.newString ( function.getFirstChild (  ) , Node.newString ( Token.NAME, "" )  ) ;^214^215^^^^212^216^[REPLACE] function.replaceChild ( function.getFirstChild (  ) , Node.newString ( Token.NAME, "" )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^function.replaceChild ( function .getLastChild (  )  , Node.newString ( Token.NAME, "" )  ) ;^214^215^^^^212^216^[REPLACE] function.replaceChild ( function.getFirstChild (  ) , Node.newString ( Token.NAME, "" )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node.replaceChild ( Token.NAME, "" )  ) ;^215^^^^^212^216^[REPLACE] Node.newString ( Token.NAME, "" )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node parent = assignment.getString (  ) ;^233^^^^^231^237^[REPLACE] Node parent = assignment.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[ADD]^^233^^^^^231^237^[ADD] Node parent = assignment.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node last = assignment .getFirstChild (  )  ;^234^^^^^231^237^[REPLACE] Node last = assignment.getLastChild (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^assignment .removeFirstChild (  )  ;^235^^^^^231^237^[REPLACE] assignment.removeChild ( last ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^parent.replaceChild ( assignment, name ) ;^236^^^^^231^237^[REPLACE] parent.replaceChild ( assignment, last ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return assignment.getLastChild (  ) ;^241^^^^^240^242^[REPLACE] return assignment.getFirstChild (  ) ;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return assignment.getFirstChild (  ) ;^246^^^^^245^247^[REPLACE] return assignment.getLastChild (  ) ;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^literal.replaceChild ( name ) ;^269^^^^^268^271^[REPLACE] literal.removeChild ( name ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^literal.replaceChild ( value ) ;^270^^^^^268^271^[REPLACE] literal.removeChild ( value ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return new Node ( Token.GETPROP, new Node ( Token.OBJECTLIT ) , name.getNext (  )  ) ;^280^281^282^^^274^283^[REPLACE] return new Node ( Token.GETPROP, new Node ( Token.OBJECTLIT ) , name.cloneNode (  )  ) ;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^return lValue;^287^^^^^286^288^[REPLACE] return value;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node var = name.getString (  ) ;^306^^^^^305^313^[REPLACE] Node var = name.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( value.newString (  )   &&  var.getLastChild (  ) , "AST should be normalized first" ) ;^307^308^^^^305^313^[REPLACE] Preconditions.checkState ( var.getFirstChild (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( value.newString (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^307^308^^^^305^313^[REPLACE] Preconditions.checkState ( var.getFirstChild (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( value.getFirstChild (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^307^308^^^^305^313^[REPLACE] Preconditions.checkState ( var.getFirstChild (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^Node parent = value.getString (  ) ;^309^^^^^305^313^[REPLACE] Node parent = var.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^Node rValue = name.getFirstChild (  ) ;^310^^^^^305^313^[REPLACE] Node rValue = name.removeFirstChild (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( var.getType (  )   ==  Token.FOR ) ;^311^^^^^305^313^[REPLACE] Preconditions.checkState ( parent.getType (  )  != Token.FOR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[ADD]^^311^312^^^^305^313^[ADD] Preconditions.checkState ( parent.getType (  )  != Token.FOR ) ; parent.replaceChild ( var, NodeUtil.newExpr ( rValue )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( node.getType (  )  != Token.FOR ) ;^311^^^^^305^313^[REPLACE] Preconditions.checkState ( parent.getType (  )  != Token.FOR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^parent.replaceChild ( value, NodeUtil.newExpr ( rValue )  ) ;^312^^^^^305^313^[REPLACE] parent.replaceChild ( var, NodeUtil.newExpr ( rValue )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[ADD]^^312^^^^^305^313^[ADD] parent.replaceChild ( var, NodeUtil.newExpr ( rValue )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^parent.replaceChild ( var, NodeUtil.newExpr ( var )  ) ;^312^^^^^305^313^[REPLACE] parent.replaceChild ( var, NodeUtil.newExpr ( rValue )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^return lValue;^317^^^^^316^318^[REPLACE] return name;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^return name .getLastChild (  )  ;^322^^^^^321^323^[REPLACE] return name.getFirstChild (  ) ;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] DefinitionsRemover IncompleteDefinition UnknownDefinition ExternalNameOnlyDefinition FunctionArgumentDefinition FunctionDefinition NamedFunctionDefinition AnonymousFunctionDefinition AssignmentDefinition ObjectLiteralPropertyDefinition VarDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^private static final Set<Integer> ALLOWED_TYPES ;^89^90^^^^89^90^[REPLACE] private static final Set<Integer> ALLOWED_TYPES = ImmutableSet.of ( Token.NAME, Token.GETPROP, Token.GETELEM ) ;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^private  Node lValue;^91^^^^^^^[REPLACE] private final Node lValue;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node argumentName  assignment  function  lValue  last  lit  literal  n  name  node  parent  rValue  value  var  [TYPE]  boolean false  true 
[REPLACE]^lValue   ;^94^^^^^93^99^[REPLACE] Preconditions.checkNotNull ( lValue ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type "  ||  Token.name ( lValue.getType (  )  )  ) ;^95^96^97^^^93^99^[REPLACE] Preconditions.checkArgument ( ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[ADD]^^95^96^97^^^93^99^[ADD] Preconditions.checkArgument ( ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[REPLACE]^"Unexpected lValue type " +   lValue.getType (  )   ) ;^97^^^^^93^99^[REPLACE] "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[REPLACE]^ALLOWED_TYPES.contains ( lValue.getType (  )  ) , "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^97^^^^^93^99^[REPLACE] "Unexpected lValue type " + Token.name ( lValue.getType (  )  )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[REPLACE]^this.lValue =  null;^98^^^^^93^99^[REPLACE] this.lValue = lValue;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[REPLACE]^return null;^103^^^^^102^104^[REPLACE] return lValue;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[REPLACE]^return true;^108^^^^^107^109^[REPLACE] return null;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] IncompleteDefinition   [TYPE]  Set ALLOWED_TYPES  [TYPE]  Node lValue  [TYPE]  boolean false  true 
[REPLACE]^return ;^123^^^^^122^124^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] UnknownDefinition   [TYPE]  boolean false  true 
[ADD]^^134^^^^^133^135^[ADD] super ( lValue ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lValue [CLASS] ExternalNameOnlyDefinition   [TYPE]  boolean false  true  [TYPE]  Node lValue 
[REPLACE]^return ;^139^140^^^^138^141^[REPLACE] throw new IllegalArgumentException ( "Can't remove external name-only definition" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ExternalNameOnlyDefinition   [TYPE]  boolean false  true 
[REPLACE]^super ( function ) ;^150^^^^^149^153^[REPLACE] super ( argumentName ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true  [TYPE]  Node argumentName  function 
[ADD]^^150^151^^^^149^153^[ADD] super ( argumentName ) ; Preconditions.checkArgument ( NodeUtil.isFunction ( function )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true  [TYPE]  Node argumentName  function 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( argumentName )  ) ;^151^^^^^149^153^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( function )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true  [TYPE]  Node argumentName  function 
[ADD]^^151^^^^^149^153^[ADD] Preconditions.checkArgument ( NodeUtil.isFunction ( function )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true  [TYPE]  Node argumentName  function 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( function )  ) ;^152^^^^^149^153^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( argumentName )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true  [TYPE]  Node argumentName  function 
[ADD]^^152^^^^^149^153^[ADD] Preconditions.checkArgument ( NodeUtil.isName ( argumentName )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true  [TYPE]  Node argumentName  function 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( function )  ) ;^152^^^^^149^153^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( argumentName )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node function Node argumentName [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true  [TYPE]  Node argumentName  function 
[REPLACE]^return ;^157^158^^^^156^159^[REPLACE] throw new IllegalArgumentException ( "Can't remove a FunctionArgumentDefinition" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionArgumentDefinition   [TYPE]  boolean false  true 
[REPLACE]^protected  Node function;^167^^^^^^^[REPLACE] protected final Node function;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionDefinition   [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( function )  ) ;^170^^^^^169^172^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] FunctionDefinition   [TYPE]  Node function  node  [TYPE]  boolean false  true 
[REPLACE]^function =  null;^171^^^^^169^172^[REPLACE] function = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] FunctionDefinition   [TYPE]  Node function  node  [TYPE]  boolean false  true 
[REPLACE]^return function;^176^^^^^175^177^[REPLACE] return function.getFirstChild (  ) ;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] FunctionDefinition   [TYPE]  Node function  node  [TYPE]  boolean false  true 
[REPLACE]^return function.getFirstChild (  ) ;^181^^^^^180^182^[REPLACE] return function;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] FunctionDefinition   [TYPE]  Node function  node  [TYPE]  boolean false  true 
[REPLACE]^function.detachFromParent (  ) ;^191^^^^^190^192^[REPLACE] super ( node ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] NamedFunctionDefinition   [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^super ( node ) ;^196^^^^^195^197^[REPLACE] function.detachFromParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NamedFunctionDefinition   [TYPE]  boolean false  true 
[REPLACE]^Node.newString ( Token.NAME, "" )  ) ;^206^^^^^205^209^[REPLACE] super ( node ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] AnonymousFunctionDefinition   [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^NodeUtil.isAnonymousFunction ( node )  ;^207^208^^^^205^209^[REPLACE] Preconditions.checkArgument ( NodeUtil.isAnonymousFunction ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] AnonymousFunctionDefinition   [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node    ) ;^208^^^^^205^209^[REPLACE] NodeUtil.isAnonymousFunction ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] AnonymousFunctionDefinition   [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^function.replaceChild ( function.getFirstChild (  ) , Node .getFirstChild (  )   ) ;^214^215^^^^212^216^[REPLACE] function.replaceChild ( function.getFirstChild (  ) , Node.newString ( Token.NAME, "" )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnonymousFunctionDefinition   [TYPE]  boolean false  true 
[REPLACE]^function.replaceChild ( function .replaceChild (  )  , Node.newString ( Token.NAME, "" )  ) ;^214^215^^^^212^216^[REPLACE] function.replaceChild ( function.getFirstChild (  ) , Node.newString ( Token.NAME, "" )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnonymousFunctionDefinition   [TYPE]  boolean false  true 
[REPLACE]^Node .getFirstChild (  )   ) ;^215^^^^^212^216^[REPLACE] Node.newString ( Token.NAME, "" )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnonymousFunctionDefinition   [TYPE]  boolean false  true 
[ADD]^^215^^^^^212^216^[ADD] Node.newString ( Token.NAME, "" )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnonymousFunctionDefinition   [TYPE]  boolean false  true 
[REPLACE]^private  Node assignment;^223^^^^^^^[REPLACE] private final Node assignment;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isAssign ( assignment )  ) ;^226^^^^^225^228^[REPLACE] Preconditions.checkArgument ( NodeUtil.isAssign ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] AssignmentDefinition   [TYPE]  Node assignment  node  [TYPE]  boolean false  true 
[ADD]^^226^227^^^^225^228^[ADD] Preconditions.checkArgument ( NodeUtil.isAssign ( node )  ) ; assignment = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] AssignmentDefinition   [TYPE]  Node assignment  node  [TYPE]  boolean false  true 
[REPLACE]^assignment =  null;^227^^^^^225^228^[REPLACE] assignment = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] AssignmentDefinition   [TYPE]  Node assignment  node  [TYPE]  boolean false  true 
[ADD]^^227^^^^^225^228^[ADD] assignment = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] AssignmentDefinition   [TYPE]  Node assignment  node  [TYPE]  boolean false  true 
[REPLACE]^Node parent = assignment.getLastChild (  ) ;^233^^^^^231^237^[REPLACE] Node parent = assignment.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^Node last = assignment.getFirstChild (  ) ;^234^^^^^231^237^[REPLACE] Node last = assignment.getLastChild (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[ADD]^^234^^^^^231^237^[ADD] Node last = assignment.getLastChild (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^assignment.removeChild ( parent ) ;^235^^^^^231^237^[REPLACE] assignment.removeChild ( last ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^parent .getLastChild (  )  ;^236^^^^^231^237^[REPLACE] parent.replaceChild ( assignment, last ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return assignment.getLastChild (  ) ;^241^^^^^240^242^[REPLACE] return assignment.getFirstChild (  ) ;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return assignment.getFirstChild (  ) ;^246^^^^^245^247^[REPLACE] return assignment.getLastChild (  ) ;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] AssignmentDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^private  Node literal;^256^^^^^^^[REPLACE] private final Node literal;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^private  Node value;^258^^^^^^^[REPLACE] private final Node value;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node assignment  last  node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.literal =  value;^262^^^^^261^265^[REPLACE] this.literal = lit;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lit Node name Node value [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node lit  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^this.name =  value;^263^^^^^261^265^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lit Node name Node value [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node lit  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^this.value =  name;^264^^^^^261^265^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node lit Node name Node value [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node lit  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^literal .cloneNode (  )  ;^269^^^^^268^271^[REPLACE] literal.removeChild ( name ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node lit  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^literal.removeChild ( name ) ;^270^^^^^268^271^[REPLACE] literal.removeChild ( value ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] ObjectLiteralPropertyDefinition   [TYPE]  Node lit  literal  name  value  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( name )  ) ;^297^^^^^296^302^[REPLACE] Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] VarDefinition   [TYPE]  Node name  node  [TYPE]  boolean false  true 
[ADD]^^297^^^^^296^302^[ADD] Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] VarDefinition   [TYPE]  Node name  node  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.newExpr ( name )  ) ;^297^^^^^296^302^[REPLACE] Preconditions.checkArgument ( NodeUtil.isVarDeclaration ( node )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] VarDefinition   [TYPE]  Node name  node  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of "  ^  node.getString (  )   ^  "should be assigned a value." ) ;^298^299^300^^^296^302^[REPLACE] Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] VarDefinition   [TYPE]  Node name  node  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( name.hasChildren (  ) , "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^298^299^300^^^296^302^[REPLACE] Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] VarDefinition   [TYPE]  Node name  node  [TYPE]  boolean false  true 
[REPLACE]^"VAR Declaration of " + name.getString (  )  + "should be assigned a value." ) ;^299^300^^^^296^302^[REPLACE] "VAR Declaration of " + node.getString (  )  + "should be assigned a value." ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] VarDefinition   [TYPE]  Node name  node  [TYPE]  boolean false  true 
[REPLACE]^name =  null;^301^^^^^296^302^[REPLACE] name = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] VarDefinition   [TYPE]  Node name  node  [TYPE]  boolean false  true 
[REPLACE]^Node var = name.getString (  ) ;^306^^^^^305^313^[REPLACE] Node var = name.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( var.getFirstChild (  )   !=  var.getLastChild (  ) , "AST should be normalized first" ) ;^307^308^^^^305^313^[REPLACE] Preconditions.checkState ( var.getFirstChild (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( rValue.getFirstChild (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^307^308^^^^305^313^[REPLACE] Preconditions.checkState ( var.getFirstChild (  )  == var.getLastChild (  ) , "AST should be normalized first" ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^Node parent = rValue.getParent (  ) ;^309^^^^^305^313^[REPLACE] Node parent = var.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^Node rValue = name.getFirstChild (  ) ;^310^^^^^305^313^[REPLACE] Node rValue = name.removeFirstChild (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   ==  Token.FOR ) ;^311^^^^^305^313^[REPLACE] Preconditions.checkState ( parent.getType (  )  != Token.FOR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( var.getType (  )  != Token.FOR ) ;^311^^^^^305^313^[REPLACE] Preconditions.checkState ( parent.getType (  )  != Token.FOR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REMOVE]^Preconditions.checkArgument ( node.hasChildren (  ) , "VAR Declaration of " + node.getString (  )  +^311^^^^^305^313^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^parent.replaceChild ( var, NodeUtil.newExpr ( node )  ) ;^312^^^^^305^313^[REPLACE] parent.replaceChild ( var, NodeUtil.newExpr ( rValue )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REMOVE]^Node parent = var.getParent (  ) ;^312^^^^^305^313^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^parent.replaceChild ( var,   var    ) ;^312^^^^^305^313^[REPLACE] parent.replaceChild ( var, NodeUtil.newExpr ( rValue )  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^return name.getFirstChild (  ) ;^317^^^^^316^318^[REPLACE] return name;^[METHOD] getLValue [TYPE] Node [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
[REPLACE]^return name.getLastChild (  ) ;^322^^^^^321^323^[REPLACE] return name.getFirstChild (  ) ;^[METHOD] getRValue [TYPE] Node [PARAMETER] [CLASS] VarDefinition   [TYPE]  Node name  node  parent  rValue  var  [TYPE]  boolean false  true 
