[REPLACE]^protected  CodingConvention convention;^52^^^^^^^[REPLACE] protected final CodingConvention convention;^ [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  
[REPLACE]^private final Visitor<JSType> restrictUndefinedVisitor  = null ;^179^180^^^^179^238^[REPLACE] private final Visitor<JSType> restrictUndefinedVisitor = new Visitor<JSType> (  )  {^ [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  
[REPLACE]^private final Visitor<JSType> restrictNullVisitor ;^244^245^^^^244^303^[REPLACE] private final Visitor<JSType> restrictNullVisitor = new Visitor<JSType> (  )  {^ [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  
[REPLACE]^private  boolean resultEqualsValue;^469^^^^^^^[REPLACE] private final boolean resultEqualsValue;^ [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  
[REPLACE]^if   (  propVar != null  )   {  ;^121^^^^^117^149^[REPLACE] if  ( nameVar != null )  {^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^JSType nameVarType = nameVar.getType (  ) ;nameVarType = node.getJSType (  ) ;^121^122^123^124^125^117^149^[ADD] if  ( nameVar != null )  { JSType nameVarType = nameVar.getType (  ) ; if  ( nameVarType == null )  { nameVarType = node.getJSType (  ) ; }^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^if   (  nameVar != null  )   {  ;^123^^^^^117^149^[REPLACE] if  ( nameVarType == null )  {^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^nameVarType = node.getJSType (  ) ;^123^124^125^^^117^149^[ADD] if  ( nameVarType == null )  { nameVarType = node.getJSType (  ) ; }^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^propVarType = node.getJSType (  )  ;^124^^^^^117^149^[REPLACE] nameVarType = node.getJSType (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^^124^^^^^117^149^[ADD] nameVarType = node.getJSType (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^return propVarType;^126^^^^^117^149^[REPLACE] return nameVarType;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^JSType falseType = nameVar.getType (  ) ;^122^^^^^117^149^[REPLACE] JSType nameVarType = nameVar.getType (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^if  ( qualifiedName != this  )  {^132^^^^^117^149^[REPLACE] if  ( qualifiedName == null )  {^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^^132^133^134^^^117^149^[ADD] if  ( qualifiedName == null )  { return null; }^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^return null;  ;^133^^^^^117^149^[REPLACE] return null;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^if  ( null == null )  {^137^^^^^117^149^[REPLACE] if  ( propVar != null )  {^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^propVarType = propVar.getType (  ) ;^137^138^139^^^117^149^[ADD] if  ( propVar != null )  { propVarType = propVar.getType (  ) ; }^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^propVarType = node.getJSType (  )  ;^138^^^^^117^149^[REPLACE] propVarType = propVar.getType (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^if  (nameVarType != null )  {^140^^^^^117^149^[REPLACE] if  ( propVarType == null )  {^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^^141^^^^^117^149^[ADD] propVarType = node.getJSType (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^if  (nameVarType != true )  {^143^^^^^117^149^[REPLACE] if  ( propVarType == null )  {^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^propVarType = getNativeType ( UNKNOWN_TYPE ) ;^143^144^145^^^117^149^[ADD] if  ( propVarType == null )  { propVarType = getNativeType ( UNKNOWN_TYPE ) ; }^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^origType =  ( origType == null )  ? getNativeType ( UNKNOWN_TYPE )  : origType  ;^144^^^^^117^149^[REPLACE] propVarType = getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^nameVarType = node.getJSType (  )  ;^141^^^^^117^149^[REPLACE] propVarType = node.getJSType (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^return nameVarType;  ;^126^^^^^117^149^[REPLACE] return nameVarType;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^return false;^128^^^^^117^149^[REPLACE] return null;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^return this;^133^^^^^117^149^[REPLACE] return null;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^return nameVarType;^146^^^^^117^149^[REPLACE] return propVarType;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^StaticSlot<JSType> nameVar = scope.getSlot ( node.getType (  )  ) ;^120^^^^^117^149^[REPLACE] StaticSlot<JSType> nameVar = scope.getSlot ( node.getString (  )  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^JSType origType = node.getJSType (  )  ;^122^^^^^117^149^[REPLACE] JSType nameVarType = nameVar.getType (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^String qualifiedName = node.getString (  ) ;^131^^^^^117^149^[REPLACE] String qualifiedName = node.getQualifiedName (  ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^JSType> nameVar = scope.getSlot ( node.getString (  )  )  ;^135^^^^^117^149^[REPLACE] StaticSlot<JSType> propVar = scope.getSlot ( qualifiedName ) ;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^^136^^^^^117^149^[ADD] JSType propVarType = null;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^return this;^148^^^^^117^149^[REPLACE] return null;^[METHOD] getTypeIfRefinable [TYPE] JSType [PARAMETER] Node node FlowScope scope [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  StaticSlot nameVar  propVar  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType nameVarType  propVarType  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^origType  =  origType;^167^^^^^156^174^[REPLACE] origType = origType == null ? getNativeType ( UNKNOWN_TYPE )  : origType;^[METHOD] declareNameInScope [TYPE] void [PARAMETER] FlowScope scope Node node JSType type [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType origType  type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^String qualifiedName = node.getString (  ) ;^163^^^^^156^174^[REPLACE] String qualifiedName = node.getQualifiedName (  ) ;^[METHOD] declareNameInScope [TYPE] void [PARAMETER] FlowScope scope Node node JSType type [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType origType  type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^JSType nameVarType = nameVar.getType (  )  ;^166^^^^^156^174^[REPLACE] JSType origType = node.getJSType (  ) ;^[METHOD] declareNameInScope [TYPE] void [PARAMETER] FlowScope scope Node node JSType type [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType origType  type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[ADD]^^172^^^^^156^174^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] declareNameInScope [TYPE] void [PARAMETER] FlowScope scope Node node JSType type [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType origType  type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  Node node  [TYPE]  String qualifiedName  value  [TYPE]  FlowScope scope 
[REPLACE]^JSType nameVarType = nameVar.getType (  )  ;^359^^^^^349^365^[REPLACE] JSType type = enumElementType.getPrimitiveType (  ) .visit ( this ) ;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  String qualifiedName  value  [TYPE]  EnumElementType enumElementType 
[REPLACE]^if  ( type == null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^360^^^^^349^365^[REPLACE] if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  String qualifiedName  value  [TYPE]  EnumElementType enumElementType 
[ADD]^return enumElementType;return type;^360^361^362^363^364^349^365^[ADD] if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  { return enumElementType; } else { return type; }^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  String qualifiedName  value  [TYPE]  EnumElementType enumElementType 
[REPLACE]^return topType;  ;^363^^^^^360^364^[REPLACE] return type;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  String qualifiedName  value  [TYPE]  EnumElementType enumElementType 
[REPLACE]^return enumElementType;  ;^361^^^^^349^365^[REPLACE] return enumElementType;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  String qualifiedName  value  [TYPE]  EnumElementType enumElementType 
[REPLACE]^return topType;  ;^363^^^^^349^365^[REPLACE] return type;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType type  [TYPE]  Visitor restrictNullVisitor  restrictUndefinedVisitor  [TYPE]  ChainableReverseAbstractInterpreter firstLink  lastLink  nextLink  [TYPE]  CodingConvention convention  [TYPE]  String qualifiedName  value  [TYPE]  EnumElementType enumElementType 
[REPLACE]^JSType type = enumElementType.getPrimitiveType (  )  .getLeastSupertype ( type )  ;^359^^^^^349^365^[REPLACE] JSType type = enumElementType.getPrimitiveType (  ) .visit ( this ) ;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] RestrictByTypeOfResultVisitor   [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  EnumElementType enumElementType 
[REPLACE]^if  ( type == false && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^360^^^^^349^365^[REPLACE] if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] RestrictByTypeOfResultVisitor   [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  EnumElementType enumElementType 
[REPLACE]^return type;  ;^363^^^^^360^364^[REPLACE] return type;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] RestrictByTypeOfResultVisitor   [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  EnumElementType enumElementType 
[REPLACE]^return enumElementType;  ;^361^^^^^349^365^[REPLACE] return enumElementType;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] RestrictByTypeOfResultVisitor   [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  EnumElementType enumElementType 
[REPLACE]^return type;  ;^363^^^^^349^365^[REPLACE] return type;^[METHOD] caseEnumElementType [TYPE] JSType [PARAMETER] EnumElementType enumElementType [CLASS] RestrictByTypeOfResultVisitor   [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  EnumElementType enumElementType 
[REPLACE]^private final  byte  value;^462^^^^^^^[REPLACE] private final String value;^[METHOD] caseVoidType [TYPE] JSType [PARAMETER] [CLASS] RestrictByOneTypeOfResultVisitor   [TYPE]  boolean false  true 
