[REPLACE]^private  Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^51^52^^^^51^65^[REPLACE] private final Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^private final Visitor<JSType> restrictToNotArrayVisitor ;^70^71^^^^70^76^[REPLACE] private final Visitor<JSType> restrictToNotArrayVisitor = new RestrictByFalseTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^private final Visitor<JSType> restrictToObjectVisitor ;^82^83^^^^82^98^[REPLACE] private final Visitor<JSType> restrictToObjectVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^private final Visitor<JSType> restrictToNotObjectVisitor ;^103^104^^^^103^114^[REPLACE] private final Visitor<JSType> restrictToNotObjectVisitor = new RestrictByFalseTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^callee.getFirstChild (  )  ;^125^^^^^124^191^[REPLACE] super ( convention, typeRegistry ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^if  ( null.second )  {^130^^^^^124^191^[REPLACE] if  ( p.second )  {^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return false;^133^^^^^130^134^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( this.first ) ;^131^^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^if  ( 1.second )  {^139^^^^^124^191^[REPLACE] if  ( p.second )  {^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( null.first ) ;^142^^^^^139^143^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return restrictParameter  (  param, paramType, blindScope, restricter, outcome  )  ;  ;^140^^^^^124^191^[REPLACE] return getNativeType ( NULL_TYPE ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^if  ( this.second )  {^148^^^^^124^191^[REPLACE] if  ( p.second )  {^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return false;^152^^^^^148^153^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( false.first )  ) ;^149^150^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( true.first ) ;^131^^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return false;^133^^^^^124^191^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( this.first ) ;^142^^^^^124^191^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined  (  getRestrictedWithoutNull  (  p.first  )    )  ;  ;^149^150^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return null;  ;^152^^^^^124^191^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( null.first, "string", p.second ) ;^158^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( null.first, "boolean", p.second ) ;^163^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult  (  p.first, "number", p.second  )  ;  ;^168^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( null.first, "function", p.second ) ;^173^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return p.first == null ? null : visit  (  visitor  )  ;  ;^180^^^^^124^191^[REPLACE] return p.first == null ? null : p.first.visit ( visitor ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return p.first != this ? this : p.first.visit ( visitor ) ;;^187^^^^^124^191^[REPLACE] return p.first == null ? null : p.first.visit ( visitor ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = true.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^178^179^^^^124^191^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = this.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^185^186^^^^124^191^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^if  ( condition.getType (  )  == CALL || condition.getChildCount (  )  == 2 )  {^195^^^^^194^217^[REPLACE] if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( callee.getType (  )   !=  GETPROP )  {^198^^^^^194^217^[REPLACE] if  ( callee.getType (  )  == GETPROP )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;Node left = callee.getFirstChild (  ) ;Node right = callee.getLastChild (  ) ;^198^199^200^201^202^194^217^[ADD] if  ( callee.getType (  )  == GETPROP )  { JSType paramType =  getTypeIfRefinable ( param, blindScope ) ; if  ( paramType != null )  { Node left = callee.getFirstChild (  ) ; Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if   (  type != null  )   {  ;^200^^^^^194^217^[REPLACE] if  ( paramType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^Node left = callee.getFirstChild (  ) ;Node right = callee.getLastChild (  ) ;^200^201^202^203^^194^217^[ADD] if  ( paramType != null )  { Node left = callee.getFirstChild (  ) ; Node right = callee.getLastChild (  ) ; if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  &&^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  (  "goog".equals ( left.getString (  )  )  || right.getType (  )  == STRING )  {^203^204^^^^194^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == null )  {^207^^^^^203^211^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^207^208^209^210^^203^211^[ADD] if  ( restricter != null )  { return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter  (  param, paramType, blindScope, restricter, outcome  )  ;  ;^208^209^^^^203^211^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^205^206^^^^203^211^[ADD] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( this == null )  {^207^^^^^194^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( callee, paramType, blindScope, restricter, outcome ) ;^208^209^^^^194^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter  (  param, paramType, blindScope, restricter, outcome  )  ;  ;^208^209^^^^194^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = param.getLastChild (  ) ;^201^^^^^194^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = param.getLastChild (  ) ;^202^^^^^194^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getString (  )  ) ;^205^206^^^^194^217^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( left.getType (  )  == NAME ) {^203^204^^^^194^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( 1 == null )  {^207^^^^^203^211^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( callee, paramType, blindScope, restricter, outcome ) ;^208^209^^^^203^211^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == null )  {^207^^^^^194^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^199^^^^^194^217^[ADD] JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = callee.getLastChild (  )  ;^201^^^^^194^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node param = condition.getLastChild (  )  ;^202^^^^^194^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( paramType == null )  {^200^^^^^194^217^[REPLACE] if  ( paramType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == this )  {^207^^^^^194^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( param, paramType, blindScope, null, outcome ) ;^208^209^^^^194^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( param, paramType, blindScope, restricter, true ) ;^208^209^^^^194^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = callee.getLastChild (  ) ;^201^^^^^194^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^205^206^^^^194^217^[ADD] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( left.getType (  )  == NAME || "goog".equals ( left.getString (  )  )  || right.getType (  )  == STRING )  {^203^204^^^^194^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^203^204^205^206^^194^217^[ADD] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  { Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( param, paramType, blindScope, restricter, true ) ;^208^209^^^^203^211^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getType (  )  ) ;^205^206^^^^203^211^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^196^^^^^194^217^[ADD] Node callee = condition.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node param = right .getFirstChild (  )  ;^197^^^^^194^217^[REPLACE] Node param = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = param.getFirstChild (  ) ;^201^^^^^194^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^202^^^^^194^217^[ADD] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( callee.getType (  )   &&  GETPROP )  {^198^^^^^194^217^[REPLACE] if  ( callee.getType (  )  == GETPROP )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getString (  )  ) ;^205^206^^^^203^211^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == false )  {^207^^^^^194^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^201^^^^^194^217^[ADD] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = callee.getFirstChild (  ) ;^202^^^^^194^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( left.getType (  )  == NAME || "goog".equals ( left.getType (  )  )  || right.getType (  )  == STRING )  {^203^204^^^^194^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^JSType> visitor =  ( p.second )  ? restrictToArrayVisitor : restrictToNotArrayVisitor  ;^199^^^^^194^217^[REPLACE] JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = param .getLastChild (  )  ;^201^^^^^194^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( paramType == false )  {^200^^^^^194^217^[REPLACE] if  ( paramType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^207^208^209^210^^194^217^[ADD] if  ( restricter != null )  { return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^Node right = callee.getLastChild (  ) ;^201^202^^^^194^217^[ADD] Node left = callee.getFirstChild (  ) ; Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getType (  )  ) ;^205^206^^^^194^217^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( this == null )  {^207^^^^^203^211^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node callee = right.getFirstChild (  ) ;^196^^^^^194^217^[REPLACE] Node callee = condition.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = callee.getLastChild (  )  ;^197^^^^^194^217^[REPLACE] Node param = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = param .getFirstChild (  )  ;^202^^^^^194^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, true ) ;^215^216^^^^194^217^[REPLACE] return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
