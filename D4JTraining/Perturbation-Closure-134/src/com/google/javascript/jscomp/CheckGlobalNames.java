[REPLACE]^private  CheckLevel level;^32^^^^^^^[REPLACE] private final CheckLevel level;^ [CLASS] CheckGlobalNames  
[REPLACE]^private GlobalNamespace namespace  = null ;^34^^^^^^^[REPLACE] private GlobalNamespace namespace = null;^ [CLASS] CheckGlobalNames  
[REPLACE]^static final DiagnosticType UNDEFINED_NAME_WARNING ;^37^38^39^^^37^39^[REPLACE] static final DiagnosticType UNDEFINED_NAME_WARNING = DiagnosticType.warning ( "JSC_UNDEFINED_NAME", "{0} is never defined" ) ;^ [CLASS] CheckGlobalNames  
[REPLACE]^static final DiagnosticType STRICT_MODULE_DEP_QNAME  = null ;^41^42^43^44^^41^45^[REPLACE] static final DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", "module {0} cannot reference {2}, defined in " +^ [CLASS] CheckGlobalNames  
[REPLACE]^if  ( name.props == true )  {^85^^^^^84^101^[REPLACE] if  ( name.props != null )  {^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[ADD]^^85^86^^^89^84^101^[ADD] if  ( name.props != null )  { for  ( Name prop : name.props )  { boolean propIsDefined = false;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^if   (  !isDefined  )   {  ;^90^^^^^84^101^[REPLACE] if  ( nameIsDefined )  {^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[ADD]^^90^91^^93^94^84^101^[ADD] if  ( nameIsDefined )  {  propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )   >=  prop.globalSets + prop.localSets > 0 ) ;^93^94^^^^84^101^[REPLACE] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[ADD]^^86^87^^89^^85^100^[ADD] for  ( Name prop : name.props )  {  boolean propIsDefined = false;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[ADD]^^93^94^^^^85^100^[ADD] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^boolean propIsDefined = true;^89^^^^^85^100^[REPLACE] boolean propIsDefined = false;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^propIsDefined =  ( propertyMustBeInitializedByFullName ( prop )  ;^93^94^^^^84^101^[REPLACE] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )   ==  prop.globalSets + prop.localSets > 0 >> 1 ) ;^93^94^^^^85^100^[REPLACE] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^Ref ref  ;^86^^^^^85^100^[REPLACE] for  ( Name prop : name.props )  {^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^Name prop  ;^106^^^^^103^127^[REPLACE] Ref declaration = name.declaration;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( isDefined )  {^107^^^^^103^127^[REPLACE] if  ( !isDefined )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == null )  {^108^^^^^103^127^[REPLACE] if  ( declaration != null )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportRefToUndefinedName ( name, ref ) ;^109^^^^^103^127^[REPLACE] reportRefToUndefinedName ( name, declaration ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration ==ref )  {^108^^^^^103^127^[REPLACE] if  ( declaration != null )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if   (  namespace == null  )   {  ;^113^^^^^103^127^[REPLACE] if  ( name.refs != null )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( isDefined )  {^116^^^^^103^127^[REPLACE] if  ( !isDefined )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == this && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^116^124^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportRefToUndefinedName ( name, declaration )  ;^117^^^^^103^127^[REPLACE] reportRefToUndefinedName ( name, ref ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == false && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^getName (  )  ;^122^^^^^119^123^[REPLACE] reportBadModuleReference ( name, ref ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^JSModuleGraph moduleGraph = compiler.report (  ) ;^114^^^^^113^126^[REPLACE] JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^Name prop  ;^115^^^^^113^126^[REPLACE] for  ( Ref ref : name.refs )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  (  ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^116^124^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[ADD]^^119^120^121^122^123^116^124^[ADD] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  { reportBadModuleReference ( name, ref ) ; }^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportRefToUndefinedName ( name, declaration ) ;^117^^^^^103^127^[REPLACE] reportRefToUndefinedName ( name, ref ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[ADD]^^119^120^121^122^123^103^127^[ADD] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  { reportBadModuleReference ( name, ref ) ; }^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportBadModuleReference ( name, declaration ) ;^122^^^^^119^123^[REPLACE] reportBadModuleReference ( name, ref ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^for  ( Ref declaration : name.refs )  {^115^^^^^113^126^[REPLACE] for  ( Ref ref : name.refs )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
