[REPLACE]^private  AbstractCompiler compiler;^31^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CheckGlobalNames  
[REPLACE]^private GlobalNamespace namespace  = null ;^34^^^^^^^[REPLACE] private GlobalNamespace namespace = null;^ [CLASS] CheckGlobalNames  
[REPLACE]^static final DiagnosticType UNDEFINED_NAME_WARNING  = null ;^37^38^39^^^37^39^[REPLACE] static final DiagnosticType UNDEFINED_NAME_WARNING = DiagnosticType.warning ( "JSC_UNDEFINED_NAME", "{0} is never defined" ) ;^ [CLASS] CheckGlobalNames  
[REPLACE]^static  DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", "module {0} cannot reference {2}, defined in " +^41^42^43^44^^41^45^[REPLACE] static final DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", "module {0} cannot reference {2}, defined in " +^ [CLASS] CheckGlobalNames  
[REPLACE]^this.compiler =  null;^51^^^^^50^53^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING 
[REPLACE]^this.level =  null;^52^^^^^50^53^[REPLACE] this.level = level;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING 
[REPLACE]^this.namespace =  null;^60^^^^^59^62^[REPLACE] this.namespace = namespace;^[METHOD] injectNamespace [TYPE] CheckGlobalNames [PARAMETER] GlobalNamespace namespace [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING 
[REPLACE]^return null;^61^^^^^59^62^[REPLACE] return this;^[METHOD] injectNamespace [TYPE] CheckGlobalNames [PARAMETER] GlobalNamespace namespace [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING 
[REPLACE]^if  ( namespace != false )  {^67^^^^^64^74^[REPLACE] if  ( namespace == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Node externs  root  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^namespace =  new GlobalNamespace ( compiler, null ) ;^68^^^^^64^74^[REPLACE] namespace = new GlobalNamespace ( compiler, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Node externs  root  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^for  ( Name prop : name.props )  {^71^^^^^64^74^[REPLACE] for  ( Name name : namespace.getNameForest (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Node externs  root  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[ADD]^^71^72^73^^^64^74^[ADD] for  ( Name name : namespace.getNameForest (  )  )  { checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Node externs  root  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^if  ( name.props == null )  {^85^^^^^84^101^[REPLACE] if  ( name.props != null )  {^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^if  ( !isDefined )  {^90^^^^^84^101^[REPLACE] if  ( nameIsDefined )  {^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )   &&  prop.globalSets + prop.localSets > 0 ) ;^93^94^^^^84^101^[REPLACE] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )   !=  prop.globalSets + prop.localSets > 0 ) ;^93^94^^^^84^101^[REPLACE] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^for  ( Ref ref : name.refs )  { if  ( !isDefined )  {^86^^^^^84^101^[REPLACE] for  ( Name prop : name.props )  {^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^boolean propIsDefined = true;^89^^^^^84^101^[REPLACE] boolean propIsDefined = false;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[ADD]^^90^91^^93^94^84^101^[ADD] if  ( nameIsDefined )  {  propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  ;^93^94^^^^84^101^[REPLACE] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^propIsDefined =  ( propertyMustBeInitializedByFullName ( prop )   |  prop.globalSets + prop.localSets > 0L ) ;^93^94^^^^84^101^[REPLACE] propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[METHOD] checkDescendantNames [TYPE] void [PARAMETER] Name name boolean nameIsDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  nameIsDefined  propIsDefined  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name  prop 
[REPLACE]^for  ( Name prop : name.props )  {^106^^^^^103^127^[REPLACE] Ref declaration = name.declaration;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( isDefined )  {^107^^^^^103^127^[REPLACE] if  ( !isDefined )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == true )  {^108^^^^^103^127^[REPLACE] if  ( declaration != null )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportRefToUndefinedName ( name, ref ) ;^109^^^^^103^127^[REPLACE] reportRefToUndefinedName ( name, declaration ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == this  )  {^108^^^^^103^127^[REPLACE] if  ( declaration != null )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportBadModuleReference ( name, ref ) ;^109^^^^^103^127^[REPLACE] reportRefToUndefinedName ( name, declaration ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[ADD]^^109^^^^^103^127^[ADD] reportRefToUndefinedName ( name, declaration ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( name.refs == null )  {^113^^^^^103^127^[REPLACE] if  ( name.refs != null )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[ADD]^^113^114^115^116^117^103^127^[ADD] if  ( name.refs != null )  { JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ; for  ( Ref ref : name.refs )  { if  ( !isDefined )  { reportRefToUndefinedName ( name, ref ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( isDefined )  {^116^^^^^103^127^[REPLACE] if  ( !isDefined )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == this && declaration.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportBadModuleReference ( name, declaration ) ;^122^^^^^103^127^[REPLACE] reportBadModuleReference ( name, ref ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^reportRefToUndefinedName ( name, declaration ) ;^117^^^^^103^127^[REPLACE] reportRefToUndefinedName ( name, ref ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == true ) {^119^120^121^^^103^127^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[ADD]^^119^120^121^122^123^103^127^[ADD] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  { reportBadModuleReference ( name, ref ) ; }^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^JSModuleGraph moduleGraph = compiler.report (  ) ;^114^^^^^103^127^[REPLACE] JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^for  ( Name prop : name.props )  {^115^^^^^103^127^[REPLACE] for  ( Ref ref : name.refs )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == null && declaration.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[REPLACE]^if  ( declaration == false && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^[REPLACE] if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[METHOD] validateName [TYPE] void [PARAMETER] Name name boolean isDefined [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref declaration  ref  [TYPE]  boolean false  isDefined  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name name 
[ADD]^^131^132^133^^^129^134^[ADD] JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[METHOD] reportBadModuleReference [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^133^^^^^129^134^[REPLACE] name.fullName (  )  )  ) ;^[METHOD] reportBadModuleReference [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[ADD]^^133^^^^^129^134^[ADD] name.fullName (  )  )  ) ;^[METHOD] reportBadModuleReference [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^while  ( name.parent != this  !=  name.parent.globalSets + name.parent.localSets == 0 )  {^138^139^^^^136^146^[REPLACE] while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  {^[METHOD] reportRefToUndefinedName [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[ADD]^^138^139^140^^^136^146^[ADD] while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  { name = name.parent;^[METHOD] reportRefToUndefinedName [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^name =  null.parent;^140^^^^^136^146^[REPLACE] name = name.parent;^[METHOD] reportRefToUndefinedName [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^compiler .getModuleGraph (  )   ) ;^143^144^145^^^136^146^[REPLACE] compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[METHOD] reportRefToUndefinedName [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[ADD]^^143^144^145^^^136^146^[ADD] compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[METHOD] reportRefToUndefinedName [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^145^^^^^136^146^[REPLACE] name.fullName (  )  )  ) ;^[METHOD] reportRefToUndefinedName [TYPE] void [PARAMETER] Name name Ref ref [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  GlobalNamespace namespace  [TYPE]  Name name 
[REPLACE]^return true ;^161^162^^^^152^163^[REPLACE] return name.parent != null && name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^[METHOD] propertyMustBeInitializedByFullName [TYPE] boolean [PARAMETER] Name name [CLASS] CheckGlobalNames   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  GlobalNamespace namespace  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  [TYPE]  Name name 
