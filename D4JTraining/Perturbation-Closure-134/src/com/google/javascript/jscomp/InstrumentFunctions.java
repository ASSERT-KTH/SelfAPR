[REPLACE]^private  AbstractCompiler compiler;^60^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  FunctionNames functionNames;^61^^^^^^^[REPLACE] private final FunctionNames functionNames;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  String templateFilename;^62^^^^^^^[REPLACE] private final String templateFilename;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private final  double  appNameStr;^63^^^^^^^[REPLACE] private final String appNameStr;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  String initCodeSource;^64^^^^^^^[REPLACE] private final String initCodeSource;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private   char  reportFunctionExitName;^67^^^^^^^[REPLACE] private final String reportFunctionExitName;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  String appNameSetter;^68^^^^^^^[REPLACE] private final String appNameSetter;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  List<String> removable;^167^^^^^^^[REPLACE] private final List<String> removable;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^this.compiler =  null;^86^^^^^85^122^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.functionId = functionId  ;^87^^^^^85^122^[REPLACE] this.functionNames = functionNames;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.templateFilename =  reportFunctionName;^88^^^^^85^122^[REPLACE] this.templateFilename = templateFilename;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^89^^^^^85^122^[ADD] this.appNameStr = appNameStr;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Instrumentation.Builder builder = Instrumentation.getInitList (  ) ;^91^^^^^85^122^[REPLACE] Instrumentation.Builder builder = Instrumentation.newBuilder (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^TextFormat.merge ( readable, builder ) ;^92^93^94^95^96^85^122^[ADD] try { TextFormat.merge ( readable, builder ) ; } catch  ( IOException e )  { compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " +^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^TextFormat.merge ( readable, 1 ) ;^93^^^^^85^122^[REPLACE] TextFormat.merge ( readable, builder ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.initCodeSource ;^98^^^^^85^122^[REPLACE] this.initCodeSource = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.reportFunctionName = ""  ;^99^^^^^85^122^[REPLACE] this.definedFunctionName = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.definedFunctionName = ""  ;^100^^^^^85^122^[REPLACE] this.reportFunctionName = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^this.appNameSetter = "";^101^102^^^^85^122^[ADD] this.reportFunctionExitName = ""; this.appNameSetter = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.appNameSetter  =  this.appNameSetter ;^102^^^^^85^122^[REPLACE] this.appNameSetter = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.declarationsToRemove  =  this.declarationsToRemove ;^103^^^^^85^122^[REPLACE] this.declarationsToRemove = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return;  ;^104^^^^^85^122^[REPLACE] return;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^107^^^^^85^122^[ADD] Instrumentation template = builder.build (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Builder builder = newBuilder (  )  ;^109^^^^^85^122^[REPLACE] StringBuilder initCodeSourceBuilder = new StringBuilder (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^for  ( String line : template .getReportExit (  )   )  {^110^^^^^85^122^[REPLACE] for  ( String line : template.getInitList (  )  )  {^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^initCodeSourceBuilder.append ( line )  ;^111^^^^^85^122^[REPLACE] initCodeSourceBuilder.append ( line ) .append ( "\n" ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^initCodeSourceBuilder.append ( line ) .append ( "\n" )  ;^111^^^^^85^122^[REPLACE] initCodeSourceBuilder.append ( line ) .append ( "\n" ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^111^^^^^85^122^[ADD] initCodeSourceBuilder.append ( line ) .append ( "\n" ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^110^111^112^^^85^122^[ADD] for  ( String line : template.getInitList (  )  )  { initCodeSourceBuilder.append ( line ) .append ( "\n" ) ; }^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^113^^^^^85^122^[ADD] this.initCodeSource = initCodeSourceBuilder.toString (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.reportFunctionName = template.getReportCall (  )  ;^115^^^^^85^122^[REPLACE] this.definedFunctionName = template.getReportDefined (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^116^^^^^85^122^[ADD] this.reportFunctionName = template.getReportCall (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^117^^^^^85^122^[ADD] this.reportFunctionExitName = template.getReportExit (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^118^^^^^85^122^[ADD] this.appNameSetter = template.getAppNameSetter (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.declarationsToRemove =  ImmutableList.copyOf ( null.getDeclarationToRemoveList (  )  ) ;^120^121^^^^85^122^[REPLACE] this.declarationsToRemove = ImmutableList.copyOf ( template.getDeclarationToRemoveList (  )  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node beforeChild = n  ;^126^^^^^125^157^[REPLACE] Node initCode = null;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( initCodeSource.isEmpty (  )  )  {^127^^^^^125^157^[REPLACE] if  ( !initCodeSource.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( externs == null ) {^130^^^^^125^157^[REPLACE] if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^130^131^132^133^134^125^157^[ADD] if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  { initCode = initCodeRoot.removeChildren (  ) ; } else { return; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return;  ;^133^^^^^130^134^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^initCode =  root.removeChildren (  ) ;^131^^^^^125^157^[REPLACE] initCode = initCodeRoot.removeChildren (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return;  ;^133^^^^^125^157^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node initCodeRoot = compiler.parseSyntheticCode (reportFunctionName  ":init", initCodeSource ) ;^128^129^^^^125^157^[REPLACE] Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( externs == null && initCodeRoot.getFirstChild (  )  != null )  {^130^^^^^125^157^[REPLACE] if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^initCode = initCodeRoot.removeChildren (  ) ;return;^130^131^132^133^134^125^157^[ADD] if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  { initCode = initCodeRoot.removeChildren (  ) ; } else { return; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^initCode =  externs.removeChildren (  ) ;^131^^^^^125^157^[REPLACE] initCode = initCodeRoot.removeChildren (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename  ":init", initCodeSource ) ;^128^129^^^^125^157^[REPLACE] Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^NodeTraversal .getModule (  )  ;^137^138^^^^125^157^[REPLACE] NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^NodeTraversal.traverse ( compiler, initCodeRoot, new InstrumentCallback (  )  ) ;^139^^^^^125^157^[REPLACE] NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^139^^^^^125^157^[ADD] NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( appNameSetter.isEmpty (  )  )  {^141^^^^^125^157^[REPLACE] if  ( !appNameSetter.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newNumber ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^142^143^144^^^125^157^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, initCodeRoot ) ;^145^^^^^125^157^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = compiler.getNodeForCodeInsertion ( false ) ;^147^^^^^125^157^[REPLACE] Node addingRoot = compiler.getNodeForCodeInsertion ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^145^^^^^125^157^[ADD] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  (root == null )  {^152^^^^^125^157^[REPLACE] if  ( initCode != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^153^154^^^^125^157^[ADD] Node addingRoot = compiler.getNodeForCodeInsertion ( null ) ; addingRoot.addChildrenToFront ( initCode ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = compiler.getNodeForCodeInsertion ( this ) ;^153^^^^^125^157^[REPLACE] Node addingRoot = compiler.getNodeForCodeInsertion ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( n.getType (  )   ==  Token.FUNCTION )  {^283^^^^^282^333^[REPLACE] if  ( n.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REMOVE]^if  (  ( n.getType (  )  )  !=  ( RETURN )  )  {     return false; }^283^^^^^282^333^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^return;  ;^284^^^^^282^333^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^int id = functionNames.getFunctionId ( parent ) ;^287^^^^^282^333^[REPLACE] int id = functionNames.getFunctionId ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( functionId  > functionId )  {^288^^^^^282^333^[REPLACE] if  ( id < 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^return;  ;^290^^^^^282^333^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if   (  !definedFunctionName.isEmpty  (    )    )   {  ;^293^^^^^282^333^[REPLACE] if  ( !reportFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node .getString (  )  , Node.newNumber ( id )  ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^298^^^^^282^333^[ADD] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node body = n.getFirstChild (  ) .removeChild (  ) .getNext (  ) ;^294^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( functionId )  ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, parent ) ;^298^^^^^282^333^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if   (  !definedFunctionName.isEmpty  (    )    )   {  ;^303^^^^^282^333^[REPLACE] if  ( !reportFunctionExitName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^304^305^^^^282^333^[ADD] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ; ( new InstrumentReturns ( id )  ) .process ( body ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^( new InstrumentReturns ( id )  ) .process ( body ) ;^304^305^^^^282^333^[ADD] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ; ( new InstrumentReturns ( id )  ) .process ( body ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if   (  !reportFunctionExitName.isEmpty  (    )    )   {  ;^308^^^^^282^333^[REPLACE] if  ( !definedFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if   (  NodeUtil.isVarDeclaration  (  n  )    )   {  ;^315^^^^^282^333^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^315^330^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^323^324^325^326^^315^330^[ADD] if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^for  ( Node ancestor : n.getParent (  )  )  {^321^^^^^315^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^324^^^^^315^330^[ADD] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^beforeChild =  parent;^327^^^^^315^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node beforeChild = parent;^320^^^^^315^330^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node beforeChild = n  ;^321^^^^^315^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^322^^^^^315^330^[ADD] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  compiler.getNodeForCodeInsertion ( null ) ;^317^^^^^282^333^[REPLACE] addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Builder builder = newBuilder (  )  ;^316^^^^^282^333^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^282^333^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^323^324^325^326^^282^333^[ADD] if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  parent;^324^^^^^282^333^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  compiler.getNodeForCodeInsertion ( null ) ;^317^^^^^319^330^[REPLACE] addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^324^^^^^319^330^[ADD] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^beforeChild =  parent;^327^^^^^319^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newString ( functionId )  ) ;^309^310^311^^^319^330^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node expr = NodeUtil.newExpr ( parent ) ;^312^^^^^319^330^[REPLACE] Node expr = NodeUtil.newExpr ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^314^^^^^319^330^[ADD] Node addingRoot = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Builder builder = newBuilder (  )  ;^316^^^^^319^330^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^320^321^322^323^324^319^330^[ADD] Node beforeChild = n; for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^321^322^323^324^325^319^330^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^int type = ancestor .getString (  )  ;^322^^^^^319^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  (  type == Token.SCRIPT )  {^323^^^^^315^330^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  parent;^324^^^^^315^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^beforeChild =  null;^327^^^^^315^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = null  ;^320^^^^^315^330^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^321^322^323^324^325^315^330^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^for  ( Node ancestor : parent.getAncestors (  )  )  {^321^^^^^319^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  parent;^324^^^^^319^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^beforeChild =  null;^327^^^^^319^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.addChildBefore ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^309^310^311^^^319^330^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = null  ;^320^^^^^319^330^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^int type = n.getType (  ) ;^322^^^^^319^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^private  List<String> removable;^167^^^^^^^[REPLACE] private final List<String> removable;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^private  int functionId;^213^^^^^^^[REPLACE] private final int functionId;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )   ==  Token.FUNCTION )  {^283^^^^^282^333^[REPLACE] if  ( n.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^return;  ;^284^^^^^282^333^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^287^^^^^282^333^[ADD] int id = functionNames.getFunctionId ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( id  >=  0 )  {^288^^^^^282^333^[REPLACE] if  ( id < 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^return;  ;^290^^^^^282^333^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( reportFunctionName.isEmpty (  )  )  {^293^^^^^282^333^[REPLACE] if  ( !reportFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^294^^^^^282^333^[ADD] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newString ( id )  ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, parent ) ;^298^^^^^282^333^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node .newString ( null )   ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^298^299^^^^282^333^[ADD] Node expr = new Node ( Token.EXPR_RESULT, call ) ; body.addChildToFront ( expr ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( reportFunctionExitName.isEmpty (  )  )  {^303^^^^^282^333^[REPLACE] if  ( !reportFunctionExitName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( definedFunctionName.isEmpty (  )  )  {^308^^^^^282^333^[REPLACE] if  ( !definedFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( NodeUtil.newExpr ( n )  )  {^315^^^^^282^333^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^JSModule module = t.getModule (  ) ;addingRoot = compiler.getNodeForCodeInsertion ( module ) ;addingRoot.addChildToFront ( expr ) ;^315^316^317^318^^282^333^[ADD] if  ( NodeUtil.isFunctionDeclaration ( n )  )  { JSModule module = t.getModule (  ) ; addingRoot = compiler.getNodeForCodeInsertion ( module ) ; addingRoot.addChildToFront ( expr ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^315^330^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^addingRoot = ancestor;break;^323^324^325^326^^315^330^[ADD] if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^321^322^323^324^325^315^330^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  parent;^324^^^^^315^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^beforeChild =  parent;^327^^^^^315^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node addingRoot = null  ;^320^^^^^315^330^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^322^^^^^315^330^[ADD] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  compiler.getNodeForCodeInsertion ( null ) ;^317^^^^^282^333^[REPLACE] addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^316^^^^^282^333^[ADD] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^282^333^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^addingRoot = ancestor;break;^323^324^325^326^^282^333^[ADD] if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  parent;^324^^^^^282^333^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^for  ( Node ancestor : n.getType (  )  )  {^321^^^^^319^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^317^318^^^^319^330^[ADD] addingRoot = compiler.getNodeForCodeInsertion ( module ) ; addingRoot.addChildToFront ( expr ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  parent;^324^^^^^319^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^beforeChild =  parent;^327^^^^^319^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newString ( id )  ) ;^309^310^311^^^319^330^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = NodeUtil.isFunctionDeclaration ( parent ) ;^312^^^^^319^330^[REPLACE] Node expr = NodeUtil.newExpr ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node addingRoot = this;^314^^^^^319^330^[REPLACE] Node addingRoot = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = newExpr ( call )  ;^316^^^^^319^330^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node beforeChild = parent;^320^^^^^319^330^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node beforeChild = n  ;^321^^^^^319^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = n.getType (  ) ;^322^^^^^319^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if   (  id < 0  )   {  ;^315^^^^^282^333^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^for  ( Node ancestor : n.getType (  )  )  {^321^^^^^315^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^320^321^322^323^324^315^330^[ADD] Node beforeChild = n; for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node beforeChild = n  ;^321^^^^^315^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = parent.getType (  ) ;^322^^^^^315^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = newExpr ( call )  ;^316^^^^^282^333^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^324^^^^^282^333^[ADD] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  compiler.getNodeForCodeInsertion ( null ) ;^317^^^^^319^330^[REPLACE] addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = NodeUtil.newExpr ( parent ) ;^312^^^^^319^330^[REPLACE] Node expr = NodeUtil.newExpr ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^321^322^323^324^325^319^330^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = parent.getType (  ) ;^322^^^^^319^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
