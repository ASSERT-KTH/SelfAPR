[REPLACE]^this.compiler =  null;^46^^^^^44^48^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Supplier) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true 
[REPLACE]^this.safeNameIdSupplier =  null;^47^^^^^44^48^[REPLACE] this.safeNameIdSupplier = safeNameIdSupplier;^[METHOD] <init> [TYPE] Supplier) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true 
[REPLACE]^Node newFnNode = fnNode .addChildBefore ( callNode , newFnNode )  ;^63^^^^^62^107^[REPLACE] Node newFnNode = fnNode.cloneTree (  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^makeLocalNamesUnique ( newFnNode, needsDefaultResult ) ;^67^^^^^62^107^[REPLACE] makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( newBlock ) ;^71^72^^^^62^107^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( newFnNode ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^LinkedHashMap<String, Node> args = FunctionArgumentInjector .findModifiedParameters ( newFnNode )  ;^73^74^75^^^62^107^[REPLACE] LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^String name = entry.getKey (  ) ;^76^^^^^62^107^[REPLACE] boolean hasArgs = !args.isEmpty (  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if  ( node.hasChildren (  )  )  {^77^^^^^62^107^[REPLACE] if  ( hasArgs )  {^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, true, namesToAlias, compiler .getUniqueNameIdSupplier (  )   ) ;^78^79^^^^62^107^[REPLACE] FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^newFnNode, args, namesToAlias, compiler.getUniqueNameIdSupplier (  )  ) ;^79^^^^^62^107^[REPLACE] newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node newBlock = NodeUtil.getFunctionBody ( newBlock ) ;^82^^^^^62^107^[REPLACE] Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^newBlock .hasChildren (  )  ;^84^^^^^62^107^[REPLACE] newBlock.detachFromParent (  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[ADD]^^84^^^^^62^107^[ADD] newBlock.detachFromParent (  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if  ( node.hasChildren (  )  )  {^86^^^^^62^107^[REPLACE] if  ( hasArgs )  {^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node inlineResult = aliasAndInlineArguments ( newBlock, 1, namesToAlias ) ;^87^88^^^^62^107^[REPLACE] Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node inlineResult = aliasAndInlineArguments ( newBlock, null, namesToAlias ) ;^87^88^^^^62^107^[REPLACE] Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if  ( needsDefaultResult )  {^97^^^^^62^107^[REPLACE] if  ( isCallInLoop )  {^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^fixUnitializedVarDeclarations ( newFnNode ) ;^98^^^^^62^107^[REPLACE] fixUnitializedVarDeclarations ( newBlock ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^String labelName = getLabelNameForFunction ( resultName ) ;^101^^^^^62^107^[REPLACE] String labelName = getLabelNameForFunction ( fnName ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node injectableBlock = replaceReturns ( newBlock, resultName, resultName, needsDefaultResult ) ;^102^103^^^^62^107^[REPLACE] Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Preconditions.checkState ( injectableBlock == null ) ;^104^^^^^62^107^[REPLACE] Preconditions.checkState ( injectableBlock != null ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^return newFnNode;^106^^^^^62^107^[REPLACE] return injectableBlock;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if  ( NodeUtil.isLoopStructure ( name )  )  {^117^^^^^114^134^[REPLACE] if  ( NodeUtil.isLoopStructure ( n )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^return root;^118^^^^^114^134^[REPLACE] return;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^122^^^^^114^134^[REPLACE] if  ( NodeUtil.isVar ( n )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^if  ( name.hasChildren (  )  )  {^125^^^^^114^134^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[ADD]^name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^125^126^127^^^114^134^[ADD] if  ( !name.hasChildren (  )  )  { name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ; }^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^name .addChildrenToBack ( name )  ;^126^^^^^114^134^[REPLACE] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[ADD]^^126^^^^^114^134^[ADD] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^name.addChildToBack ( NodeUtil .newVarNode ( null , n )   ) ;^126^^^^^114^134^[REPLACE] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^return root;^128^^^^^114^134^[REPLACE] return;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^Node nameame = n.getFirstChild (  ) ;^123^^^^^114^134^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^label.addChildToFront ( name ) ;^126^^^^^114^134^[REPLACE] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^Node nameame = n .getLastChild (  )  ;^123^^^^^114^134^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^for  ( Node c = name.getFirstChild (  ) ; c == false; c = c.getNext (  )  )  {^131^^^^^114^134^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^fixUnitializedVarDeclarations ( newBlock ) ;^132^^^^^114^134^[REPLACE] fixUnitializedVarDeclarations ( c ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  ;^131^^^^^114^134^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^for  ( Node c = name.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[ADD]^^131^132^133^^^114^134^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { fixUnitializedVarDeclarations ( c ) ; }^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getCodingConvention (  ) ,^142^143^144^145^^141^148^[REPLACE] NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[METHOD] makeLocalNamesUnique [TYPE] void [PARAMETER] Node fnNode boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  isCallInLoop  true  [TYPE]  Node fnNode 
[REPLACE]^compiler.getCodingConvention (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^145^146^147^^^141^148^[REPLACE] compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[METHOD] makeLocalNamesUnique [TYPE] void [PARAMETER] Node fnNode boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  isCallInLoop  true  [TYPE]  Node fnNode 
[REPLACE]^String name  =  fnName;^154^^^^^153^156^[REPLACE] String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[METHOD] getLabelNameForFunction [TYPE] String [PARAMETER] String fnName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  name  [TYPE]  boolean false  true 
[REPLACE]^return "JSCompiler_inline_label_" + fnName + "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^[REPLACE] return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[METHOD] getLabelNameForFunction [TYPE] String [PARAMETER] String fnName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  name  [TYPE]  boolean false  true 
[REPLACE]^if  ( namesToAlias != null ) {^172^^^^^170^215^[REPLACE] if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^193^^^^^172^214^[REPLACE] if  ( namesToAlias.contains ( name )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = null.getKey (  ) .cloneTree (  ) ;^194^^^^^172^214^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^194^195^^^^172^214^[ADD] Node newValue = entry.getValue (  ) .cloneTree (  ) ; Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newNode = NodeUtil .newUndefinedNode (  )  ;^195^^^^^172^214^[REPLACE] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^195^196^^^^172^214^[ADD] Node newNode = NodeUtil.newVarNode ( name, newValue ) ; newVars.add ( 0, newNode ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return newValue;^213^^^^^172^214^[REPLACE] return result;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Map<String, Node> newArgMap = Maps.newHashMap ( 0 ) ;^184^^^^^172^214^[REPLACE] Map<String, Node> newArgMap = Maps.newHashMap ( argMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node retVal = NodeUtil.newUndefinedNode (  ) ;^188^^^^^172^214^[REPLACE] List<Node> newVars = Lists.newLinkedList (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String name = entry.getKey (  ) ;^191^^^^^172^214^[REPLACE] for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String name = null.getKey (  ) ;^192^^^^^172^214^[REPLACE] String name = entry.getKey (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = entry .getKey (  )  .cloneTree (  ) ;^194^^^^^172^214^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newNode = NodeUtil.newVarNode ( name, result ) ;^195^^^^^172^214^[REPLACE] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^195^^^^^172^214^[ADD] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, false, newArgMap ) ;^203^204^^^^172^214^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^203^204^^^^172^214^[ADD] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node label = new Node ( Token.LABEL ) ;^209^^^^^172^214^[REPLACE] for  ( Node n : newVars )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return newValue;^177^^^^^170^215^[REPLACE] return result;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector.inject ( result, true, argMap ) ;^174^175^^^^170^215^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^193^^^^^170^215^[REPLACE] if  ( namesToAlias.contains ( name )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = 0 .getKey (  )  .cloneTree (  ) ;^194^^^^^170^215^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node retVal = NodeUtil.newUndefinedNode (  ) ;^195^^^^^170^215^[REPLACE] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return newValue;^213^^^^^170^215^[REPLACE] return result;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, false, argMap ) ;^174^175^^^^170^215^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Map<String, Node> newArgMap = Maps.newHashMap ( this ) ;^184^^^^^170^215^[REPLACE] Map<String, Node> newArgMap = Maps.newHashMap ( argMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node retVal = NodeUtil.newUndefinedNode (  ) ;^188^^^^^170^215^[REPLACE] List<Node> newVars = Lists.newLinkedList (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String name = entry.getKey (  ) ;^191^^^^^170^215^[REPLACE] for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^191^192^193^194^195^170^215^[ADD] for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  { String name = entry.getKey (  ) ; if  ( namesToAlias.contains ( name )  )  { Node newValue = entry.getValue (  ) .cloneTree (  ) ; Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String name = null.getKey (  ) ;^192^^^^^170^215^[REPLACE] String name = entry.getKey (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^192^^^^^170^215^[ADD] String name = entry.getKey (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = this.getValue (  ) .cloneTree (  ) ;^194^^^^^170^215^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^194^^^^^170^215^[ADD] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector.inject ( result, this, newArgMap ) ;^203^204^^^^170^215^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node label = new Node ( Token.LABEL ) ;^209^^^^^170^215^[REPLACE] for  ( Node n : newVars )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkNotNull ( root ) ;^241^^^^^240^284^[REPLACE] Preconditions.checkNotNull ( block ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Preconditions.checkNotNull ( resultName ) ;^242^^^^^240^284^[REPLACE] Preconditions.checkNotNull ( labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^242^^^^^240^284^[ADD] Preconditions.checkNotNull ( labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node root = root;^244^^^^^240^284^[REPLACE] Node root = block;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^boolean hasReturnAtExit = true;^246^^^^^240^284^[REPLACE] boolean hasReturnAtExit = false;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^int returnCount = NodeUtil.newVarNode ( block, Token.RETURN ) ;^247^^^^^240^284^[REPLACE] int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( returnCount  <=  0L )  {^248^^^^^240^284^[REPLACE] if  ( returnCount > 0 )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( true )  {^252^^^^^240^284^[REPLACE] if  ( hasReturnAtExit )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^convertLastReturnToStatement ( block, resultName ) ;returnCount--;^252^253^254^255^^240^284^[ADD] if  ( hasReturnAtExit )  { convertLastReturnToStatement ( block, resultName ) ; returnCount--; }^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^convertLastReturnToStatement ( block, labelName ) ;^253^^^^^240^284^[REPLACE] convertLastReturnToStatement ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^253^^^^^240^284^[ADD] convertLastReturnToStatement ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( returnCount  !=  0 )  {^257^^^^^240^284^[REPLACE] if  ( returnCount > 0 )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^257^258^^^261^240^284^[ADD] if  ( returnCount > 0 )  {  replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^root =  name;^273^^^^^240^284^[REPLACE] root = newRoot;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node retVal = NodeUtil.newUndefinedNode (  ) ;^264^^^^^240^284^[REPLACE] Node label = new Node ( Token.LABEL ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node name = Node .getLastChild (  )  ;^265^^^^^240^284^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node retVal = NodeUtil.newUndefinedNode (  ) ;^269^^^^^240^284^[REPLACE] Node newRoot = new Node ( Token.BLOCK ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^hasReturnAtExit =  hasReturnAtExit ( root ) ;^249^^^^^240^284^[REPLACE] hasReturnAtExit = hasReturnAtExit ( block ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^273^^^^^240^284^[ADD] root = newRoot;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node name = Node.newString ( Token.NAME, resultName ) ;^265^^^^^240^284^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^252^^^^^240^284^[REPLACE] if  ( hasReturnAtExit )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^convertLastReturnToStatement ( root, resultName ) ;^253^^^^^240^284^[REPLACE] convertLastReturnToStatement ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( returnCount  <=  0 >>> 2 )  {^257^^^^^240^284^[REPLACE] if  ( returnCount > 0 )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^269^^^^^240^284^[ADD] Node newRoot = new Node ( Token.BLOCK ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node name = Node.replaceChild ( Token.NAME, resultName ) ;^265^^^^^240^284^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( true ) {^279^^^^^240^284^[REPLACE] if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^addDummyAssignment ( root, resultName ) ;^280^^^^^240^284^[REPLACE] addDummyAssignment ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^280^^^^^240^284^[ADD] addDummyAssignment ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^return newRoot;^283^^^^^240^284^[REPLACE] return root;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Preconditions.checkArgument ( resultNode.getType (  )   !=  Token.BLOCK ) ;^295^^^^^294^302^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[METHOD] addDummyAssignment [TYPE] void [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^Preconditions.checkArgument ( resultNode .getNext (  )   == Token.BLOCK ) ;^295^^^^^294^302^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[METHOD] addDummyAssignment [TYPE] void [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^Node label = new Node ( Token.LABEL ) ;^298^^^^^294^302^[REPLACE] Node retVal = NodeUtil.newUndefinedNode (  ) ;^[METHOD] addDummyAssignment [TYPE] void [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^Node resultNode = createAssignStatementNode ( resultName, resultNode ) ;^299^^^^^294^302^[REPLACE] Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[METHOD] addDummyAssignment [TYPE] void [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^node.addChildToBack ( resultNode ) ;^301^^^^^294^302^[REPLACE] node.addChildrenToBack ( resultNode ) ;^[METHOD] addDummyAssignment [TYPE] void [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^Node ret = block .getFirstChild (  )  ;^314^^^^^312^323^[REPLACE] Node ret = block.getLastChild (  ) ;^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REPLACE]^Preconditions.checkArgument ( ret.getType (  )   ||  Token.RETURN ) ;^315^^^^^312^323^[REPLACE] Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REPLACE]^Preconditions.checkArgument ( resultNode.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^[REPLACE] Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REMOVE]^parent.addChildBefore ( resultNode, breakNode ) ;^315^^^^^312^323^[REMOVE] ^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REPLACE]^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^316^^^^^312^323^[REPLACE] Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[ADD]^^316^^^^^312^323^[ADD] Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REPLACE]^if  ( resultNode !=ret )  {^318^^^^^312^323^[REPLACE] if  ( resultNode == null )  {^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REPLACE]^block.addChildBefore ( ret, resultNode ) ;^321^^^^^312^323^[REPLACE] block.replaceChild ( ret, resultNode ) ;^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REPLACE]^block.addChildToBack ( ret ) ;^319^^^^^312^323^[REPLACE] block.removeChild ( ret ) ;^[METHOD] convertLastReturnToStatement [TYPE] void [PARAMETER] Node block String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node block  resultNode  ret 
[REPLACE]^Node nameNode = Node.replaceChild ( Token.NAME, name ) ;^332^^^^^329^335^[REPLACE] Node nameNode = Node.newString ( Token.NAME, name ) ;^[METHOD] createAssignStatementNode [TYPE] Node [PARAMETER] String name Node expression [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  expression  nameNode 
[REPLACE]^Node assign = new Node ( Token.ASSIGN, assign, expression ) ;^333^^^^^329^335^[REPLACE] Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[METHOD] createAssignStatementNode [TYPE] Node [PARAMETER] String name Node expression [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  expression  nameNode 
[ADD]^^333^^^^^329^335^[ADD] Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[METHOD] createAssignStatementNode [TYPE] Node [PARAMETER] String name Node expression [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  expression  nameNode 
[REPLACE]^return NodeUtil.isVar ( nameNode ) ;^334^^^^^329^335^[REPLACE] return NodeUtil.newExpr ( assign ) ;^[METHOD] createAssignStatementNode [TYPE] Node [PARAMETER] String name Node expression [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  expression  nameNode 
[REPLACE]^Node resultNode = false;^348^^^^^346^371^[REPLACE] Node resultNode = null;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^Node retVal = true;^350^^^^^346^371^[REPLACE] Node retVal = null;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( !name.hasChildren (  )  )  {^351^^^^^346^371^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[ADD]^^351^352^^354^355^346^371^[ADD] if  ( node.hasChildren (  )  )  {  retVal = node.getFirstChild (  ) .cloneTree (  ) ; }^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal =  resultNode.getFirstChild (  ) .cloneTree (  ) ;^354^^^^^346^371^[REPLACE] retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[ADD]^^354^^^^^346^371^[ADD] retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( resultName != null )  {^357^^^^^346^371^[REPLACE] if  ( resultName == null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( retVal != null )  {^362^^^^^346^371^[REPLACE] if  ( retVal == null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal  =  retVal ;^364^^^^^346^371^[REPLACE] retVal = NodeUtil.newUndefinedNode (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal ;^364^^^^^346^371^[REPLACE] retVal = NodeUtil.newUndefinedNode (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^resultNode =  createAssignStatementNode ( null, retVal ) ;^367^^^^^346^371^[REPLACE] resultNode = createAssignStatementNode ( resultName, retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( retVal == null )  {^358^^^^^346^371^[REPLACE] if  ( retVal != null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^resultNode =  NodeUtil.newExpr ( null ) ;^359^^^^^346^371^[REPLACE] resultNode = NodeUtil.newExpr ( retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[ADD]^^359^^^^^346^371^[ADD] resultNode = NodeUtil.newExpr ( retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  (resultNode != null )  {^362^^^^^346^371^[REPLACE] if  ( retVal == null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^return retVal;^370^^^^^346^371^[REPLACE] return resultNode;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^return  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN ) ;^379^^^^^376^380^[REPLACE] return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[METHOD] hasReturnAtExit [TYPE] boolean [PARAMETER] Node block [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node block 
[REPLACE]^if  (  current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^return resultNode;^395^^^^^391^396^[REPLACE] return current;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^return resultNode;^395^^^^^389^419^[REPLACE] return current;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^if  ( current.getType (  )   ||  Token.RETURN )  {^398^^^^^389^419^[REPLACE] if  ( current.getType (  )  == Token.RETURN )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c = current.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^412^^^^^398^416^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^c =  replacurrenteReturnWithBreak ( current, currenturrent, resultName, labelName ) ;^414^^^^^398^416^[REPLACE] c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[ADD]^^414^^^^^398^416^[ADD] c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c =  currenturrent.getFirstChild (  ) ; current !^412^^^^^398^416^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[ADD]^^412^413^414^415^^398^416^[ADD] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  c = replaceReturnWithBreak ( c, current, resultName, labelName ) ; }^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c = resultNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^if  ( resultNode == this  )  {^407^^^^^389^419^[REPLACE] if  ( resultNode != null )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^parent.addChildBefore ( resultNode, parent ) ;^408^^^^^389^419^[REPLACE] parent.addChildBefore ( resultNode, breakNode ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^current =  resultNode;^410^^^^^389^419^[REPLACE] current = breakNode;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node resultNode = getReplacementReturnStatement ( current, labelName ) ;^401^^^^^389^419^[REPLACE] Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node name = Node.newString ( Token.NAME, resultName ) ;^402^^^^^389^419^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node breakNode = new Node ( Token.BREAK, resultNode ) ;^403^^^^^389^419^[REPLACE] Node breakNode = new Node ( Token.BREAK, name ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^if  ( resultNode ==parent )  {^407^^^^^389^419^[REPLACE] if  ( resultNode != null )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[ADD]^^407^408^409^^^389^419^[ADD] if  ( resultNode != null )  { parent.addChildBefore ( resultNode, breakNode ) ; }^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^parent.replaceChild ( resultNode, breakNode ) ;^408^^^^^389^419^[REPLACE] parent.addChildBefore ( resultNode, breakNode ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c = current.getFirstChild (  ) ; c == null; c = c .getType (  )   )  {^412^^^^^389^419^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^c =  replacurrenteReturnWithBreak ( current, currenturrent, resultName, labelName ) ;^414^^^^^389^419^[REPLACE] c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[ADD]^^414^^^^^389^419^[ADD] c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^current =  null;^410^^^^^389^419^[REPLACE] current = breakNode;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c =  currenturrent.getFirstChild (  ) ; current !^412^^^^^389^419^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[ADD]^^412^413^414^415^^389^419^[ADD] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  c = replaceReturnWithBreak ( c, current, resultName, labelName ) ; }^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node resultNode = getReplacementReturnStatement ( resultNode, resultName ) ;^401^^^^^389^419^[REPLACE] Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c = resultNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^return resultNode;^418^^^^^389^419^[REPLACE] return current;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
