[REPLACE]^Node newValue = entry.getValue (  ) .cloneTree (  )  ;^63^^^^^62^107^[REPLACE] Node newFnNode = fnNode.cloneTree (  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^makeLocalNamesUnique ( newFnNode, needsDefaultResult ) ;^67^^^^^62^107^[REPLACE] makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[ADD]^^71^72^^^^62^107^[ADD] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( newFnNode ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, newBlock, this.safeNameIdSupplier ) ;^73^74^75^^^62^107^[REPLACE] LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node label = new Node ( LABEL )  ;^76^^^^^62^107^[REPLACE] boolean hasArgs = !args.isEmpty (  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^77^^^^^62^107^[REPLACE] if  ( hasArgs )  {^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, this, compiler.getCodingConvention (  )  ) ;^78^79^^^^62^107^[REPLACE] FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^newFnNode, args, namesToAlias, compiler.getUniqueNameIdSupplier (  )  ) ;^79^^^^^62^107^[REPLACE] newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node newBlock = NodeUtil .newUndefinedNode (  )  ;^82^^^^^62^107^[REPLACE] Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^newBlock.hasChildren (  ) ;^84^^^^^62^107^[REPLACE] newBlock.detachFromParent (  ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REMOVE]^node.hasChildren (  )  ;^84^^^^^62^107^[REMOVE] ^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^86^^^^^62^107^[REPLACE] if  ( hasArgs )  {^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[ADD]^^86^87^88^89^90^62^107^[ADD] if  ( hasArgs )  { Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ; Preconditions.checkState ( newBlock == inlineResult ) ; }^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node inlineResult = aliasAndInlineArguments ( newFnNode, args, namesToAlias ) ;^87^88^^^^62^107^[REPLACE] Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node inlineResult = aliasAndInlineArguments ( newBlock, args, null ) ;^87^88^^^^62^107^[REPLACE] Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^97^^^^^62^107^[REPLACE] if  ( isCallInLoop )  {^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^fixUnitializedVarDeclarations ( newFnNode ) ;^98^^^^^62^107^[REPLACE] fixUnitializedVarDeclarations ( newBlock ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REMOVE]^namesToAlias.contains ( name )  ;^98^^^^^62^107^[REMOVE] ^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^String labelName = getLabelNameForFunction ( resultName ) ;^101^^^^^62^107^[REPLACE] String labelName = getLabelNameForFunction ( fnName ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Node injectableBlock = replaceReturns ( inlineResult, resultName, labelName, needsDefaultResult ) ;^102^103^^^^62^107^[REPLACE] Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^Preconditions.checkArgument ( injectableBlock == null ) ;^104^^^^^62^107^[REPLACE] Preconditions.checkState ( injectableBlock != null ) ;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^return injectableBlock;  ;^106^^^^^62^107^[REPLACE] return injectableBlock;^[METHOD] mutate [TYPE] Node [PARAMETER] String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasArgs  isCallInLoop  needsDefaultResult  true  [TYPE]  Set namesToAlias  [TYPE]  Node callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fnName  labelName  resultName  [TYPE]  LinkedHashMap args 
[REPLACE]^if  ( NodeUtil.isVar ( name )  )  {^117^^^^^114^134^[REPLACE] if  ( NodeUtil.isLoopStructure ( n )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^return;  ;^118^^^^^114^134^[REPLACE] return;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^122^^^^^114^134^[REPLACE] if  ( NodeUtil.isVar ( n )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^if  ( name.hasChildren (  )  )  {^125^^^^^114^134^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^name .addChildrenToBack ( name )  ;^126^^^^^114^134^[REPLACE] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^name.addChildToBack ( newUndefinedNode (  )  )  ;^126^^^^^114^134^[REPLACE] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^return;  ;^128^^^^^114^134^[REPLACE] return;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^Node nameame = n.getFirstChild (  ) ;^123^^^^^114^134^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^if   (  node.hasChildren  (    )    )   {  ;^125^^^^^114^134^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[ADD]^name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^125^126^127^^^114^134^[ADD] if  ( !name.hasChildren (  )  )  { name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ; }^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^name .addChildrenToBack ( c )  ;^126^^^^^114^134^[REPLACE] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[ADD]^^126^^^^^114^134^[ADD] name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; null !^131^^^^^114^134^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^for  ( Node c = name.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] fixUnitializedVarDeclarations [TYPE] void [PARAMETER] Node n [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  boolean false  true  [TYPE]  Node c  n  name 
[REPLACE]^if  ( namesToAlias != null || namesToAlias.isEmpty (  )  )  {^172^^^^^170^215^[REPLACE] if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^193^^^^^172^214^[REPLACE] if  ( namesToAlias.contains ( name )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^Node newValue = entry.getValue (  ) .cloneTree (  ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;newVars.add ( 0, newNode ) ;^193^194^195^196^^172^214^[ADD] if  ( namesToAlias.contains ( name )  )  { Node newValue = entry.getValue (  ) .cloneTree (  ) ; Node newNode = NodeUtil.newVarNode ( name, newValue ) ; newVars.add ( 0, newNode ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = true.getValue (  ) .cloneTree (  ) ;^194^^^^^172^214^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newNode = NodeUtil .newUndefinedNode (  )  ;^195^^^^^172^214^[REPLACE] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^193^^^^^178^214^[REPLACE] if  ( namesToAlias.contains ( name )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^Node newValue = entry.getValue (  ) .cloneTree (  ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;newVars.add ( 0, newNode ) ;^193^194^195^196^^178^214^[ADD] if  ( namesToAlias.contains ( name )  )  { Node newValue = entry.getValue (  ) .cloneTree (  ) ; Node newNode = NodeUtil.newVarNode ( name, newValue ) ; newVars.add ( 0, newNode ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^194^195^^^^178^214^[ADD] Node newValue = entry.getValue (  ) .cloneTree (  ) ; Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newBlock = getFunctionBody ( newFnNode )  ;^195^^^^^178^214^[REPLACE] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String name = entry.getValue (  ) ;^192^^^^^178^214^[REPLACE] String name = entry.getKey (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = this.getValue (  ) .cloneTree (  ) ;^194^^^^^178^214^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^195^^^^^178^214^[ADD] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^for  ( Node newValue : newVars )  {^209^^^^^178^214^[REPLACE] for  ( Node n : newVars )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^fnTemplateRoot.addChildToBack ( n ) ;^210^^^^^178^214^[REPLACE] fnTemplateRoot.addChildToFront ( n ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return resultNode;  ;^213^^^^^178^214^[REPLACE] return result;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^184^^^^^178^214^[ADD] Map<String, Node> newArgMap = Maps.newHashMap ( argMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String, Node> newArgMap = newHashMap ( argMap )  ;^188^^^^^178^214^[REPLACE] List<Node> newVars = Lists.newLinkedList (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^boolean hasArgs = ! ( args.isEmpty (  )  )  ;^191^^^^^178^214^[REPLACE] for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^192^^^^^178^214^[ADD] String name = entry.getKey (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node name = n.getFirstChild (  )  ;^194^^^^^178^214^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newNode = NodeUtil .newUndefinedNode (  )  ;^195^^^^^178^214^[REPLACE] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector .findModifiedParameters ( n )  ;^203^204^^^^178^214^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node root = block  ;^209^^^^^178^214^[REPLACE] for  ( Node n : newVars )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return resultNode;  ;^177^^^^^170^215^[REPLACE] return result;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, false, argMap ) ;^174^175^^^^170^215^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^193^^^^^170^215^[REPLACE] if  ( namesToAlias.contains ( name )  )  {^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = null.getValue (  ) .cloneTree (  ) ;^194^^^^^170^215^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newBlock = getFunctionBody ( newFnNode )  ;^195^^^^^170^215^[REPLACE] Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^^191^192^193^194^195^178^214^[ADD] for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  { String name = entry.getKey (  ) ; if  ( namesToAlias.contains ( name )  )  { Node newValue = entry.getValue (  ) .cloneTree (  ) ; Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = null.getValue (  ) .cloneTree (  ) ;^194^^^^^178^214^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String name = null.getKey (  ) ;^192^^^^^178^214^[REPLACE] String name = entry.getKey (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node newValue = true.getValue (  ) .cloneTree (  ) ;^194^^^^^178^214^[REPLACE] Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[ADD]^newVars.add ( 0, newNode ) ;^195^196^^^^178^214^[ADD] Node newNode = NodeUtil.newVarNode ( name, newValue ) ; newVars.add ( 0, newNode ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return resultNode;  ;^177^^^^^178^214^[REPLACE] return result;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return newValue;^213^^^^^178^214^[REPLACE] return result;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, true, argMap ) ;^174^175^^^^178^214^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String name = false.getKey (  ) ;^192^^^^^178^214^[REPLACE] String name = entry.getKey (  ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, false, newArgMap ) ;^203^204^^^^178^214^[REPLACE] Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[METHOD] aliasAndInlineArguments [TYPE] Node [PARAMETER] Node fnTemplateRoot Node> argMap String> namesToAlias [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  Set namesToAlias  [TYPE]  boolean false  true  [TYPE]  Node fnTemplateRoot  n  newNode  newValue  result  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  List newVars  [TYPE]  String name  [TYPE]  Map newArgMap  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkNotNull ( root ) ;^241^^^^^240^284^[REPLACE] Preconditions.checkNotNull ( block ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^checkState (  ( result == fnTemplateRoot )  )  ;^242^^^^^240^284^[REPLACE] Preconditions.checkNotNull ( labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node root = root;^244^^^^^240^284^[REPLACE] Node root = block;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^246^^^^^240^284^[ADD] boolean hasReturnAtExit = false;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^int returnCount = NodeUtil.getNodeTypeReferenceCount ( root, Token.RETURN ) ;^247^^^^^240^284^[REPLACE] int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( returnCount  >=  0 )  {^248^^^^^240^284^[REPLACE] if  ( returnCount > 0 )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if   (  resultMustBeSet && !hasReturnAtExit && resultName != null  )   {  ;^252^^^^^240^284^[REPLACE] if  ( hasReturnAtExit )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^convertLastReturnToStatement ( block, labelName ) ;^253^^^^^240^284^[REPLACE] convertLastReturnToStatement ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^returnCount--;^253^254^^^^240^284^[ADD] convertLastReturnToStatement ( block, resultName ) ; returnCount--;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( returnCount  >=  0 )  {^257^^^^^240^284^[REPLACE] if  ( returnCount > 0 )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^root =  name;^273^^^^^240^284^[REPLACE] root = newRoot;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^264^^^^^240^284^[ADD] Node label = new Node ( Token.LABEL ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node label = new Node ( LABEL )  ;^265^^^^^240^284^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node label = new Node ( LABEL )  ;^269^^^^^240^284^[REPLACE] Node newRoot = new Node ( Token.BLOCK ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^hasReturnAtExit =  hasReturnAtExit ( root ) ;^249^^^^^240^284^[REPLACE] hasReturnAtExit = hasReturnAtExit ( block ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node assign = new Node ( ASSIGN, nameNode, expression )  ;^264^^^^^240^284^[REPLACE] Node label = new Node ( Token.LABEL ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( true )  {^252^^^^^240^284^[REPLACE] if  ( hasReturnAtExit )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^convertLastReturnToStatement ( root, resultName ) ;^253^^^^^240^284^[REPLACE] convertLastReturnToStatement ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( returnCount  <  0 - 1 )  {^257^^^^^240^284^[REPLACE] if  ( returnCount > 0 )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^^265^^^^^240^284^[ADD] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^hasReturnAtExit =  hasReturnAtExit ( null ) ;^249^^^^^240^284^[REPLACE] hasReturnAtExit = hasReturnAtExit ( block ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node name = Node.replaceChild ( Token.NAME, resultName ) ;^265^^^^^240^284^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^if  ( true && labelName == null )  {^279^^^^^240^284^[REPLACE] if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[ADD]^addDummyAssignment ( block, resultName ) ;^279^280^281^^^240^284^[ADD] if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  { addDummyAssignment ( block, resultName ) ; }^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^addDummyAssignment ( block, labelName ) ;^280^^^^^240^284^[REPLACE] addDummyAssignment ( block, resultName ) ;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REMOVE]^newString ( Token.NAME, name )  ;^280^^^^^240^284^[REMOVE] ^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^return newRoot;^283^^^^^240^284^[REPLACE] return root;^[METHOD] replaceReturns [TYPE] Node [PARAMETER] Node block String resultName String labelName boolean resultMustBeSet [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  hasReturnAtExit  resultMustBeSet  true  [TYPE]  int returnCount  [TYPE]  Node block  label  name  newRoot  root 
[REPLACE]^Node root = block  ;^348^^^^^347^371^[REPLACE] Node resultNode = null;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^Node retVal = false;^350^^^^^347^371^[REPLACE] Node retVal = null;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( resultNode.getLastChild (  )  )  {^351^^^^^347^371^[REPLACE] if  ( node.hasChildren (  )  )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[ADD]^^354^^^^^347^371^[ADD] retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal =  resultNode.getFirstChild (  ) .cloneTree (  ) ;^354^^^^^347^371^[REPLACE] retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if   (  resultNode != null  )   {  ;^357^^^^^347^371^[REPLACE] if  ( resultName == null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( resultNode != true )  {^362^^^^^357^368^[REPLACE] if  ( retVal == null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal  =  retVal ;^364^^^^^357^368^[REPLACE] retVal = NodeUtil.newUndefinedNode (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^resultNode =  createAssignStatementNode ( null, retVal ) ;^367^^^^^357^368^[REPLACE] resultNode = createAssignStatementNode ( resultName, retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( retVal == null )  {^358^^^^^347^371^[REPLACE] if  ( retVal != null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[ADD]^resultNode = NodeUtil.newExpr ( retVal ) ;^358^359^360^^^347^371^[ADD] if  ( retVal != null )  { resultNode = NodeUtil.newExpr ( retVal ) ; }^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^resultNode =  NodeUtil.newExpr ( null ) ;^359^^^^^347^371^[REPLACE] resultNode = NodeUtil.newExpr ( retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[ADD]^^359^^^^^347^371^[ADD] resultNode = NodeUtil.newExpr ( retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if   (  resultNode != null  )   {  ;^358^^^^^347^371^[REPLACE] if  ( retVal != null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( resultNode != null )  {^362^^^^^347^371^[REPLACE] if  ( retVal == null )  {^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal  =  retVal ;^364^^^^^347^371^[REPLACE] retVal = NodeUtil.newUndefinedNode (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal = newUndefinedNode (  )  ;^359^^^^^347^371^[REPLACE] resultNode = NodeUtil.newExpr ( retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^retVal ;^364^^^^^347^371^[REPLACE] retVal = NodeUtil.newUndefinedNode (  ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[ADD]^^367^^^^^347^371^[ADD] resultNode = createAssignStatementNode ( resultName, retVal ) ;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^return resultNode;  ;^370^^^^^347^371^[REPLACE] return resultNode;^[METHOD] getReplacementReturnStatement [TYPE] Node [PARAMETER] Node node String resultName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String resultName  [TYPE]  boolean false  true  [TYPE]  Node node  resultNode  retVal 
[REPLACE]^if  ( parent.newString (  )  == Token.FUNCTION && current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^return resultNode;^395^^^^^391^396^[REPLACE] return current;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^return resultNode;^395^^^^^389^419^[REPLACE] return current;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^if  ( current.getType (  )   &&  Token.RETURN )  {^398^^^^^389^419^[REPLACE] if  ( current.getType (  )  == Token.RETURN )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c =  nullurrent.getFirstChild (  ) ; null !^412^^^^^398^416^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^c =  replacurrenteReturnWithBreak ( current, currenturrent, resultName, labelName ) ;^414^^^^^398^416^[REPLACE] c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c = resultNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^if  ( resultNode ==parent )  {^407^^^^^389^419^[REPLACE] if  ( resultNode != null )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^parent.replaceChild ( parent, breakNode ) ;^408^^^^^389^419^[REPLACE] parent.addChildBefore ( resultNode, breakNode ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^current =  resultNode;^410^^^^^389^419^[REPLACE] current = breakNode;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node resultNode = getReplacementReturnStatement ( current, labelName ) ;^401^^^^^389^419^[REPLACE] Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node name = Node.newString ( Token.NAME, resultName ) ;^402^^^^^389^419^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node breakNode = new Node ( Token.BREAK, resultNode ) ;^403^^^^^389^419^[REPLACE] Node breakNode = new Node ( Token.BREAK, name ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^if   (  resultName == null  )   {  ;^407^^^^^389^419^[REPLACE] if  ( resultNode != null )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^node.getFirstChild (  )  ;^408^^^^^389^419^[REPLACE] parent.addChildBefore ( resultNode, breakNode ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REMOVE]^label.addChildToFront ( name )  ;^408^^^^^389^419^[REMOVE] ^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[ADD]^^410^^^^^389^419^[ADD] current = breakNode;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c =  currenturrent.getFirstChild (  ) ; current !^412^^^^^389^419^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[ADD]^^414^^^^^389^419^[ADD] c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node name = Node.replaceChild ( Token.NAME, labelName ) ;^402^^^^^389^419^[REPLACE] Node name = Node.newString ( Token.NAME, labelName ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^Node label = new Node ( LABEL )  ;^403^^^^^389^419^[REPLACE] Node breakNode = new Node ( Token.BREAK, name ) ;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^for  ( Node c = current.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^[REPLACE] for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
[REPLACE]^return parent;^418^^^^^389^419^[REPLACE] return current;^[METHOD] replaceReturnWithBreak [TYPE] Node [PARAMETER] Node current Node parent String resultName String labelName [CLASS] FunctionToBlockMutator   [TYPE]  AbstractCompiler compiler  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String labelName  resultName  [TYPE]  boolean false  true  [TYPE]  Node breakNode  c  current  name  parent  resultNode 
