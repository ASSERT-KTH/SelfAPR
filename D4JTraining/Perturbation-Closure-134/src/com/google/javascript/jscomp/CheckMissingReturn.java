[REPLACE]^static final DiagnosticType MISSING_RETURN_STATEMENT ;^38^39^40^41^^38^41^[REPLACE] static final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "JSC_MISSING_RETURN_STATEMENT", "missing return statement" ) ;^ [CLASS] CheckMissingReturn 1 2  
[REPLACE]^private static final Predicate<Node> IS_RETURN  = null ;^46^^^^^46^52^[REPLACE] private static final Predicate<Node> IS_RETURN = new Predicate<Node> (  )  {^ [CLASS] CheckMissingReturn 1 2  
[REPLACE]^GOES_THROUGH_TRUE_CONDITION_PREDICATE  = null ;^56^57^^^^56^77^[REPLACE] GOES_THROUGH_TRUE_CONDITION_PREDICATE = new Predicate<DiGraphEdge<Node, ControlFlowGraph.Branch>> (  )  {^ [CLASS] CheckMissingReturn 1 2  
[REPLACE]^this.compiler =  null;^84^^^^^83^86^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^this.level =  null;^85^^^^^83^86^[REPLACE] this.level = level;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return input != null ;;^50^^^^^47^51^[REPLACE] return input != null && input.getType (  )  == Token.RETURN;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  [TYPE]  Node input 
[REPLACE]^Branch branch = false .getSource (  )  ;^60^^^^^58^76^[REPLACE] Branch branch = input.getValue (  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( branch  ||  Branch.ON_EX )  {^61^^^^^58^76^[REPLACE] if  ( branch == Branch.ON_EX )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^}  if  ( branch.isConditional (  )  )  {^63^^^^^58^76^[REPLACE] } else if  ( branch.isConditional (  )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^}   input.getSource (  ) .getValue (  )  ) ;^63^64^65^^^58^76^[ADD] else if  ( branch.isConditional (  )  )  { Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( condition == true && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^70^71^72^73^^58^76^[ADD] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  { return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ; }^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil.isLiteralValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( false.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( condition == false ) {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( true.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^62^^^^^58^76^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^}  else {^63^^^^^58^76^[REPLACE] } else if  ( branch.isConditional (  )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( condition == false && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REMOVE]^if  ( branch ==  ( ON_EX )  )  {     return false; }else     if  ( branch.isConditional (  )  )  {         Node condition = getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;         if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {             return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ;         }     }^70^^^^^58^76^[REMOVE] ^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil .isLiteralValue ( condition )   == ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getBooleanValue ( this.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^64^65^^^^58^76^[ADD] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( condition == this && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( null.getValue (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false;^75^^^^^58^76^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( !explicitReturnExpected ( t.getControlFlowGraph (  )  )  )  {^90^^^^^89^109^[REPLACE] if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^90^91^92^^^89^109^[ADD] if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false;^91^^^^^89^109^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^94^^^^^89^109^[REPLACE] if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false;^95^^^^^89^109^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^98^99^100^^^89^109^[ADD] CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) ,^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( test.allPathsSatisfyPredicate (  )  )  {^105^^^^^89^109^[REPLACE] if  ( !test.allPathsSatisfyPredicate (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^105^106^107^108^^89^109^[ADD] if  ( !test.allPathsSatisfyPredicate (  )  )  { compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^compiler.report ( JSError.make ( t, t.getControlFlowGraph (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^[REPLACE] compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^JSError.make ( t, t.getControlFlowGraph (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^[REPLACE] JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REMOVE]^t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^107^^^^^89^109^[REMOVE] ^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^JSError.make ( t, t .getControlFlowGraph (  )  , level, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^[REPLACE] JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^107^^^^^89^109^[ADD] JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( s.getSource (  ) .getValue (  ) .getType (  )   ==  Token.RETURN )  {^119^^^^^117^124^[REPLACE] if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^[METHOD] fastAllPathsReturnCheck [TYPE] boolean [PARAMETER] Node> cfg [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge s  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  ControlFlowGraph cfg  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^120^^^^^117^124^[REPLACE] return false;^[METHOD] fastAllPathsReturnCheck [TYPE] boolean [PARAMETER] Node> cfg [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge s  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  ControlFlowGraph cfg  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^for  ( DiGraphEdge<Node, Branch> s : cfg.getImplicitReturn (  ) .getInEdges (  )  )  { if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^118^^^^^117^124^[REPLACE] for  ( DiGraphEdge<Node, Branch> s : cfg.getImplicitReturn (  ) .getInEdges (  )  )  {^[METHOD] fastAllPathsReturnCheck [TYPE] boolean [PARAMETER] Node> cfg [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge s  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  ControlFlowGraph cfg  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false;^123^^^^^117^124^[REPLACE] return true;^[METHOD] fastAllPathsReturnCheck [TYPE] boolean [PARAMETER] Node> cfg [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge s  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  ControlFlowGraph cfg  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false;^133^^^^^131^134^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node n  parent  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^JSType scopeType = scope.getType (  ) ;^145^^^^^144^162^[REPLACE] JSType scopeType = scope.getJSType (  ) ;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( ! ! ( scopeType instanceof FunctionType )  )  {^147^^^^^144^162^[REPLACE] if  ( ! ( scopeType instanceof FunctionType )  )  {^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^return false;^147^148^149^^^144^162^[ADD] if  ( ! ( scopeType instanceof FunctionType )  )  { return false; }^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^148^^^^^144^162^[REPLACE] return false;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^151^^^^^144^162^[REPLACE] if  ( isEmptyFunction ( scope )  )  {^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REMOVE]^if  ( ! ( scopeType instanceof FunctionType )  )  {     return false; }^151^^^^^144^162^[REMOVE] ^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^152^^^^^144^162^[REPLACE] return false;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^JSType returnType =  (  ( FunctionType )  scopeType )  .getNativeType (  )  ;^155^^^^^144^162^[REPLACE] JSType returnType =  (  ( FunctionType )  scopeType ) .getReturnType (  ) ;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  (scopeType != null )  {^157^^^^^144^162^[REPLACE] if  ( returnType == null )  {^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^return false;^157^158^159^^^144^162^[ADD] if  ( returnType == null )  { return false; }^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^158^^^^^144^162^[REPLACE] return false;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return !isVoidOrUnknown ( scopeType ) ;^161^^^^^144^162^[REPLACE] return !isVoidOrUnknown ( returnType ) ;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false ;^170^171^^^^169^172^[REPLACE] return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[METHOD] isEmptyFunction [TYPE] boolean [PARAMETER] Node function [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  [TYPE]  Node function 
[REPLACE]^final JSType voidType = compiler.report (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^179^180^^^^178^182^[REPLACE] final JSType voidType = compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^[METHOD] isVoidOrUnknown [TYPE] boolean [PARAMETER] JSType returnType [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  voidType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return input != null && input.getType (  )  == Token.RETURN;^181^^^^^178^182^[REPLACE] return voidType.isSubtype ( returnType ) ;^[METHOD] isVoidOrUnknown [TYPE] boolean [PARAMETER] JSType returnType [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  voidType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return   input.getType (  )  ;^50^^^^^47^51^[REPLACE] return input != null && input.getType (  )  == Token.RETURN;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Node input 
[REPLACE]^Branch branch = null.getSource (  ) ;^60^^^^^58^76^[REPLACE] Branch branch = input.getValue (  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( branch  ||  Branch.ON_EX )  {^61^^^^^58^76^[REPLACE] if  ( branch == Branch.ON_EX )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^}  else {^63^^^^^58^76^[REPLACE] } else if  ( branch.isConditional (  )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[ADD]^}   input.getSource (  ) .getValue (  )  ) ;^63^64^65^^^58^76^[ADD] else if  ( branch.isConditional (  )  )  { Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( condition == false ) {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return NodeUtil .isLiteralValue ( condition )   == ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return NodeUtil.isLiteralValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( null.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[ADD]^^64^65^^^^58^76^[ADD] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( condition == null && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return true ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return true;^62^^^^^58^76^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^63^^^^^58^76^[REPLACE] } else if  ( branch.isConditional (  )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( condition == null ) {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REMOVE]^if  ( branch ==  ( ON_EX )  )  {     return false; }else     if  ( branch.isConditional (  )  )  {         Node condition = getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;         if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {             return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ;         }     }^70^^^^^58^76^[REMOVE] ^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return NodeUtil.isLiteralValue ( condition )   !=  ( Branch.ON_TRUE  !=  branch ) ;;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( condition == null && NodeUtil.getBooleanValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return NodeUtil.isLiteralValue ( condition )   ||  ( Branch.ON_TRUE  ||  branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return false;^75^^^^^58^76^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
