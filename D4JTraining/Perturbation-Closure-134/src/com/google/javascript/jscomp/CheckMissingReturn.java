[REPLACE]^final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "JSC_MISSING_RETURN_STATEMENT", "missing return statement" ) ;^38^39^40^41^^38^41^[REPLACE] static final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "JSC_MISSING_RETURN_STATEMENT", "missing return statement" ) ;^ [CLASS] CheckMissingReturn 1 2  
[REPLACE]^private static final Predicate<Node> IS_RETURN ;^46^^^^^46^52^[REPLACE] private static final Predicate<Node> IS_RETURN = new Predicate<Node> (  )  {^ [CLASS] CheckMissingReturn 1 2  
[REPLACE]^GOES_THROUGH_TRUE_CONDITION_PREDICATE ;^56^57^^^^56^77^[REPLACE] GOES_THROUGH_TRUE_CONDITION_PREDICATE = new Predicate<DiGraphEdge<Node, ControlFlowGraph.Branch>> (  )  {^ [CLASS] CheckMissingReturn 1 2  
[REPLACE]^Branch branch = this.getValue (  ) ;^60^^^^^58^76^[REPLACE] Branch branch = input.getValue (  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( branch  &&  Branch.ON_EX )  {^61^^^^^58^76^[REPLACE] if  ( branch == Branch.ON_EX )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^}  else {^63^^^^^58^76^[REPLACE] } else if  ( branch.isConditional (  )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^}   input.getSource (  ) .getValue (  )  ) ;^63^64^65^^^58^76^[ADD] else if  ( branch.isConditional (  )  )  { Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( condition == null && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil.isLiteralValue ( condition )   ||  ( Branch.ON_TRUE  ||  branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return false ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getBooleanValue ( this.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil .isLiteralValue ( condition )    ||  ( Branch.ON_TRUE  ||  branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil.isLiteralValue ( condition )   !=  ( Branch.ON_TRUE  !=  branch ) ;;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getBooleanValue ( null.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^62^^^^^58^76^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^}  if  ( branch.isConditional (  )  )  {^63^^^^^58^76^[REPLACE] } else if  ( branch.isConditional (  )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil.isLiteralValue ( condition )   &&  ( Branch.ON_TRUE  &&  branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( true.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  (  NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^70^71^72^73^^58^76^[ADD] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  { return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ; }^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil.getBooleanValue ( condition )   !=  ( Branch.ON_TRUE  !=  branch ) ;;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return NodeUtil.getBooleanValue ( condition )   ||  ( Branch.ON_TRUE  ||  branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( input.getSource (  )  .getSource (  )   ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;  ;^75^^^^^58^76^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Branch branch  [TYPE]  Node condition  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if   (  condition != null && NodeUtil.isLiteralValue  (  condition  )     )   {  ;^90^^^^^89^109^[REPLACE] if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^return;^90^91^92^^^89^109^[ADD] if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return;  ;^91^^^^^89^109^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( fastAllPathsReturnCheck ( t .getScopeRoot (  )   )  )  {^94^^^^^89^109^[REPLACE] if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^return;^94^95^96^^^89^109^[ADD] if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return;  ;^95^^^^^89^109^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getScopeRoot (  ) , t.getControlFlowGraph (  ) .getEntry (  ) ,^98^99^100^101^^89^109^[REPLACE] CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) ,^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( test.allPathsSatisfyPredicate (  )  )  {^105^^^^^89^109^[REPLACE] if  ( !test.allPathsSatisfyPredicate (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^compiler.report ( JSError.make ( t, t .getControlFlowGraph (  )  , level, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^[REPLACE] compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^compiler.report ( make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  )  ;^107^^^^^89^109^[REPLACE] JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^JSError.make ( t, t.getControlFlowGraph (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^[REPLACE] JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^107^^^^^89^109^[ADD] JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  CheckPathsBetweenNodes test  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^145^^^^^144^162^[ADD] JSType scopeType = scope.getJSType (  ) ;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( ! ! ( scopeType instanceof FunctionType )  )  {^147^^^^^144^162^[REPLACE] if  ( ! ( scopeType instanceof FunctionType )  )  {^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^148^^^^^144^162^[REPLACE] return false;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if   (  condition != null && NodeUtil.isLiteralValue  (  condition  )     )   {  ;^151^^^^^144^162^[REPLACE] if  ( isEmptyFunction ( scope )  )  {^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^152^^^^^144^162^[REPLACE] return false;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[ADD]^^155^^^^^144^162^[ADD] JSType returnType =  (  ( FunctionType )  scopeType ) .getReturnType (  ) ;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^if  ( returnType != false )  {^157^^^^^144^162^[REPLACE] if  ( returnType == null )  {^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return true;^158^^^^^144^162^[REPLACE] return false;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^return !isVoidOrUnknown ( scopeType ) ;^161^^^^^144^162^[REPLACE] return !isVoidOrUnknown ( returnType ) ;^[METHOD] explicitReturnExpected [TYPE] boolean [PARAMETER] Node scope [CLASS] CheckMissingReturn 1 2   [TYPE]  AbstractCompiler compiler  [TYPE]  JSType returnType  scopeType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType MISSING_RETURN_STATEMENT  [TYPE]  CheckLevel level  [TYPE]  Node scope  [TYPE]  Predicate GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN 
[REPLACE]^Branch branch = this.getSource (  ) ;^60^^^^^58^76^[REPLACE] Branch branch = input.getValue (  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( branch  &&  Branch.ON_EX )  {^61^^^^^58^76^[REPLACE] if  ( branch == Branch.ON_EX )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REMOVE]^if  ( branch.isConditional (  )  )  {     Node condition = getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;     if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {         return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ;     } }^61^^^^^58^76^[REMOVE] ^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^}  else {^63^^^^^58^76^[REPLACE] } else if  ( branch.isConditional (  )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  ( condition == null && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return NodeUtil.getBooleanValue ( condition )   &&  ( Branch.ON_TRUE  &&  branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( false.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^if  (  NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^[REPLACE] if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return false ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( null.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return true;^62^^^^^58^76^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return NodeUtil.getBooleanValue ( condition )   ||  ( Branch.ON_TRUE  ||  branch ) ;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return NodeUtil.getBooleanValue ( condition )   !=  ( Branch.ON_TRUE  !=  branch ) ;;^71^72^^^^58^76^[REPLACE] return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^Node condition = NodeUtil.getBooleanValue ( null.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^Node condition = NodeUtil.getConditionExpression ( false .getValue (  )  .getValue (  )  ) ;^64^65^^^^58^76^[REPLACE] Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
[REPLACE]^return true;  ;^75^^^^^58^76^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Branch> input [CLASS] 2   [TYPE]  DiGraphEdge input  [TYPE]  boolean false  true  [TYPE]  Branch branch  [TYPE]  Node condition 
