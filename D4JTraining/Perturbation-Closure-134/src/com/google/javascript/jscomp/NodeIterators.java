[REPLACE]^private final Stack<Node> ancestors ;^44^^^^^^^[REPLACE] private final Stack<Node> ancestors = new Stack<Node> (  ) ;^ [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  
[REPLACE]^private   int  varName;^156^^^^^^^[REPLACE] private final String varName;^ [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  
[REPLACE]^Node current = ancestors.peek (  ) ;^71^^^^^70^100^[REPLACE] Node current = ancestors.pop (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getNext (  )  != this  )  {^72^^^^^70^100^[REPLACE] if  ( current.getNext (  )  == null )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   ||  Token.FUNCTION )  {^84^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return next;  ;^85^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current .getString (  )    ||  Token.FUNCTION )  {^93^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return next;  ;^94^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^80^81^^^^72^97^[ADD] current = current.getNext (  ) ; ancestors.push ( current ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^89^^^^^72^97^[ADD] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if   (  n.getType  (    )   == Token.FUNCTION  )   {  ;^76^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return next;  ;^77^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current  =  current ;^73^^^^^70^100^[REPLACE] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   ||  Token.FUNCTION )  {^76^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   ||  Token.FUNCTION )  {^84^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return next;  ;^85^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if   (  n.getType  (    )   == Token.FUNCTION  )   {  ;^93^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return next;  ;^94^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^73^^^^^70^100^[ADD] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current = current.getFirstChild (  )  ;^80^^^^^70^100^[REPLACE] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current = current.getNext (  )  ;^89^^^^^70^100^[REPLACE] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return valueNode;^99^^^^^70^100^[REPLACE] return current;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( atStart )  {^221^^^^^220^283^[REPLACE] if  ( !atStart )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( lookAhead != null )  {^222^^^^^220^283^[REPLACE] if  ( lookAhead == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return;  ;^223^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if   (  type == Token.NAME && !varName.equals  (  nextNode.getString  (    )    )    )   {  ;^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^229^230^231^232^233^220^283^[ADD] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = true;^231^^^^^229^233^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return;  ;^232^^^^^229^233^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = this;^231^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return;  ;^232^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Node curNode = iterator.next (  ) ;^228^^^^^220^283^[REPLACE] Node curNode = iterator.current (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (var != null )  {^222^^^^^220^283^[REPLACE] if  ( lookAhead == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( curNode.getType (  )  == Token.NAME ) {^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = false;^231^^^^^229^233^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( !iterator.FunctionlessLocalScope (  )  )  {^236^^^^^220^283^[REPLACE] if  ( !iterator.hasNext (  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^236^237^238^239^^220^283^[ADD] if  ( !iterator.hasNext (  )  )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^237^238^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return;  ;^238^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Node next = lookAhead  ;^241^^^^^220^283^[REPLACE] Node nextNode = iterator.next (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Node nextParent = iterator.current (  ) ;^242^^^^^220^283^[REPLACE] Node nextParent = iterator.currentParent (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^int type = valueNode.getType (  ) ;^243^^^^^220^283^[REPLACE] int type = nextNode.getType (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if   (  type == Token.NAME && !varName.equals  (  nextNode.getString  (    )    )    )   {  ;^245^^^^^220^283^[REPLACE] if  ( valueHasSideEffects )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^245^246^^^^220^283^[ADD] if  ( valueHasSideEffects )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (  varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^220^283^[REPLACE] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^249^250^251^252^^220^283^[ADD] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  { boolean blocked = false; if  ( nextParent == null )  { blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( nextParent != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName && !isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^blocked = false;^259^^^^^251^261^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent .getString (  )    &&  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^blocked = false;^252^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (  !isVarDeclaration )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^blocked = true;^258^259^260^^^220^283^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^blocked = false;^259^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( valueHasSideEffects )  {^263^^^^^220^283^[REPLACE] if  ( blocked )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = false;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return;  ;^265^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^259^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = this;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^250^^^^^220^283^[ADD] boolean blocked = false;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  ||  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^256^^^^^220^283^[ADD] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( nameNode != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^blocked = true;&& nextNode == nextParent.getFirstChild (  )  ) ;^251^252^253^254^255^220^283^[ADD] if  ( nextParent == null )  { blocked = true; } else { boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( valueHasSideEffects && !isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^blocked = true;^258^259^260^^^251^261^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^254^255^^^^251^261^[ADD] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   ||  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName && !valueHasSideEffects )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = true;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean blocked = true;^250^^^^^220^283^[REPLACE] boolean blocked = false;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  >=  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nameNode.getType (  )   &&  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if   (  curNode.getType  (    )   == Token.NAME && varName.equals  (  curNode.getString  (    )    )    )   {  ;^249^^^^^220^283^[REPLACE] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^boolean blocked = false;blocked = true;^249^250^251^252^^220^283^[ADD] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  { boolean blocked = false; if  ( nextParent == null )  { blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( nextParent != this )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName && !valueHasSideEffects )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^259^^^^^251^261^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent .getString (  )    !=  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^252^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^return;^264^265^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   ||  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (nextNode != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName && !true )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  <=  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^256^^^^^251^261^[ADD] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName && !isVarDeclaration )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^264^265^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  <=  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^220^283^[REPLACE] if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = false;^278^^^^^276^280^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return;  ;^279^^^^^276^280^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^278^279^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return;  ;^279^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^282^^^^^220^283^[ADD] lookAhead = nextNode;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^private  Stack<Node> ancestors = new Stack<Node> (  ) ;^44^^^^^^^[REPLACE] private final Stack<Node> ancestors = new Stack<Node> (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] FunctionlessLocalScope   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^71^^^^^70^100^[ADD] Node current = ancestors.pop (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getNext (  )  != null )  {^72^^^^^70^100^[REPLACE] if  ( current.getNext (  )  == null )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   !=  Token.FUNCTION )  {^84^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^^84^85^86^^^72^97^[ADD] if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return next  (    )  ;  ;^85^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if   (  n.getType  (    )   == Token.FUNCTION  )   {  ;^93^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return next  (    )  ;  ;^94^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current = current.getFirstChild (  )  ;^80^^^^^72^97^[REPLACE] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current = current.getNext (  )  ;^89^^^^^72^97^[REPLACE] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^76^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return next  (    )  ;  ;^77^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current  =  current ;^73^^^^^70^100^[REPLACE] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   !=  Token.FUNCTION )  {^84^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return next  (    )  ;  ;^85^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   ||  Token.FUNCTION )  {^93^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return next  (    )  ;  ;^94^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^^73^^^^^70^100^[ADD] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current = current.getFirstChild (  )  ;^80^^^^^70^100^[REPLACE] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^ancestors.push ( current ) ;^89^90^^^^70^100^[ADD] current = current.getFirstChild (  ) ; ancestors.push ( current ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return current;  ;^99^^^^^70^100^[REPLACE] return current;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^private  FunctionlessLocalScope iterator;^155^^^^^^^[REPLACE] private final FunctionlessLocalScope iterator;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  List list  [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^if  ( atStart )  {^221^^^^^220^283^[REPLACE] if  ( !atStart )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( lookAhead != null )  {^222^^^^^220^283^[REPLACE] if  ( lookAhead == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return;  ;^223^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if   (  type == Token.NAME && !varName.equals  (  nextNode.getString  (    )    )    )   {  ;^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^231^232^^^^229^233^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return;  ;^232^^^^^229^233^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = this;^231^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return;  ;^232^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^Node nextNode = iterator.next (  )  ;^228^^^^^220^283^[REPLACE] Node curNode = iterator.current (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^return;^222^223^224^^^220^283^[ADD] if  ( lookAhead == null )  { return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( var.getType (  )  == Token.NAME ) {^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^229^230^231^232^233^220^283^[ADD] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^231^^^^^229^233^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^Node curNode = iterator.hasNext (  ) ;^228^^^^^220^283^[REPLACE] Node curNode = iterator.current (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( !iterator.FunctionlessLocalScope (  )  )  {^236^^^^^220^283^[REPLACE] if  ( !iterator.hasNext (  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^237^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return;  ;^238^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^Node.hasNextNode = iterator.next (  ) ;^241^^^^^220^283^[REPLACE] Node nextNode = iterator.next (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^Node nextParent = iterator .current (  )  ;^242^^^^^220^283^[REPLACE] Node nextParent = iterator.currentParent (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^int type = nextParent.getType (  ) ;^243^^^^^220^283^[REPLACE] int type = nextNode.getType (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if   (  type == Token.NAME && !varName.equals  (  nextNode.getString  (    )    )    )   {  ;^245^^^^^220^283^[REPLACE] if  ( valueHasSideEffects )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( type == Token.NAME && varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^220^283^[REPLACE] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^249^250^251^252^^220^283^[ADD] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  { boolean blocked = false; if  ( nextParent == null )  { blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( nextParent !=var )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && !isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^blocked = false;^259^^^^^251^261^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^256^^^^^251^261^[ADD] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^blocked = false;^252^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && !valueHasSideEffects )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^blocked = true;^258^259^260^^^220^283^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^blocked = false;^259^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( valueHasSideEffects )  {^263^^^^^220^283^[REPLACE] if  ( blocked )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return;  ;^265^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^264^265^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean blocked = true;^250^^^^^220^283^[REPLACE] boolean blocked = false;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^256^^^^^220^283^[ADD] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (var != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REMOVE]^if  (  ( type ==  ( NAME )  )  &&  ( ! ( varName.equals ( nextNode.getString (  )  )  )  )  )  {     boolean blocked = false;     if  ( nextParent == null )  {         blocked = true;     }else {         boolean assignsName =  (  ( nextParent.getType (  )  )  ==  ( ASSIGN )  )  &&  ( nextNode ==  ( nextParent.getFirstChild (  )  )  ) ;         boolean isVarDeclaration =  ( nextParent.getType (  )  )  ==  ( VAR ) ;         if  (  ( !assignsName )  &&  ( !isVarDeclaration )  )  {             blocked = true;         }     }     if  ( blocked )  {         lookAhead = null;         return ;     } }^251^^^^^220^283^[REMOVE] ^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && valueHasSideEffects )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  >=  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && !isVarDeclaration )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = this;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^259^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  !=  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( var != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (  !isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent .getString (  )    &&  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^lookAhead = null;return;^263^264^265^266^^220^283^[ADD] if  ( blocked )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^264^^^^^220^283^[ADD] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^252^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (var != true )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^251^252^253^254^255^220^283^[ADD] if  ( nextParent == null )  { blocked = true; } else { boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^blocked = true;^258^259^260^^^251^261^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^259^^^^^251^261^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^254^255^^^^251^261^[ADD] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent .getString (  )    ||  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = true;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  <  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   !=  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^220^283^[REPLACE] if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = this;^278^^^^^276^280^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return;  ;^279^^^^^276^280^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^278^^^^^220^283^[ADD] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return;  ;^279^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead =  valueNode;^282^^^^^220^283^[REPLACE] lookAhead = nextNode;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
